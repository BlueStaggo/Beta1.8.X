--- net/minecraft/src/ItemBlock.java
+++ net/minecraft/src/ItemBlock.java
@@ -49,12 +49,12 @@
 			return false;
 		} else {
 			var3.getClass();
-			if(var5 == 128 - 1 && Block.blocksList[this.blockID].blockMaterial.isSolid()) {
-				return false;
-			} else if(var3.canBlockBePlacedAt(this.blockID, var4, var5, var6, false, var7)) {
+			if(var3.canBlockBePlacedAt(this.blockID, var4, var5, var6, false, var7)) {
 				Block var9 = Block.blocksList[this.blockID];
 				if(var3.setBlockAndMetadataWithNotify(var4, var5, var6, this.blockID, this.getPlacedBlockMetadata(var1.getItemDamage()))) {
+					Personalization.betaBias += 20.0F;
 					if(var3.getBlockId(var4, var5, var6) == this.blockID) {
+						var3.getChunkFromBlockCoords(var4, var6).playerModified = true;
 						Block.blocksList[this.blockID].onBlockPlaced(var3, var4, var5, var6, var7);
 						Block.blocksList[this.blockID].onBlockPlacedBy(var3, var4, var5, var6, var2);
 					}
--- net/minecraft/src/GuiIngameMenu.java
+++ net/minecraft/src/GuiIngameMenu.java
@@ -1,15 +1,20 @@
 package net.minecraft.src;
 
 public class GuiIngameMenu extends GuiScreen {
+	private int updateCounter4 = 0;
+	private int updateCounter3 = 0;
 	private int updateCounter2 = 0;
 	private int updateCounter = 0;
 
 	public void initGui() {
-		this.updateCounter2 = 0;
+		this.updateCounter = 0;
+		this.updateCounter2 = this.height / 2;
+		this.updateCounter3 = this.height / 2;
+		this.updateCounter4 = this.height / 2;
 		this.controlList.clear();
 		byte var1 = -16;
 		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 120 + var1, "Save and quit to title"));
-		if(this.mc.isMultiplayerWorld()) {
+		if(this.game.isMultiplayerWorld()) {
 			((GuiButton)this.controlList.get(0)).displayString = "Disconnect";
 		}
 
@@ -21,30 +26,30 @@
 
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.id == 0) {
-			this.mc.displayGuiScreen(new GuiOptions(this, this.mc.gameSettings));
+			this.game.displayGuiScreen(new GuiOptions(this, this.game.gameSettings));
 		}
 
 		if(var1.id == 1) {
-			this.mc.statFileWriter.readStat(StatList.leaveGameStat, 1);
-			if(this.mc.isMultiplayerWorld()) {
-				this.mc.theWorld.sendQuittingDisconnectingPacket();
+			this.game.statFileWriter.readStat(StatList.leaveGameStat, 1);
+			if(this.game.isMultiplayerWorld()) {
+				this.game.theWorld.sendQuittingDisconnectingPacket();
 			}
 
-			this.mc.changeWorld1((World)null);
-			this.mc.displayGuiScreen(new GuiMainMenu());
+			this.game.changeWorld1((World)null);
+			this.game.displayGuiScreen(new GuiMainMenu());
 		}
 
 		if(var1.id == 4) {
-			this.mc.displayGuiScreen((GuiScreen)null);
-			this.mc.setIngameFocus();
+			this.game.displayGuiScreen((GuiScreen)null);
+			this.game.setIngameFocus();
 		}
 
 		if(var1.id == 5) {
-			this.mc.displayGuiScreen(new GuiAchievements(this.mc.statFileWriter));
+			this.game.displayGuiScreen(new GuiAchievements(this.game.statFileWriter));
 		}
 
 		if(var1.id == 6) {
-			this.mc.displayGuiScreen(new GuiStats(this, this.mc.statFileWriter));
+			this.game.displayGuiScreen(new GuiStats(this, this.game.statFileWriter));
 		}
 
 	}
@@ -56,7 +61,7 @@
 
 	public void drawScreen(int var1, int var2, float var3) {
 		this.drawDefaultBackground();
-		boolean var4 = !this.mc.theWorld.func_650_a(this.updateCounter2++);
+		boolean var4 = !this.game.theWorld.func_650_a(this.updateCounter2++);
 		if(var4 || this.updateCounter < 20) {
 			float var5 = ((float)(this.updateCounter % 10) + var3) / 10.0F;
 			var5 = MathHelper.sin(var5 * (float)Math.PI * 2.0F) * 0.2F + 0.8F;
--- net/minecraft/src/WorldGenBigMushroom.java
+++ net/minecraft/src/WorldGenBigMushroom.java
@@ -21,139 +21,137 @@
 		int var7 = var2.nextInt(3) + 4;
 		boolean var8 = true;
 		if(var4 >= 1) {
-			int var10000 = var4 + var7 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
-				int var9;
-				int var11;
-				int var12;
-				int var13;
-				for(var9 = var4; var9 <= var4 + 1 + var7; ++var9) {
-					byte var10 = 3;
-					if(var9 == var4) {
-						var10 = 0;
-					}
-
-					for(var11 = var3 - var10; var11 <= var3 + var10 && var8; ++var11) {
-						for(var12 = var5 - var10; var12 <= var5 + var10 && var8; ++var12) {
-							if(var9 >= 0) {
-								var1.getClass();
-								if(var9 < 128) {
-									var13 = var1.getBlockId(var11, var9, var12);
-									if(var13 != 0 && var13 != Block.leaves.blockID) {
-										var8 = false;
-									}
-									continue;
-								}
-							}
-
-							var8 = false;
-						}
-					}
-				}
-
-				if(!var8) {
-					return false;
-				}
-
-				if(!Block.mushroomBrown.canPlaceBlockAt(var1, var3, var4, var5)) {
-					return false;
-				}
-
-				var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
-				var9 = var4 + var7;
-				if(var6 == 1) {
-					var9 = var4 + var7 - 3;
-				}
-
-				int var15;
-				for(var15 = var9; var15 <= var4 + var7; ++var15) {
-					var11 = 1;
-					if(var15 < var4 + var7) {
-						++var11;
-					}
-
-					if(var6 == 0) {
-						var11 = 3;
-					}
-
-					for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-						for(var13 = var5 - var11; var13 <= var5 + var11; ++var13) {
-							int var14 = 5;
-							if(var12 == var3 - var11) {
-								--var14;
-							}
-
-							if(var12 == var3 + var11) {
-								++var14;
-							}
-
-							if(var13 == var5 - var11) {
-								var14 -= 3;
-							}
-
-							if(var13 == var5 + var11) {
-								var14 += 3;
-							}
-
-							if(var6 == 0 || var15 < var4 + var7) {
-								if((var12 == var3 - var11 || var12 == var3 + var11) && (var13 == var5 - var11 || var13 == var5 + var11)) {
-									continue;
-								}
-
-								if(var12 == var3 - (var11 - 1) && var13 == var5 - var11) {
-									var14 = 1;
-								}
-
-								if(var12 == var3 - var11 && var13 == var5 - (var11 - 1)) {
-									var14 = 1;
-								}
-
-								if(var12 == var3 + (var11 - 1) && var13 == var5 - var11) {
-									var14 = 3;
-								}
-
-								if(var12 == var3 + var11 && var13 == var5 - (var11 - 1)) {
-									var14 = 3;
-								}
-
-								if(var12 == var3 - (var11 - 1) && var13 == var5 + var11) {
-									var14 = 7;
-								}
-
-								if(var12 == var3 - var11 && var13 == var5 + (var11 - 1)) {
-									var14 = 7;
-								}
-
-								if(var12 == var3 + (var11 - 1) && var13 == var5 + var11) {
-									var14 = 9;
-								}
-
-								if(var12 == var3 + var11 && var13 == var5 + (var11 - 1)) {
-									var14 = 9;
-								}
-							}
-
-							if(var14 == 5 && var15 < var4 + var7) {
-								var14 = 0;
-							}
-
-							if((var14 != 0 || var4 >= var4 + var7 - 1) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var15, var13)]) {
-								var1.setBlockAndMetadata(var12, var15, var13, Block.field_35286_bo.blockID + var6, var14);
-							}
-						}
-					}
-				}
-
-				for(var15 = 0; var15 < var7; ++var15) {
-					var11 = var1.getBlockId(var3, var4 + var15, var5);
-					if(!Block.opaqueCubeLookup[var11]) {
-						var1.setBlockAndMetadata(var3, var4 + var15, var5, Block.field_35286_bo.blockID + var6, 10);
-					}
-				}
-
-				return true;
-			}
+			int var9;
+			int var11;
+			int var12;
+			int var13;
+			for(var9 = var4; var9 <= var4 + 1 + var7; ++var9) {
+				byte var10 = 3;
+				if(var9 == var4) {
+					var10 = 0;
+				}
+
+				for(var11 = var3 - var10; var11 <= var3 + var10 && var8; ++var11) {
+					for(var12 = var5 - var10; var12 <= var5 + var10 && var8; ++var12) {
+						if(var9 >= 0) {
+							var13 = var1.getBlockId(var11, var9, var12);
+							if(var13 != 0 && var13 != Block.leaves.blockID) {
+								var8 = false;
+							}
+							continue;
+						}
+
+						var8 = false;
+					}
+				}
+			}
+
+			if(!var8) {
+				return false;
+			}
+
+			if(!Block.mushroomBrown.canPlaceBlockAt(var1, var3, var4, var5)) {
+				return false;
+			}
+
+			int block = var1.getBlockId(var3, var4 - 1, var5);
+			if (block != Block.dirt.blockID && block != Block.grass.blockID) {
+				return false;
+			}
+
+			this.setBlock(var1, var3, var4 - 1, var5, Block.dirt.blockID);
+			var9 = var4 + var7;
+			if(var6 == 1) {
+				var9 = var4 + var7 - 3;
+			}
+
+			int var15;
+			for(var15 = var9; var15 <= var4 + var7; ++var15) {
+				var11 = 1;
+				if(var15 < var4 + var7) {
+					++var11;
+				}
+
+				if(var6 == 0) {
+					var11 = 3;
+				}
+
+				for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
+					for(var13 = var5 - var11; var13 <= var5 + var11; ++var13) {
+						int var14 = 5;
+						if(var12 == var3 - var11) {
+							--var14;
+						}
+
+						if(var12 == var3 + var11) {
+							++var14;
+						}
+
+						if(var13 == var5 - var11) {
+							var14 -= 3;
+						}
+
+						if(var13 == var5 + var11) {
+							var14 += 3;
+						}
+
+						if(var6 == 0 || var15 < var4 + var7) {
+							if((var12 == var3 - var11 || var12 == var3 + var11) && (var13 == var5 - var11 || var13 == var5 + var11)) {
+								continue;
+							}
+
+							if(var12 == var3 - (var11 - 1) && var13 == var5 - var11) {
+								var14 = 1;
+							}
+
+							if(var12 == var3 - var11 && var13 == var5 - (var11 - 1)) {
+								var14 = 1;
+							}
+
+							if(var12 == var3 + (var11 - 1) && var13 == var5 - var11) {
+								var14 = 3;
+							}
+
+							if(var12 == var3 + var11 && var13 == var5 - (var11 - 1)) {
+								var14 = 3;
+							}
+
+							if(var12 == var3 - (var11 - 1) && var13 == var5 + var11) {
+								var14 = 7;
+							}
+
+							if(var12 == var3 - var11 && var13 == var5 + (var11 - 1)) {
+								var14 = 7;
+							}
+
+							if(var12 == var3 + (var11 - 1) && var13 == var5 + var11) {
+								var14 = 9;
+							}
+
+							if(var12 == var3 + var11 && var13 == var5 + (var11 - 1)) {
+								var14 = 9;
+							}
+						}
+
+						if(var14 == 5 && var15 < var4 + var7) {
+							var14 = 0;
+						}
+
+						if((var14 != 0 || var4 >= var4 + var7 - 1) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var15, var13)]) {
+							this.setBlockAndMetadata(var1, var12, var15, var13, Block.field_35286_bo.blockID + var6, var14);
+						}
+					}
+				}
+			}
+
+			for(var15 = 0; var15 < var7; ++var15) {
+				var11 = var1.getBlockId(var3, var4 + var15, var5);
+				if(!Block.opaqueCubeLookup[var11]) {
+					this.setBlockAndMetadata(var1, var3, var4 + var15, var5, Block.field_35286_bo.blockID + var6, 10);
+				}
+			}
+
+			return true;
 		}
 
 		return false;
--- /dev/null
+++ net/minecraft/src/B18XGameMode.java
@@ -1,0 +1,79 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public enum B18XGameMode {
+	NORMAL("Normal"),
+	STATIC("Static"),
+	ISLES_OF_TIME("Isles of Time");
+
+	static {
+		NORMAL.next = STATIC;
+		STATIC.next = ISLES_OF_TIME;
+		ISLES_OF_TIME.next = NORMAL;
+	}
+
+	public static final int ISLAND_SIZE = 1024;
+	public static final int ISLAND_FALLOFF = 64;
+	public static final int ISLAND_DISTANCE = 128;
+	public static final int ISLAND_DISTORTION_DISTANCE = 128;
+	public static final int ISLAND_DISTORTION_STRENGTH = 64;
+
+	private static final NoiseGeneratorOctaves offsetNoise = new NoiseGeneratorOctaves(new Random("Isles of Time".hashCode()), 4);
+
+	public final String name;
+	private B18XGameMode next;
+
+	B18XGameMode(String name) {
+		this.name = name;
+	}
+
+	public B18XGameMode getNext() {
+		return this.next;
+	}
+
+	public String toString() {
+		return this.name;
+	}
+
+	public static B18XGameMode fromName(String name) {
+		for (B18XGameMode gameMode : values()) {
+			if (gameMode.name.equals(name)) {
+				return gameMode;
+			}
+		}
+
+		return NORMAL;
+	}
+
+	public static double getIsleFactor(int x, int z, int scale) {
+		return getIsleFactor(x, z, scale, true);
+	}
+
+	public static double getIsleFactor(int x, int z, int scale, boolean distort) {
+		int islandSize = B18XGameMode.ISLAND_SIZE / scale;
+		double islandFalloff = B18XGameMode.ISLAND_FALLOFF / (double)islandSize / scale / 2.0D;
+		double islandDistance = B18XGameMode.ISLAND_DISTANCE / (double)islandSize / scale;
+		double islandDistortion = B18XGameMode.ISLAND_DISTORTION_STRENGTH / (double)scale;
+
+		if (MathHelper.floorMod((x + islandSize / 2.0D) / islandSize, 2) > 1.0D) {
+			z += islandSize / 2;
+		}
+
+		if (distort) {
+			x += (int)(offsetNoise.generateActualNoise(x * scale / (double)ISLAND_DISTORTION_DISTANCE, 100.0D, z * scale / (double)ISLAND_DISTORTION_DISTANCE) * islandDistortion);
+			z += (int)(offsetNoise.generateActualNoise(x * scale / (double)ISLAND_DISTORTION_DISTANCE, -100.0D, z * scale / (double)ISLAND_DISTORTION_DISTANCE) * islandDistortion);
+		}
+		x = Math.abs(Math.floorMod(x + islandSize / 2, islandSize) - islandSize / 2);
+		z = Math.abs(Math.floorMod(z + islandSize / 2, islandSize) - islandSize / 2);
+//		x *= x * x;
+//		z *= z * z;
+//		int f = (int)Math.pow(x + z, 1.0D / 3.0D);
+		int f = Math.max(x, z);
+
+		double factor = 2.0D * f / (double)islandSize;
+		factor = MathHelper.clamp(((factor - 1.0D + 2.0D * islandDistance) / (2.0D * islandFalloff) + 1.0D) / 2.0D, 0.0D, 1.0D);
+//		factor = MathHelper.squareInOut(factor);
+		return factor;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenSnow.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class BiomeGenSnow extends BiomeGenBase {
+	protected BiomeGenSnow(int var1) {
+		super(var1);
+	}
+
+	@Override
+	public float getMinHeight(int x, int z) {
+		return doHills(x, z) ? 0.2F : super.getMinHeight(x, z);
+	}
+
+	@Override
+	public float getMaxHeight(int x, int z) {
+		return doHills(x, z) ? 1.2F : super.getMaxHeight(x, z);
+	}
+}
--- /dev/null
+++ com/github/sjcasey21/wavefunctioncollapse/Model.java
@@ -1,0 +1,243 @@
+package com.github.sjcasey21.wavefunctioncollapse;
+
+
+
+import java.awt.image.BufferedImage;
+import java.lang.Math;
+import java.util.Arrays;
+import java.util.Random;
+
+class StackEntry {
+  private int x;
+  private int y;
+
+  public StackEntry(int x, int y) {
+    this.x = x;
+    this.y = y;
+  }
+
+  public int getFirst() {
+    return this.x;
+  }
+
+  public int getSecond() {
+    return this.y;
+  }
+}
+
+abstract class Model {
+  protected boolean[][] wave;
+  protected int[][][] propagator;
+  int[][][] compatible;
+  protected int[] observed;
+
+  StackEntry[] stack;
+  int stacksize;
+
+  protected Random random;
+  protected int FMX, FMY, T;
+  protected boolean periodic;
+  protected Double[] weights;
+  double[] weightLogWeights;
+
+  int[] sumsOfOnes;
+  double sumOfWeights, sumOfWeightLogWeights, startingEntropy;
+  double[] sumsOfWeights, sumsOfWeightLogWeights, entropies;
+
+  protected Model(int width, int height) {
+    this.FMX = width;
+    this.FMY = height;
+  }
+
+  protected abstract boolean onBoundary(int x, int y);
+
+  public abstract BufferedImage graphics();
+
+  protected static int[] DX = { -1, 0, 1, 0 };
+  protected static int[] DY = { 0, 1, 0, -1 };
+  static int[] oppposite = { 2, 3, 0, 1 };
+
+  static int randomIndice(double[] arr, double r) {
+    double sum = 0;
+
+    for (int j = 0; j < arr.length; j++) sum += arr[j];
+
+    for (int j = 0; j < arr.length; j++) arr[j] /= sum;
+
+    int i = 0;
+    double x = 0;
+
+    while (i < arr.length) {
+      x += arr[i];
+      if (r <= x) return i;
+      i++;
+    }
+
+    return 0;
+  }
+
+  public static long toPower(int a, int n) {
+    long product = 1;
+    for (int i = 0; i < n; i++) product *= a;
+    return product;
+  }
+
+  public void init() {
+    this.wave = new boolean[this.FMX * this.FMY][];
+    this.compatible = new int[this.wave.length][][];
+    for (int i = 0; i < wave.length; i++) {
+      this.wave[i] = new boolean[this.T];
+      this.compatible[i] = new int[this.T][];
+      for (int t = 0; t < this.T; t++) this.compatible[i][t] = new int[4];
+    }
+
+    this.weightLogWeights = new double[this.T];
+    this.sumOfWeights = 0;
+    this.sumOfWeightLogWeights = 0;
+
+    for (int t = 0; t < this.T; t++) {
+      this.weightLogWeights[t] = this.weights[t] * Math.log(this.weights[t]);
+      this.sumOfWeights += this.weights[t];
+      this.sumOfWeightLogWeights += this.weightLogWeights[t];
+    }
+
+    this.startingEntropy =
+      Math.log(this.sumOfWeights) -
+        this.sumOfWeightLogWeights /
+        this.sumOfWeights;
+
+    this.sumsOfOnes = new int[this.FMX * this.FMY];
+    this.sumsOfWeights = new double[this.FMX * this.FMY];
+    this.sumsOfWeightLogWeights = new double[this.FMX * this.FMY];
+    this.entropies = new double[this.FMX * this.FMY];
+
+    this.stack = new StackEntry[this.wave.length * this.T];
+    this.stacksize = 0;
+  }
+
+  Boolean observe() {
+    double min = 1e+3;
+    int argmin = -1;
+
+    for (int i = 0; i < this.wave.length; i++) {
+      if (this.onBoundary(i % this.FMX, i / this.FMX)) continue;
+
+      int amount = this.sumsOfOnes[i];
+      if (amount == 0) return false;
+      
+
+      double entropy = this.entropies[i];
+            
+      if (amount > 1 && entropy <= min) {
+        double noise = 1e-6 * this.random.nextDouble();
+        if (entropy + noise < min) {
+          min = entropy + noise;
+          argmin = i;
+        }
+      }
+    }
+    
+
+    if (argmin == -1) {
+      this.observed = new int[this.FMX * this.FMY];
+      for (int i = 0; i < this.wave.length; i++) for (int t = 0; t <
+        this.T; t++) if (this.wave[i][t]) {
+        this.observed[i] = t;
+        break;
+      }
+      return true;
+    }
+
+    double[] distribution = new double[this.T];
+    for (int t = 0; t < this.T; t++) distribution[t] =
+      this.wave[argmin][t] ? this.weights[t] : 0;
+
+    int r = Model.randomIndice(distribution, this.random.nextDouble());
+
+
+    boolean[] w = this.wave[argmin];
+    for (int t = 0; t < this.T; t++) if (w[t] != (t == r)) this.ban(argmin, t);
+
+    return null;
+  }
+
+  protected void ban(int i, int t) {
+    this.wave[i][t] = false;
+
+    int[] comp = this.compatible[i][t];
+    for (int d = 0; d < 4; d++) comp[d] = 0;
+    this.stack[this.stacksize] = new StackEntry(i, t);
+    this.stacksize++;
+
+    this.sumsOfOnes[i] -= 1;
+    this.sumsOfWeights[i] -= this.weights[t];
+    this.sumsOfWeightLogWeights[i] -= this.weightLogWeights[t];
+
+    double sum = this.sumsOfWeights[i];
+    this.entropies[i] = Math.log(sum) - this.sumsOfWeightLogWeights[i] / sum;
+  }
+
+  protected void propagate() {
+    while (this.stacksize > 0) {
+      StackEntry e1 = this.stack[this.stacksize - 1];
+      this.stacksize--;
+
+      int i1 = e1.getFirst();
+      int x1 = i1 % this.FMX;
+      int y1 = i1 / this.FMX;
+
+      for (int d = 0; d < 4; d++) {
+        int dx = Model.DX[d], dy = Model.DY[d];
+        int x2 = x1 + dx, y2 = y1 + dy;
+
+        if (this.onBoundary(x2, y2)) continue;
+
+        if (x2 < 0) x2 += this.FMX; else if (x2 >= this.FMX) x2 -= this.FMX;
+        if (y2 < 0) y2 += this.FMY; else if (y2 >= this.FMY) y2 -= this.FMY;
+
+        int i2 = x2 + y2 * this.FMX;
+        int[] p = this.propagator[d][e1.getSecond()];
+        int[][] compat = this.compatible[i2];
+
+        for (int l = 0; l < p.length; l++) {
+          int t2 = p[l];
+          int[] comp = compat[t2];
+
+          comp[d]--;
+          
+          if (comp[d] == 0) this.ban(i2, t2);
+        }
+      }
+    }
+  }
+
+  public boolean run(long seed, int limit) {
+    if (this.wave == null) this.init();
+    
+    this.Clear();
+    this.random = new Random(seed);
+
+    for (int l = 0; l < limit || limit == 0; l++) {
+      Boolean result = this.observe();
+      if (result != null) return (boolean) result;
+      this.propagate();
+    }
+
+    return true;
+  }
+
+  protected void Clear() {
+    for (int i = 0; i < this.wave.length; i++) {
+      for (int t = 0; t < this.T; t++) {
+        this.wave[i][t] = true;
+        for (int d = 0; d < 4; d++) this.compatible[i][t][d] =
+          this.propagator[Model.oppposite[d]][t].length;
+      }
+
+      this.sumsOfOnes[i] = this.weights.length;
+      this.sumsOfWeights[i] = this.sumOfWeights;
+      this.sumsOfWeightLogWeights[i] = this.sumOfWeightLogWeights;
+      this.entropies[i] = this.startingEntropy;
+    }
+  }
+}
--- net/minecraft/src/TerrainTextureManager.java
+++ net/minecraft/src/TerrainTextureManager.java
@@ -74,7 +74,7 @@
 			int var5 = var3 + 16;
 			int var6 = var4 + 16;
 			Chunk var7 = var2.getChunkFromChunkCoords(var1.chunkX, var1.chunkZ);
-			if(var7.func_21167_h()) {
+			if(var7.isEmpty()) {
 				var1.field_1351_f = true;
 				var1.field_1352_e = true;
 			} else {
--- /dev/null
+++ net/minecraft/src/NibbleArrayReader.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+public class NibbleArrayReader {
+	public final byte[] data;
+	private final int depthBits;
+	private final int depthBitsPlusFour;
+
+	public NibbleArrayReader(byte[] var1, int var2) {
+		this.data = var1;
+		this.depthBits = var2;
+		this.depthBitsPlusFour = var2 + 4;
+	}
+
+	public int get(int var1, int var2, int var3) {
+		int var4 = var1 << this.depthBitsPlusFour | var3 << this.depthBits | var2;
+		int var5 = var4 >> 1;
+		int var6 = var4 & 1;
+		return var6 == 0 ? this.data[var5] & 15 : this.data[var5] >> 4 & 15;
+	}
+}
--- net/minecraft/src/BlockOre.java
+++ net/minecraft/src/BlockOre.java
@@ -8,7 +8,7 @@
 	}
 
 	public int idDropped(int var1, Random var2) {
-		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (this.blockID == Block.oreLapis.blockID ? Item.dyePowder.shiftedIndex : this.blockID));
+		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (this.blockID == Block.oreLapis.blockID ? Item.dyePowder.shiftedIndex : (this.blockID == Block.oreQuartz.blockID ? Item.quartz.shiftedIndex : this.blockID)));
 	}
 
 	public int quantityDropped(Random var1) {
@@ -17,5 +17,14 @@
 
 	protected int damageDropped(int var1) {
 		return this.blockID == Block.oreLapis.blockID ? 4 : 0;
+	}
+
+	public void harvestBlock(World var1, EntityPlayer var2, int var3, int var4, int var5, int var6) {
+		Personalization.betaBias -= 10.0F;
+		super.harvestBlock(var1, var2, var3, var4, var5, var6);
+	}
+
+	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
+		return Block.stone.colorMultiplier(var1, var2, var3, var4);
 	}
 }
--- net/minecraft/src/ChunkProvider.java
+++ net/minecraft/src/ChunkProvider.java
@@ -18,7 +18,7 @@
 
 	public ChunkProvider(World var1, IChunkLoader var2, IChunkProvider var3) {
 		var1.getClass();
-		this.field_28064_b = new EmptyChunk(var1, new byte[256 * 128], 0, 0);
+		this.field_28064_b = new EmptyChunk(var1, 0, 0);
 		this.worldObj = var1;
 		this.chunkLoader = var2;
 		this.chunkProvider = var3;
@@ -65,7 +65,7 @@
 				var5.onChunkLoad();
 			}
 
-			var5.func_35843_a(this, this, var1, var2);
+			var5.populateChunk(this, this, var1, var2);
 		}
 
 		return var5;
@@ -192,6 +192,20 @@
 		}
 
 		return this.chunkProvider.unload100OldestChunks();
+	}
+
+	public void prepareForRefresh() {
+		for (Chunk chunk : (List<Chunk>)this.chunkList) {
+			chunk.onChunkUnload();
+			if (chunk.playerModified) {
+				this.func_28062_b(chunk);
+				this.func_28063_a(chunk);
+			}
+		}
+
+		this.chunkList.clear();
+		this.droppedChunksSet.clear();
+		this.chunkMap = new PlayerList();
 	}
 
 	public boolean canSave() {
--- net/minecraft/src/WorldGenTallGrass.java
+++ net/minecraft/src/WorldGenTallGrass.java
@@ -22,7 +22,7 @@
 					int var9 = var4 + var2.nextInt(4) - var2.nextInt(4);
 					int var10 = var5 + var2.nextInt(8) - var2.nextInt(8);
 					if(var1.isAirBlock(var8, var9, var10) && ((BlockFlower)Block.blocksList[this.field_28060_a]).canBlockStay(var1, var8, var9, var10)) {
-						var1.setBlockAndMetadata(var8, var9, var10, this.field_28060_a, this.field_28059_b);
+						this.setBlockAndMetadata(var1, var8, var9, var10, this.field_28060_a, this.field_28059_b);
 					}
 				}
 
--- /dev/null
+++ net/minecraft/src/GenLayerIslesOfTime.java
@@ -1,0 +1,29 @@
+package net.minecraft.src;
+
+public class GenLayerIslesOfTime extends GenLayer {
+	private final int scale;
+
+	public GenLayerIslesOfTime(GenLayer parent, int scale) {
+		super(0L);
+		this.field_35504_a = parent;
+		this.scale = scale;
+	}
+
+	public int[] func_35500_a(int var1, int var2, int var3, int var4) {
+		int[] input = this.field_35504_a.func_35500_a(var1, var2, var3, var4);
+		int[] output = IntCache.func_35267_a(var3 * var4);
+
+		for (int z = 0; z < var3; z++) {
+			for (int x = 0; x < var4; x++) {
+				int biome = input[x + z * var3];
+				double isleFactor = B18XGameMode.getIsleFactor(x + var1, z + var2, this.scale);
+				if (isleFactor > 0.5D) {
+					biome = 0;
+				}
+				output[x + z * var3] = biome;
+			}
+		}
+
+		return output;
+	}
+}
--- /dev/null
+++ net/minecraft/src/ModelDragon.java
@@ -1,0 +1,219 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class ModelDragon extends ModelBase {
+	private ModelRenderer field_40314_a;
+	private ModelRenderer field_40312_b;
+	private ModelRenderer field_40313_c;
+	private ModelRenderer field_40310_d;
+	private ModelRenderer field_40311_e;
+	private ModelRenderer field_40308_f;
+	private ModelRenderer field_40309_g;
+	private ModelRenderer field_40315_n;
+	private ModelRenderer field_40316_o;
+	private ModelRenderer field_40320_p;
+	private ModelRenderer field_40319_q;
+	private ModelRenderer field_40318_r;
+	private float field_40317_s;
+
+	public ModelDragon(float var1) {
+		this.textureWidth = 256;
+		this.textureHeight = 256;
+		this.setTextureOffset("body.body", 0, 0);
+		this.setTextureOffset("wing.skin", -56, 88);
+		this.setTextureOffset("wingtip.skin", -56, 144);
+		this.setTextureOffset("rearleg.main", 0, 0);
+		this.setTextureOffset("rearfoot.main", 112, 0);
+		this.setTextureOffset("rearlegtip.main", 196, 0);
+		this.setTextureOffset("head.upperhead", 112, 30);
+		this.setTextureOffset("wing.bone", 112, 88);
+		this.setTextureOffset("head.upperlip", 176, 44);
+		this.setTextureOffset("jaw.jaw", 176, 65);
+		this.setTextureOffset("frontleg.main", 112, 104);
+		this.setTextureOffset("wingtip.bone", 112, 136);
+		this.setTextureOffset("frontfoot.main", 144, 104);
+		this.setTextureOffset("neck.box", 192, 104);
+		this.setTextureOffset("frontlegtip.main", 226, 138);
+		this.setTextureOffset("body.scale", 220, 53);
+		this.setTextureOffset("head.scale", 0, 0);
+		this.setTextureOffset("neck.scale", 48, 0);
+		this.setTextureOffset("head.nostril", 112, 0);
+		float var2 = -16.0F;
+		this.field_40314_a = new ModelRenderer(this, "head");
+		this.field_40314_a.addBox("upperlip", -6.0F, -1.0F, -8.0F + var2, 12, 5, 16);
+		this.field_40314_a.addBox("upperhead", -8.0F, -8.0F, 6.0F + var2, 16, 16, 16);
+		this.field_40314_a.mirror = true;
+		this.field_40314_a.addBox("scale", -5.0F, -12.0F, 12.0F + var2, 2, 4, 6);
+		this.field_40314_a.addBox("nostril", -5.0F, -3.0F, -6.0F + var2, 2, 2, 4);
+		this.field_40314_a.mirror = false;
+		this.field_40314_a.addBox("scale", 3.0F, -12.0F, 12.0F + var2, 2, 4, 6);
+		this.field_40314_a.addBox("nostril", 3.0F, -3.0F, -6.0F + var2, 2, 2, 4);
+		this.field_40313_c = new ModelRenderer(this, "jaw");
+		this.field_40313_c.setRotationPoint(0.0F, 4.0F, 8.0F + var2);
+		this.field_40313_c.addBox("jaw", -6.0F, 0.0F, -16.0F, 12, 4, 16);
+		this.field_40314_a.addChild(this.field_40313_c);
+		this.field_40312_b = new ModelRenderer(this, "neck");
+		this.field_40312_b.addBox("box", -5.0F, -5.0F, -5.0F, 10, 10, 10);
+		this.field_40312_b.addBox("scale", -1.0F, -9.0F, -3.0F, 2, 4, 6);
+		this.field_40310_d = new ModelRenderer(this, "body");
+		this.field_40310_d.setRotationPoint(0.0F, 4.0F, 8.0F);
+		this.field_40310_d.addBox("body", -12.0F, 0.0F, -16.0F, 24, 24, 64);
+		this.field_40310_d.addBox("scale", -1.0F, -6.0F, -10.0F, 2, 6, 12);
+		this.field_40310_d.addBox("scale", -1.0F, -6.0F, 10.0F, 2, 6, 12);
+		this.field_40310_d.addBox("scale", -1.0F, -6.0F, 30.0F, 2, 6, 12);
+		this.field_40319_q = new ModelRenderer(this, "wing");
+		this.field_40319_q.setRotationPoint(-12.0F, 5.0F, 2.0F);
+		this.field_40319_q.addBox("bone", -56.0F, -4.0F, -4.0F, 56, 8, 8);
+		this.field_40319_q.addBox("skin", -56.0F, 0.0F, 2.0F, 56, 0, 56);
+		this.field_40318_r = new ModelRenderer(this, "wingtip");
+		this.field_40318_r.setRotationPoint(-56.0F, 0.0F, 0.0F);
+		this.field_40318_r.addBox("bone", -56.0F, -2.0F, -2.0F, 56, 4, 4);
+		this.field_40318_r.addBox("skin", -56.0F, 0.0F, 2.0F, 56, 0, 56);
+		this.field_40319_q.addChild(this.field_40318_r);
+		this.field_40308_f = new ModelRenderer(this, "frontleg");
+		this.field_40308_f.setRotationPoint(-12.0F, 20.0F, 2.0F);
+		this.field_40308_f.addBox("main", -4.0F, -4.0F, -4.0F, 8, 24, 8);
+		this.field_40315_n = new ModelRenderer(this, "frontlegtip");
+		this.field_40315_n.setRotationPoint(0.0F, 20.0F, -1.0F);
+		this.field_40315_n.addBox("main", -3.0F, -1.0F, -3.0F, 6, 24, 6);
+		this.field_40308_f.addChild(this.field_40315_n);
+		this.field_40320_p = new ModelRenderer(this, "frontfoot");
+		this.field_40320_p.setRotationPoint(0.0F, 23.0F, 0.0F);
+		this.field_40320_p.addBox("main", -4.0F, 0.0F, -12.0F, 8, 4, 16);
+		this.field_40315_n.addChild(this.field_40320_p);
+		this.field_40311_e = new ModelRenderer(this, "rearleg");
+		this.field_40311_e.setRotationPoint(-16.0F, 16.0F, 42.0F);
+		this.field_40311_e.addBox("main", -8.0F, -4.0F, -8.0F, 16, 32, 16);
+		this.field_40309_g = new ModelRenderer(this, "rearlegtip");
+		this.field_40309_g.setRotationPoint(0.0F, 32.0F, -4.0F);
+		this.field_40309_g.addBox("main", -6.0F, -2.0F, 0.0F, 12, 32, 12);
+		this.field_40311_e.addChild(this.field_40309_g);
+		this.field_40316_o = new ModelRenderer(this, "rearfoot");
+		this.field_40316_o.setRotationPoint(0.0F, 31.0F, 4.0F);
+		this.field_40316_o.addBox("main", -9.0F, 0.0F, -20.0F, 18, 6, 24);
+		this.field_40309_g.addChild(this.field_40316_o);
+	}
+
+	public void setLivingAnimations(EntityLiving var1, float var2, float var3, float var4) {
+		this.field_40317_s = var4;
+	}
+
+	public void render(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7) {
+		GL11.glPushMatrix();
+		EntityDragon var8 = (EntityDragon)var1;
+		float var9 = var8.field_40173_aw + (var8.field_40172_ax - var8.field_40173_aw) * this.field_40317_s;
+		this.field_40313_c.rotateAngleX = (float)(Math.sin((double)(var9 * (float)Math.PI * 2.0F)) + 1.0D) * 0.2F;
+		float var10 = (float)(Math.sin((double)(var9 * (float)Math.PI * 2.0F - 1.0F)) + 1.0D);
+		var10 = (var10 * var10 * 1.0F + var10 * 2.0F) * 0.05F;
+		GL11.glTranslatef(0.0F, var10 - 2.0F, -3.0F);
+		GL11.glRotatef(var10 * 2.0F, 1.0F, 0.0F, 0.0F);
+		float var11 = -30.0F;
+		float var12 = 22.0F;
+		float var13 = 0.0F;
+		float var14 = 1.5F;
+		double[] var15 = var8.func_40160_a(6, this.field_40317_s);
+		float var16 = this.func_40307_a(var8.func_40160_a(5, this.field_40317_s)[0] - var8.func_40160_a(10, this.field_40317_s)[0]);
+		float var17 = this.func_40307_a(var8.func_40160_a(5, this.field_40317_s)[0] + (double)(var16 / 2.0F));
+		var11 += 2.0F;
+		float var18 = 0.0F;
+		float var19 = var9 * (float)Math.PI * 2.0F;
+		var11 = 20.0F;
+		var12 = -12.0F;
+
+		for(int var20 = 0; var20 < 5; ++var20) {
+			double[] var21 = var8.func_40160_a(5 - var20, this.field_40317_s);
+			var18 = (float)Math.cos((double)((float)var20 * 0.45F + var19)) * 0.15F;
+			this.field_40312_b.rotateAngleY = this.func_40307_a(var21[0] - var15[0]) * (float)Math.PI / 180.0F * var14;
+			this.field_40312_b.rotateAngleX = var18 + (float)(var21[1] - var15[1]) * (float)Math.PI / 180.0F * var14 * 5.0F;
+			this.field_40312_b.rotateAngleZ = -this.func_40307_a(var21[0] - (double)var17) * (float)Math.PI / 180.0F * var14;
+			this.field_40312_b.rotationPointY = var11;
+			this.field_40312_b.rotationPointZ = var12;
+			this.field_40312_b.rotationPointX = var13;
+			var11 = (float)((double)var11 + Math.sin((double)this.field_40312_b.rotateAngleX) * 10.0D);
+			var12 = (float)((double)var12 - Math.cos((double)this.field_40312_b.rotateAngleY) * Math.cos((double)this.field_40312_b.rotateAngleX) * 10.0D);
+			var13 = (float)((double)var13 - Math.sin((double)this.field_40312_b.rotateAngleY) * Math.cos((double)this.field_40312_b.rotateAngleX) * 10.0D);
+			this.field_40312_b.render(var7);
+		}
+
+		this.field_40314_a.rotationPointY = var11;
+		this.field_40314_a.rotationPointZ = var12;
+		this.field_40314_a.rotationPointX = var13;
+		double[] var23 = var8.func_40160_a(0, this.field_40317_s);
+		this.field_40314_a.rotateAngleY = this.func_40307_a(var23[0] - var15[0]) * (float)Math.PI / 180.0F * 1.0F;
+		this.field_40314_a.rotateAngleZ = -this.func_40307_a(var23[0] - (double)var17) * (float)Math.PI / 180.0F * 1.0F;
+		this.field_40314_a.render(var7);
+		GL11.glPushMatrix();
+		GL11.glTranslatef(0.0F, 1.0F, 0.0F);
+		GL11.glRotatef(-var16 * var14 * 1.0F, 0.0F, 0.0F, 1.0F);
+		GL11.glTranslatef(0.0F, -1.0F, 0.0F);
+		this.field_40310_d.rotateAngleZ = 0.0F;
+		this.field_40310_d.render(var7);
+
+		int var24;
+		for(var24 = 0; var24 < 2; ++var24) {
+			GL11.glEnable(GL11.GL_CULL_FACE);
+			float var22 = var9 * (float)Math.PI * 2.0F;
+			this.field_40319_q.rotateAngleX = 2.0F / 16.0F - (float)Math.cos((double)var22) * 0.2F;
+			this.field_40319_q.rotateAngleY = 0.25F;
+			this.field_40319_q.rotateAngleZ = (float)(Math.sin((double)var22) + 0.125D) * 0.8F;
+			this.field_40318_r.rotateAngleZ = -((float)(Math.sin((double)(var22 + 2.0F)) + 0.5D)) * (12.0F / 16.0F);
+			this.field_40311_e.rotateAngleX = 1.0F + var10 * 0.1F;
+			this.field_40309_g.rotateAngleX = 0.5F + var10 * 0.1F;
+			this.field_40316_o.rotateAngleX = 12.0F / 16.0F + var10 * 0.1F;
+			this.field_40308_f.rotateAngleX = 1.3F + var10 * 0.1F;
+			this.field_40315_n.rotateAngleX = -0.5F - var10 * 0.1F;
+			this.field_40320_p.rotateAngleX = 12.0F / 16.0F + var10 * 0.1F;
+			this.field_40319_q.render(var7);
+			this.field_40308_f.render(var7);
+			this.field_40311_e.render(var7);
+			GL11.glScalef(-1.0F, 1.0F, 1.0F);
+			if(var24 == 0) {
+				GL11.glCullFace(GL11.GL_FRONT);
+			}
+		}
+
+		GL11.glPopMatrix();
+		GL11.glCullFace(GL11.GL_BACK);
+		GL11.glDisable(GL11.GL_CULL_FACE);
+		var18 = -((float)Math.sin((double)(var9 * (float)Math.PI * 2.0F))) * 0.0F;
+		var19 = var9 * (float)Math.PI * 2.0F;
+		var11 = 10.0F;
+		var12 = 60.0F;
+		var13 = 0.0F;
+		var15 = var8.func_40160_a(11, this.field_40317_s);
+
+		for(var24 = 0; var24 < 12; ++var24) {
+			var23 = var8.func_40160_a(12 + var24, this.field_40317_s);
+			var18 = (float)((double)var18 + Math.sin((double)((float)var24 * 0.45F + var19)) * (double)0.05F);
+			this.field_40312_b.rotateAngleY = (this.func_40307_a(var23[0] - var15[0]) * var14 + 180.0F) * (float)Math.PI / 180.0F;
+			this.field_40312_b.rotateAngleX = var18 + (float)(var23[1] - var15[1]) * (float)Math.PI / 180.0F * var14 * 5.0F;
+			this.field_40312_b.rotateAngleZ = this.func_40307_a(var23[0] - (double)var17) * (float)Math.PI / 180.0F * var14;
+			this.field_40312_b.rotationPointY = var11;
+			this.field_40312_b.rotationPointZ = var12;
+			this.field_40312_b.rotationPointX = var13;
+			var11 = (float)((double)var11 + Math.sin((double)this.field_40312_b.rotateAngleX) * 10.0D);
+			var12 = (float)((double)var12 - Math.cos((double)this.field_40312_b.rotateAngleY) * Math.cos((double)this.field_40312_b.rotateAngleX) * 10.0D);
+			var13 = (float)((double)var13 - Math.sin((double)this.field_40312_b.rotateAngleY) * Math.cos((double)this.field_40312_b.rotateAngleX) * 10.0D);
+			this.field_40312_b.render(var7);
+		}
+
+		GL11.glPopMatrix();
+	}
+
+	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
+		super.setRotationAngles(var1, var2, var3, var4, var5, var6);
+	}
+
+	private float func_40307_a(double var1) {
+		while(var1 >= 180.0D) {
+			var1 -= 360.0D;
+		}
+
+		while(var1 < -180.0D) {
+			var1 += 360.0D;
+		}
+
+		return (float)var1;
+	}
+}
--- net/minecraft/src/ClippingHelperImpl.java
+++ net/minecraft/src/ClippingHelperImpl.java
@@ -14,8 +14,8 @@
 		return instance;
 	}
 
-	private void normalize(float[][] var1, int var2) {
-		float var3 = MathHelper.sqrt_float(var1[var2][0] * var1[var2][0] + var1[var2][1] * var1[var2][1] + var1[var2][2] * var1[var2][2]);
+	private void normalize(double[][] var1, int var2) {
+		double var3 = Math.sqrt(var1[var2][0] * var1[var2][0] + var1[var2][1] * var1[var2][1] + var1[var2][2] * var1[var2][2]);
 		var1[var2][0] /= var3;
 		var1[var2][1] /= var3;
 		var1[var2][2] /= var3;
--- net/minecraft/src/GuiInventory.java
+++ net/minecraft/src/GuiInventory.java
@@ -14,18 +14,24 @@
 	}
 
 	public void updateScreen() {
-		if(this.mc.playerController.func_35640_h()) {
-			this.mc.displayGuiScreen(new GuiContainerCreative(this.mc.thePlayer));
+		if(this.game.playerController.func_35640_h()) {
+			this.game.displayGuiScreen(new GuiContainerCreative(this.game.thePlayer));
 		}
 
 	}
 
 	public void initGui() {
 		this.controlList.clear();
-		if(this.mc.playerController.func_35640_h()) {
-			this.mc.displayGuiScreen(new GuiContainerCreative(this.mc.thePlayer));
-		}
-
+		if(this.game.playerController.func_35640_h()) {
+			this.game.displayGuiScreen(new GuiContainerCreative(this.game.thePlayer));
+		}
+
+		int offX = (this.width - this.xSize) / 2;
+		int offY = (this.height - this.ySize) / 2;
+
+		if (Personalization.skillMenu) {
+			this.controlList.add(new GuiButton(2, offX + 60, offY + 60, 18, 18, "+"));
+		}
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
@@ -39,9 +45,9 @@
 	}
 
 	protected void drawGuiContainerBackgroundLayer(float var1) {
-		int var2 = this.mc.renderEngine.getTexture("/gui/inventory.png");
+		int var2 = this.game.renderEngine.getTexture("/gui/inventory.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(var2);
+		this.game.renderEngine.bindTexture(var2);
 		int var3 = (this.width - this.xSize) / 2;
 		int var4 = (this.height - this.ySize) / 2;
 		this.drawTexturedModalRect(var3, var4, 0, 0, this.xSize, this.ySize);
@@ -52,24 +58,24 @@
 		float var5 = 30.0F;
 		GL11.glScalef(-var5, var5, var5);
 		GL11.glRotatef(180.0F, 0.0F, 0.0F, 1.0F);
-		float var6 = this.mc.thePlayer.renderYawOffset;
-		float var7 = this.mc.thePlayer.rotationYaw;
-		float var8 = this.mc.thePlayer.rotationPitch;
+		float var6 = this.game.thePlayer.renderYawOffset;
+		float var7 = this.game.thePlayer.rotationYaw;
+		float var8 = this.game.thePlayer.rotationPitch;
 		float var9 = (float)(var3 + 51) - this.xSize_lo;
 		float var10 = (float)(var4 + 75 - 50) - this.ySize_lo;
 		GL11.glRotatef(135.0F, 0.0F, 1.0F, 0.0F);
 		RenderHelper.enableStandardItemLighting();
 		GL11.glRotatef(-135.0F, 0.0F, 1.0F, 0.0F);
 		GL11.glRotatef(-((float)Math.atan((double)(var10 / 40.0F))) * 20.0F, 1.0F, 0.0F, 0.0F);
-		this.mc.thePlayer.renderYawOffset = (float)Math.atan((double)(var9 / 40.0F)) * 20.0F;
-		this.mc.thePlayer.rotationYaw = (float)Math.atan((double)(var9 / 40.0F)) * 40.0F;
-		this.mc.thePlayer.rotationPitch = -((float)Math.atan((double)(var10 / 40.0F))) * 20.0F;
-		GL11.glTranslatef(0.0F, this.mc.thePlayer.yOffset, 0.0F);
+		this.game.thePlayer.renderYawOffset = (float)Math.atan((double)(var9 / 40.0F)) * 20.0F;
+		this.game.thePlayer.rotationYaw = (float)Math.atan((double)(var9 / 40.0F)) * 40.0F;
+		this.game.thePlayer.rotationPitch = -((float)Math.atan((double)(var10 / 40.0F))) * 20.0F;
+		GL11.glTranslatef(0.0F, this.game.thePlayer.yOffset, 0.0F);
 		RenderManager.instance.playerViewY = 180.0F;
-		RenderManager.instance.renderEntityWithPosYaw(this.mc.thePlayer, 0.0D, 0.0D, 0.0D, 0.0F, 1.0F);
-		this.mc.thePlayer.renderYawOffset = var6;
-		this.mc.thePlayer.rotationYaw = var7;
-		this.mc.thePlayer.rotationPitch = var8;
+		RenderManager.instance.renderEntityWithPosYaw(this.game.thePlayer, 0.0D, 0.0D, 0.0D, 0.0F, 1.0F);
+		this.game.thePlayer.renderYawOffset = var6;
+		this.game.thePlayer.rotationYaw = var7;
+		this.game.thePlayer.rotationPitch = var8;
 		GL11.glPopMatrix();
 		RenderHelper.disableStandardItemLighting();
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
@@ -77,12 +83,15 @@
 
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.id == 0) {
-			this.mc.displayGuiScreen(new GuiAchievements(this.mc.statFileWriter));
+			this.game.displayGuiScreen(new GuiAchievements(this.game.statFileWriter));
 		}
 
 		if(var1.id == 1) {
-			this.mc.displayGuiScreen(new GuiStats(this, this.mc.statFileWriter));
+			this.game.displayGuiScreen(new GuiStats(this, this.game.statFileWriter));
 		}
 
+		if(var1.id == 2) {
+			this.game.displayGuiScreen(new GuiSkills(this));
+		}
 	}
 }
--- net/minecraft/src/GenLayerRiverMix.java
+++ net/minecraft/src/GenLayerRiverMix.java
@@ -1,31 +1,34 @@
 package net.minecraft.src;
 
 public class GenLayerRiverMix extends GenLayer {
-	private GenLayer field_35512_b;
 	private GenLayer field_35513_c;
 
 	public GenLayerRiverMix(long var1, GenLayer var3, GenLayer var4) {
 		super(var1);
-		this.field_35512_b = var3;
+		this.field_35504_a = var3;
 		this.field_35513_c = var4;
 	}
 
 	public void func_35496_b(long var1) {
-		this.field_35512_b.func_35496_b(var1);
+		this.field_35504_a.func_35496_b(var1);
 		this.field_35513_c.func_35496_b(var1);
 		super.func_35496_b(var1);
 	}
 
 	public int[] func_35500_a(int var1, int var2, int var3, int var4) {
-		int[] var5 = this.field_35512_b.func_35500_a(var1, var2, var3, var4);
+		int[] var5 = this.field_35504_a.func_35500_a(var1, var2, var3, var4);
+		if (!Personalization.rivers
+				|| Personalization.pureGeneration) return var5;
 		int[] var6 = this.field_35513_c.func_35500_a(var1, var2, var3, var4);
 		int[] var7 = IntCache.func_35267_a(var3 * var4);
 
 		for(int var8 = 0; var8 < var3 * var4; ++var8) {
-			if(var5[var8] == BiomeGenBase.field_35484_b.field_35494_y) {
+			if(var5[var8] == BiomeGenBase.ocean.field_35494_y || var6[var8] < 0) {
 				var7[var8] = var5[var8];
+			} else if (BiomeGenBase.field_35486_a[var5[var8]].getEnableSnow()) {
+				var7[var8] = BiomeGenBase.frozenRiver.field_35494_y;
 			} else {
-				var7[var8] = var6[var8] >= 0 ? var6[var8] : var5[var8];
+				var7[var8] = var6[var8];
 			}
 		}
 
--- net/minecraft/src/ISaveHandler.java
+++ net/minecraft/src/ISaveHandler.java
@@ -14,5 +14,7 @@
 
 	void saveWorldInfo(WorldInfo var1);
 
-	File func_28113_a(String var1);
+	File getMapFileFromName(String var1);
+
+	String getSaveDirectoryName();
 }
--- net/minecraft/src/WorldGenDungeons.java
+++ net/minecraft/src/WorldGenDungeons.java
@@ -101,7 +101,9 @@
 
 			var1.setBlockWithNotify(var3, var4, var5, Block.mobSpawner.blockID);
 			TileEntityMobSpawner var19 = (TileEntityMobSpawner)var1.getBlockTileEntity(var3, var4, var5);
-			var19.setMobID(this.pickMobSpawner(var2));
+			if (var19 != null) {
+				var19.setMobID(this.pickMobSpawner(var2));
+			}
 			return true;
 		} else {
 			return false;
@@ -110,7 +112,7 @@
 
 	private ItemStack pickCheckLootItem(Random var1) {
 		int var2 = var1.nextInt(11);
-		return var2 == 0 ? new ItemStack(Item.saddle) : (var2 == 1 ? new ItemStack(Item.ingotIron, var1.nextInt(4) + 1) : (var2 == 2 ? new ItemStack(Item.bread) : (var2 == 3 ? new ItemStack(Item.wheat, var1.nextInt(4) + 1) : (var2 == 4 ? new ItemStack(Item.gunpowder, var1.nextInt(4) + 1) : (var2 == 5 ? new ItemStack(Item.silk, var1.nextInt(4) + 1) : (var2 == 6 ? new ItemStack(Item.bucketEmpty) : (var2 == 7 && var1.nextInt(100) == 0 ? new ItemStack(Item.appleGold) : (var2 == 8 && var1.nextInt(2) == 0 ? new ItemStack(Item.redstone, var1.nextInt(4) + 1) : (var2 == 9 && var1.nextInt(10) == 0 ? new ItemStack(Item.itemsList[Item.record13.shiftedIndex + var1.nextInt(2)]) : (var2 == 10 ? new ItemStack(Item.dyePowder, 1, 3) : null))))))))));
+		return var2 == 0 ? new ItemStack(Item.saddle) : (var2 == 1 ? new ItemStack(Item.ingotIron, var1.nextInt(4) + 1) : (var2 == 2 ? new ItemStack(Item.bread) : (var2 == 3 ? new ItemStack(Item.wheat, var1.nextInt(4) + 1) : (var2 == 4 ? new ItemStack(Item.gunpowder, var1.nextInt(4) + 1) : (var2 == 5 ? new ItemStack(Item.silk, var1.nextInt(4) + 1) : (var2 == 6 ? new ItemStack(Item.bucketEmpty) : (var2 == 7 && var1.nextInt(100) == 0 ? new ItemStack(Item.appleGold) : (var2 == 8 && var1.nextInt(2) == 0 ? new ItemStack(Item.redstone, var1.nextInt(4) + 1) : (var2 == 9 && var1.nextInt(10) == 0 ? new ItemStack(Item.recordFile.shiftedIndex, 1, var1.nextInt(Short.MAX_VALUE - 1) + 1) : (var2 == 10 ? new ItemStack(Item.dyePowder, 1, 3) : null))))))))));
 	}
 
 	private String pickMobSpawner(Random var1) {
--- net/minecraft/src/GuiMainMenu.java
+++ net/minecraft/src/GuiMainMenu.java
@@ -2,6 +2,7 @@
 
 import java.awt.image.BufferedImage;
 import java.io.BufferedReader;
+import java.io.IOException;
 import java.io.InputStreamReader;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
@@ -57,7 +58,8 @@
 	}
 
 	public void initGui() {
-		this.field_35358_g = this.mc.renderEngine.allocateAndSetupTexture(new BufferedImage(256, 256, 2));
+		RegionFileCache.clearRegionFileReferences();
+		this.field_35358_g = this.game.renderEngine.allocateAndSetupTexture(new BufferedImage(256, 256, 2));
 		Calendar var1 = Calendar.getInstance();
 		var1.setTime(new Date());
 		if(var1.get(2) + 1 == 11 && var1.get(5) == 9) {
@@ -72,17 +74,24 @@
 
 		StringTranslate var2 = StringTranslate.getInstance();
 		int var4 = this.height / 4 + 48;
-		this.controlList.add(new GuiButton(1, this.width / 2 - 100, var4, var2.translateKey("menu.singleplayer")));
-		this.controlList.add(this.multiplayerButton = new GuiButton(2, this.width / 2 - 100, var4 + 24, var2.translateKey("menu.multiplayer")));
-		this.controlList.add(new GuiButton(3, this.width / 2 - 100, var4 + 48, var2.translateKey("menu.mods")));
-		if(this.mc.hideQuitButton) {
+		this.controlList.add(new GuiButton(1, this.width / 2 - 100, var4,
+				var2.translateKey(Personalization.DEMO_MODE && Personalization.chaos > 0.0F ? "menu.chaosDemo" : "menu.singleplayer")));
+		this.controlList.add(this.multiplayerButton = new GuiButton(2, this.width / 2 - 100, var4 + 24,
+				var2.translateKey(Personalization.controlPanelUnlocked ? "menu.controlPanel" : "menu.multiplayer")));
+		this.controlList.add(new GuiButton(3, this.width / 2 - 100, var4 + 48,
+				var2.translateKey(Personalization.DEMO_MODE ? "menu.switchVersion" : "menu.mods")));
+		if(this.game.hideQuitButton) {
 			this.controlList.add(new GuiButton(0, this.width / 2 - 100, var4 + 72, var2.translateKey("menu.options")));
 		} else {
 			this.controlList.add(new GuiButton(0, this.width / 2 - 100, var4 + 72 + 12, 98, 20, var2.translateKey("menu.options")));
 			this.controlList.add(new GuiButton(4, this.width / 2 + 2, var4 + 72 + 12, 98, 20, var2.translateKey("menu.quit")));
 		}
 
-		if(this.mc.session == null) {
+		if (Personalization.DEBUG_MODE) {
+			this.controlList.add(new GuiButton(5, this.width / 2 - 150, var4 + 72 + 12, 40, 20, "WHEE!"));
+		}
+
+		if(this.game.session == null) {
 			this.multiplayerButton.enabled = false;
 		}
 
@@ -90,23 +99,58 @@
 
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.id == 0) {
-			this.mc.displayGuiScreen(new GuiOptions(this, this.mc.gameSettings));
+			this.game.displayGuiScreen(new GuiOptions(this, this.game.gameSettings));
 		}
 
 		if(var1.id == 1) {
-			this.mc.displayGuiScreen(new GuiSelectWorld(this));
+			if (Personalization.DEMO_MODE && Personalization.chaos > 0.0F) {
+				this.game.displayGuiScreen(null);
+
+				ISaveFormat var3 = this.game.getSaveLoader();
+				var3.flushCache();
+				var3.deleteWorldDirectory("b18x_chaos_demo");
+
+				this.game.playerController = new PlayerControllerSP(this.game);
+				this.game.startWorld("b18x_chaos_demo", "B1.8.X Chaos Demo", new WorldSettings((new Random()).nextLong(), 0, true));
+				this.game.displayGuiScreen(null);
+			} else {
+				this.game.displayGuiScreen(new GuiSelectWorld(this));
+			}
 		}
 
 		if(var1.id == 2) {
-			this.mc.displayGuiScreen(new GuiMultiplayer(this));
+			this.game.displayGuiScreen(Personalization.controlPanelUnlocked ? new GuiPersonalization() : new GuiMultiplayer(this));
 		}
 
 		if(var1.id == 3) {
-			this.mc.displayGuiScreen(new GuiTexturePacks(this));
+			this.game.displayGuiScreen(Personalization.DEMO_MODE ? new GuiDemoPreset() : new GuiTexturePacks(this));
 		}
 
 		if(var1.id == 4) {
-			this.mc.shutdown();
+			this.game.shutdown();
+		}
+
+		if(var1.id == 5) {
+			Personalization.betaness = 0.0F;
+			Personalization.weirdness = 0.0F;
+			Personalization.chaos = 0.0F;
+			Personalization.entropy = 0.0F;
+			Personalization.version = null;
+			Personalization.days = 0;
+			Personalization.noiseSeed = Personalization.rand.nextLong();
+			Personalization.options.clear();
+			Personalization.optionMap.clear();
+			Personalization.setupNoise();
+			for (int i = 0; i < 100; i++) {
+				Personalization.adjustValues();
+			}
+			Personalization.personalize();
+			try {
+				Personalization.saveOptions();
+			} catch (IOException e) {
+				// Eh, whatever.
+			}
+			this.game.sndManager.playSoundFX("random.remixquick", -10.0F, 1.0F);
 		}
 
 	}
@@ -160,7 +204,7 @@
 					GL11.glRotatef(-90.0F, 1.0F, 0.0F, 0.0F);
 				}
 
-				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/bg/panorama" + var10 + ".png"));
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.game.renderEngine.getTexture("/title/bg/panorama" + var10 + ".png"));
 				var4.startDrawingQuads();
 				var4.setColorRGBA_I(16777215, 255 / (var6 + 1));
 				float var11 = 0.0F;
@@ -224,7 +268,7 @@
 		this.func_35354_a(var3);
 		this.func_35354_a(var3);
 		this.func_35354_a(var3);
-		GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
+		GL11.glViewport(0, 0, this.game.displayWidth, this.game.displayHeight);
 		Tessellator var4 = Tessellator.instance;
 		var4.startDrawingQuads();
 		float var5 = this.width > this.height ? 120.0F / (float)this.width : 120.0F / (float)this.height;
@@ -243,14 +287,20 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.func_35356_c(var1, var2, var3);
+		if (Personalization.panorama) {
+			this.func_35356_c(var1, var2, var3);
+		} else {
+			this.drawDefaultBackground();
+		}
 		Tessellator var4 = Tessellator.instance;
 		short var5 = 274;
 		int var6 = this.width / 2 - var5 / 2;
 		byte var7 = 30;
-		this.drawGradientRect(0, 0, this.width, this.height, -1426063361, 16777215);
-		this.drawGradientRect(0, 0, this.width, this.height, 0, -1442840576);
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/mclogo.png"));
+		if (Personalization.panorama) {
+			this.drawGradientRect(0, 0, this.width, this.height, -1426063361, 16777215);
+			this.drawGradientRect(0, 0, this.width, this.height, 0, -1442840576);
+		}
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.game.renderEngine.getTexture("/title/mclogo.png"));
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		this.drawTexturedModalRect(var6 + 0, var7 + 0, 0, 0, 155, 44);
 		this.drawTexturedModalRect(var6 + 155, var7 + 0, 0, 45, 155, 44);
@@ -263,9 +313,26 @@
 		GL11.glScalef(var8, var8, var8);
 		this.drawCenteredString(this.fontRenderer, this.splashText, 0, -8, 16776960);
 		GL11.glPopMatrix();
-		this.drawString(this.fontRenderer, "Minecraft Beta 1.8.1", 2, this.height - 10, 16777215);
+		if (Personalization.panorama) {
+			this.drawString(this.fontRenderer, Personalization.version, 2, this.height - 10, 16777215);
+		} else {
+			this.drawString(this.fontRenderer, Personalization.version, 2, 2, 5263440);
+		}
 		String var9 = "Copyright Mojang AB. Do not distribute!";
 		this.drawString(this.fontRenderer, var9, this.width - this.fontRenderer.getStringWidth(var9) - 2, this.height - 10, 16777215);
 		super.drawScreen(var1, var2, var3);
+	}
+
+	protected void mouseClicked(int var1, int var2, int var3) {
+		if (var3 == 0 && Personalization.DEBUG_MODE) {
+			int versionWidth = this.fontRenderer.getStringWidth(Personalization.version) + 4;
+			int versionPos = Personalization.panorama ? this.height - 12 : 0;
+
+			if (var1 < versionWidth && var2 >= versionPos && var2 < versionPos + 12) {
+				this.game.sndManager.playSoundFX("random.click", 1.0F, 1.0F);
+				this.game.displayGuiScreen(new GuiPersonalization());
+			}
+		}
+		super.mouseClicked(var1, var2, var3);
 	}
 }
--- net/minecraft/src/ChunkCache.java
+++ net/minecraft/src/ChunkCache.java
@@ -2,42 +2,57 @@
 
 public class ChunkCache implements IBlockAccess {
 	private int chunkX;
+	private int chunkY;
 	private int chunkZ;
+	private int chunkWidth;
+	private int chunkHeight;
+	private int chunkLength;
 	private Chunk[][] chunkArray;
+	private ExtendedBlockStorage[][][] ebsArray;
 	private World worldObj;
 
 	public ChunkCache(World var1, int var2, int var3, int var4, int var5, int var6, int var7) {
 		this.worldObj = var1;
 		this.chunkX = var2 >> 4;
+		this.chunkY = var3 >> 4;
 		this.chunkZ = var4 >> 4;
 		int var8 = var5 >> 4;
+		int var8a = var6 >> 4;
 		int var9 = var7 >> 4;
+		this.chunkWidth = var8 - this.chunkX + 1;
+		this.chunkHeight = var8a - this.chunkY + 1;
+		this.chunkLength = var9 - this.chunkZ + 1;
 		this.chunkArray = new Chunk[var8 - this.chunkX + 1][var9 - this.chunkZ + 1];
+		this.ebsArray = new ExtendedBlockStorage[var8 - this.chunkX + 1][var9 - this.chunkZ + 1][var8a - this.chunkY + 1];
 
 		for(int var10 = this.chunkX; var10 <= var8; ++var10) {
 			for(int var11 = this.chunkZ; var11 <= var9; ++var11) {
-				this.chunkArray[var10 - this.chunkX][var11 - this.chunkZ] = var1.getChunkFromChunkCoords(var10, var11);
+				Chunk chunk = var1.getChunkFromChunkCoords(var10, var11);
+				this.chunkArray[var10 - this.chunkX][var11 - this.chunkZ] = chunk;
+				ExtendedBlockStorage[] chunkEbs = chunk.getBlockStorageArray();
+				for (int var12 = this.chunkY; var12 <= var8a; ++var12) {
+					if (var12 >= 0 && var12 < chunkEbs.length) {
+						this.ebsArray[var10 - this.chunkX][var11 - this.chunkZ][var12 - this.chunkY] = chunkEbs[var12];
+					}
+				}
 			}
 		}
-
 	}
 
 	public int getBlockId(int var1, int var2, int var3) {
 		if(var2 < 0) {
 			return 0;
 		} else {
-			this.worldObj.getClass();
-			if(var2 >= 128) {
-				return 0;
+			int var4 = (var1 >> 4) - this.chunkX;
+			int var5 = (var3 >> 4) - this.chunkZ;
+			int var6 = (var2 >> 4) - this.chunkY;
+			if(var4 >= 0 && var4 < this.chunkWidth
+					&& var5 >= 0 && var5 < this.chunkLength
+					&& var6 >= 0 && var6 < this.chunkHeight) {
+				ExtendedBlockStorage ebs = this.ebsArray[var4][var5][var6];
+				return ebs == null ? 0 : ebs.getExtBlockID(var1 & 15, var2 & 15, var3 & 15);
 			} else {
-				int var4 = (var1 >> 4) - this.chunkX;
-				int var5 = (var3 >> 4) - this.chunkZ;
-				if(var4 >= 0 && var4 < this.chunkArray.length && var5 >= 0 && var5 < this.chunkArray[var4].length) {
-					Chunk var6 = this.chunkArray[var4][var5];
-					return var6 == null ? 0 : var6.getBlockID(var1 & 15, var2, var3 & 15);
-				} else {
-					return 0;
-				}
+				return 0;
 			}
 		}
 	}
@@ -58,6 +73,8 @@
 	}
 
 	public int func_35451_b(int var1, int var2, int var3, int var4) {
+//		if (true) return 15 << 20 | 15 << 4;
+
 		int var5 = this.func_35454_a(EnumSkyBlock.Sky, var1, var2, var3);
 		int var6 = this.func_35454_a(EnumSkyBlock.Block, var1, var2, var3);
 		if(var6 < var4) {
@@ -71,6 +88,10 @@
 		return this.worldObj.worldProvider.lightBrightnessTable[this.getLightValue(var1, var2, var3)];
 	}
 
+	public float getLightBrightness(int var1) {
+		return this.worldObj.worldProvider.lightBrightnessTable[var1];
+	}
+
 	public int getLightValue(int var1, int var2, int var3) {
 		return this.getLightValueExt(var1, var2, var3, true);
 	}
@@ -110,19 +131,9 @@
 			if(var2 < 0) {
 				return 0;
 			} else {
-				this.worldObj.getClass();
-				if(var2 >= 128) {
-					var5 = 15 - this.worldObj.skylightSubtracted;
-					if(var5 < 0) {
-						var5 = 0;
-					}
-
-					return var5;
-				} else {
-					var5 = (var1 >> 4) - this.chunkX;
-					var6 = (var3 >> 4) - this.chunkZ;
-					return this.chunkArray[var5][var6].getBlockLightValue(var1 & 15, var2, var3 & 15, this.worldObj.skylightSubtracted);
-				}
+				var5 = (var1 >> 4) - this.chunkX;
+				var6 = (var3 >> 4) - this.chunkZ;
+				return this.chunkArray[var5][var6].getBlockLightValue(var1 & 15, var2, var3 & 15, this.worldObj.skylightSubtracted);
 			}
 		} else {
 			return 15;
@@ -133,13 +144,16 @@
 		if(var2 < 0) {
 			return 0;
 		} else {
-			this.worldObj.getClass();
-			if(var2 >= 128) {
-				return 0;
+			int var4 = (var1 >> 4) - this.chunkX;
+			int var5 = (var3 >> 4) - this.chunkZ;
+			int var6 = (var2 >> 4) - this.chunkY;
+			if(var4 >= 0 && var4 < this.chunkWidth
+					&& var5 >= 0 && var5 < this.chunkLength
+					&& var6 >= 0 && var6 < this.chunkHeight) {
+				ExtendedBlockStorage ebs = this.ebsArray[var4][var5][var6];
+				return ebs == null ? 0 : ebs.getExtBlockMetadata(var1 & 15, var2 & 15, var3 & 15);
 			} else {
-				int var4 = (var1 >> 4) - this.chunkX;
-				int var5 = (var3 >> 4) - this.chunkZ;
-				return this.chunkArray[var4][var5].getBlockMetadata(var1 & 15, var2, var3 & 15);
+				return 0;
 			}
 		}
 	}
@@ -173,15 +187,8 @@
 			var3 = 0;
 		}
 
-		this.worldObj.getClass();
-		if(var3 >= 128) {
-			this.worldObj.getClass();
-			var3 = 128 - 1;
-		}
-
 		if(var3 >= 0) {
-			this.worldObj.getClass();
-			if(var3 < 128 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 <= 30000000) {
+			if(var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 <= 30000000) {
 				int var5 = this.getBlockId(var2, var3, var4);
 				int var6;
 				if(var5 != Block.stairSingle.blockID && var5 != Block.tilledField.blockID && var5 != Block.stairCompactCobblestone.blockID && var5 != Block.stairCompactPlanks.blockID) {
@@ -219,21 +226,15 @@
 	}
 
 	public int func_35453_b(EnumSkyBlock var1, int var2, int var3, int var4) {
+		int var5 = (var2 >> 4) - this.chunkX;
+		int var6 = (var4 >> 4) - this.chunkZ;
+
 		if(var3 < 0) {
 			var3 = 0;
 		}
 
-		this.worldObj.getClass();
-		if(var3 >= 128) {
-			this.worldObj.getClass();
-			var3 = 128 - 1;
-		}
-
 		if(var3 >= 0) {
-			this.worldObj.getClass();
-			if(var3 < 128 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 <= 30000000) {
-				int var5 = (var2 >> 4) - this.chunkX;
-				int var6 = (var4 >> 4) - this.chunkZ;
+			if(var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 <= 30000000) {
 				return this.chunkArray[var5][var6].getSavedLightValue(var1, var2 & 15, var3, var4 & 15);
 			}
 		}
@@ -242,7 +243,22 @@
 	}
 
 	public int func_35452_b() {
-		this.worldObj.getClass();
-		return 128;
+		return Integer.MAX_VALUE;
+	}
+
+	public boolean isSectionEmpty(int x, int y, int z) {
+		if (y < 0) return true;
+
+		Chunk chunk = this.chunkArray[x - this.chunkX][z - this.chunkZ];
+		if (chunk == null) return true;
+
+		ExtendedBlockStorage[] sections = chunk.getBlockStorageArray();
+		if (sections.length <= y) return true;
+
+		return sections[y] == null || sections[y].getIsEmpty();
+	}
+
+	public float getRenderCelestialAngle() {
+		return this.worldObj.getRenderCelestialAngle();
 	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenCaverns.java
@@ -1,0 +1,121 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenCaverns extends BiomeGenBase {
+	private static final WorldGenerator megaSpruce = new WorldGenMegaPineTree(false);
+	private NoiseGeneratorOctaves forestNoise;
+	private NoiseGeneratorOctaves landNoise;
+	private long noiseSeed;
+
+	protected BiomeGenCaverns(int var1) {
+		super(var1);
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return !Personalization.oakOnly && var1.nextInt(2) == 0 ? megaSpruce : this.field_35480_A;
+	}
+
+	public void func_35477_a(World world, Random rand, int cx, int cz) {
+		int trees = (int)(this.forestNoise.func_806_a((double)cx, (double)cz) / 16.0D + 2.0D) + rand.nextInt(3);
+		if (trees < 0) {
+			trees = 0;
+		}
+		if (rand.nextInt(10) == 0) {
+			++trees;
+		}
+
+		for (int i = 0; i < trees; i++) {
+			int x = cx + rand.nextInt(16) + 8;
+			int z = cz + rand.nextInt(16) + 8;
+			int y = world.getHeightValue(x, z);
+			WorldGenerator tree = this.getRandomWorldGenForTrees(rand);
+			tree.generate(world, rand, x, y, z);
+		}
+
+		for (int i = 0; i < 5; i++) {
+			int x = cx + rand.nextInt(16) + 8;
+			int z = cz + rand.nextInt(16) + 8;
+			int y = world.getHeightValue(x, z);
+			WorldGenerator grass = this.getRandomWorldGenForGrass(rand);
+			grass.generate(world, rand, x, y, z);
+		}
+
+		genOre(world, rand, cx, cz, Block.oreCoal, 20, 50, 256);
+		genOre(world, rand, cx, cz, Block.oreIron, 16, 50, 256);
+		genOre(world, rand, cx, cz, Block.oreGold, 16, 30, 192);
+		genOre(world, rand, cx, cz, Block.oreRedstone, 12, 20, 128);
+		genOre(world, rand, cx, cz, Block.oreLapis, 12, 20, 128);
+		genOre(world, rand, cx, cz, Block.oreDiamond, 16, 10, 96);
+		genOre(world, rand, cx, cz, Block.oreEmerald, 12, 10, 64);
+	}
+
+	private static void genOre(World world, Random rand, int cx, int cz, Block ore, int size, int count, int height) {
+		WorldGenerator oregen = new WorldGenMinable(ore.blockID, size);
+		for (int i = 0; i < count; i++) {
+			int x = cx + rand.nextInt(16);
+			int z = cz + rand.nextInt(16);
+			int y = rand.nextInt(height);
+			oregen.generate(world, rand, x, y, z);
+		}
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, int topTerrainHeight, double sandValue, double gravelValue, double erosionValue, double simplexValue) {
+		if (this.forestNoise == null || this.landNoise == null || noiseSeed != world.getRandomSeed()) {
+			this.noiseSeed = world.getRandomSeed();
+			Random noiseRand = new Random(this.noiseSeed);
+			this.forestNoise = new NoiseGeneratorOctaves(noiseRand, 8);
+			this.landNoise = new NoiseGeneratorOctaves(noiseRand, 8);
+		}
+
+		int height = blocks.length / 256;
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+		int erosion = random.nextInt(3) + 3;
+
+		if (topTerrainHeight < height - 1) {
+			int prevTth = topTerrainHeight;
+			for (int y = prevTth + 1; y < Math.min(prevTth + 1 + this.landNoise.generateActualNoise(x, z), height); y++) {
+				int index = chunkX * height * 16 + chunkZ * height + y;
+				if (blocks[index] == 0) break;
+				blocks[index] = 1;
+				topTerrainHeight = y;
+			}
+		}
+
+		boolean hitSolid = false;
+		for (int y = topTerrainHeight; y >= 0; --y) {
+			int index = chunkX * height * 16 + chunkZ * height + y;
+
+			if (y <= random.nextInt(5)) {
+				blocks[index] = (byte)Block.bedrock.blockID;
+			} else {
+				byte block = blocks[index];
+				if (block > 0) {
+					if (!hitSolid) {
+						block = (byte)Block.grass.blockID;
+					} else if (erosion > 0) {
+						block = (byte)Block.dirt.blockID;
+					}
+					hitSolid = true;
+				} else if (hitSolid) {
+					erosion = 0;
+				}
+
+				if (hitSolid) {
+					erosion--;
+				}
+
+				if (block == 1 && blocks[index + 1] == 0 && simplexValue - random.nextFloat() * 2.5F > 0.0F) {
+					block = (byte)Block.mossyStone.blockID;
+				}
+
+				blocks[index] = block;
+			}
+		}
+	}
+
+	public int getSkyColorByTemp(float var1) {
+		return 0x9d9de9;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenSavanna.java
@@ -1,0 +1,28 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenSavanna extends BiomeGenBase {
+	private final WorldGenerator savannaTree = new WorldGenSavannaTree();
+
+	protected BiomeGenSavanna(int var1) {
+		super(var1);
+		this.decorator.trees = 1;
+		this.decorator.flowers = 4;
+		this.decorator.grass = 20;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return Personalization.oakOnly ? super.getRandomWorldGenForTrees(var1)
+				: var1.nextInt(5) > 0 ? this.savannaTree
+				: this.field_35493_z;
+	}
+
+	public float getMinHeight(int x, int z) {
+		return super.getMinHeight(x, z) + (doHills(x, z) ? 1.4F : 0.0F);
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) / (doHills(x, z) ? 2.0F : 1.0F);
+	}
+}
--- /dev/null
+++ net/minecraft/src/TileEntityComputerRenderer.java
@@ -1,0 +1,47 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class TileEntityComputerRenderer extends TileEntitySpecialRenderer {
+	private void renderComputerScreen(TileEntityComputer computer, double x, double y, double z) {
+		int texX = computer.type % 16;
+		int texY = computer.type / 16;
+		double uMin = texX / 16.0D;
+		double vMin = texY / 16.0D;
+		double uMax = uMin + 15.99D / 256.0D;
+		double vMax = vMin + 15.99D / 256.0D;
+
+		float rot = 0.0F;
+		switch (computer.getBlockMetadata()) {
+			case 2: rot = 180.0F; break;
+			case 3: rot = 0.0F; break;
+			case 4: rot = 270.0F; break;
+			case 5: rot = 90.0F; break;
+		}
+
+		this.bindTextureByName("/gui/computer.png");
+		GL11.glPushMatrix();
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		GL11.glTranslatef((float)x + 0.5F, (float)y + 0.5F, (float)z + 0.5F);
+		GL11.glRotatef(rot, 0.0F, 1.0F, 0.0F);
+		GL11.glTranslatef(0.0F, 0.0F, 0.51F);
+		GL11.glDisable(GL11.GL_LIGHTING);
+
+		Tessellator t = Tessellator.instance;
+		t.startDrawingQuads();
+		t.func_35835_b(240);
+		t.setColorOpaque_I(0xFFFFFF);
+		t.addVertexWithUV(-0.5D, -0.5D, 0.0D, uMin, vMax);
+		t.addVertexWithUV(+0.5D, -0.5D, 0.0D, uMax, vMax);
+		t.addVertexWithUV(+0.5D, +0.5D, 0.0D, uMax, vMin);
+		t.addVertexWithUV(-0.5D, +0.5D, 0.0D, uMin, vMin);
+		t.draw();
+
+		GL11.glEnable(GL11.GL_LIGHTING);
+		GL11.glPopMatrix();
+	}
+
+	public void renderTileEntityAt(TileEntity var1, double var2, double var4, double var6, float var8) {
+		this.renderComputerScreen((TileEntityComputer)var1, var2, var4, var6);
+	}
+}
--- net/minecraft/src/IWorldAccess.java
+++ net/minecraft/src/IWorldAccess.java
@@ -1,8 +1,12 @@
 package net.minecraft.src;
 
+import java.io.File;
+
 public interface IWorldAccess {
 	void markBlockAndNeighborsNeedsUpdate(int var1, int var2, int var3);
 
+	void markBlockNeedsUpdate2(int var1, int var2, int var3);
+
 	void markBlockRangeNeedsUpdate(int var1, int var2, int var3, int var4, int var5, int var6);
 
 	void playSound(String var1, double var2, double var4, double var6, float var8, float var9);
@@ -14,6 +18,8 @@
 	void releaseEntitySkin(Entity var1);
 
 	void playRecord(String var1, int var2, int var3, int var4);
+
+	void playFileRecord(File var1, int var2, int var3, int var4);
 
 	void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity var4);
 
--- net/minecraft/src/GuiConnectFailed.java
+++ net/minecraft/src/GuiConnectFailed.java
@@ -29,7 +29,7 @@
 
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.id == 0) {
-			this.mc.displayGuiScreen(new GuiMainMenu());
+			this.game.displayGuiScreen(new GuiMainMenu());
 		}
 
 	}
--- net/minecraft/src/MapGenVillage.java
+++ net/minecraft/src/MapGenVillage.java
@@ -5,7 +5,20 @@
 import java.util.Random;
 
 public class MapGenVillage extends MapGenStructure {
-	public static List field_35635_a = Arrays.asList(new BiomeGenBase[]{BiomeGenBase.field_35485_c, BiomeGenBase.desert});
+	public static List field_35635_a = Arrays.asList(
+			BiomeGenBase.plains,
+			BiomeGenBase.desert,
+			BiomeGenBase.oldSwampland,
+			BiomeGenBase.shrubland
+	);
+	public static List field_35635_b = Arrays.asList(
+			BiomeGenBase.ocean,
+			BiomeGenBase.river,
+			BiomeGenBase.extremeHills,
+			BiomeGenBase.oldHills,
+			BiomeGenBase.rainforest,
+			BiomeGenBase.jungle
+	);
 
 	protected boolean func_35628_a(int var1, int var2) {
 		byte var3 = 32;
--- net/minecraft/src/RenderManager.java
+++ net/minecraft/src/RenderManager.java
@@ -37,19 +37,22 @@
 		this.entityRenderMap.put(EntityCreeper.class, new RenderCreeper());
 		this.entityRenderMap.put(EntityEnderman.class, new RenderEnderman());
 		this.entityRenderMap.put(EntitySkeleton.class, new RenderBiped(new ModelSkeleton(), 0.5F));
+		this.entityRenderMap.put(EntityBlaze.class, new RenderBlaze());
 		this.entityRenderMap.put(EntityZombie.class, new RenderBiped(new ModelZombie(), 0.5F));
 		this.entityRenderMap.put(EntitySlime.class, new RenderSlime(new ModelSlime(16), new ModelSlime(0), 0.25F));
 		this.entityRenderMap.put(EntityPlayer.class, new RenderPlayer());
 		this.entityRenderMap.put(EntityGiantZombie.class, new RenderGiantZombie(new ModelZombie(), 0.5F, 6.0F));
 		this.entityRenderMap.put(EntityGhast.class, new RenderGhast());
 		this.entityRenderMap.put(EntitySquid.class, new RenderSquid(new ModelSquid(), 0.7F));
+		this.entityRenderMap.put(EntityFakePlayer.class, new RenderBiped(new ModelFakePlayer(), 0.5F));
 		this.entityRenderMap.put(EntityLiving.class, new RenderLiving(new ModelBiped(), 0.5F));
 		this.entityRenderMap.put(Entity.class, new RenderEntity());
 		this.entityRenderMap.put(EntityPainting.class, new RenderPainting());
 		this.entityRenderMap.put(EntityArrow.class, new RenderArrow());
 		this.entityRenderMap.put(EntitySnowball.class, new RenderSnowball(Item.snowball.getIconFromDamage(0)));
 		this.entityRenderMap.put(EntityEgg.class, new RenderSnowball(Item.egg.getIconFromDamage(0)));
-		this.entityRenderMap.put(EntityFireball.class, new RenderFireball());
+		this.entityRenderMap.put(EntityFireball.class, new RenderFireball(2.0F));
+		this.entityRenderMap.put(EntitySmallFireball.class, new RenderFireball(0.5F));
 		this.entityRenderMap.put(EntityItem.class, new RenderItem());
 		this.entityRenderMap.put(EntityXPOrb.class, new RenderXPOrb());
 		this.entityRenderMap.put(EntityTNTPrimed.class, new RenderTNTPrimed());
@@ -58,6 +61,10 @@
 		this.entityRenderMap.put(EntityBoat.class, new RenderBoat());
 		this.entityRenderMap.put(EntityFish.class, new RenderFish());
 		this.entityRenderMap.put(EntityLightningBolt.class, new RenderLightningBolt());
+		this.entityRenderMap.put(EntityOfficeNotch.class, new RenderBiped(new ModelBiped(), 0.5F));
+		this.entityRenderMap.put(EntityDragon.class, new RenderDragon());
+		this.entityRenderMap.put(EntityJeb.class, new RenderBiped(new ModelBiped(), 0.5F));
+		this.entityRenderMap.put(EntityNotch.class, new RenderBiped(new ModelBiped(), 0.5F));
 		Iterator var1 = this.entityRenderMap.values().iterator();
 
 		while(var1.hasNext()) {
@@ -98,6 +105,10 @@
 		} else {
 			this.playerViewY = var4.prevRotationYaw + (var4.rotationYaw - var4.prevRotationYaw) * var6;
 			this.playerViewX = var4.prevRotationPitch + (var4.rotationPitch - var4.prevRotationPitch) * var6;
+			if (this.options.frontThirdPersonView) {
+				this.playerViewY += 180.0F;
+				this.playerViewX *= -1.0F;
+			}
 		}
 
 		this.field_1222_l = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var6;
--- /dev/null
+++ net/minecraft/src/GenLayerSnow.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+public class GenLayerSnow extends GenLayer {
+	public GenLayerSnow(long var1, GenLayer var3) {
+		super(var1);
+		this.field_35504_a = var3;
+	}
+
+	public int[] func_35500_a(int var1, int var2, int var3, int var4) {
+		int var5 = var1 - 1;
+		int var6 = var2 - 1;
+		int var7 = var3 + 2;
+		int var8 = var4 + 2;
+		int[] var9 = this.field_35504_a.func_35500_a(var5, var6, var7, var8);
+		int[] var10 = IntCache.func_35267_a(var3 * var4);
+
+		for(int var11 = 0; var11 < var4; ++var11) {
+			for(int var12 = 0; var12 < var3; ++var12) {
+				int var13 = var9[var12 + 1 + (var11 + 1) * var7];
+				this.func_35499_a((long)(var12 + var1), (long)(var11 + var2));
+				if(var13 == 0) {
+					var10[var12 + var11 * var3] = 0;
+				} else {
+					int var14 = this.func_35498_a(5);
+					if(var14 == 0) {
+						var14 = BiomeGenBase.icePlains.field_35494_y;
+					} else {
+						var14 = 1;
+					}
+
+					var10[var12 + var11 * var3] = var14;
+				}
+			}
+		}
+
+		return var10;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntityDragonBase.java
@@ -1,0 +1,26 @@
+package net.minecraft.src;
+
+public class EntityDragonBase extends EntityLiving {
+	protected int field_40157_aB = 100;
+
+	public EntityDragonBase(World var1) {
+		super(var1);
+	}
+
+	public int getMaxHealth() {
+		return this.field_40157_aB;
+	}
+
+	public boolean attackEntityFrom(DamageSource var1, int var2) {
+//		return false;
+		return var1 instanceof EntityDamageSource && this.func_40156_a(null, var1, var2);
+	}
+
+	public boolean func_40156_a(DragonPart var1, DamageSource var2, int var3) {
+		return this.attackEntityFrom(var2, var3);
+	}
+
+	protected boolean func_40155_e(DamageSource var1, int var2) {
+		return super.attackEntityFrom(var1, var2);
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenHugeTrees.java
@@ -1,0 +1,162 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenHugeTrees extends WorldGenerator {
+	private final int field_48195_a;
+	private final int woodMetadata;
+	private final int leavesMetadata;
+
+	public WorldGenHugeTrees(int var2, int var3, int var4) {
+		this.field_48195_a = var2;
+		this.woodMetadata = var3;
+		this.leavesMetadata = var4;
+	}
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int var6 = var2.nextInt(3) + this.field_48195_a;
+		boolean var7 = true;
+		if(var4 >= 1) {
+			int var8;
+			int var10;
+			int var11;
+			int var12;
+			for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
+				byte var9 = 2;
+				if(var8 == var4) {
+					var9 = 1;
+				}
+
+				if(var8 >= var4 + 1 + var6 - 2) {
+					var9 = 2;
+				}
+
+				for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
+					for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
+						if(var8 >= 0) {
+							var12 = var1.getBlockId(var10, var8, var11);
+							if(var12 != 0 && var12 != Block.leaves.blockID && var12 != Block.grass.blockID && var12 != Block.dirt.blockID && var12 != Block.wood.blockID && var12 != Block.sapling.blockID) {
+								var7 = false;
+							}
+						} else {
+							var7 = false;
+						}
+					}
+				}
+			}
+
+			if(!var7) {
+				return false;
+			} else {
+				var8 = var1.getBlockId(var3, var4 - 1, var5);
+				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 256 - var6 - 1) {
+					this.setBlock(var1, var3, var4 - 1, var5, Block.dirt.blockID);
+					this.setBlock(var1, var3 + 1, var4 - 1, var5, Block.dirt.blockID);
+					this.setBlock(var1, var3, var4 - 1, var5 + 1, Block.dirt.blockID);
+					this.setBlock(var1, var3 + 1, var4 - 1, var5 + 1, Block.dirt.blockID);
+					this.func_48192_a(var1, var3, var5, var4 + var6, 2, var2);
+
+					for(int var14 = var4 + var6 - 2 - var2.nextInt(4); var14 > var4 + var6 / 2; var14 -= 2 + var2.nextInt(4)) {
+						float var15 = var2.nextFloat() * (float)Math.PI * 2.0F;
+						var11 = var3 + (int)(0.5F + MathHelper.cos(var15) * 4.0F);
+						var12 = var5 + (int)(0.5F + MathHelper.sin(var15) * 4.0F);
+						this.func_48192_a(var1, var11, var12, var14, 0, var2);
+
+						for(int var13 = 0; var13 < 5; ++var13) {
+							var11 = var3 + (int)(1.5F + MathHelper.cos(var15) * (float)var13);
+							var12 = var5 + (int)(1.5F + MathHelper.sin(var15) * (float)var13);
+							this.setBlockAndMetadata(var1, var11, var14 - 3 + var13 / 2, var12, Block.wood.blockID, this.woodMetadata);
+						}
+					}
+
+					for(var10 = 0; var10 < var6; ++var10) {
+						var11 = var1.getBlockId(var3, var4 + var10, var5);
+						if(var11 == 0 || var11 == Block.leaves.blockID) {
+							this.setBlockAndMetadata(var1, var3, var4 + var10, var5, Block.wood.blockID, this.woodMetadata);
+							if(var10 > 0) {
+								if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 - 1, var4 + var10, var5)) {
+									this.setBlockAndMetadata(var1, var3 - 1, var4 + var10, var5, Block.field_35278_bv.blockID, 8);
+								}
+
+								if(var2.nextInt(3) > 0 && var1.isAirBlock(var3, var4 + var10, var5 - 1)) {
+									this.setBlockAndMetadata(var1, var3, var4 + var10, var5 - 1, Block.field_35278_bv.blockID, 1);
+								}
+							}
+						}
+
+						if(var10 < var6 - 1) {
+							var11 = var1.getBlockId(var3 + 1, var4 + var10, var5);
+							if(var11 == 0 || var11 == Block.leaves.blockID) {
+								this.setBlockAndMetadata(var1, var3 + 1, var4 + var10, var5, Block.wood.blockID, this.woodMetadata);
+								if(var10 > 0) {
+									if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 + 2, var4 + var10, var5)) {
+										this.setBlockAndMetadata(var1, var3 + 2, var4 + var10, var5, Block.field_35278_bv.blockID, 2);
+									}
+
+									if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 + 1, var4 + var10, var5 - 1)) {
+										this.setBlockAndMetadata(var1, var3 + 1, var4 + var10, var5 - 1, Block.field_35278_bv.blockID, 1);
+									}
+								}
+							}
+
+							var11 = var1.getBlockId(var3 + 1, var4 + var10, var5 + 1);
+							if(var11 == 0 || var11 == Block.leaves.blockID) {
+								this.setBlockAndMetadata(var1, var3 + 1, var4 + var10, var5 + 1, Block.wood.blockID, this.woodMetadata);
+								if(var10 > 0) {
+									if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 + 2, var4 + var10, var5 + 1)) {
+										this.setBlockAndMetadata(var1, var3 + 2, var4 + var10, var5 + 1, Block.field_35278_bv.blockID, 2);
+									}
+
+									if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 + 1, var4 + var10, var5 + 2)) {
+										this.setBlockAndMetadata(var1, var3 + 1, var4 + var10, var5 + 2, Block.field_35278_bv.blockID, 4);
+									}
+								}
+							}
+
+							var11 = var1.getBlockId(var3, var4 + var10, var5 + 1);
+							if(var11 == 0 || var11 == Block.leaves.blockID) {
+								this.setBlockAndMetadata(var1, var3, var4 + var10, var5 + 1, Block.wood.blockID, this.woodMetadata);
+								if(var10 > 0) {
+									if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 - 1, var4 + var10, var5 + 1)) {
+										this.setBlockAndMetadata(var1, var3 - 1, var4 + var10, var5 + 1, Block.field_35278_bv.blockID, 8);
+									}
+
+									if(var2.nextInt(3) > 0 && var1.isAirBlock(var3, var4 + var10, var5 + 2)) {
+										this.setBlockAndMetadata(var1, var3, var4 + var10, var5 + 2, Block.field_35278_bv.blockID, 4);
+									}
+								}
+							}
+						}
+					}
+
+					return true;
+				} else {
+					return false;
+				}
+			}
+		} else {
+			return false;
+		}
+	}
+
+	private void func_48192_a(World var1, int var2, int var3, int var4, int var5, Random var6) {
+		byte var7 = 2;
+
+		for(int var8 = var4 - var7; var8 <= var4; ++var8) {
+			int var9 = var8 - var4;
+			int var10 = var5 + 1 - var9;
+
+			for(int var11 = var2 - var10; var11 <= var2 + var10 + 1; ++var11) {
+				int var12 = var11 - var2;
+
+				for(int var13 = var3 - var10; var13 <= var3 + var10 + 1; ++var13) {
+					int var14 = var13 - var3;
+					if((var12 >= 0 || var14 >= 0 || var12 * var12 + var14 * var14 <= var10 * var10) && (var12 <= 0 && var14 <= 0 || var12 * var12 + var14 * var14 <= (var10 + 1) * (var10 + 1)) && (var6.nextInt(4) != 0 || var12 * var12 + var14 * var14 <= (var10 - 1) * (var10 - 1)) && !Block.opaqueCubeLookup[var1.getBlockId(var11, var8, var13)]) {
+						this.setBlockAndMetadata(var1, var11, var8, var13, Block.leaves.blockID, this.leavesMetadata);
+					}
+				}
+			}
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/TextureOffset.java
@@ -1,0 +1,11 @@
+package net.minecraft.src;
+
+public class TextureOffset {
+	public final int field_40734_a;
+	public final int field_40733_b;
+
+	public TextureOffset(int var1, int var2) {
+		this.field_40734_a = var1;
+		this.field_40733_b = var2;
+	}
+}
--- net/minecraft/src/Teleporter.java
+++ net/minecraft/src/Teleporter.java
@@ -230,6 +230,7 @@
 						var24 = var16 + var22;
 						var25 = var17 + (var21 - 1) * var19 - var20 * var31;
 						var34 = var22 < 0;
+						var1.getChunkFromBlockCoords(var23, var25).playerModified = true;
 						var1.setBlockWithNotify(var23, var24, var25, var34 ? Block.obsidian.blockID : 0);
 					}
 				}
@@ -245,6 +246,7 @@
 					var24 = var16 + var22;
 					var25 = var17 + (var21 - 1) * var19;
 					var34 = var21 == 0 || var21 == 3 || var22 == -1 || var22 == 3;
+					var1.getChunkFromBlockCoords(var23, var25).playerModified = true;
 					var1.setBlockWithNotify(var23, var24, var25, var34 ? Block.obsidian.blockID : Block.portal.blockID);
 				}
 			}
@@ -256,11 +258,23 @@
 					var23 = var30 + (var21 - 1) * var31;
 					var24 = var16 + var22;
 					var25 = var17 + (var21 - 1) * var19;
+					var1.getChunkFromBlockCoords(var23, var25).playerModified = true;
 					var1.notifyBlocksOfNeighborChange(var23, var24, var25, var1.getBlockId(var23, var24, var25));
 				}
 			}
 		}
 
 		return true;
+	}
+
+	public void createSkyPortal(World var1, Entity var2) {
+		int x = (int)var2.posX;
+		int z = (int)var2.posZ;
+
+		for (int xx = x - 2; xx <= x + 2; xx++) {
+			for (int zz = z - 2; zz <= z + 2; zz++) {
+				var1.setBlock(xx, 63, zz, Block.obsidian.blockID);
+			}
+		}
 	}
 }
--- net/minecraft/src/MathHelper.java
+++ net/minecraft/src/MathHelper.java
@@ -36,6 +36,14 @@
 		return var0 < (double)var2 ? var2 - 1L : var2;
 	}
 
+	public static double floorMod(double x, double y) {
+		double mod = x % y;
+		if (mod < 0) {
+			mod += y;
+		}
+		return mod;
+	}
+
 	public static float abs(float var0) {
 		return var0 >= 0.0F ? var0 : -var0;
 	}
@@ -67,6 +75,43 @@
 	public static int func_35598_a(Random var0, int var1, int var2) {
 		return var1 >= var2 ? var1 : var0.nextInt(var2 - var1 + 1) + var1;
 	}
+
+	public static int clamp(int x, int min, int max) {
+		return Math.min(Math.max(x, min), max);
+	}
+
+	public static float clamp(float x, float min, float max) {
+		return Math.min(Math.max(x, min), max);
+	}
+
+	public static double clamp(double x, double min, double max) {
+		return Math.min(Math.max(x, min), max);
+	}
+
+	public static double squareInOut(double x) {
+		return clamp(2 * x * x, 0.0D, 0.5D) + clamp(1.0D - 2.0D * (1.0D - x) * (1.0D - x) - 0.5D, 0.0D, 0.5D);
+	}
+
+	public static float lerp(float a, float b, float t) {
+		return a + (b - a) * t;
+	}
+
+	public static double lerp(double a, double b, double t) {
+		return a + (b - a) * t;
+	}
+
+	public static double vecAngle(double x1, double y1, double x2, double y2) {
+		double div = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2);
+		return (x1 * x2 + y1 * y2) / div;
+	}
+
+	public static int roundUpToMultiple(int value, int divisor) {
+		return MathHelper.ceilDiv(value, divisor) * divisor;
+	}
+
+	public static int ceilDiv(int a, int b) {
+        return -Math.floorDiv(-a, b);
+    }
 
 	static {
 		for(int var0 = 0; var0 < 65536; ++var0) {
--- net/minecraft/src/RenderEnderman.java
+++ net/minecraft/src/RenderEnderman.java
@@ -19,7 +19,7 @@
 		this.field_35444_c.field_35407_a = var1.func_35176_r() > 0;
 		this.field_35444_c.field_35406_b = var1.field_35187_a;
 		if(var1.field_35187_a) {
-			double var10 = 0.02D;
+			double var10 = Personalization.redEnderman ? 0.05D : 0.02D;
 			var2 += this.field_35445_h.nextGaussian() * var10;
 			var6 += this.field_35445_h.nextGaussian() * var10;
 		}
@@ -45,7 +45,7 @@
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			this.loadTexture("/terrain.png");
-			this.renderBlocks.renderBlockOnInventory(Block.blocksList[var1.func_35176_r()], var1.func_35180_s(), 1.0F);
+			this.renderBlockies.renderBlockOnInventory(Block.blocksList[var1.func_35176_r()], var1.func_35180_s(), 1.0F);
 			GL11.glPopMatrix();
 			GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 		}
@@ -53,10 +53,13 @@
 	}
 
 	protected boolean func_35441_a(EntityEnderman var1, int var2, float var3) {
-		if(var2 != 0) {
+		if(var2 != 0 || Personalization.whiteEnderman) {
 			return false;
 		} else {
-			this.loadTexture("/mob/enderman_eyes.png");
+			this.loadTexture("/mob/enderman" +
+					(Personalization.redEnderman ? "_red_"
+					: Personalization.greenEnderman ? "_green_"
+					: "_") + "eyes.png");
 			float var4 = 1.0F;
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glDisable(GL11.GL_ALPHA_TEST);
--- /dev/null
+++ net/minecraft/src/BlockComputer.java
@@ -1,0 +1,45 @@
+package net.minecraft.src;
+
+public class BlockComputer extends BlockContainer {
+	protected BlockComputer(int var1) {
+		super(var1, Material.circuits);
+		this.blockIndexInTexture = 154;
+	}
+
+	public TileEntity getBlockEntity() {
+		return new TileEntityComputer();
+	}
+
+	public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLiving var5) {
+		int var6 = MathHelper.floor_double((double)(var5.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
+		if(var6 == 0) {
+			var1.setBlockMetadataWithNotify(var2, var3, var4, 2);
+		}
+
+		if(var6 == 1) {
+			var1.setBlockMetadataWithNotify(var2, var3, var4, 5);
+		}
+
+		if(var6 == 2) {
+			var1.setBlockMetadataWithNotify(var2, var3, var4, 3);
+		}
+
+		if(var6 == 3) {
+			var1.setBlockMetadataWithNotify(var2, var3, var4, 4);
+		}
+
+	}
+
+	public int getBlockTextureFromSide(int var1) {
+		return var1 < 2 ? this.blockIndexInTexture - 16 : var1 == 3 ? this.blockIndexInTexture - 1 : this.blockIndexInTexture;
+	}
+
+	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+		if(var5 < 2) {
+			return this.blockIndexInTexture - 16;
+		} else {
+			int var6 = var1.getBlockMetadata(var2, var3, var4);
+			return var5 != var6 ? this.blockIndexInTexture : this.blockIndexInTexture - 1;
+		}
+	}
+}
--- net/minecraft/src/BiomeGenDesert.java
+++ net/minecraft/src/BiomeGenDesert.java
@@ -6,9 +6,17 @@
 		this.spawnableCreatureList.clear();
 		this.topBlock = (byte)Block.sand.blockID;
 		this.fillerBlock = (byte)Block.sand.blockID;
-		this.field_35488_u.field_35911_r = -999;
-		this.field_35488_u.field_35908_u = 2;
-		this.field_35488_u.field_35906_w = 50;
-		this.field_35488_u.field_35916_x = 10;
+		this.decorator.trees = -999;
+		this.decorator.deadBushes = 2;
+		this.decorator.reeds = 50;
+		this.decorator.cacti = 10;
+	}
+
+	public float getMinHeight(int x, int z) {
+		return super.getMinHeight(x, z) + (doHills(x, z) ? 0.1F : 0.0F);
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) + (doHills(x, z) ? 0.5F : 0.0F);
 	}
 }
--- net/minecraft/src/EntityMob.java
+++ net/minecraft/src/EntityMob.java
@@ -2,13 +2,18 @@
 
 public abstract class EntityMob extends EntityCreature implements IMob {
 	protected int attackStrength = 2;
+	protected float attackDist = 2.0F;
+	public boolean hasArmor = Personalization.doChaos();
 
 	public EntityMob(World var1) {
 		super(var1);
-		this.health = 20;
 		this.field_35171_bJ = 5;
 	}
 
+	public int getMaxHealth() {
+		return 20;
+	}
+
 	public void onLivingUpdate() {
 		float var1 = this.getEntityBrightness(1.0F);
 		if(var1 > 0.5F) {
@@ -27,11 +32,15 @@
 	}
 
 	protected Entity findPlayerToAttack() {
-		EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
+		EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, this.sightDist);
 		return var1 != null && this.canEntityBeSeen(var1) ? var1 : null;
 	}
 
 	public boolean attackEntityFrom(DamageSource var1, int var2) {
+		if (this.hasArmor) {
+			var2 = var2 / 3 + 1;
+		}
+
 		if(super.attackEntityFrom(var1, var2)) {
 			Entity var3 = var1.func_35532_a();
 			if(this.riddenByEntity != var3 && this.ridingEntity != var3) {
@@ -53,7 +62,7 @@
 	}
 
 	protected void attackEntity(Entity var1, float var2) {
-		if(this.attackTime <= 0 && var2 < 2.0F && var1.boundingBox.maxY > this.boundingBox.minY && var1.boundingBox.minY < this.boundingBox.maxY) {
+		if(this.attackTime <= 0 && var2 < this.attackDist && var1.boundingBox.maxY > this.boundingBox.minY && var1.boundingBox.minY < this.boundingBox.maxY) {
 			this.attackTime = 20;
 			this.func_35175_b(var1);
 		}
@@ -66,10 +75,12 @@
 
 	public void writeEntityToNBT(NBTTagCompound var1) {
 		super.writeEntityToNBT(var1);
+		var1.setBoolean("HasArmor", this.hasArmor);
 	}
 
 	public void readEntityFromNBT(NBTTagCompound var1) {
 		super.readEntityFromNBT(var1);
+		this.hasArmor = var1.getBoolean("HasArmor");
 	}
 
 	public boolean getCanSpawnHere() {
@@ -89,5 +100,24 @@
 
 			return var4 <= this.rand.nextInt(8) && super.getCanSpawnHere();
 		}
+	}
+
+	public boolean getCanSpawnHereRegardlessOfLight() {
+		return super.getCanSpawnHere();
+	}
+
+	protected int getXpSpammed(EntityPlayer var1) {
+		return 20;
+	}
+
+	protected int getXpSpamGroup(int var1) {
+		if (var1 >= 3 && this.rand.nextInt(2) == 0) {
+			return 3;
+		}
+		return 1;
+	}
+
+	public boolean canWearArmor() {
+		return false;
 	}
 }
--- net/minecraft/src/ModelLargeChest.java
+++ net/minecraft/src/ModelLargeChest.java
@@ -2,17 +2,17 @@
 
 public class ModelLargeChest extends ModelChest {
 	public ModelLargeChest() {
-		this.field_35405_a = (new ModelRenderer(this, 0, 0)).func_35968_a(128, 64);
+		this.field_35405_a = (new ModelRenderer(this, 0, 0)).setTextureSize(128, 64);
 		this.field_35405_a.addBox(0.0F, -5.0F, -14.0F, 30, 5, 14, 0.0F);
 		this.field_35405_a.rotationPointX = 1.0F;
 		this.field_35405_a.rotationPointY = 7.0F;
 		this.field_35405_a.rotationPointZ = 15.0F;
-		this.field_35404_c = (new ModelRenderer(this, 0, 0)).func_35968_a(128, 64);
+		this.field_35404_c = (new ModelRenderer(this, 0, 0)).setTextureSize(128, 64);
 		this.field_35404_c.addBox(-1.0F, -2.0F, -15.0F, 2, 4, 1, 0.0F);
 		this.field_35404_c.rotationPointX = 16.0F;
 		this.field_35404_c.rotationPointY = 7.0F;
 		this.field_35404_c.rotationPointZ = 15.0F;
-		this.field_35403_b = (new ModelRenderer(this, 0, 19)).func_35968_a(128, 64);
+		this.field_35403_b = (new ModelRenderer(this, 0, 19)).setTextureSize(128, 64);
 		this.field_35403_b.addBox(0.0F, 0.0F, 0.0F, 30, 10, 14, 0.0F);
 		this.field_35403_b.rotationPointX = 1.0F;
 		this.field_35403_b.rotationPointY = 6.0F;
--- net/minecraft/src/SaveHandler.java
+++ net/minecraft/src/SaveHandler.java
@@ -13,29 +13,31 @@
 	private static final Logger logger = Logger.getLogger("Minecraft");
 	private final File saveDirectory;
 	private final File playersDirectory;
-	private final File field_28114_d;
-	private final long now = System.currentTimeMillis();
+	private final File mapDataDir;
+	private final long initializationTime = System.currentTimeMillis();
+	private final String saveDirectoryName;
 
 	public SaveHandler(File var1, String var2, boolean var3) {
 		this.saveDirectory = new File(var1, var2);
 		this.saveDirectory.mkdirs();
 		this.playersDirectory = new File(this.saveDirectory, "players");
-		this.field_28114_d = new File(this.saveDirectory, "data");
-		this.field_28114_d.mkdirs();
+		this.mapDataDir = new File(this.saveDirectory, "data");
+		this.mapDataDir.mkdirs();
+		this.saveDirectoryName = var2;
 		if(var3) {
 			this.playersDirectory.mkdirs();
 		}
 
-		this.func_22154_d();
+		this.setSessionLock();
 	}
 
-	private void func_22154_d() {
+	private void setSessionLock() {
 		try {
 			File var1 = new File(this.saveDirectory, "session.lock");
 			DataOutputStream var2 = new DataOutputStream(new FileOutputStream(var1));
 
 			try {
-				var2.writeLong(this.now);
+				var2.writeLong(this.initializationTime);
 			} finally {
 				var2.close();
 			}
@@ -56,7 +58,7 @@
 			DataInputStream var2 = new DataInputStream(new FileInputStream(var1));
 
 			try {
-				if(var2.readLong() != this.now) {
+				if(var2.readLong() != this.initializationTime) {
 					throw new MinecraftException("The save is being accessed from another location, aborting");
 				}
 			} finally {
@@ -69,13 +71,7 @@
 	}
 
 	public IChunkLoader getChunkLoader(WorldProvider var1) {
-		if(var1 instanceof WorldProviderHell) {
-			File var2 = new File(this.saveDirectory, "DIM-1");
-			var2.mkdirs();
-			return new ChunkLoader(var2, true);
-		} else {
-			return new ChunkLoader(this.saveDirectory, true);
-		}
+		throw new RuntimeException("Old Chunk Storage is no longer supported.");
 	}
 
 	public WorldInfo loadWorldInfo() {
@@ -164,7 +160,11 @@
 
 	}
 
-	public File func_28113_a(String var1) {
-		return new File(this.field_28114_d, var1 + ".dat");
+	public File getMapFileFromName(String var1) {
+		return new File(this.mapDataDir, var1 + ".dat");
+	}
+
+	public String getSaveDirectoryName() {
+		return this.saveDirectoryName;
 	}
 }
--- /dev/null
+++ net/minecraft/src/StructureVillageStones.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+class StructureVillageStones extends StructurePieceBlockSelector {
+	public StructureVillageStones() {
+	}
+
+	public void func_35706_a(Random random1, int i2, int i3, int i4, boolean z5) {
+		this.field_35710_a = Block.cobblestone.blockID;
+		if (random1.nextInt(2) == 0) {
+			this.field_35710_a = Block.cobblestoneMossy.blockID;
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/ItemBottle.java
@@ -1,0 +1,100 @@
+package net.minecraft.src;
+
+public class ItemBottle extends ItemFood {
+	public final boolean full;
+
+	public ItemBottle(int var1, int var2) {
+		this(var1, var2, true);
+	}
+
+	public ItemBottle(int var1) {
+		this(var1, 0, false);
+	}
+
+	public ItemBottle(int var1, int var2, boolean var3) {
+		super(var1, var2, 0.0F, false);
+		this.full = var3;
+		this.maxStackSize = var3 ? 1 : 64;
+	}
+
+	public ItemStack func_35413_b(ItemStack var1, World var2, EntityPlayer var3) {
+		if (var1.stackSize == 1) {
+			var1 = new ItemStack(Item.glassBottle);
+		} else {
+			--var1.stackSize;
+			var3.inventory.addItemStackToInventory(new ItemStack(Item.glassBottle));
+		}
+		var3.func_35191_at().drink(this.healAmount);
+
+		if(!var2.multiplayerWorld && this.field_35433_bx > 0 && var2.rand.nextFloat() < this.field_35429_bA) {
+			var3.func_35165_a(new PotionEffect(this.field_35433_bx, this.field_35432_by * 20, this.field_35427_bz));
+		}
+
+		return var1;
+	}
+
+	public EnumAction func_35412_b(ItemStack var1) {
+		return EnumAction.drink;
+	}
+
+	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		if (this.full) {
+			if (Personalization.fastEat) {
+				if (var3.isThirsty()) var1 = this.func_35413_b(var1, var2, var3);
+			} else {
+				var3.func_35199_b(var1, this.func_35411_c(var1));
+			}
+
+			return var1;
+		}
+
+		float var4 = 1.0F;
+		float var5 = var3.prevRotationPitch + (var3.rotationPitch - var3.prevRotationPitch) * var4;
+		float var6 = var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * var4;
+		double var7 = var3.prevPosX + (var3.posX - var3.prevPosX) * (double)var4;
+		double var9 = var3.prevPosY + (var3.posY - var3.prevPosY) * (double)var4 + 1.62D - (double)var3.yOffset;
+		double var11 = var3.prevPosZ + (var3.posZ - var3.prevPosZ) * (double)var4;
+		Vec3D var13 = Vec3D.createVector(var7, var9, var11);
+		float var14 = MathHelper.cos(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
+		float var15 = MathHelper.sin(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
+		float var16 = -MathHelper.cos(-var5 * ((float)Math.PI / 180.0F));
+		float var17 = MathHelper.sin(-var5 * ((float)Math.PI / 180.0F));
+		float var18 = var15 * var16;
+		float var20 = var14 * var16;
+		double var21 = 5.0D;
+		Vec3D var23 = var13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
+		MovingObjectPosition var24 = var2.rayTraceBlocks_do(var13, var23, true);
+		if(var24 == null) {
+			return var1;
+		} else {
+			if(var24.typeOfHit == EnumMovingObjectType.TILE) {
+				int var25 = var24.blockX;
+				int var26 = var24.blockY;
+				int var27 = var24.blockZ;
+				if(!var2.canMineBlock(var3, var25, var26, var27)) {
+					return var1;
+				}
+
+				if(!var3.func_35190_e(var25, var26, var27)) {
+					return var1;
+				}
+
+				if(var2.getBlockMaterial(var25, var26, var27) == Material.water && var2.getBlockMetadata(var25, var26, var27) == 0) {
+					Item item = Item.waterBottle;
+					if (var2.getWorldChunkManager().getBiomeGenAt(var25, var27) == BiomeGenBase.ocean) {
+						item = Item.saltWaterBottle;
+					}
+
+					if (var1.stackSize == 1) {
+						var1 = new ItemStack(item);
+					} else {
+						--var1.stackSize;
+						var3.inventory.addItemStackToInventory(new ItemStack(item));
+					}
+				}
+			}
+
+			return var1;
+		}
+	}
+}
--- net/minecraft/src/WorldGenTrees.java
+++ net/minecraft/src/WorldGenTrees.java
@@ -3,87 +3,163 @@
 import java.util.Random;
 
 public class WorldGenTrees extends WorldGenerator {
+	private final int field_48202_a;
+	private final int field_48202_aa;
+	private final boolean field_48200_b;
+	private final int field_48201_c;
+	private final int field_48199_d;
+
+	public WorldGenTrees() {
+		this(4, 3, 0, 0, false);
+	}
+
+	public WorldGenTrees(int var1, int var2, int var3, int var4, boolean var5) {
+		this.field_48202_a = var1;
+		this.field_48202_aa = var2;
+		this.field_48201_c = var3;
+		this.field_48199_d = var4;
+		this.field_48200_b = var5;
+	}
+
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(3) + 4;
+		boolean colden = Personalization.coldenOaks && var1.getWorldChunkManager().getBiomeGenAt(var3, var5).getEnableSnow();
+		int field_48201_c = colden ? 1 : this.field_48201_c;
+		int field_48199_d = colden ? 1 : this.field_48199_d;
+
+		int var6 = Math.max(var2.nextInt(this.field_48202_aa - Math.round(Personalization.entropy * (this.field_48202_aa / 3.0F))) + this.field_48202_a - Math.round(Personalization.entropy * (this.field_48202_a / 2.0F)), this.field_48202_a);
 		boolean var7 = true;
-		if(var4 >= 1) {
-			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
-				int var8;
-				int var10;
-				int var11;
-				int var12;
-				for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
-					byte var9 = 1;
-					if(var8 == var4) {
-						var9 = 0;
-					}
-
-					if(var8 >= var4 + 1 + var6 - 2) {
-						var9 = 2;
-					}
-
-					for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
-						for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-							if(var8 >= 0) {
-								var1.getClass();
-								if(var8 < 128) {
-									var12 = var1.getBlockId(var10, var8, var11);
-									if(var12 != 0 && var12 != Block.leaves.blockID) {
-										var7 = false;
-									}
-									continue;
-								}
+		if(var4 >= 1 && var4 + var6 + 1 <= 256) {
+			int var8;
+			byte var9;
+			int var11;
+			int var12;
+			for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
+				var9 = 1;
+				if(var8 == var4) {
+					var9 = 0;
+				}
+
+				if(var8 >= var4 + 1 + var6 - 2) {
+					var9 = 2;
+				}
+
+				for(int var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
+					for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
+						if(var8 >= 0 && var8 < 256) {
+							var12 = var1.getBlockId(var10, var8, var11);
+							if(var12 != 0 && var12 != Block.leaves.blockID && var12 != Block.grass.blockID && var12 != Block.dirt.blockID && var12 != Block.wood.blockID) {
+								var7 = false;
 							}
-
+						} else {
 							var7 = false;
 						}
 					}
 				}
-
-				if(!var7) {
-					return false;
-				}
-
-				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if(var8 == Block.grass.blockID || var8 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
-						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
-
-						int var16;
-						for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
-							var10 = var16 - (var4 + var6);
-							var11 = 1 - var10 / 2;
-
-							for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-								int var13 = var12 - var3;
-
-								for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
-									int var15 = var14 - var5;
-									if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
-										var1.setBlock(var12, var16, var14, Block.leaves.blockID);
-									}
-								}
-							}
-						}
-
-						for(var16 = 0; var16 < var6; ++var16) {
-							var10 = var1.getBlockId(var3, var4 + var16, var5);
-							if(var10 == 0 || var10 == Block.leaves.blockID) {
-								var1.setBlock(var3, var4 + var16, var5, Block.wood.blockID);
-							}
-						}
-
-						return true;
-					}
-				}
-
+			}
+
+			if(!var7) {
 				return false;
-			}
-		}
-
-		return false;
+			} else {
+				var8 = var1.getBlockId(var3, var4 - 1, var5);
+				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 256 - var6 - 1) {
+					this.setBlockAndMetadata(var1, var3, var4 - 1, var5, Block.dirt.blockID, 0);
+					var9 = 3;
+					byte var18 = 0;
+
+					int var13;
+					int var14;
+					int var15;
+					for(var11 = var4 - var9 + var6; var11 <= var4 + var6; ++var11) {
+						var12 = var11 - (var4 + var6);
+						var13 = var18 + 1 - var12 / 2;
+
+						for(var14 = var3 - var13; var14 <= var3 + var13; ++var14) {
+							var15 = var14 - var3;
+
+							for(int var16 = var5 - var13; var16 <= var5 + var13; ++var16) {
+								int var17 = var16 - var5;
+								if((Math.abs(var15) != var13 || Math.abs(var17) != var13 || var2.nextInt(2) != 0 && var12 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var14, var11, var16)]) {
+									this.setBlockAndMetadata(var1, var14, var11, var16, Block.leaves.blockID, field_48199_d);
+								}
+							}
+						}
+					}
+
+					for(var11 = 0; var11 < var6; ++var11) {
+						var12 = var1.getBlockId(var3, var4 + var11, var5);
+						if(var12 == 0 || var12 == Block.leaves.blockID) {
+							this.setBlockAndMetadata(var1, var3, var4 + var11, var5, Block.wood.blockID, field_48201_c);
+							if(this.field_48200_b && var11 > 0) {
+								if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 - 1, var4 + var11, var5)) {
+									this.setBlockAndMetadata(var1, var3 - 1, var4 + var11, var5, Block.field_35278_bv.blockID, 8);
+								}
+
+								if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 + 1, var4 + var11, var5)) {
+									this.setBlockAndMetadata(var1, var3 + 1, var4 + var11, var5, Block.field_35278_bv.blockID, 2);
+								}
+
+								if(var2.nextInt(3) > 0 && var1.isAirBlock(var3, var4 + var11, var5 - 1)) {
+									this.setBlockAndMetadata(var1, var3, var4 + var11, var5 - 1, Block.field_35278_bv.blockID, 1);
+								}
+
+								if(var2.nextInt(3) > 0 && var1.isAirBlock(var3, var4 + var11, var5 + 1)) {
+									this.setBlockAndMetadata(var1, var3, var4 + var11, var5 + 1, Block.field_35278_bv.blockID, 4);
+								}
+							}
+						}
+					}
+
+					if(this.field_48200_b) {
+						for(var11 = var4 - 3 + var6; var11 <= var4 + var6; ++var11) {
+							var12 = var11 - (var4 + var6);
+							var13 = 2 - var12 / 2;
+
+							for(var14 = var3 - var13; var14 <= var3 + var13; ++var14) {
+								for(var15 = var5 - var13; var15 <= var5 + var13; ++var15) {
+									if(var1.getBlockId(var14, var11, var15) == Block.leaves.blockID) {
+										if(var2.nextInt(4) == 0 && var1.getBlockId(var14 - 1, var11, var15) == 0) {
+											this.func_48198_a(var1, var14 - 1, var11, var15, 8);
+										}
+
+										if(var2.nextInt(4) == 0 && var1.getBlockId(var14 + 1, var11, var15) == 0) {
+											this.func_48198_a(var1, var14 + 1, var11, var15, 2);
+										}
+
+										if(var2.nextInt(4) == 0 && var1.getBlockId(var14, var11, var15 - 1) == 0) {
+											this.func_48198_a(var1, var14, var11, var15 - 1, 1);
+										}
+
+										if(var2.nextInt(4) == 0 && var1.getBlockId(var14, var11, var15 + 1) == 0) {
+											this.func_48198_a(var1, var14, var11, var15 + 1, 4);
+										}
+									}
+								}
+							}
+						}
+					}
+
+					return true;
+				} else {
+					return false;
+				}
+			}
+		} else {
+			return false;
+		}
+	}
+
+	private void func_48198_a(World var1, int var2, int var3, int var4, int var5) {
+		this.setBlockAndMetadata(var1, var2, var3, var4, Block.field_35278_bv.blockID, var5);
+		int var6 = 4;
+
+		while(true) {
+			--var3;
+			if(var1.getBlockId(var2, var3, var4) != 0 || var6 <= 0) {
+				return;
+			}
+
+			this.setBlockAndMetadata(var1, var2, var3, var4, Block.field_35278_bv.blockID, var5);
+			--var6;
+		}
 	}
 }
--- net/minecraft/src/ChunkProviderHell.java
+++ net/minecraft/src/ChunkProviderHell.java
@@ -25,7 +25,7 @@
 
 	public ChunkProviderHell(World var1, long var2) {
 		this.worldObj = var1;
-		this.hellRNG = new Random(var2);
+		this.hellRNG = Personalization.random(var2);
 		this.field_4169_i = new NoiseGeneratorOctaves(this.hellRNG, 16);
 		this.field_4168_j = new NoiseGeneratorOctaves(this.hellRNG, 16);
 		this.field_4167_k = new NoiseGeneratorOctaves(this.hellRNG, 8);
@@ -388,6 +388,17 @@
 			var8 = var10000.nextInt(128);
 			var9 = var5 + this.hellRNG.nextInt(16) + 8;
 			(new WorldGenFlowers(Block.mushroomRed.blockID)).generate(this.worldObj, this.hellRNG, var7, var8, var9);
+		}
+
+		WorldGenMinable quartz = new WorldGenMinable(Block.oreQuartz.blockID, 13);
+
+		if (Personalization.genQuartz) {
+			for (var7 = 0; var7 < 16; ++var7) {
+				var8 = var4 + this.hellRNG.nextInt(16);
+				var9 = this.hellRNG.nextInt(108) + 10;
+				var10 = var5 + this.hellRNG.nextInt(16);
+				quartz.generate(this.worldObj, this.hellRNG, var8, var9, var10);
+			}
 		}
 
 		BlockSand.fallInstantly = false;
--- /dev/null
+++ net/minecraft/src/Xoroshiro128PlusPlus.java
@@ -1,0 +1,72 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class Xoroshiro128PlusPlus extends Random {
+	private final long[] s = new long[2];
+
+	public Xoroshiro128PlusPlus() {
+		this(System.nanoTime());
+	}
+
+	public Xoroshiro128PlusPlus(long seed) {
+		for (int i = 0; i < s.length; i++) {
+			long z = (seed += 0x9e3779b97f4a7c15L);
+		    z = (z ^ (z >>> 30)) * 0xbf58476d1ce4e5b9L;
+	        z = (z ^ (z >>> 27)) * 0x94d049bb133111ebL;
+			s[i] = z ^ z >>> 31;
+		}
+	}
+
+	private static long rotl(final long x, int k) {
+		return (x << k) | (x >>> (64 - k));
+	}
+
+	public long nextLong() {
+		final long s0 = s[0];
+		long s1 = s[1];
+		final long result = rotl(s0 + s1, 17) + s0;
+
+		s1 ^= s0;
+		s[0] = rotl(s0, 49) ^ s1 ^ (s1 << 21);
+		s[1] = rotl(s1, 28);
+
+		return result;
+	}
+
+	public void jump() {
+		jump(false);
+	}
+
+	public void longJump() {
+		jump(true);
+	}
+
+	private void jump(boolean longJump) {
+		final long[] jump = longJump
+				? new long[]{0x360fd5f2cf8d5d99L, 0x9c6e6877736c46e3L}
+				: new long[]{0x2bd7a6a6e99c2ddcL, 0x0992ccaf6a6fca05L};
+
+		int s0 = 0, s1 = 0;
+		for (long l : jump) {
+			for (int b = 0; b < 64; b++) {
+				if ((l & 1L << b) != 0) {
+					s0 ^= (int)s[0];
+					s1 ^= (int)s[1];
+				}
+				nextLong();
+			}
+		}
+
+		s[0] = s0;
+		s[1] = s1;
+	}
+
+	protected int next(int bits) {
+		return nextInt() >>> (32 - bits);
+	}
+
+	public int nextInt() {
+		return (int)nextLong();
+	}
+}
--- net/minecraft/src/EmptyChunk.java
+++ net/minecraft/src/EmptyChunk.java
@@ -9,11 +9,6 @@
 		this.neverSave = true;
 	}
 
-	public EmptyChunk(World var1, byte[] var2, int var3, int var4) {
-		super(var1, var2, var3, var4);
-		this.neverSave = true;
-	}
-
 	public boolean isAtLocation(int var1, int var2) {
 		return var1 == this.xPosition && var2 == this.zPosition;
 	}
@@ -22,9 +17,6 @@
 		return 0;
 	}
 
-	public void func_1014_a() {
-	}
-
 	public void generateHeightMap() {
 	}
 
@@ -38,6 +30,10 @@
 		return 0;
 	}
 
+	public int getBlockLightOpacity(int var1, int var2, int var3) {
+		return 255;
+	}
+
 	public boolean setBlockIDWithMetadata(int var1, int var2, int var3, int var4, int var5) {
 		return true;
 	}
@@ -50,7 +46,8 @@
 		return 0;
 	}
 
-	public void setBlockMetadata(int var1, int var2, int var3, int var4) {
+	public boolean setBlockMetadata(int var1, int var2, int var3, int var4) {
+		return false;
 	}
 
 	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
@@ -109,19 +106,15 @@
 		return false;
 	}
 
-	public int setChunkData(byte[] var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8) {
-		int var9 = var5 - var2;
-		int var10 = var6 - var3;
-		int var11 = var7 - var4;
-		int var12 = var9 * var10 * var11;
-		return var12 + var12 / 2 * 3;
-	}
-
-	public Random func_997_a(long var1) {
+	public Random getRandomWithSeed(long var1) {
 		return new Random(this.worldObj.getRandomSeed() + (long)(this.xPosition * this.xPosition * 4987142) + (long)(this.xPosition * 5947611) + (long)(this.zPosition * this.zPosition) * 4392871L + (long)(this.zPosition * 389711) ^ var1);
 	}
 
-	public boolean func_21167_h() {
+	public boolean isEmpty() {
+		return true;
+	}
+
+	public boolean getAreLevelsEmpty(int var1, int var2) {
 		return true;
 	}
 }
--- /dev/null
+++ net/minecraft/src/EntityFakePlayer.java
@@ -1,0 +1,82 @@
+package net.minecraft.src;
+
+public class EntityFakePlayer extends EntityCreature {
+	public EntityFakePlayer(World var1) {
+		super(var1);
+		this.texture = Personalization.googlyStaggo ? "/mob/googlystaggo.png" : "/mob/char.png";
+
+		if (this.worldObj.playerEntities.size() > 0) {
+			EntityPlayer player = (EntityPlayer)this.worldObj.playerEntities.get(this.rand.nextInt(this.worldObj.playerEntities.size()));
+			this.skinUrl = player.skinUrl;
+		}
+
+		this.mirage = Personalization.googlyStaggo || this.rand.nextInt(10) != 0;
+	}
+
+	protected Entity findPlayerToAttack() {
+		if (this.entityToAttack != null) {
+			return this.entityToAttack;
+		} else {
+			EntityPlayer player = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
+			if (player != null && player.canEntityBeSeen(this)) {
+				return player;
+			}
+		}
+		return null;
+	}
+
+	public boolean attackEntityFrom(DamageSource var1, int var2) {
+		return super.attackEntityFrom(var1, 0);
+	}
+
+	public void onLivingUpdate() {
+		if (!Personalization.googlyStaggo && (this.skinUrl == null || this.skinUrl.isEmpty()) && this.worldObj.playerEntities.size() > 0) {
+			EntityPlayer player = (EntityPlayer)this.worldObj.playerEntities.get(this.rand.nextInt(this.worldObj.playerEntities.size()));
+			this.skinUrl = player.skinUrl;
+		}
+
+		if (this.mirage && this.ticksExisted > 1200 && this.rand.nextInt(100) == 0) {
+			this.setEntityDead();
+		}
+
+		super.onLivingUpdate();
+	}
+
+	protected void updateEntityActionState() {
+		super.updateEntityActionState();
+		if (!this.mirage) {
+			EntityPlayer player = this.worldObj.getClosestPlayerToEntity(this, 32.0D);
+			if (player != null && this.entityToAttack == null) {
+				this.faceEntity(player, 30.0F, 30.0F);
+			}
+		}
+	}
+
+	protected void attackEntity(Entity var1, float var2) {
+		double xDiff = var1.posX - this.posX;
+		double yDiff = var1.posY - this.height / 2.0F - this.posY;
+		double zDiff = var1.posZ - this.posZ;
+		this.rotationYaw = (float)(Math.atan2(zDiff, xDiff) * 180.0D / Math.PI) - 90.0F;
+
+		this.noClip = true;
+		this.motionX = xDiff * 0.25D;
+		this.motionY = yDiff * 0.25D;
+		this.motionZ = zDiff * 0.25D;
+		this.moveEntity(this.motionX, this.motionY, this.motionZ);
+		this.worldObj.playSoundAtEntity(this, "random.overamalgamation", 0.25F, 1.0F);
+
+		if (var2 < 2.0F) {
+			EntityPlayer player = (EntityPlayer)var1;
+			player.attackEntityFrom(DamageSource.func_35525_a(this), 1);
+			player.hurtTime = player.maxHurtTime = player.heartsLife = 0;
+		}
+	}
+
+	protected float getSoundVolume() {
+		return Personalization.googlyStaggo ? 4.0F : 0.0F;
+	}
+
+	protected String getLivingSound() {
+		return "mob.staggo.idle";
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiUpdate.java
@@ -1,0 +1,77 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+import java.io.IOException;
+import java.util.Random;
+
+public class GuiUpdate extends GuiScreen {
+	private static final String[] tips = {
+			"Tip: Criss cross craft your quartz for an island getaway!",
+			"Tip: Unlease fire on the crystal frame and whoosh up into the skies (or your end)!",
+			"Tip: Teach a man to fish and you feed him with new wonders!",
+			"Tip: A quartz compass is excellent at guiding lost travellers!",
+			"Tip: Under specific conditions, food can be an explosive substance!",
+			"Tip: Please refrain from looking at any abnormal endermen.",
+			"Tip: The End is very desolate; we are working on this!",
+			"Tip: Feel free to take a sip from glass bottles!",
+			"Tip: Criss cross craft your quartz with copper for a special getaway!",
+			"Tip: Endermen, blazes and copper are an interesting mix!",
+			"Tip: Please report bugs to https://bugs.mojang.com/projects/MC."
+	};
+	private static final Random random = new Random();
+	private final int tip = random.nextInt(tips.length);
+	private boolean repersonalize = true;
+	private boolean notNow = false;
+
+	public GuiUpdate dontRepersonalize() {
+		this.repersonalize = false;
+		return this;
+	}
+
+	public GuiUpdate allowNotNow() {
+		this.notNow = true;
+		return this;
+	}
+
+	public void initGui() {
+		GuiButton yesButton = new GuiButton(0, this.width / 2 - 64, this.height / 2, 56, 20, "Yes");
+		GuiButton notNowButton = new GuiButton(1, this.width / 2 + 8, this.height / 2, 56, 20, "Not now");
+		notNowButton.enabled = this.notNow;
+
+		this.controlList.add(yesButton);
+		this.controlList.add(notNowButton);
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		if (this.repersonalize) {
+			Personalization.repersonalize();
+		}
+		if (this.game.theWorld != null && var1.id == 0) {
+			this.game.refreshWorld();
+		}
+		try {
+			Personalization.saveOptions();
+		} catch (IOException e) {
+			// Eh, whatever.
+		}
+		this.game.displayGuiScreen(null);
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawBackground(0);
+		this.drawCenteredString(this.fontRenderer, "Would you like to update?", this.width / 2, this.height / 2 - 16, 0xC0C0C0);
+		this.drawCenteredString(this.fontRenderer, tips[tip], this.width / 2, this.height - 32, 5263440);
+
+		GL11.glPushMatrix();
+		GL11.glTranslatef(this.width / 2.0F, this.height / 2.0F - 66.0F, 0);
+		GL11.glScalef(2.0F, 2.0F, 2.0F);
+		this.drawCenteredString(this.fontRenderer, "New update available", 0, 0, 0xC0C0C0);
+		GL11.glPopMatrix();
+
+		super.drawScreen(var1, var2, var3);
+	}
+
+	public void handleKeyboardInput() {
+	}
+}
--- net/minecraft/src/BlockDirt.java
+++ net/minecraft/src/BlockDirt.java
@@ -4,4 +4,21 @@
 	protected BlockDirt(int var1, int var2) {
 		super(var1, var2, Material.ground);
 	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return var2 == 1 ? 187
+				: var2 == 2 ? var1 == 1 ? 155 : var1 != 0 ? 171 : 2
+				: this.blockIndexInTexture;
+	}
+
+	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+		int texture = super.getBlockTexture(var1, var2, var3, var4, var5);
+		if (texture == 171) {
+			Material var6 = var1.getBlockMaterial(var2, var3 + 1, var4);
+			if (var6 == Material.snow || var6 == Material.craftedSnow) {
+				texture = 68;
+			}
+		}
+		return texture;
+	}
 }
--- net/minecraft/src/ModelChest.java
+++ net/minecraft/src/ModelChest.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class ModelChest extends ModelBase {
-	public ModelRenderer field_35405_a = (new ModelRenderer(this, 0, 0)).func_35968_a(64, 64);
+	public ModelRenderer field_35405_a = (new ModelRenderer(this, 0, 0)).setTextureSize(64, 64);
 	public ModelRenderer field_35403_b;
 	public ModelRenderer field_35404_c;
 
@@ -10,12 +10,12 @@
 		this.field_35405_a.rotationPointX = 1.0F;
 		this.field_35405_a.rotationPointY = 7.0F;
 		this.field_35405_a.rotationPointZ = 15.0F;
-		this.field_35404_c = (new ModelRenderer(this, 0, 0)).func_35968_a(64, 64);
+		this.field_35404_c = (new ModelRenderer(this, 0, 0)).setTextureSize(64, 64);
 		this.field_35404_c.addBox(-1.0F, -2.0F, -15.0F, 2, 4, 1, 0.0F);
 		this.field_35404_c.rotationPointX = 8.0F;
 		this.field_35404_c.rotationPointY = 7.0F;
 		this.field_35404_c.rotationPointZ = 15.0F;
-		this.field_35403_b = (new ModelRenderer(this, 0, 19)).func_35968_a(64, 64);
+		this.field_35403_b = (new ModelRenderer(this, 0, 19)).setTextureSize(64, 64);
 		this.field_35403_b.addBox(0.0F, 0.0F, 0.0F, 14, 10, 14, 0.0F);
 		this.field_35403_b.rotationPointX = 1.0F;
 		this.field_35403_b.rotationPointY = 6.0F;
--- net/minecraft/src/BlockPortal.java
+++ net/minecraft/src/BlockPortal.java
@@ -14,7 +14,11 @@
 	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
 		float var5;
 		float var6;
-		if(var1.getBlockId(var2 - 1, var3, var4) != this.blockID && var1.getBlockId(var2 + 1, var3, var4) != this.blockID) {
+		if(var1.getBlockMetadata(var2, var3, var4) == 1 || var1.getBlockMetadata(var2, var3, var4) == 2) {
+			var5 = 0.5F - 2.0F / 16.0F;
+			var6 = 0.5F + 2.0F / 16.0F;
+			this.setBlockBounds(0.0F, var5, 0.0F, 1.0F, var6, 1.0F);
+		} else if(var1.getBlockId(var2 - 1, var3, var4) != this.blockID && var1.getBlockId(var2 + 1, var3, var4) != this.blockID) {
 			var5 = 2.0F / 16.0F;
 			var6 = 0.5F;
 			this.setBlockBounds(0.5F - var5, 0.0F, 0.5F - var6, 0.5F + var5, 1.0F, 0.5F + var6);
@@ -26,6 +30,16 @@
 
 	}
 
+	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
+		int meta = var1.getBlockMetadata(var2, var3, var4);
+		if (meta == 1) {
+			return Personalization.endSky ? 0 : 0x0000FF;
+		} else if (meta == 2) {
+			return 0xFFFF00;
+		}
+		return super.colorMultiplier(var1, var2, var3, var4);
+	}
+
 	public boolean isOpaqueCube() {
 		return false;
 	}
@@ -84,7 +98,43 @@
 		}
 	}
 
+	public boolean tryToCreateSkyPortal(World var1, int var2, int var3, int var4, int var5, int var6) {
+		for (int x = -2; x <= 2; x++) {
+			for (int z = -2; z <= 2; z++) {
+				int ax = Math.abs(x);
+				int az = Math.abs(z);
+				int xx = var2 + x;
+				int zz = var4 + z;
+				int b = var1.getBlockId(xx, var3, zz);
+				int m = var1.getBlockMetadata(xx, var3, zz);
+
+				if (ax < 2 && az < 2) {
+					if (b != 0 && b != Block.fire.blockID) {
+						return false;
+					}
+				} else if (ax != az) {
+					if (b != var5 || m != 1) {
+						return false;
+					}
+				}
+			}
+		}
+
+		for (int x = -1; x <= 1; x++) {
+			for (int z = -1; z <= 1; z++) {
+				int xx = var2 + x;
+				int zz = var4 + z;
+				var1.setBlockAndMetadataWithNotify(xx, var3, zz, Block.portal.blockID, var6);
+			}
+		}
+
+		return true;
+	}
+
 	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+		int meta = var1.getBlockMetadata(var2, var3, var4);
+		if (meta == 1 || meta == 2) return;
+
 		byte var6 = 0;
 		byte var7 = 1;
 		if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID || var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
@@ -118,7 +168,14 @@
 	}
 
 	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
+		int x = var5 == 4 ? var2 + 1 : var5 == 5 ? var2 - 1 : var2;
+		int y = var5 == 0 ? var3 + 1 : var5 == 1 ? var3 - 1 : var3;
+		int z = var5 == 2 ? var4 + 1 : var5 == 3 ? var4 - 1 : var4;
+
+		int meta = var1.getBlockMetadata(x, y, z);
+		if (meta == 1 || meta == 2) {
+			return true;
+		} else if(var1.getBlockId(var2, var3, var4) == this.blockID) {
 			return false;
 		} else {
 			boolean var6 = var1.getBlockId(var2 - 1, var3, var4) == this.blockID && var1.getBlockId(var2 - 2, var3, var4) != this.blockID;
@@ -141,14 +198,18 @@
 
 	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
 		if(var5.ridingEntity == null && var5.riddenByEntity == null) {
-			var5.setInPortal();
+			int meta = var1.getBlockMetadata(var2, var3, var4);
+			var5.setInPortal(meta);
 		}
 
 	}
 
 	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
+		int meta = var1.getBlockMetadata(var2, var3, var4);
+
 		if(var5.nextInt(100) == 0) {
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "portal.portal", 1.0F, var5.nextFloat() * 0.4F + 0.8F);
+			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "portal.portal", 1.0F,
+					meta == 1 ? var5.nextFloat() * 0.5F + (Personalization.endSky ? 0.25F : 1.5F) : var5.nextFloat() * 0.4F + 0.8F);
 		}
 
 		for(int var6 = 0; var6 < 4; ++var6) {
--- net/minecraft/src/TileEntityFurnace.java
+++ net/minecraft/src/TileEntityFurnace.java
@@ -1,6 +1,6 @@
 package net.minecraft.src;
 
-public class TileEntityFurnace extends TileEntity implements IInventory {
+public class TileEntityFurnace extends TileEntityContainer {
 	private ItemStack[] furnaceItemStacks = new ItemStack[3];
 	public int furnaceBurnTime = 0;
 	public int currentItemBurnTime = 0;
--- net/minecraft/src/WorldProvider.java
+++ net/minecraft/src/WorldProvider.java
@@ -6,9 +6,11 @@
 	public boolean isNether = false;
 	public boolean isHellWorld = false;
 	public boolean hasNoSky = false;
+	public boolean isSkyWorld = false;
 	public float[] lightBrightnessTable = new float[16];
 	public int worldType = 0;
 	private float[] colorsSunriseSunset = new float[4];
+	public boolean endForced;
 
 	public final void registerWorld(World var1) {
 		this.worldObj = var1;
@@ -75,21 +77,35 @@
 	}
 
 	public Vec3D func_4096_a(float var1, float var2) {
-		float var3 = MathHelper.cos(var1 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-		if(var3 < 0.0F) {
-			var3 = 0.0F;
+		float var3 = MathHelper.cos(var1 * (float)Math.PI * 2.0F) * 2.0F + (0.5F - Personalization.entropy * 0.3F);
+		float eFactor = Math.max(-Personalization.entropy * 0.15F, 0.0F);
+		if(var3 < eFactor) {
+			var3 = eFactor;
 		}
 
 		if(var3 > 1.0F) {
 			var3 = 1.0F;
 		}
 
-		float var4 = 192.0F / 255.0F;
-		float var5 = 216.0F / 255.0F;
-		float var6 = 1.0F;
-		var4 *= var3 * 0.94F + 0.06F;
-		var5 *= var3 * 0.94F + 0.06F;
-		var6 *= var3 * 0.91F + 0.09F;
+		float var4;
+		float var5;
+		float var6;
+		if (Personalization.pe8env || Personalization.pe7env) {
+			var4 = 0x7b / 255.0F;
+			var5 = 0xca / 255.0F;
+			var6 = 0xff / 255.0F;
+		} else {
+			var4 = 192.0F / 255.0F;
+			var5 = 216.0F / 255.0F;
+			var6 = 1.0F;
+		}
+
+		eFactor = Math.max(Personalization.entropy, 0.0F);
+		float var3a = MathHelper.lerp(var3 * 0.94F + 0.06F, var3, eFactor);
+		float var3b = MathHelper.lerp(var3 * 0.91F + 0.09F, var3, eFactor);
+		var4 *= var3a;
+		var5 *= var3a;
+		var6 *= var3b;
 		return Vec3D.createVector((double)var4, (double)var5, (double)var6);
 	}
 
@@ -98,12 +114,19 @@
 	}
 
 	public static WorldProvider getProviderForDimension(int var0) {
-		return (WorldProvider)(var0 == -1 ? new WorldProviderHell() : (var0 == 0 ? new WorldProviderSurface() : (var0 == 1 ? new WorldProviderSky() : null)));
+		switch (var0) {
+			case -2: return new WorldProviderCaverns();
+			case -1: return new WorldProviderHell();
+			case 0: return new WorldProviderSurface();
+			case 1: return new WorldProviderSky();
+			case 2: return new WorldProviderOffices();
+			case 3: return new WorldProviderSky().forceEnd();
+			default: return null;
+		}
 	}
 
 	public float getCloudHeight() {
-		this.worldObj.getClass();
-		return 128.0F;
+		return Personalization.alphaTextures ? 108.0F : 128.0F;
 	}
 
 	public boolean func_28112_c() {
--- net/minecraft/src/TileEntityRendererPiston.java
+++ net/minecraft/src/TileEntityRendererPiston.java
@@ -38,7 +38,7 @@
 
 			var10.setTranslationD(0.0D, 0.0D, 0.0D);
 			var10.draw();
-			RenderHelper.enableStandardItemLighting();
+			RenderHelper.enableStandardEntityLighting();
 		}
 
 	}
--- net/minecraft/src/BiomeGenForest.java
+++ net/minecraft/src/BiomeGenForest.java
@@ -3,14 +3,40 @@
 import java.util.Random;
 
 public class BiomeGenForest extends BiomeGenBase {
+	private WorldGenerator grass;
+
 	public BiomeGenForest(int var1) {
 		super(var1);
 		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 5, 4, 4));
-		this.field_35488_u.field_35911_r = 10;
-		this.field_35488_u.field_35909_t = 2;
+		this.decorator.trees = 10;
+		this.decorator.grass = 2;
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return (WorldGenerator)(var1.nextInt(5) == 0 ? this.field_35481_B : (var1.nextInt(10) == 0 ? this.field_35480_A : this.field_35493_z));
+		return var1.nextInt(5) == 0 && !Personalization.terrain415 && !Personalization.oakOnly ? this.field_35481_B
+				: var1.nextInt(10 + Math.round(Personalization.entropy * 5.0F)) == 0 || Personalization.terrain415 ? this.field_35480_A
+				: this.field_35493_z;
+	}
+
+	public WorldGenerator getRandomWorldGenForGrass(Random var1) {
+		return this.grass;
+	}
+
+	public void func_35477_a(World var1, Random var2, int var3, int var4) {
+		boolean flowers = doMutation(var3, var4) && Personalization.flowerForests;
+		this.decorator.trees = flowers ? 6 : 10;
+		this.decorator.flowers = flowers ? 500 : 2;
+		this.decorator.grass = flowers ? 5 : 2;
+		this.grass = flowers ? new WorldGenFlowers(Block.plantYellow.blockID + var2.nextInt(2)) : super.getRandomWorldGenForGrass(var2);
+
+		super.func_35477_a(var1, var2, var3, var4);
+	}
+
+	public float getMinHeight(int x, int z) {
+		return super.getMinHeight(x, z) + (doHills(x, z) ? 0.1F : 0.0F);
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) + (doHills(x, z) ? 0.3F : 0.0F);
 	}
 }
--- net/minecraft/src/EntityPigZombie.java
+++ net/minecraft/src/EntityPigZombie.java
@@ -9,7 +9,7 @@
 
 	public EntityPigZombie(World var1) {
 		super(var1);
-		this.texture = "/mob/pigzombie.png";
+		this.texture = Personalization.bloodyPigmen ? "/mob/pigzombie-bloody.png" : "/mob/pigzombie.png";
 		this.moveSpeed = 0.5F;
 		this.attackStrength = 5;
 		this.isImmuneToFire = true;
@@ -39,7 +39,7 @@
 	}
 
 	protected Entity findPlayerToAttack() {
-		return this.angerLevel == 0 ? null : super.findPlayerToAttack();
+		return this.angerLevel == 0 && !Personalization.bloodyPigmen ? null : super.findPlayerToAttack();
 	}
 
 	public void onLivingUpdate() {
--- net/minecraft/src/EntityCaveSpider.java
+++ net/minecraft/src/EntityCaveSpider.java
@@ -33,4 +33,12 @@
 			return false;
 		}
 	}
+
+	protected int getXpSpammed(EntityPlayer var1) {
+		return 30;
+	}
+
+	protected int getXpSpamGroup(int var1) {
+		return 3;
+	}
 }
--- net/minecraft/src/GenLayerRiver.java
+++ net/minecraft/src/GenLayerRiver.java
@@ -25,10 +25,10 @@
 					if(var17 == var13 && var17 == var15 && var17 == var14 && var17 == var16) {
 						var10[var12 + var11 * var3] = -1;
 					} else {
-						var10[var12 + var11 * var3] = BiomeGenBase.field_35487_i.field_35494_y;
+						var10[var12 + var11 * var3] = BiomeGenBase.river.field_35494_y;
 					}
 				} else {
-					var10[var12 + var11 * var3] = BiomeGenBase.field_35487_i.field_35494_y;
+					var10[var12 + var11 * var3] = BiomeGenBase.river.field_35494_y;
 				}
 			}
 		}
--- net/minecraft/src/GenLayer.java
+++ net/minecraft/src/GenLayer.java
@@ -7,51 +7,102 @@
 	private long field_35501_d;
 
 	public static GenLayer[] func_35497_a(long var0) {
-		LayerIsland var2 = new LayerIsland(1L);
-		GenLayerZoomFuzzy var9 = new GenLayerZoomFuzzy(2000L, var2);
-		GenLayerIsland var10 = new GenLayerIsland(1L, var9);
-		GenLayerZoom var11 = new GenLayerZoom(2001L, var10);
-		var10 = new GenLayerIsland(2L, var11);
-		var11 = new GenLayerZoom(2002L, var10);
-		var10 = new GenLayerIsland(3L, var11);
-		var11 = new GenLayerZoom(2003L, var10);
-		var10 = new GenLayerIsland(3L, var11);
-		var11 = new GenLayerZoom(2004L, var10);
-		var10 = new GenLayerIsland(3L, var11);
-		byte var3 = 4;
+		GenLayer var10 = new LayerIsland(1L);
+		if (!Personalization.pureGeneration && !Personalization.alphaBiome) {
+			var10 = new GenLayerZoomFuzzy(2000L, var10);
+			var10 = new GenLayerIsland(1L, var10);
+			if (Personalization.gameMode == B18XGameMode.ISLES_OF_TIME) {
+				var10 = new GenLayerRemoveTooMuchOcean(1L, var10);
+				var10 = new GenLayerSnow(2L, var10);
+				var10 = new GenLayerZoom(2002L, var10);
+				var10 = new GenLayerZoom(2003L, var10);
+			} else if (Personalization.smallOcean) {
+				var10 = new GenLayerZoom(2001L, var10);
+				var10 = new GenLayerIsland(2L, var10);
+				var10 = new GenLayerIsland(50L, var10);
+				var10 = new GenLayerIsland(70L, var10);
+				var10 = new GenLayerRemoveTooMuchOcean(2L, var10);
+				var10 = new GenLayerIsland(3L, var10);
+				var10 = new GenLayerSnow(2L, var10);
+				var10 = new GenLayerZoom(2002L, var10);
+				var10 = new GenLayerZoom(2003L, var10);
+				var10 = new GenLayerIsland(4L, var10);
+			} else {
+				var10 = new GenLayerZoom(2001L, var10);
+				var10 = new GenLayerIsland(2L, var10);
+				var10 = new GenLayerZoom(2002L, var10);
+				var10 = new GenLayerIsland(3L, var10);
+				var10 = new GenLayerSnow(2L, var10);
+				var10 = new GenLayerZoom(2003L, var10);
+				var10 = new GenLayerIsland(3L, var10);
+				var10 = new GenLayerZoom(2004L, var10);
+				var10 = new GenLayerIsland(3L, var10);
+			}
+		} else if (!Personalization.alphaBiome) {
+			var10 = new GenLayerSnow(2L, var10);
+			var10 = new GenLayerZoom(2002L, var10);
+			var10 = new GenLayerZoom(2003L, var10);
+		}
+		byte var3 = (byte)(Personalization.smallBiomes ? 3 : 4);
 		GenLayer var4 = GenLayerZoom.func_35515_a(1000L, var10, 0);
 		GenLayerRiverInit var12 = new GenLayerRiverInit(100L, var4);
-		var4 = GenLayerZoom.func_35515_a(1000L, var12, var3 + 2);
+		var4 = GenLayerZoom.func_35515_a(1000L, var12, var3 + (Personalization.wideRivers ? 1 : 2));
 		GenLayerRiver var13 = new GenLayerRiver(1L, var4);
 		GenLayerSmooth var14 = new GenLayerSmooth(1000L, var13);
 		GenLayer var5 = GenLayerZoom.func_35515_a(1000L, var10, 0);
-		GenLayerVillageLandscape var15 = new GenLayerVillageLandscape(200L, var5);
+		GenLayer var15 = Personalization.alphaBiome ? var5 : new GenLayerVillageLandscape(200L, var5);
 		Object var16 = GenLayerZoom.func_35515_a(1000L, var15, 2);
+		if (!Personalization.alphaBiome) var16 = new GenLayerSubBiomes(1000L, (GenLayer)var16, 0);
 		Object var6 = new GenLayerTemperature((GenLayer)var16);
 		Object var7 = new GenLayerDownfall((GenLayer)var16);
+		if (Personalization.smoothClimate) {
+			var6 = new GenLayerBlur((GenLayer)var6);
+			var7 = new GenLayerBlur((GenLayer)var7);
+		}
 
 		for(int var8 = 0; var8 < var3; ++var8) {
+			if (var8 == var3 - 1 && Personalization.wideRivers) {
+				var16 = new GenLayerRiverMix(100L, (GenLayer)var16, var14);
+			}
+
 			var16 = new GenLayerZoom((long)(1000 + var8), (GenLayer)var16);
-			if(var8 == 0) {
+			if(var8 == 0 && !Personalization.smallOcean && !Personalization.pureGeneration && !Personalization.alphaBiome) {
 				var16 = new GenLayerIsland(3L, (GenLayer)var16);
 			}
 
+			if (var8 == 1 && !Personalization.alphaBiome) {
+				var16 = new GenLayerSubBiomes(1000L, (GenLayer)var16, 1);
+			}
+
 			GenLayerSmoothZoom var17 = new GenLayerSmoothZoom((long)(1000 + var8), (GenLayer)var6);
-			var6 = new GenLayerTemperatureMix(var17, (GenLayer)var16, var8);
+			var6 = Personalization.smoothClimate ? var17 : new GenLayerTemperatureMix(var17, (GenLayer)var16, var8);
 			GenLayerSmoothZoom var21 = new GenLayerSmoothZoom((long)(1000 + var8), (GenLayer)var7);
-			var7 = new GenLayerDownfallMix(var21, (GenLayer)var16, var8);
+			var7 = Personalization.smoothClimate ? var21 : new GenLayerDownfallMix(var21, (GenLayer)var16, var8);
+		}
+
+		if (Personalization.smoothClimate) {
+			var6 = new GenLayerBlur((GenLayer)var6);
+			var7 = new GenLayerBlur((GenLayer)var7);
 		}
 
 		GenLayerSmooth var18 = new GenLayerSmooth(1000L, (GenLayer)var16);
-		GenLayerRiverMix var20 = new GenLayerRiverMix(100L, var18, var14);
+		GenLayer var20 = Personalization.wideRivers ? var18 : new GenLayerRiverMix(100L, var18, var14);
 		GenLayer var19 = GenLayerSmoothZoom.func_35517_a(1000L, (GenLayer)var6, 2);
 		GenLayer var22 = GenLayerSmoothZoom.func_35517_a(1000L, (GenLayer)var7, 2);
-		GenLayerZoomVoronoi var23 = new GenLayerZoomVoronoi(10L, var20);
+		GenLayer var23e = var20;
+		if (Personalization.gameMode == B18XGameMode.ISLES_OF_TIME) {
+			var23e = new GenLayerIslesOfTime(var23e, 4);
+		}
+		GenLayerZoomVoronoi var23 = new GenLayerZoomVoronoi(10L, var23e);
 		var20.func_35496_b(var0);
 		var19.func_35496_b(var0);
 		var22.func_35496_b(var0);
 		var23.func_35496_b(var0);
-		return new GenLayer[]{var20, var23, var19, var22};
+		if (Personalization.smoothBiomes) {
+			var19 = new GenLayerTemperature(var23);
+			var22 = new GenLayerDownfall(var23);
+		}
+		return new GenLayer[]{var20, var23, var19, var22, (GenLayer)var6, (GenLayer)var7};
 	}
 
 	public GenLayer(long var1) {
--- net/minecraft/src/TextureWaterFX.java
+++ net/minecraft/src/TextureWaterFX.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+
 public class TextureWaterFX extends TextureFX {
 	protected float[] field_1158_g = new float[256];
 	protected float[] field_1157_h = new float[256];
@@ -75,9 +77,16 @@
 				var7 = var11;
 			}
 
-			this.imageData[var2 * 4 + 0] = (byte)var5;
-			this.imageData[var2 * 4 + 1] = (byte)var6;
-			this.imageData[var2 * 4 + 2] = (byte)var7;
+			if (Personalization.coloredWater) {
+				int color = Math.min((var7 + var6 + var5 + var8) * 2 / 5, 255);
+				this.imageData[var2 * 4 + 0] = (byte)color;
+				this.imageData[var2 * 4 + 1] = (byte)color;
+				this.imageData[var2 * 4 + 2] = (byte)color;
+			} else {
+				this.imageData[var2 * 4 + 0] = (byte)var5;
+				this.imageData[var2 * 4 + 1] = (byte)var6;
+				this.imageData[var2 * 4 + 2] = (byte)var7;
+			}
 			this.imageData[var2 * 4 + 3] = (byte)var8;
 		}
 
--- net/minecraft/src/NoiseGeneratorPerlin.java
+++ net/minecraft/src/NoiseGeneratorPerlin.java
@@ -218,4 +218,102 @@
 
 		}
 	}
+
+	public final double generateNoiseD(double var1, double var3, double var5) {
+		double var7 = var1 + this.xCoord;
+		double var9 = var3 + this.yCoord;
+		double var11 = var5 + this.zCoord;
+		int var22 = MathHelper.floor_double(var7) & 255;
+		int var2 = MathHelper.floor_double(var9) & 255;
+		int var23 = MathHelper.floor_double(var11) & 255;
+		var7 -= (double)MathHelper.floor_double(var7);
+		var9 -= (double)MathHelper.floor_double(var9);
+		var11 -= (double)MathHelper.floor_double(var11);
+		double var16 = generateNoise(var7);
+		double var18 = generateNoise(var9);
+		double var20 = generateNoise(var11);
+		int var4 = this.permutations[var22] + var2;
+		int var24 = this.permutations[var4] + var23;
+		var4 = this.permutations[var4 + 1] + var23;
+		var22 = this.permutations[var22 + 1] + var2;
+		var2 = this.permutations[var22] + var23;
+		var22 = this.permutations[var22 + 1] + var23;
+		return lerp(var20, lerp(var18, lerp(var16, grad(this.permutations[var24], var7, var9, var11), grad(this.permutations[var2], var7 - 1.0D, var9, var11)), lerp(var16, grad(this.permutations[var4], var7, var9 - 1.0D, var11), grad(this.permutations[var22], var7 - 1.0D, var9 - 1.0D, var11))), lerp(var18, lerp(var16, grad(this.permutations[var24 + 1], var7, var9, var11 - 1.0D), grad(this.permutations[var2 + 1], var7 - 1.0D, var9, var11 - 1.0D)), lerp(var16, grad(this.permutations[var4 + 1], var7, var9 - 1.0D, var11 - 1.0D), grad(this.permutations[var22 + 1], var7 - 1.0D, var9 - 1.0D, var11 - 1.0D))));
+	}
+
+	private static double generateNoise(double var0) {
+		return var0 * var0 * var0 * (var0 * (var0 * 6.0D - 15.0D) + 10.0D);
+	}
+
+	public void func_805_alpha(double[] var1, double var2, double var4, double var6, int var8, int var9, int var10, double var11, double var13, double var15, double var17) {
+		int var19 = 0;
+		double var20 = 1.0D / var17;
+		int var22 = -1;
+		boolean var23 = false;
+		boolean var24 = false;
+		boolean var25 = false;
+		boolean var26 = false;
+		boolean var27 = false;
+		boolean var28 = false;
+		double var29 = 0.0D;
+		double var31 = 0.0D;
+		double var33 = 0.0D;
+		double var35 = 0.0D;
+
+		for(int var37 = 0; var37 < var8; ++var37) {
+			double var38 = (var2 + (double)var37) * var11 + this.xCoord;
+			int var40 = (int)var38;
+			if(var38 < (double)var40) {
+				--var40;
+			}
+
+			int var41 = var40 & 255;
+			var38 -= (double)var40;
+			double var42 = var38 * var38 * var38 * (var38 * (var38 * 6.0D - 15.0D) + 10.0D);
+
+			for(int var44 = 0; var44 < var10; ++var44) {
+				double var45 = (var6 + (double)var44) * var15 + this.zCoord;
+				int var47 = (int)var45;
+				if(var45 < (double)var47) {
+					--var47;
+				}
+
+				int var48 = var47 & 255;
+				var45 -= (double)var47;
+				double var49 = var45 * var45 * var45 * (var45 * (var45 * 6.0D - 15.0D) + 10.0D);
+
+				for(int var51 = 0; var51 < var9; ++var51) {
+					double var52 = (var4 + (double)var51) * var13 + this.yCoord;
+					int var54 = (int)var52;
+					if(var52 < (double)var54) {
+						--var54;
+					}
+
+					int var55 = var54 & 255;
+					var52 -= (double)var54;
+					double var56 = var52 * var52 * var52 * (var52 * (var52 * 6.0D - 15.0D) + 10.0D);
+					if(var51 == 0 || var55 != var22) {
+						var22 = var55;
+						int var64 = this.permutations[var41] + var55;
+						int var65 = this.permutations[var64] + var48;
+						int var66 = this.permutations[var64 + 1] + var48;
+						int var67 = this.permutations[var41 + 1] + var55;
+						int var68 = this.permutations[var67] + var48;
+						int var69 = this.permutations[var67 + 1] + var48;
+						var29 = this.lerp(var42, this.grad(this.permutations[var65], var38, var52, var45), this.grad(this.permutations[var68], var38 - 1.0D, var52, var45));
+						var31 = this.lerp(var42, this.grad(this.permutations[var66], var38, var52 - 1.0D, var45), this.grad(this.permutations[var69], var38 - 1.0D, var52 - 1.0D, var45));
+						var33 = this.lerp(var42, this.grad(this.permutations[var65 + 1], var38, var52, var45 - 1.0D), this.grad(this.permutations[var68 + 1], var38 - 1.0D, var52, var45 - 1.0D));
+						var35 = this.lerp(var42, this.grad(this.permutations[var66 + 1], var38, var52 - 1.0D, var45 - 1.0D), this.grad(this.permutations[var69 + 1], var38 - 1.0D, var52 - 1.0D, var45 - 1.0D));
+					}
+
+					double var58 = this.lerp(var56, var29, var31);
+					double var60 = this.lerp(var56, var33, var35);
+					double var62 = this.lerp(var49, var58, var60);
+					int var10001 = var19++;
+					var1[var10001] += var62 * var20;
+				}
+			}
+		}
+
+	}
 }
--- net/minecraft/src/ClippingHelper.java
+++ net/minecraft/src/ClippingHelper.java
@@ -1,14 +1,48 @@
 package net.minecraft.src;
 
 public class ClippingHelper {
-	public float[][] frustum = new float[16][16];
+	public double[][] frustum = new double[6][4];
 	public float[] projectionMatrix = new float[16];
 	public float[] modelviewMatrix = new float[16];
 	public float[] clippingMatrix = new float[16];
 
 	public boolean isBoxInFrustum(double var1, double var3, double var5, double var7, double var9, double var11) {
 		for(int var13 = 0; var13 < 6; ++var13) {
-			if((double)this.frustum[var13][0] * var1 + (double)this.frustum[var13][1] * var3 + (double)this.frustum[var13][2] * var5 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var7 + (double)this.frustum[var13][1] * var3 + (double)this.frustum[var13][2] * var5 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var1 + (double)this.frustum[var13][1] * var9 + (double)this.frustum[var13][2] * var5 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var7 + (double)this.frustum[var13][1] * var9 + (double)this.frustum[var13][2] * var5 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var1 + (double)this.frustum[var13][1] * var3 + (double)this.frustum[var13][2] * var11 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var7 + (double)this.frustum[var13][1] * var3 + (double)this.frustum[var13][2] * var11 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var1 + (double)this.frustum[var13][1] * var9 + (double)this.frustum[var13][2] * var11 + (double)this.frustum[var13][3] <= 0.0D && (double)this.frustum[var13][0] * var7 + (double)this.frustum[var13][1] * var9 + (double)this.frustum[var13][2] * var11 + (double)this.frustum[var13][3] <= 0.0D) {
+			double f0 = this.frustum[var13][0];
+			double f1 = this.frustum[var13][1];
+			double f2 = this.frustum[var13][2];
+			double f3 = this.frustum[var13][3];
+			double f0x1p3 = f0 * var1 + f3;
+			double f0x7p3 = f0 * var7 + f3;
+			double f1x3 = f1 * var3;
+			double f1x9 = f1 * var9;
+			double f2x5 = f2 * var5;
+			double f2x11 = f2 * var11;
+
+			if(     f0x1p3
+					+ f1x3
+					+ f2x5 <= 0.0D
+					&& f0x7p3
+					+ f1x3
+					+ f2x5 <= 0.0D
+					&& f0x1p3
+					+ f1x9
+					+ f2x5 <= 0.0D
+					&& f0x7p3
+					+ f1x9
+					+ f2x5 <= 0.0D
+					&& f0x1p3
+					+ f1x3
+					+ f2x11 <= 0.0D
+					&& f0x7p3
+					+ f1x3
+					+ f2x11 <= 0.0D
+					&& f0x1p3
+					+ f1x9
+					+ f2x11 <= 0.0D
+					&& f0x7p3
+					+ f1x9
+					+ f2x11 <= 0.0D) {
 				return false;
 			}
 		}
--- net/minecraft/src/NBTBase.java
+++ net/minecraft/src/NBTBase.java
@@ -66,6 +66,8 @@
 			return new NBTTagList();
 		case 10:
 			return new NBTTagCompound();
+		case 11:
+			return new NBTTagIntArray();
 		default:
 			return null;
 		}
@@ -95,6 +97,8 @@
 			return "TAG_List";
 		case 10:
 			return "TAG_Compound";
+		case 11:
+			return "TAG_Int_Array";
 		default:
 			return "UNKNOWN";
 		}
--- net/minecraft/src/EntityEnderman.java
+++ net/minecraft/src/EntityEnderman.java
@@ -8,19 +8,28 @@
 
 	public EntityEnderman(World var1) {
 		super(var1);
-		this.texture = "/mob/enderman.png";
+		this.texture = "/mob/enderman" + (Personalization.whiteEnderman ? "_white.png" : ".png");
 		this.moveSpeed = 0.2F;
-		this.attackStrength = 5;
+		this.attackStrength = Personalization.redEnderman ? 2 : Personalization.weakEndermen ? 5 : 7;
 		this.setSize(0.6F, 2.9F);
 		this.stepHeight = 1.0F;
 	}
 
+	public int getMaxHealth() {
+		return Personalization.redEnderman ? 100 : Personalization.weakEndermen ? 20 : 40;
+	}
+
 	protected void entityInit() {
 		super.entityInit();
 		this.dataWatcher.addObject(16, new Byte((byte)0));
 		this.dataWatcher.addObject(17, new Byte((byte)0));
 	}
 
+	public boolean getCanSpawnHere() {
+		return this.worldObj.worldProvider instanceof WorldProviderOffices && super.getCanSpawnHereRegardlessOfLight()
+				|| super.getCanSpawnHere();
+	}
+
 	public void writeEntityToNBT(NBTTagCompound var1) {
 		super.writeEntityToNBT(var1);
 		var1.setShort("carried", (short)this.func_35176_r());
@@ -37,6 +46,10 @@
 		EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, 64.0D);
 		if(var1 != null) {
 			if(this.func_35183_c(var1)) {
+				if(this.field_35185_e == 0 && !Personalization.weakEndermen) {
+					this.worldObj.playSoundAtEntity(var1, "mob.endermen.stare", 1.0F, 1.0F);
+				}
+
 				if(this.field_35185_e++ == 5) {
 					this.field_35185_e = 0;
 					return var1;
@@ -77,7 +90,7 @@
 		}
 
 		this.field_35187_a = this.entityToAttack != null;
-		this.moveSpeed = this.entityToAttack != null ? 4.5F : 0.3F;
+		this.moveSpeed = this.entityToAttack != null ? (Personalization.weakEndermen ? 4.5F : 6.5F) : 0.3F;
 		int var1;
 		if(!this.worldObj.multiplayerWorld) {
 			int var2;
@@ -108,11 +121,15 @@
 			}
 		}
 
-		for(var1 = 0; var1 < 2; ++var1) {
-			this.worldObj.spawnParticle("portal", this.posX + (this.rand.nextDouble() - 0.5D) * (double)this.width, this.posY + this.rand.nextDouble() * (double)this.height - 0.25D, this.posZ + (this.rand.nextDouble() - 0.5D) * (double)this.width, (this.rand.nextDouble() - 0.5D) * 2.0D, -this.rand.nextDouble(), (this.rand.nextDouble() - 0.5D) * 2.0D);
+		if (Personalization.greenEnderman || Personalization.redEnderman) {
+			this.worldObj.spawnParticle("largesmoke", this.posX + (this.rand.nextDouble() - 0.5D) * (double)this.width, this.posY + this.rand.nextDouble() * (double)this.height, this.posZ + (this.rand.nextDouble() - 0.5D) * (double)this.width, 0.0D, 0.0D, 0.0D);
+		} else if (!Personalization.whiteEnderman) {
+			for(var1 = 0; var1 < 2; ++var1) {
+				this.worldObj.spawnParticle("portal", this.posX + (this.rand.nextDouble() - 0.5D) * (double)this.width, this.posY + this.rand.nextDouble() * (double)this.height - 0.25D, this.posZ + (this.rand.nextDouble() - 0.5D) * (double)this.width, (this.rand.nextDouble() - 0.5D) * 2.0D, -this.rand.nextDouble(), (this.rand.nextDouble() - 0.5D) * 2.0D);
+			}
 		}
 
-		if(this.worldObj.isDaytime() && !this.worldObj.multiplayerWorld) {
+		if(this.worldObj.isDaytime() && !this.worldObj.multiplayerWorld && Personalization.weakEndermen) {
 			float var6 = this.getEntityBrightness(1.0F);
 			if(var6 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (var6 - 0.4F) * 2.0F) {
 				this.fire = 300;
@@ -122,6 +139,12 @@
 		this.isJumping = false;
 		if(this.entityToAttack != null) {
 			this.faceEntity(this.entityToAttack, 100.0F, 100.0F);
+			if (Personalization.redEnderman && this.entityToAttack.isEntityAlive()) {
+				this.worldObj.playSoundAtEntity(this.entityToAttack, "mob.endermen.stare", 1.0F, 1.0F);
+				if (this.ticksExisted % 15 == 0) {
+					this.worldObj.playSoundAtEntity(this, "mob.endermen.scream", 1.0F, 1.0F);
+				}
+			}
 		}
 
 		if(!this.worldObj.multiplayerWorld) {
@@ -145,10 +168,19 @@
 		super.onLivingUpdate();
 	}
 
+	public void moveFlying(float var1, float var2, float var3) {
+		if (Personalization.redEnderman && this.field_35187_a) {
+			var3 *= 5.0F;
+		}
+
+		super.moveFlying(var1, var2, var3);
+	}
+
 	protected boolean func_35178_q() {
-		double var1 = this.posX + (this.rand.nextDouble() - 0.5D) * 64.0D;
-		double var3 = this.posY + (double)(this.rand.nextInt(64) - 32);
-		double var5 = this.posZ + (this.rand.nextDouble() - 0.5D) * 64.0D;
+		double var3a = Personalization.redEnderman ? 16.0D : 64.0D;
+		double var1 = this.posX + (this.rand.nextDouble() - 0.5D) * var3a;
+		double var3 = this.posY + (double)(this.rand.nextInt(64) - 32) / 64.0D * var3a;
+		double var5 = this.posZ + (this.rand.nextDouble() - 0.5D) * var3a;
 		return this.func_35179_a_(var1, var3, var5);
 	}
 
@@ -156,9 +188,10 @@
 		Vec3D var2 = Vec3D.createVector(this.posX - var1.posX, this.boundingBox.minY + (double)(this.height / 2.0F) - var1.posY + (double)var1.getEyeHeight(), this.posZ - var1.posZ);
 		var2 = var2.normalize();
 		double var3 = 16.0D;
-		double var5 = this.posX + (this.rand.nextDouble() - 0.5D) * 8.0D - var2.xCoord * var3;
-		double var7 = this.posY + (double)(this.rand.nextInt(16) - 8) - var2.yCoord * var3;
-		double var9 = this.posZ + (this.rand.nextDouble() - 0.5D) * 8.0D - var2.zCoord * var3;
+		double var3a = Personalization.redEnderman ? 2.0D : 8.0D;
+		double var5 = this.posX + (this.rand.nextDouble() - 0.5D) * var3a - var2.xCoord * var3;
+		double var7 = this.posY + (double)(this.rand.nextInt(16) - 8) / 8.0D * var3a - var2.yCoord * var3;
+		double var9 = this.posZ + (this.rand.nextDouble() - 0.5D) * var3a - var2.zCoord * var3;
 		return this.func_35179_a_(var5, var7, var9);
 	}
 
@@ -215,20 +248,24 @@
 				this.worldObj.spawnParticle("portal", var24, var26, var28, (double)var21, (double)var22, (double)var23);
 			}
 
+			if (!Personalization.weakEndermen) {
+				this.worldObj.playSoundEffect(var7, var9, var11, "mob.endermen.portal", 1.0F, 1.0F);
+				this.worldObj.playSoundAtEntity(this, "mob.endermen.portal", 1.0F, 1.0F);
+			}
 			return true;
 		}
 	}
 
 	protected String getLivingSound() {
-		return "mob.zombie";
+		return Personalization.weakEndermen ? "mob.zombie" : (this.field_35187_a ? "mob.endermen.scream" : "mob.endermen.idle");
 	}
 
 	protected String getHurtSound() {
-		return "mob.zombiehurt";
+		return Personalization.weakEndermen ? "mob.zombiehurt" : "mob.endermen.hit";
 	}
 
 	protected String getDeathSound() {
-		return "mob.zombiedeath";
+		return Personalization.weakEndermen ? "mob.zombiedeath" : "mob.endermen.death";
 	}
 
 	protected int getDropItemId() {
@@ -247,6 +284,14 @@
 
 	}
 
+	protected int getXpSpammed(EntityPlayer var1) {
+		return 30;
+	}
+
+	protected int getXpSpamGroup(int var1) {
+		return 3;
+	}
+
 	public void func_35177_b(int var1) {
 		this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var1 & 255)));
 	}
@@ -261,6 +306,15 @@
 
 	public int func_35180_s() {
 		return this.dataWatcher.getWatchableObjectByte(17);
+	}
+
+	protected void attackEntity(Entity var1, float var2) {
+		super.attackEntity(var1, var2);
+		if (Personalization.redEnderman && var1 instanceof EntityLiving && this.attackTime > 0) {
+			this.attackTime = 0;
+			var1.heartsLife /= 2;
+			((EntityLiving)var1).hurtTime /= 2;
+		}
 	}
 
 	static {
--- /dev/null
+++ net/minecraft/src/GuiPersonalizationSlot.java
@@ -1,0 +1,51 @@
+package net.minecraft.src;
+
+public class GuiPersonalizationSlot extends GuiSlot {
+	private final GuiPersonalization parentGui;
+	private final int myWidth;
+
+	public GuiPersonalizationSlot(GuiPersonalization var1) {
+		super(var1.game, var1.width, var1.height, 32, var1.height - 32, 16);
+		this.myWidth = var1.width;
+		this.parentGui = var1;
+	}
+
+	protected int getSize() {
+		return Personalization.options.size();
+	}
+
+	protected void elementClicked(int var1, boolean var2) {
+		if (var1 < 0 || var1 > Personalization.options.size()) return;
+
+		PersonalizationOption option = Personalization.options.get(var1);
+		if (option.isHeading) return;
+		option.value = !option.value;
+		this.parentGui.game.sndManager.playSoundFX("random.pop", 2.0F, 1.0F);
+	}
+
+	protected boolean isSelected(int var1) {
+		return Personalization.options.get(var1).isHeading;
+	}
+
+	protected void drawBackground() {
+		this.parentGui.drawControlPanelBackground();
+	}
+
+	protected boolean overrideBackground() {
+		return true;
+	}
+
+	protected void drawSlot(int var1, int var2, int var3, int var4, Tessellator var5) {
+		PersonalizationOption option = Personalization.options.get(var1);
+
+		if (option.isHeading) {
+			this.parentGui.drawCenteredString(this.parentGui.fontRenderer, option.getName(), this.myWidth / 2, var3 + 2, 0x55FFFF);
+		} else {
+			String valueString = option.value ? "ON" : "OFF";
+			int valueWidth = this.parentGui.fontRenderer.getStringWidth(valueString);
+
+			this.parentGui.drawString(this.parentGui.fontRenderer, option.getName(), var2 + 2, var3 + 2, 0xFFFFFF);
+			this.parentGui.drawString(this.parentGui.fontRenderer, valueString, this.myWidth / 2 + 106 - valueWidth, var3 + 2, option.value ? 0x55FF55 : 0xFF5555);
+		}
+	}
+}
--- net/minecraft/src/ChunkProviderGenerate.java
+++ net/minecraft/src/ChunkProviderGenerate.java
@@ -1,26 +1,41 @@
 package net.minecraft.src;
 
+import java.util.Arrays;
 import java.util.Random;
 
 public class ChunkProviderGenerate implements IChunkProvider {
+	private int terrainHeight;
 	private Random rand;
 	private NoiseGeneratorOctaves field_912_k;
 	private NoiseGeneratorOctaves field_911_l;
 	private NoiseGeneratorOctaves field_910_m;
+	private NoiseGeneratorOctaves field_909_n;
 	private NoiseGeneratorOctaves field_908_o;
+	private NoiseGeneratorOctaves caveNoise;
 	public NoiseGeneratorOctaves field_922_a;
 	public NoiseGeneratorOctaves field_921_b;
 	public NoiseGeneratorOctaves mobSpawnerNoise;
+	public NoiseGeneratorSimplexOctaves field_147430_m;
 	private World worldObj;
 	private final boolean field_35389_t;
 	private double[] field_4180_q;
+	private double[] sandNoise = new double[256];
+	private double[] gravelNoise = new double[256];
 	private double[] stoneNoise = new double[256];
+	private double[] stoneSimplex = new double[256];
 	private MapGenBase caveGenerator = new MapGenCaves();
 	public MapGenStronghold field_35386_d = new MapGenStronghold();
 	public MapGenVillage field_35387_e = new MapGenVillage();
 	public MapGenMineshaft field_35385_f = new MapGenMineshaft();
 	private MapGenBase field_35390_x = new MapGenRavine();
 	private BiomeGenBase[] biomesForGeneration;
+	private float[] minHeights = new float[100];
+	private float[] maxHeights = new float[100];
+	private float[] temperature = new float[100];
+	private float[] rainfall = new float[100];
+	private byte[] blocksForGeneration = new byte[16 * 16 * 512];
+	private byte[] metadataForGeneration = new byte[16 * 16 * 512];
+	private int topTerrainHeight;
 	double[] field_4185_d;
 	double[] field_4184_e;
 	double[] field_4183_f;
@@ -28,36 +43,48 @@
 	double[] field_4181_h;
 	float[] field_35388_l;
 	int[][] unusedIntArray32x32 = new int[32][32];
+	private boolean[] hitSolid = new boolean[16];
+	private boolean[] doWater = new boolean[16];
 
 	public ChunkProviderGenerate(World var1, long var2, boolean var4) {
 		this.worldObj = var1;
 		this.field_35389_t = var4;
-		this.rand = new Random(var2);
+		this.rand = Personalization.random(var2);
 		this.field_912_k = new NoiseGeneratorOctaves(this.rand, 16);
 		this.field_911_l = new NoiseGeneratorOctaves(this.rand, 16);
 		this.field_910_m = new NoiseGeneratorOctaves(this.rand, 8);
+		this.field_909_n = new NoiseGeneratorOctaves(this.rand, 4);
 		this.field_908_o = new NoiseGeneratorOctaves(this.rand, 4);
 		this.field_922_a = new NoiseGeneratorOctaves(this.rand, 10);
 		this.field_921_b = new NoiseGeneratorOctaves(this.rand, 16);
 		this.mobSpawnerNoise = new NoiseGeneratorOctaves(this.rand, 8);
+		this.field_147430_m = new NoiseGeneratorSimplexOctaves(this.rand, 4);
+		this.caveNoise = new NoiseGeneratorOctaves(this.rand, 4);
+		BiomeGenBase.setupNoise(this.rand);
 	}
 
 	public void generateTerrain(int var1, int var2, byte[] var3) {
 		byte var4 = 4;
-		this.worldObj.getClass();
-		int var5 = 128 / 8;
-		this.worldObj.getClass();
+		int var5 = (Personalization.limitTerrainHeight ? 128 : 512) / 8;
 		byte var6 = 63;
 		int var7 = var4 + 1;
-		this.worldObj.getClass();
-		int var8 = 128 / 8 + 1;
+		int var8 = var5 + 1;
 		int var9 = var4 + 1;
 		this.biomesForGeneration = this.worldObj.getWorldChunkManager().func_35557_b(this.biomesForGeneration, var1 * 4 - 2, var2 * 4 - 2, var7 + 5, var9 + 5);
-		this.field_4180_q = this.func_4061_a(this.field_4180_q, var1 * var4, 0, var2 * var4, var7, var8, var9);
+		this.temperature = this.worldObj.getWorldChunkManager().getTemperaturesForGeneration(this.temperature, var1 * 4 - 2, var2 * 4 - 2, var7 + 5, var9 + 5);
+		this.rainfall = this.worldObj.getWorldChunkManager().getRainfallsForGeneration(this.rainfall, var1 * 4 - 2, var2 * 4 - 2, var7 + 5, var9 + 5);
+		this.field_4180_q = Personalization.terrain415
+				? this.func_4061_a_415(this.field_4180_q, var1 * var4, 0, var2 * var4, var7, var8, var9)
+				: this.func_4061_a(this.field_4180_q, var1 * var4, 0, var2 * var4, var7, var8, var9);
 
 		for(int var10 = 0; var10 < var4; ++var10) {
 			for(int var11 = 0; var11 < var4; ++var11) {
-				for(int var12 = 0; var12 < var5; ++var12) {
+				Arrays.fill(this.hitSolid, false);
+				for(int var12 = var5 - 1; var12 >= 0; --var12) {
+					for (int i = 0; i < 16; i++) {
+						this.doWater[i] = !this.hitSolid[i];
+					}
+
 					double var13 = 0.125D;
 					double var15 = this.field_4180_q[((var10 + 0) * var9 + var11 + 0) * var8 + var12 + 0];
 					double var17 = this.field_4180_q[((var10 + 0) * var9 + var11 + 1) * var8 + var12 + 0];
@@ -77,25 +104,29 @@
 
 						for(int var42 = 0; var42 < 4; ++var42) {
 							int var10000 = var42 + var10 * 4;
-							this.worldObj.getClass();
-							var10000 <<= 11;
+							var10000 <<= 13;
 							int var10001 = 0 + var11 * 4;
-							this.worldObj.getClass();
-							int var43 = var10000 | var10001 << 7 | var12 * 8 + var31;
-							this.worldObj.getClass();
-							int var44 = 1 << 7;
+							int var43 = var10000 | var10001 << 9 | var12 * 8 + var31;
+							int var44 = 1 << 9;
 							double var45 = 0.25D;
 							double var47 = var34;
 							double var49 = (var36 - var34) * var45;
 
 							for(int var51 = 0; var51 < 4; ++var51) {
+								int waterCheck = var42 << 2 | var51;
+
 								int var52 = 0;
-								if(var12 * 8 + var31 < var6) {
+								int height = var12 * 8 + var31;
+								if(height < var6 && this.doWater[waterCheck]) {
 									var52 = Block.waterStill.blockID;
 								}
 
 								if(var47 > 0.0D) {
 									var52 = Block.stone.blockID;
+									if (var12 < 7 && var31 == 0) this.hitSolid[waterCheck] = true;
+									if (height > this.topTerrainHeight) {
+										this.topTerrainHeight = height;
+									}
 								}
 
 								var3[var43] = (byte)var52;
@@ -118,65 +149,30 @@
 
 	}
 
-	public void replaceBlocksForBiome(int var1, int var2, byte[] var3, BiomeGenBase[] var4) {
-		this.worldObj.getClass();
-		byte var5 = 63;
+	public void replaceBlocksForBiome(int var1, int var2, byte[] var3, byte[] var3a, BiomeGenBase[] var4) {
 		double var6 = 1.0D / 32.0D;
-		this.stoneNoise = this.field_908_o.generateNoiseOctaves(this.stoneNoise, var1 * 16, var2 * 16, 0, 16, 16, 1, var6 * 2.0D, var6 * 2.0D, var6 * 2.0D);
-
-		for(int var8 = 0; var8 < 16; ++var8) {
-			for(int var9 = 0; var9 < 16; ++var9) {
-				BiomeGenBase var10 = var4[var9 + var8 * 16];
-				int var11 = (int)(this.stoneNoise[var8 + var9 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
-				int var12 = -1;
-				byte var13 = var10.topBlock;
-				byte var14 = var10.fillerBlock;
-				this.worldObj.getClass();
-
-				for(int var15 = 127; var15 >= 0; --var15) {
-					int var10000 = var9 * 16 + var8;
-					this.worldObj.getClass();
-					int var16 = var10000 * 128 + var15;
-					if(var15 <= 0 + this.rand.nextInt(5)) {
-						var3[var16] = (byte)Block.bedrock.blockID;
-					} else {
-						byte var17 = var3[var16];
-						if(var17 == 0) {
-							var12 = -1;
-						} else if(var17 == Block.stone.blockID) {
-							if(var12 == -1) {
-								if(var11 <= 0) {
-									var13 = 0;
-									var14 = (byte)Block.stone.blockID;
-								} else if(var15 >= var5 - 4 && var15 <= var5 + 1) {
-									var13 = var10.topBlock;
-									var14 = var10.fillerBlock;
-								}
-
-								if(var15 < var5 && var13 == 0) {
-									var13 = (byte)Block.waterStill.blockID;
-								}
-
-								var12 = var11;
-								if(var15 >= var5 - 1) {
-									var3[var16] = var13;
-								} else {
-									var3[var16] = var14;
-								}
-							} else if(var12 > 0) {
-								--var12;
-								var3[var16] = var14;
-								if(var12 == 0 && var14 == Block.sand.blockID) {
-									var12 = this.rand.nextInt(4);
-									var14 = (byte)Block.sandStone.blockID;
-								}
-							}
-						}
-					}
-				}
+		this.stoneSimplex = this.field_147430_m.func_151599_a(this.stoneSimplex, var1 * 16, var2 * 16, 16, 16, var6 * 2.0D, var6 * 2.0D, 1.0D);
+
+		for (int x = 0; x < 16; ++x) {
+			for (int z = 0; z < 16; ++z) {
+				BiomeGenBase biome = var4[z << 4 | x];
+				int xx = var1 << 4 | x;
+				int zz = var2 << 4 | z;
+				biome.buildBiomeSurface(
+						this.worldObj,
+						this.rand,
+						var3,
+						var3a,
+						xx,
+						zz,
+						this.topTerrainHeight,
+						this.field_909_n.generateNoise(xx * var6, zz * var6, 0.0D),
+						this.field_909_n.generateNoise(xx * var6, 109.0D, zz * var6),
+						this.field_908_o.generateNoise(xx * var6 * 2.0D, zz * var6 * 2.0D, 1.0D),
+						this.stoneSimplex[x + z * 16]
+				);
 			}
 		}
-
 	}
 
 	public Chunk loadChunk(int var1, int var2) {
@@ -184,27 +180,36 @@
 	}
 
 	public Chunk provideChunk(int var1, int var2) {
+		this.topTerrainHeight = 0;
 		this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-		this.worldObj.getClass();
-		byte[] var3 = new byte[16 * 128 * 16];
-		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
+		byte[] var3 = blocksForGeneration;
+		byte[] var3a = metadataForGeneration;
+		Arrays.fill(blocksForGeneration, (byte) 0);
+		Arrays.fill(metadataForGeneration, (byte) 0);
 		this.generateTerrain(var1, var2, var3);
 		this.biomesForGeneration = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, var1 * 16, var2 * 16, 16, 16);
-		this.replaceBlocksForBiome(var1, var2, var3, this.biomesForGeneration);
+		this.replaceBlocksForBiome(var1, var2, var3, var3a, this.biomesForGeneration);
 		this.caveGenerator.generate(this, this.worldObj, var1, var2, var3);
 		if(this.field_35389_t) {
 			this.field_35386_d.generate(this, this.worldObj, var1, var2, var3);
 			this.field_35385_f.generate(this, this.worldObj, var1, var2, var3);
-			this.field_35387_e.generate(this, this.worldObj, var1, var2, var3);
+			if (Personalization.gameMode != B18XGameMode.ISLES_OF_TIME) this.field_35387_e.generate(this, this.worldObj, var1, var2, var3);
 		}
-
 		this.field_35390_x.generate(this, this.worldObj, var1, var2, var3);
+
+		Chunk var4 = new Chunk(this.worldObj, var3, var3a, var1, var2);
+		byte[] var5 = var4.getBiomeArray();
+
+		for(int var6 = 0; var6 < var5.length; ++var6) {
+			var5[var6] = (byte)this.biomesForGeneration[var6].field_35494_y;
+		}
+
 		var4.generateSkylightMap();
 		return var4;
 	}
 
 	private double[] func_4061_a(double[] var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		if(var1 == null) {
+		if(var1 == null || var1.length < var5 * var6 * var7) {
 			var1 = new double[var5 * var6 * var7];
 		}
 
@@ -221,47 +226,90 @@
 
 		double var43 = 684.412D;
 		double var44 = 684.412D;
-		this.field_4182_g = this.field_922_a.func_4109_a(this.field_4182_g, var2, var4, var5, var7, 1.121D, 1.121D, 0.5D);
-		this.field_4181_h = this.field_921_b.func_4109_a(this.field_4181_h, var2, var4, var5, var7, 200.0D, 200.0D, 0.5D);
-		this.field_4185_d = this.field_910_m.generateNoiseOctaves(this.field_4185_d, var2, var3, var4, var5, var6, var7, var43 / 80.0D, var44 / 160.0D, var43 / 80.0D);
-		this.field_4184_e = this.field_912_k.generateNoiseOctaves(this.field_4184_e, var2, var3, var4, var5, var6, var7, var43, var44, var43);
-		this.field_4183_f = this.field_911_l.generateNoiseOctaves(this.field_4183_f, var2, var3, var4, var5, var6, var7, var43, var44, var43);
+		if (Personalization.terrainAlpha) {
+			this.field_4182_g = this.field_922_a.generateNoiseOctavesAlpha(this.field_4182_g, var2, var3, var4, var5, 1, var7, 1.0D, 0.0D, 1.0D);
+			this.field_4181_h = this.field_921_b.generateNoiseOctavesAlpha(this.field_4181_h, var2, var3, var4, var5, 1, var7, 100.0D, 0.0D, 100.0D);
+			this.field_4185_d = this.field_910_m.generateNoiseOctavesAlpha(this.field_4185_d, var2, var3, var4, var5, var6, var7, var43 / 80.0D, var44 / 160.0D, var43 / 80.0D);
+			this.field_4184_e = this.field_912_k.generateNoiseOctavesAlpha(this.field_4184_e, var2, var3, var4, var5, var6, var7, var43, var44, var43);
+			this.field_4183_f = this.field_911_l.generateNoiseOctavesAlpha(this.field_4183_f, var2, var3, var4, var5, var6, var7, var43, var44, var43);
+		} else {
+			this.field_4182_g = this.field_922_a.func_4109_a(this.field_4182_g, var2, var4, var5, var7, 1.121D, 1.121D, 0.5D);
+			this.field_4181_h = this.field_921_b.func_4109_a(this.field_4181_h, var2, var4, var5, var7, 200.0D, 200.0D, 0.5D);
+			this.field_4185_d = this.field_910_m.generateNoiseOctaves(this.field_4185_d, var2, var3, var4, var5, var6, var7, var43 / 80.0D, var44 / 160.0D, var43 / 80.0D);
+			this.field_4184_e = this.field_912_k.generateNoiseOctaves(this.field_4184_e, var2, var3, var4, var5, var6, var7, var43, var44, var43);
+			this.field_4183_f = this.field_911_l.generateNoiseOctaves(this.field_4183_f, var2, var3, var4, var5, var6, var7, var43, var44, var43);
+		}
 		boolean var42 = false;
 		int var12 = 0;
 		int var13 = 0;
 
+		for (int i = 0; i < 100; i++) {
+			this.minHeights[i] = this.biomesForGeneration[i].getMinHeight(var2 - 2 + i % 10, var4 - 2 + i / 10);
+			this.maxHeights[i] = this.biomesForGeneration[i].getMaxHeight(var2 - 2 + i % 10, var4 - 2 + i / 10);
+		}
+
 		for(int var14 = 0; var14 < var5; ++var14) {
 			for(int var15 = 0; var15 < var7; ++var15) {
 				float var16 = 0.0F;
 				float var17 = 0.0F;
+				double var26a = 0.0D;
 				float var18 = 0.0F;
 				byte var19 = 2;
+				int i = var14 + 2 + (var15 + 2) * (var5 + 5);
+				float baseMinHeight = this.minHeights[i];
 				BiomeGenBase var20 = this.biomesForGeneration[var14 + 2 + (var15 + 2) * (var5 + 5)];
 
 				for(int var21 = -var19; var21 <= var19; ++var21) {
 					for(int var22 = -var19; var22 <= var19; ++var22) {
-						BiomeGenBase var23 = this.biomesForGeneration[var14 + var21 + 2 + (var15 + var22 + 2) * (var5 + 5)];
-						float var24 = this.field_35388_l[var21 + 2 + (var22 + 2) * 5] / (var23.field_35492_q + 2.0F);
-						if(var23.field_35492_q > var20.field_35492_q) {
+						i = var14 + var21 + 2 + (var15 + var22 + 2) * (var5 + 5);
+						BiomeGenBase var23 = this.biomesForGeneration[i];
+						float minHeight = this.minHeights[i];
+						float var25 = minHeight;
+						float var26 = this.maxHeights[i];
+
+						if(Personalization.amplified && var25 > -0.5F) {
+							var25 = 1.0F + var25 / 2.0F * 2.0F;
+							var26 = 1.0F + var26 / 2.0F * 4.0F;
+						}
+
+						float var24 = this.field_35388_l[var21 + 2 + (var22 + 2) * 5] / (minHeight + 2.0F);
+						if(minHeight > baseMinHeight) {
 							var24 /= 2.0F;
 						}
 
-						var16 += var23.field_35491_r * var24;
-						var17 += var23.field_35492_q * var24;
+						var16 += var26 * var24;
+						var17 += var25 * var24;
+						var26a += this.temperature[i] * this.rainfall[i] * var24;
+//						var26a += var23var23.field_35490_s * var23.field_35489_t * var24;
 						var18 += var24;
 					}
 				}
 
 				var16 /= var18;
 				var17 /= var18;
+				var26a /= var18;
+				float baseHeight = var17;
 				var16 = var16 * 0.9F + 0.1F;
 				var17 = (var17 * 4.0F - 1.0F) / 8.0F;
+
 				double var45 = this.field_4181_h[var13] / 8000.0D;
 				if(var45 < 0.0D) {
-					var45 = -var45 * 0.3D;
-				}
-
-				var45 = var45 * 3.0D - 2.0D;
+					var45 = -var45 * (Personalization.terrainAlpha ? 1.0D : 0.3D);
+				}
+
+				double var26 = Personalization.pureGeneration ? (this.field_4182_g[var15] + 256.0D) / 512.0D : var16;
+				if (Personalization.pureGeneration && !Personalization.terrainAlpha) {
+					var26a = 1.0D - var26a;
+					var26a *= var26a;
+					var26a *= var26a;
+					var26a = 1.0D - var26a;
+					var26 *= var26a;
+				}
+				if(Personalization.pureGeneration && var26 > 1.0D) {
+					var26 = 1.0D;
+				}
+
+				var45 = var45 * 3.0D - (Personalization.terrainAlpha ? 3.0D : 2.0D);
 				if(var45 < 0.0D) {
 					var45 /= 2.0D;
 					if(var45 < -1.0D) {
@@ -270,26 +318,57 @@
 
 					var45 /= 1.4D;
 					var45 /= 2.0D;
+					if (Personalization.pureGeneration) {
+						var26 = 0.0D;
+					}
 				} else {
 					if(var45 > 1.0D) {
 						var45 = 1.0D;
 					}
 
-					var45 /= 8.0D;
-				}
-
+					var45 /= Personalization.terrainAlpha ? 6.0D : 8.0D;
+				}
+
+				double var28 = var17;
+				if (Personalization.pureGeneration) {
+					if(var26 < 0.0D) {
+						var26 = 0.0D;
+					}
+
+					var26 += 0.5D;
+					var28 = var45;
+
+					if (Personalization.amplified) {
+						var28 = 1.0F + var28 / 2.0F * 2.0F;
+						var26 = 1.0F + var26 / 2.0F * 4.0F;
+					}
+				} else {
+					var28 += var45 * 0.2D;
+				}
+
+				double eFactor = 1.0F;
+				if (Personalization.entropy >= 0.0F) {
+					eFactor -= Personalization.entropy * 0.5D;
+				} else {
+					eFactor -= Personalization.entropy * (Math.abs(this.field_922_a.generateActualNoise((var2 + var14) / 80.0D, 0.0D, (var4 + var15) / 80.0D)) + 0.5F);
+				}
+
+				if (Personalization.pureGeneration || baseHeight >= 0.0D) {
+					var26 *= eFactor;
+				}
+				var28 = var28 * (double)17.0D / 16.0D;
+				var28 = (double)17.0D / 2.0D + var28 * 4.0D;
 				++var13;
 
+				if (Personalization.gameMode == B18XGameMode.ISLES_OF_TIME) {
+					double islandAmount = B18XGameMode.getIsleFactor(var2 + var14, var4 + var15, 4);
+					var28 = MathHelper.lerp(var28, 17.0D / 4.0D, islandAmount);
+					var26 = MathHelper.lerp(var26, 0.25D, islandAmount);
+				}
+
 				for(int var46 = 0; var46 < var6; ++var46) {
-					double var47 = (double)var17;
-					double var26 = (double)var16;
-					var47 += var45 * 0.2D;
-					var47 = var47 * (double)var6 / 16.0D;
-					double var28 = (double)var6 / 2.0D + var47 * 4.0D;
 					double var30 = 0.0D;
-					double var10000 = ((double)var46 - var28) * 12.0D * 128.0D;
-					this.worldObj.getClass();
-					double var32 = var10000 / 128.0D / var26;
+					double var32 = ((double)var46 - var28) * 12.0D / var26;
 					if(var32 < 0.0D) {
 						var32 *= 4.0D;
 					}
@@ -305,12 +384,33 @@
 						var30 = var34 + (var36 - var34) * var38;
 					}
 
+					int cutoff = Personalization.limitTerrainHeight ? 13 : var6 - 4;
+
 					var30 -= var32;
-					if(var46 > var6 - 4) {
-						double var40 = (double)((float)(var46 - (var6 - 4)) / 3.0F);
+					if(var46 > cutoff + 3) {
+						var30 = 0.0D;
+					} else if(var46 > cutoff) {
+						double var40 = (double)((float)(var46 - (cutoff)) / 3.0F);
 						var30 = var30 * (1.0D - var40) + -10.0D * var40;
 					}
 
+					if (Personalization.noiseCaves) {
+						double cave = this.caveNoise.generateNoise((var2 + var14) * 0.5D, (var3 + var46) * 1.5D, (var4 + var15) * 0.5D) - 2.0D;
+						if (cave > 0.0D) {
+							int caveCutoff = var20.field_35492_q > -0.2F ? 4 : 2;
+							if (var46 < 3) {
+								cave -= cave * ((3 - var46) / 2.0D);
+							}
+							if (var46 > caveCutoff) {
+								cave -= cave * ((var46 - caveCutoff) / 2.0D);
+							}
+						}
+
+						if (var30 > 0.0D && cave > 0.0D) {
+							var30 *= -cave;
+						}
+					}
+
 					var1[var12] = var30;
 					++var12;
 				}
@@ -320,6 +420,169 @@
 		return var1;
 	}
 
+	private double[] func_4061_a_415(double[] var1, int var2, int var3, int var4, int var5, int var6, int var7) {
+		if(var1 == null) {
+			var1 = new double[var5 * var6 * var7];
+		}
+
+		if(this.field_35388_l == null) {
+			this.field_35388_l = new float[25];
+
+			for(int var8 = -2; var8 <= 2; ++var8) {
+				for(int var9 = -2; var9 <= 2; ++var9) {
+					float var10 = 10.0F / MathHelper.sqrt_float((float)(var8 * var8 + var9 * var9) + 0.2F);
+					this.field_35388_l[var8 + 2 + (var9 + 2) * 5] = var10;
+				}
+			}
+		}
+
+		int var12 = 0;
+
+		for (int i = 0; i < 100; i++) {
+			this.minHeights[i] = this.biomesForGeneration[i].getMinHeight(var2 - 2 + i % 10, var4 - 2 + i / 10);
+			this.maxHeights[i] = this.biomesForGeneration[i].getMaxHeight(var2 - 2 + i % 10, var4 - 2 + i / 10);
+		}
+
+		for(int var14 = 0; var14 < var5; ++var14) {
+			for(int var15 = 0; var15 < var7; ++var15) {
+				int var14p = var2 + var14;
+				int var15p = var4 + var15;
+
+				float var16 = 0.0F;
+				float var17 = 0.0F;
+				float var18 = 0.0F;
+				byte var19 = 2;
+				int i = var14 + 2 + (var15 + 2) * (var5 + 5);
+				float baseMinHeight = this.minHeights[i];
+
+				for(int var21 = -var19; var21 <= var19; ++var21) {
+					for(int var22 = -var19; var22 <= var19; ++var22) {
+						i = var14 + var21 + 2 + (var15 + var22 + 2) * (var5 + 5);
+						float minHeight = this.minHeights[i];
+						float var25 = minHeight;
+						float var26 = this.maxHeights[i];
+
+						if(Personalization.amplified && var25 > -0.5F) {
+							var25 = 1.0F + var25 / 2.0F * 2.0F;
+							var26 = 1.0F + var26 / 2.0F * 4.0F;
+						}
+
+						float var24 = this.field_35388_l[var21 + 2 + (var22 + 2) * 5] / (minHeight + 2.0F);
+						if(minHeight > baseMinHeight) {
+							var24 /= 2.0F;
+						}
+
+						var16 += var26 * var24;
+						var17 += var25 * var24;
+						var18 += var24;
+					}
+				}
+
+				var16 /= var18;
+				var17 /= var18;
+				var16 = var16 * 0.9F + 0.1F;
+				var17 = (var17 * 4.0F - 1.0F) / 8.0F;
+
+				double islandAmount = Personalization.gameMode == B18XGameMode.ISLES_OF_TIME
+						? B18XGameMode.getIsleFactor(var2 + var14, var4 + var15, 4) : 0.0D;
+
+				for(int var46 = 0; var46 < var6 * 2; var46 += 2) {
+					double var47 = (double)var17;
+					double var26 = (double)var16;
+					var47 *= 8.5D;
+
+					double var7a = Personalization.pureGeneration ? (var46 * (Personalization.amplified ? 1.0D : 4.0D)) - 64.0D
+							: ((var46 - var47) * 4.0D - 64.0D) / var26;
+					if (islandAmount > 0.0D) {
+						var7a += (((var46 + 17.0D / 4.0D) * 4.0D - 64.0D) / 0.25D - var7a) * islandAmount;
+					}
+
+					if(var7a < 0.0D) {
+						var7a *= 3.0D;
+					}
+
+					double var9 = this.field_910_m.generateNoiseOctaves(var14p * 684.412D / 80.0D, var46 * 684.412D / 400.0D, var15p * 684.412D / 80.0D) / 2.0D;
+					double var11;
+					double var13;
+					if(var9 < -1.0D) {
+						var11 = this.field_912_k.generateNoiseOctaves(var14p * 684.412D, var46 * 984.412D, var15p * 684.412D) / 512.0D;
+						var13 = var11 - var7a;
+						if(var13 < -10.0D) {
+							var13 = -10.0D;
+						}
+
+						if(var13 > 10.0D) {
+							var13 = 10.0D;
+						}
+					} else if(var9 > 1.0D) {
+						var11 = this.field_911_l.generateNoiseOctaves(var14p * 684.412D, var46 * 984.412D, var15p * 684.412D) / 512.0D;
+						var13 = var11 - var7a;
+						if(var13 < -10.0D) {
+							var13 = -10.0D;
+						}
+
+						if(var13 > 10.0D) {
+							var13 = 10.0D;
+						}
+					} else {
+						double var15a = this.field_912_k.generateNoiseOctaves(var14p * 684.412D, var46 * 984.412D, var15p * 684.412D) / 512.0D - var7a;
+						double var17a = this.field_911_l.generateNoiseOctaves(var14p * 684.412D, var46 * 984.412D, var15p * 684.412D) / 512.0D - var7a;
+						if(var15a < -10.0D) {
+							var15a = -10.0D;
+						}
+
+						if(var15a > 10.0D) {
+							var15a = 10.0D;
+						}
+
+						if(var17a < -10.0D) {
+							var17a = -10.0D;
+						}
+
+						if(var17a > 10.0D) {
+							var17a = 10.0D;
+						}
+
+						double var19a = (var9 + 1.0D) / 2.0D;
+						var11 = var15a + (var17a - var15a) * var19a;
+						var13 = var11;
+					}
+
+					int cutoff = Personalization.limitTerrainHeight ? 29 : var6 * 2 - 4;
+
+					if(var46 > cutoff + 3) {
+						var13 = 0.0D;
+					} if(var46 > cutoff) {
+						double var40 = (double)((float)(var46 - (cutoff)) / 3.0F);
+						var13 = var13 * (1.0D - var40) + -10.0D * var40;
+					}
+
+					if (Personalization.noiseCaves) {
+						double cave = this.caveNoise.generateNoise((var2 + var14) * 0.5D, (var3 + var46) * 1.5D, (var4 + var15) * 0.5D);
+						if (cave > 0.0D) {
+							int caveCutoff = 4;
+//							if (var46 < 2) {
+//								cave -= cave * ((3 - var46) / 2.0D);
+//							}
+							if (var46 > caveCutoff) {
+								cave -= cave * ((var46 - caveCutoff) / 2.0D);
+							}
+						}
+
+						if (var13 > 0.0D && cave > 0.0D) {
+							var13 *= -cave;
+						}
+					}
+
+					var1[var12] = var13;
+					++var12;
+				}
+			}
+		}
+
+		return var1;
+	}
+
 	public boolean chunkExists(int var1, int var2) {
 		return true;
 	}
@@ -337,7 +600,7 @@
 		if(this.field_35389_t) {
 			this.field_35386_d.func_35629_a(this.worldObj, this.rand, var2, var3);
 			this.field_35385_f.func_35629_a(this.worldObj, this.rand, var2, var3);
-			var11 = this.field_35387_e.func_35629_a(this.worldObj, this.rand, var2, var3);
+			var11 = Personalization.gameMode != B18XGameMode.ISLES_OF_TIME && this.field_35387_e.func_35629_a(this.worldObj, this.rand, var2, var3);
 		}
 
 		int var12;
@@ -377,7 +640,29 @@
 		}
 
 		var6.func_35477_a(this.worldObj, this.rand, var4, var5);
-		SpawnerAnimals.func_35957_a(this.worldObj, var6, var4 + 8, var5 + 8, 16, 16, this.rand);
+		if (!Personalization.fixedAnimalSpawning) {
+			SpawnerAnimals.func_35957_a(this.worldObj, var6, var4 + 8, var5 + 8, 16, 16, this.rand);
+		}
+		var4 += 8;
+		var5 += 8;
+
+		for(var12 = 0; var12 < 16; ++var12) {
+			for(var13 = 0; var13 < 16; ++var13) {
+				var14 = this.worldObj.getHeightValue(var4 + var12, var5 + var13);
+				if(this.worldObj.isBlockHydrated(var12 + var4, var14 - 1, var13 + var5, false)) {
+					this.worldObj.setBlockWithNotify(var12 + var4, var14 - 1, var13 + var5, Block.ice.blockID);
+				}
+
+				while (!this.worldObj.isAirBlock(var12 + var4, var14, var13 + var5)) {
+					var14++;
+				}
+
+				if(this.worldObj.canSnowAt(var12 + var4, var14, var13 + var5)) {
+					this.worldObj.setBlockWithNotify(var12 + var4, var14, var13 + var5, Block.snow.blockID);
+				}
+			}
+		}
+
 		BlockSand.fallInstantly = false;
 	}
 
--- net/minecraft/src/ItemFlintAndSteel.java
+++ net/minecraft/src/ItemFlintAndSteel.java
@@ -8,6 +8,13 @@
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
+		if (var3.getBlockId(var4, var5, var6) == Block.skyPortalFrame.blockID && var3.getBlockMetadata(var4, var5, var6) == 0) {
+			var3.playSoundEffect((double)var4 + 0.5D, (double)var5 + 0.5D, (double)var6 + 0.5D, "fire.ignite", 1.0F, itemRand.nextFloat() * 0.4F + 0.8F);
+			var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.skyPortalFrame.blockID, 1);
+			var1.damageItem(1, var2);
+			return true;
+		}
+
 		if(var7 == 0) {
 			--var5;
 		}
@@ -39,6 +46,11 @@
 			if(var8 == 0) {
 				var3.playSoundEffect((double)var4 + 0.5D, (double)var5 + 0.5D, (double)var6 + 0.5D, "fire.ignite", 1.0F, itemRand.nextFloat() * 0.4F + 0.8F);
 				var3.setBlockWithNotify(var4, var5, var6, Block.fire.blockID);
+
+				if (var2.dimension == 2 && var3.getBlockId(var4, var5, var6) == Block.fire.blockID) {
+					var3.playSoundEffect((double)var4 + 0.5D, (double)var5 + 0.5D, (double)var6 + 0.5D, "random.breath", 1.0F, itemRand.nextFloat() * 0.2F + 0.9F);
+					var3.setBlockWithNotify(var4, var5, var6, 0);
+				}
 			}
 
 			var1.damageItem(1, var2);
--- net/minecraft/src/EntityList.java
+++ net/minecraft/src/EntityList.java
@@ -98,6 +98,11 @@
 		addMapping(EntityEnderman.class, "Enderman", 58);
 		addMapping(EntityCaveSpider.class, "CaveSpider", 59);
 		addMapping(EntitySilverfish.class, "Silverfish", 60);
+		addMapping(EntityBlaze.class, "Blaze", 61);
+		addMapping(EntityOfficeNotch.class, "OfficeNotch", 62);
+		addMapping(EntityDragon.class, "EnderDragon", 63);
+		addMapping(EntityJeb.class, "Jeb", 64);
+		addMapping(EntityNotch.class, "Notch", 65);
 		addMapping(EntityPig.class, "Pig", 90);
 		addMapping(EntitySheep.class, "Sheep", 91);
 		addMapping(EntityCow.class, "Cow", 92);
--- /dev/null
+++ net/minecraft/src/BlockTable.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+public class BlockTable extends Block {
+	protected BlockTable(int var1, int var2, Material var3) {
+		super(var1, var2, var3);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F / 16.0F, 1.0F);
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+}
--- net/minecraft/src/GuiContainer.java
+++ net/minecraft/src/GuiContainer.java
@@ -18,7 +18,7 @@
 
 	public void initGui() {
 		super.initGui();
-		this.mc.thePlayer.craftingInventory = this.inventorySlots;
+		this.game.thePlayer.craftingInventory = this.inventorySlots;
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
@@ -27,7 +27,12 @@
 		int var5 = (this.height - this.ySize) / 2;
 		this.drawGuiContainerBackgroundLayer(var3);
 		GL11.glPushMatrix();
-		GL11.glRotatef(120.0F, 1.0F, 0.0F, 0.0F);
+		if (Personalization.fixedItemShading) {
+			GL11.glRotatef(-30.0F, 0.0F, 1.0F, 0.0F);
+			GL11.glRotatef(165.0F, 1.0F, 0.0F, 0.0F);
+		} else {
+			GL11.glRotatef(120.0F, 1.0F, 0.0F, 0.0F);
+		}
 		RenderHelper.enableStandardItemLighting();
 		GL11.glPopMatrix();
 		GL11.glPushMatrix();
@@ -57,11 +62,11 @@
 			}
 		}
 
-		InventoryPlayer var13 = this.mc.thePlayer.inventory;
+		InventoryPlayer var13 = this.game.thePlayer.inventory;
 		if(var13.getItemStack() != null) {
 			GL11.glTranslatef(0.0F, 0.0F, 32.0F);
-			itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, var13.getItemStack(), var1 - var4 - 8, var2 - var5 - 8);
-			itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, var13.getItemStack(), var1 - var4 - 8, var2 - var5 - 8);
+			itemRenderer.renderItemIntoGUI(this.fontRenderer, this.game.renderEngine, var13.getItemStack(), var1 - var4 - 8, var2 - var5 - 8);
+			itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.game.renderEngine, var13.getItemStack(), var1 - var4 - 8, var2 - var5 - 8);
 		}
 
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
@@ -69,21 +74,34 @@
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
 		this.drawGuiContainerForegroundLayer();
-		if(var13.getItemStack() == null && var6 != null && var6.getHasStack()) {
+		if(var13.getItemStack() == null && var6 != null && var6.getHasStack() && !Personalization.alphaTextures) {
 			String var15 = ("" + StringTranslate.getInstance().translateNamedKey(var6.getStack().getItemName())).trim();
 			if(var15.length() > 0) {
 				var9 = var1 - var4 + 12;
 				var10 = var2 - var5 - 12;
 				int var11 = this.fontRenderer.getStringWidth(var15);
-				this.drawGradientRect(var9 - 3, var10 - 3, var9 + var11 + 3, var10 + 8 + 3, -1073741824, -1073741824);
+				if (Personalization.futureTextures) {
+					int color = -267386864;
+					this.drawGradientRect(var9 - 3, var10 - 4, var9 + var11 + 3, var10 - 3, color, color);
+					this.drawGradientRect(var9 - 3, var10 + 8 + 3, var9 + var11 + 3, var10 + 8 + 4, color, color);
+					this.drawGradientRect(var9 - 3, var10 - 3, var9 + var11 + 3, var10 + 8 + 3, color, color);
+					this.drawGradientRect(var9 - 4, var10 - 3, var9 - 3, var10 + 8 + 3, color, color);
+					this.drawGradientRect(var9 + var11 + 3, var10 - 3, var9 + var11 + 4, var10 + 8 + 3, color, color);
+					int color1 = 1347420415;
+					int color2 = (color1 & 16711422) >> 1 | color1 & -16777216;
+					this.drawGradientRect(var9 - 3, var10 - 3 + 1, var9 - 3 + 1, var10 + 8 + 3 - 1, color1, color2);
+					this.drawGradientRect(var9 + var11 + 2, var10 - 3 + 1, var9 + var11 + 3, var10 + 8 + 3 - 1, color1, color2);
+					this.drawGradientRect(var9 - 3, var10 - 3, var9 + var11 + 3, var10 - 3 + 1, color1, color1);
+					this.drawGradientRect(var9 - 3, var10 + 8 + 2, var9 + var11 + 3, var10 + 8 + 3, color2, color2);
+				} else {
+					this.drawGradientRect(var9 - 3, var10 - 3, var9 + var11 + 3, var10 + 8 + 3, -1073741824, -1073741824);
+				}
 				this.fontRenderer.drawStringWithShadow(var15, var9, var10, -1);
 			}
 		}
 
 		GL11.glPopMatrix();
 		super.drawScreen(var1, var2, var3);
-		GL11.glEnable(GL11.GL_LIGHTING);
-		GL11.glEnable(GL11.GL_DEPTH_TEST);
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
@@ -99,15 +117,15 @@
 			int var5 = var1.getBackgroundIconIndex();
 			if(var5 >= 0) {
 				GL11.glDisable(GL11.GL_LIGHTING);
-				this.mc.renderEngine.bindTexture(this.mc.renderEngine.getTexture("/gui/items.png"));
+				this.game.renderEngine.bindTexture(this.game.renderEngine.getTexture("/gui/items.png"));
 				this.drawTexturedModalRect(var2, var3, var5 % 16 * 16, var5 / 16 * 16, 16, 16);
 				GL11.glEnable(GL11.GL_LIGHTING);
 				return;
 			}
 		}
 
-		itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, var4, var2, var3);
-		itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, var4, var2, var3);
+		itemRenderer.renderItemIntoGUI(this.fontRenderer, this.game.renderEngine, var4, var2, var3);
+		itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.game.renderEngine, var4, var2, var3);
 	}
 
 	private Slot getSlotAtPosition(int var1, int var2) {
@@ -158,7 +176,7 @@
 			var2 = var1.slotNumber;
 		}
 
-		this.mc.playerController.windowClick(this.inventorySlots.windowId, var2, var3, var4, this.mc.thePlayer);
+		this.game.playerController.windowClick(this.inventorySlots.windowId, var2, var3, var4, this.game.thePlayer);
 	}
 
 	protected void mouseMovedOrUp(int var1, int var2, int var3) {
@@ -168,16 +186,16 @@
 	}
 
 	protected void keyTyped(char var1, int var2) {
-		if(var2 == 1 || var2 == this.mc.gameSettings.keyBindInventory.keyCode) {
-			this.mc.thePlayer.closeScreen();
+		if(var2 == 1 || var2 == this.game.gameSettings.keyBindInventory.keyCode) {
+			this.game.thePlayer.closeScreen();
 		}
 
 	}
 
 	public void onGuiClosed() {
-		if(this.mc.thePlayer != null) {
-			this.inventorySlots.onCraftGuiClosed(this.mc.thePlayer);
-			this.mc.playerController.func_20086_a(this.inventorySlots.windowId, this.mc.thePlayer);
+		if(this.game.thePlayer != null) {
+			this.inventorySlots.onCraftGuiClosed(this.game.thePlayer);
+			this.game.playerController.func_20086_a(this.inventorySlots.windowId, this.game.thePlayer);
 		}
 	}
 
@@ -187,8 +205,8 @@
 
 	public void updateScreen() {
 		super.updateScreen();
-		if(!this.mc.thePlayer.isEntityAlive() || this.mc.thePlayer.isDead) {
-			this.mc.thePlayer.closeScreen();
+		if(!this.game.thePlayer.isEntityAlive() || this.game.thePlayer.isDead) {
+			this.game.thePlayer.closeScreen();
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/Personalization.java
@@ -1,0 +1,1134 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+import java.io.*;
+import java.nio.file.Files;
+import java.util.*;
+
+import static net.minecraft.src.BiomeGenBase.*;
+
+public final class Personalization {
+	public static final String B18X_VERSION = "v1.1";
+
+	public static final boolean DEMO_MODE = false;
+	public static final boolean DEBUG_MODE = false;
+	private static final byte LATEST_SAVE_VERSION = 3;
+	// 0: v1.0
+	// 1: v1.0.1
+	// 2: v1.0.2
+	// 3: v1.1
+
+	public static final Random rand = new Random();
+	public static NBTTagCompound properties;
+	public static String version = null;
+	public static String preset = null;
+	private static int updateHash;
+	private static byte saveVersion = LATEST_SAVE_VERSION;
+
+	public static float betaness = 0.0F;
+	public static float weirdness = 0.0F;
+	public static float chaos = 0.0F;
+	public static float entropy = 0.0F;
+
+	public static boolean controlPanelUnlocked = false;
+	public static boolean vanillaMode = false;
+	public static boolean chaosEffects = true;
+	public static B18XGameMode gameMode = B18XGameMode.NORMAL;
+	public static int hardcoreState = 0;
+
+	public static long noiseSeed = DEMO_MODE ? 0 : rand.nextLong();
+	private static NoiseGeneratorOctaves betanessNoise;
+
+	private static long prevDay = 0;
+	public static long days = 0;
+	public static float betaBias = 0.0F;
+
+	public static PlayerSkillSet skills = new PlayerSkillSet();
+
+	public static final List<PersonalizationOption> options = new ArrayList<>();
+	public static final Map<String, PersonalizationOption> optionMap = new HashMap<>();
+	private static final List<String> presets = new ArrayList<>();
+	private static final Map<String, String> presetNameMap = new HashMap<>();
+
+	// Interface
+	public static boolean panorama = true;
+	public static boolean fixedItemShading = false;
+	public static boolean xpLevel = false;
+	public static boolean skillPoints = false;
+	// Generation
+	public static boolean betaBeaches = false;
+	public static boolean tallerBiomes = false;
+	public static boolean smallBiomes = false;
+	public static boolean rivers = true;
+	public static boolean smallOcean = false;
+	public static boolean moreVillageBiomes = false;
+	public static boolean genQuartz = false;
+	public static boolean terrain415 = false;
+	public static boolean terrainAlpha = false;
+	public static boolean alphaBiome = false;
+	public static boolean pureGeneration = false;
+	public static boolean endSky = false;
+	public static boolean wideRivers = false;
+	public static boolean amplified = false;
+	public static boolean limitTerrainHeight = true;
+	public static boolean hills = false;
+	public static boolean coldenOaks = false;
+	public static boolean oakOnly = false;
+	public static boolean inheritLogs = false;
+	public static boolean flowerForests = false;
+	public static boolean noiseCaves = false;
+	public static boolean notchVillages = false;
+	// Graphics
+	public static boolean alphaTextures = false;
+	public static boolean jappaTextures = false;
+	public static boolean futureTextures = false;
+	public static boolean pastTextures = false;
+	public static boolean coloredWater = false;
+	public static boolean whiteLight = false;
+	public static boolean orangeLight = false;
+	public static boolean oldAO = false;
+	public static boolean oldSkylight = false;
+	public static boolean betaSky = false;
+	public static boolean smoothClimate = false;
+	public static boolean smoothBiomes = false;
+	public static boolean fancyGrass = true;
+	public static boolean pe8env = false;
+	public static boolean pe7env = false;
+	public static boolean classicArm = false;
+	public static boolean thickFog = true;
+	public static boolean thickerFog = false;
+	public static boolean fuzzyGrass = true;
+	public static boolean fullBlockChests = false;
+	public static boolean frostedGrass = false;
+	public static boolean directionalLighting = false;
+	// Mobs
+	public static boolean animalPanic = true;
+	public static boolean fixedAnimalSpawning = false;
+	public static boolean sleepingSpawnsMonsters = true;
+	public static boolean woolPunch = false;
+	public static boolean brownSpiders = false;
+	public static boolean bloodyPigmen = false;
+	// Hunger
+	public static boolean hunger = true;
+	public static boolean thirst = false;
+	public static boolean fastEat = false;
+	public static boolean stackFood = true;
+	public static boolean reducedExhaustion = false;
+	// Experience
+	public static boolean experience = true;
+	public static boolean xpSpam = false;
+	public static boolean skillMenu = false;
+	// Combat
+	public static boolean crits = true;
+	public static boolean betaKnockback = true;
+	public static boolean doKnockback = true;
+	public static boolean stopSprintingInCombat = true;
+	public static boolean betterArmor = false;
+	public static boolean blocking = true;
+	public static boolean instantBows = false;
+	// Movement
+	public static boolean sprinting = true;
+	public static boolean paxSprinting = false;
+	public static boolean longJumping = false;
+	// Endermen
+	public static boolean redEnderman = false;
+	public static boolean whiteEnderman = false;
+	public static boolean greenEnderman = false;
+	public static boolean weakEndermen = true;
+	public static boolean commonEndermen = false;
+	public static boolean spawnBlazes = false;
+	// Misc
+	public static boolean fishSponge = false;
+	public static boolean mt19937 = false;
+	// Fun
+	public static boolean owoSpeak = false;
+	public static boolean googlyStaggo = false;
+	public static boolean explosiveArrows = false;
+
+	private Personalization() {
+	}
+
+	public static void init() {
+		while (noiseSeed == 0) {
+			noiseSeed = rand.nextLong();
+		}
+
+		version = null;
+		setupNoise();
+		try {
+			loadOptions();
+		} catch (IOException e) {
+			System.out.println("Failed to load Beta 1.8.X options");
+			e.printStackTrace();
+		}
+
+		if (version == null || version.isEmpty()) {
+			version = getVersion();
+		}
+	}
+
+	public static void setupNoise() {
+		Random noiseRandom = new Random(noiseSeed);
+		betanessNoise = new NoiseGeneratorOctaves(noiseRandom, 2);
+	}
+
+	public static void loadOptions() throws IOException {
+		if (DEMO_MODE) {
+			return;
+		}
+
+		File data = Minecraft.getMinecraftDir();
+		File b18xOptions = new File(data, "b18x.dat");
+
+		if (!b18xOptions.exists()) {
+			if (b18xOptions.createNewFile()) {
+				properties = new NBTTagCompound();
+				properties.setTag("Presets", new NBTTagCompound());
+
+				try (OutputStream output = Files.newOutputStream(b18xOptions.toPath())) {
+					CompressedStreamTools.writeGzippedCompoundToOutputStream(properties, output);
+				}
+			}
+
+			vanillaMode = rand.nextInt(3) != 0;
+			personalize();
+			vanillaMode = false;
+
+			presets.add(0, "");
+			presetNameMap.put("", "None");
+			return;
+		}
+
+		try (InputStream input = Files.newInputStream(b18xOptions.toPath())) {
+			properties = CompressedStreamTools.loadGzippedCompoundFromOutputStream(input);
+		}
+
+		betaness = properties.getFloat("Betaness");
+		weirdness = properties.getFloat("Weirdness");
+		chaos = properties.getFloat("Chaos");
+		entropy = properties.getFloat("Entropy");
+		days = properties.getLong("Days");
+		if (properties.hasKey("SaveVersion")) {
+			saveVersion = properties.getByte("SaveVersion");
+		}
+		controlPanelUnlocked = properties.getBoolean("ControlPanelUnlocked");
+		chaosEffects = !properties.hasKey("ChaosEffects") || properties.getBoolean("ChaosEffects");
+		gameMode = B18XGameMode.fromName(properties.getString("GameMode"));
+		hardcoreState = properties.getInteger("HardcoreState");
+		if (properties.hasKey("Skills")) {
+			skills.readFromNBT(properties.getCompoundTag("Skills"));
+		}
+
+		if (properties.hasKey("NoiseSeed")) {
+			noiseSeed = properties.getLong("NoiseSeed");
+		} else {
+			noiseSeed = 0;
+			while (noiseSeed == 0) {
+				noiseSeed = rand.nextLong();
+			}
+		}
+		preset = properties.getString("Preset");
+		setPreset(preset);
+
+		if (saveVersion < 3 && chaos > 1.0F) {
+			chaos += 1.0F;
+		}
+
+		NBTTagCompound presetList = properties.getCompoundTag("Presets");
+		for (NBTBase preset : (Collection<NBTBase>)presetList.func_28110_c()) {
+			if (preset instanceof NBTTagCompound) {
+				presetNameMap.put(preset.getKey(), ((NBTTagCompound)preset).getString("Name"));
+				presets.add(preset.getKey());
+			}
+		}
+
+		presets.sort(Comparator.comparing(presetNameMap::get));
+		presets.add(0, "");
+		presetNameMap.put("", "None");
+
+		setupNoise();
+	}
+
+	public static void saveOptions() throws IOException {
+		saveOptions(false);
+	}
+
+	public static void saveOptions(boolean setPreset) throws IOException {
+		if (DEMO_MODE) {
+			return;
+		}
+
+		properties.setFloat("Betaness", betaness);
+		properties.setFloat("Weirdness", weirdness);
+		properties.setFloat("Chaos", chaos);
+		properties.setFloat("Entropy", entropy);
+		properties.setLong("Days", days);
+		properties.setLong("NoiseSeed", noiseSeed);
+		properties.setByte("SaveVersion", LATEST_SAVE_VERSION);
+		properties.setBoolean("ControlPanelUnlocked", controlPanelUnlocked);
+		properties.setBoolean("ChaosEffects", chaosEffects);
+		properties.setString("GameMode", gameMode.toString());
+//		properties.setInteger("HardcoreState", hardcoreState);
+		if (preset == null || preset.isEmpty() || !presets.contains(preset)) {
+			properties.setTag("Preset", null);
+		} else {
+			properties.setString("Preset", preset);
+		}
+
+		if (setPreset) {
+			String presetId = UUID.randomUUID().toString();
+			properties.getCompoundTag("Presets").setCompoundTag(presetId, getPresetNBT());
+			presetNameMap.put(presetId, version);
+			presets.add(presetId);
+			preset = presetId;
+		}
+
+		File data = Minecraft.getMinecraftDir();
+		File b18xOptions = new File(data, "b18x.dat");
+
+		if (!b18xOptions.exists()) {
+			if (!b18xOptions.createNewFile()) {
+				throw new IOException("Failed to create file \"" + b18xOptions.getPath() + "\"");
+			}
+		}
+
+		try (OutputStream output = Files.newOutputStream(b18xOptions.toPath())) {
+			CompressedStreamTools.writeGzippedCompoundToOutputStream(properties, output);
+		}
+	}
+
+	public static NBTTagCompound getPresetNBT() {
+		NBTTagCompound presetTag = new NBTTagCompound();
+		NBTTagCompound presetSettings = new NBTTagCompound();
+		presetTag.setString("Name", version);
+
+		for (PersonalizationOption option : options) {
+			if (!option.isHeading) {
+				presetSettings.setBoolean(option.id, option.value);
+			}
+		}
+
+		presetTag.setCompoundTag("Settings", presetSettings);
+		presetTag.setFloat("Betaness", betaness);
+		presetTag.setFloat("Weirdness", weirdness);
+		presetTag.setFloat("Chaos", chaos);
+		presetTag.setFloat("Entropy", entropy);
+		presetTag.setBoolean("ChaosEffects", chaosEffects);
+		presetTag.setString("GameMode", gameMode.toString());
+		return presetTag;
+	}
+
+	public static GuiScreen getStartScreen() {
+		if (DEMO_MODE) {
+			return new GuiDemoPreset();
+		}
+
+		switch (saveVersion) {
+			case 0: return new GuiStupid(0);
+			case 1: return new GuiStupid(1);
+			default: return new GuiMainMenu();
+		}
+	}
+
+	public static void setPreset(String preset) {
+		if (preset == null || preset.isEmpty()) {
+			Personalization.preset = null;
+			if (gameMode == B18XGameMode.NORMAL) {
+				repersonalize();
+			} else {
+				version = null;
+				options.clear();
+				optionMap.clear();
+				personalize();
+			}
+			return;
+		}
+
+		NBTTagCompound presetTag = properties.getCompoundTag("Presets").getCompoundTag(preset);
+		if (presetTag.func_28110_c().isEmpty()) return;
+
+		NBTTagCompound presetSettings = presetTag.getCompoundTag("Settings");
+		for (NBTBase setting : (Collection<NBTBase>)presetSettings.func_28110_c()) {
+			if (!(setting instanceof NBTTagByte)) continue;
+
+			String key = setting.getKey();
+			boolean value = ((NBTTagByte)setting).byteValue > 0;
+
+			if (optionMap.containsKey(key)) {
+				optionMap.get(key).value = value;
+			} else {
+				optionMap.put(key, new PersonalizationOption(key, value));
+			}
+		}
+
+		version = presetTag.getString("Name");
+		Personalization.preset = preset;
+		personalize();
+	}
+
+	public static boolean setPresetNBT(NBTTagCompound compound) {
+		int oldUpdateHash = updateHash;
+
+		NBTTagCompound presetSettings = compound.getCompoundTag("Settings");
+		for (NBTBase setting : (Collection<NBTBase>)presetSettings.func_28110_c()) {
+			if (!(setting instanceof NBTTagByte)) continue;
+
+			String key = setting.getKey();
+			boolean value = ((NBTTagByte)setting).byteValue > 0;
+
+			if (optionMap.containsKey(key)) {
+				optionMap.get(key).value = value;
+			} else {
+				optionMap.put(key, new PersonalizationOption(key, value));
+			}
+		}
+
+		version = compound.getString("Name");
+		betaness = compound.getFloat("Betaness");
+		weirdness = compound.getFloat("Weirdness");
+		chaos = compound.getFloat("Chaos");
+		entropy = compound.getFloat("Entropy");
+		chaosEffects = compound.getBoolean("ChaosEffects");
+		gameMode = B18XGameMode.fromName(compound.getString("GameMode"));
+		personalize();
+
+		return updateHash != oldUpdateHash;
+	}
+
+	public static void removePreset(String preset) {
+		if (preset == null || preset.isEmpty() || !presets.contains(preset)) return;
+
+		presets.remove(preset);
+		presetNameMap.remove(preset);
+		properties.getCompoundTag("Presets").setTag(preset, null);
+
+		if (preset.equals(Personalization.preset)) {
+			Personalization.preset = null;
+		}
+	}
+
+	public static List<String> getPresets() {
+		return presets;
+	}
+
+	public static String getPresetName(String preset) {
+		return presetNameMap.get(preset);
+	}
+
+	public static void adjustValues() {
+		if (noiseSeed == 0 || DEMO_MODE) {
+			return;
+		}
+
+		float bRange = getBetanessRange();
+		float wRange = getWeirdnessRange();
+		float eRange = getEntropyRange();
+
+		days++;
+		if (chaosEffects) chaos = Math.min(Math.max(chaos + (rand.nextFloat() * 0.05F - 0.005F), 0.0F), 3.0F);
+		betaBias /= 100000.0F;
+		betaBias += (float)betanessNoise.generateActualNoise((days + 10) / 4.0D, 0.0D, 0.0D) * 0.5F;
+		betaness = Math.min(Math.max(betaness + (float)betanessNoise.generateActualNoise((days + 10) / 3.0D, 100.0D) / 1.5F * bRange, -bRange), bRange);
+		weirdness = Math.min(Math.max(weirdness + (float)betanessNoise.generateActualNoise((days + 10) / 3.0D, 200.0D) / 2.0F * wRange, -wRange), wRange);
+		entropy = Math.min(Math.max(entropy + (float)betanessNoise.generateActualNoise((days + 10) / 5.0D, 300.0D) / 2.0F * eRange, -eRange), eRange);
+		betaBias = 0.0F;
+	}
+
+	public static void repersonalize() {
+		if (preset != null && !preset.isEmpty()) return;
+
+		version = null;
+		options.clear();
+		optionMap.clear();
+		adjustValues();
+		personalize();
+	}
+
+	public static void personalize() {
+		options.clear();
+
+		head("interface");
+		panorama = opt("panorama", !doEarlyBeta());
+		fixedItemShading = opt("fixedItemShading", doWeakBeta() || doWeakAdventure());
+		xpLevel = opt("xpLevel", doEarlyAdventure());
+		skillPoints = opt("skillPoints", doBeta() || doStrongAdventure());
+
+		head("generation");
+		betaBeaches = opt("betaBeaches", doEarlyBeta());
+		tallerBiomes = opt("tallerBiomes", doBeta() || doAltWeird());
+		smallBiomes = opt("smallBiomes", doStrongBeta());
+		rivers = opt("rivers", !doWeakBeta());
+		smallOcean = opt("smallOcean", doMidBeta() || doStrongAdventure());
+		moreVillageBiomes = opt("moreVillageBiomes", doBeta() || doStrongAdventure() && doAbsWeird());
+		genQuartz = opt("genQuartz", doEarlyChaos());
+		terrain415 = opt("terrain415", doWeakBeta() && (doVeryAltWeird() || doChaos() && doWeird()));
+		terrainAlpha = opt("terrainAlpha", doWeakBeta() && doVeryWeird() || doExtBeta() && doQuiteAbsWeird());
+		alphaBiome = opt("alphaBiome", doExtBeta() && doQuiteAbsWeird());
+		pureGeneration = opt("pureGeneration", doStrongBeta());
+		endSky = opt("endSky", doStrongAdventure());
+		wideRivers = opt("wideRivers", doBeta() || rand.nextFloat() < -entropy);
+		amplified = opt("amplified", doVeryAltWeird() && doLateChaos());
+		limitTerrainHeight = opt("limitTerrainHeight", !doEarlyChaos() || entropy >= 0.0F);
+		hills = opt("hills", doEarlyAdventure());
+		coldenOaks = opt("coldenOaks", doChaos());
+		oakOnly = opt("oakOnly", doStrongBeta() && doWeird());
+		inheritLogs = opt("inheritLogs", doAltWeird());
+		flowerForests = opt("flowerForests", doExtAdventure() && rand.nextFloat() > entropy);
+		noiseCaves = opt("noiseCaves", doChaos() || doExtAdventure() && doWeird());
+		notchVillages = opt("notchVillages", doMidBeta());
+
+		head("mobs");
+		animalPanic = opt("animalPanic", !doWeakBeta());
+		fixedAnimalSpawning = opt("fixedAnimalSpawning", doWeakBeta() || doStrongAdventure());
+		sleepingSpawnsMonsters = opt("sleepingSpawnsMonsters", !doAdventure());
+		woolPunch = opt("woolPunch", doWeakBeta());
+		spawnBlazes = opt("spawnBlazes", doChaos());
+		brownSpiders = opt("brownSpiders", doChaos());
+		bloodyPigmen = opt("bloodyPigmen", doChaos());
+
+		head("graphics");
+		pe8env = opt("pe8env", (!doStrongBeta() && !doMidAdventure()) && doVeryAltWeird());
+		pe7env = opt("pe7env", pe8env && doBeta() && weirdness < 0.0D);
+		pastTextures = false;
+		futureTextures = false;
+		alphaTextures = false;
+		jappaTextures = false;
+
+		int terrain = (chance50() || !doChaos()) && pe8env ? 1 : multiOpt("pastTextures", doWeakBeta(), "futureTextures", doWeakAdventure() || pe8env && chance50());
+		if (terrain == 0) {
+			if (opt("alphaTextures", doVeryWeird() || doExtBeta() && doQuiteAbsWeird())) {
+				alphaTextures = true;
+			} else {
+				pastTextures = true;
+			}
+			opt("jappaTextures", false);
+		} else if (terrain == 1) {
+			opt("alphaTextures", false);
+			if (opt("jappaTextures", doVeryWeird())) {
+				jappaTextures = true;
+			} else {
+				futureTextures = true;
+			}
+		} else {
+			opt("pastTextures", false);
+			opt("futureTextures", false);
+			opt("alphaTextures", false);
+			opt("jappaTextures", false);
+		}
+
+		coloredWater = opt("coloredWater", (doStrongAdventure() || doStrongBeta()) && doWeird() && !alphaTextures && !pe8env);
+		whiteLight = opt("whiteLight", doStrongBeta());
+		orangeLight = opt("orangeLight", doEarlyAdventure() && doWeird());
+		oldAO = opt("oldAO", doStrongBeta());
+		oldSkylight = opt("oldSkylight", doStrongBeta() || (chance50() || !doChaos()) && pe8env);
+		smoothClimate = opt("smoothClimate", doEarlyBeta());
+		smoothBiomes = opt("smoothBiomes", doEarlyAdventure());
+		betaSky = opt("betaSky", doWeakBeta());
+		fancyGrass = opt("fancyGrass", !(doStrongBeta() && doWeird()));
+		classicArm = opt("classicArm", doExtBeta() && doVeryAltWeird());
+		thickFog = opt("thickFog", !(doStrongAdventure() && doWeird() || doExtAdventure()));
+		thickerFog = opt("thickerFog", (doLateChaos() || rand.nextFloat() < entropy) && rand.nextFloat() > -entropy);
+		fuzzyGrass = opt("fuzzyGrass", !doEarlyAdventure());
+		fullBlockChests = opt("fullBlockChests", doWeakBeta());
+		Block.opaqueCubeLookup[Block.chest.blockID] = fullBlockChests;
+		frostedGrass = opt("frostedGrass", doAdventure() && doWeird());
+		directionalLighting = opt("directionalLighting", doEarlyAdventure() && doVeryWeird());
+
+		head("hunger");
+		hunger = opt("hunger", !doWeakBeta() && (!doMidAltWeird() || doStrongAdventure()));
+		thirst = opt("thirst", doStrongAdventure() && doWeird());
+		fastEat = opt("fastEat", doWeakBeta() && !doMidAbsWeird());
+		stackFood = opt("stackFood", !doStrongBeta());
+		reducedExhaustion = opt("reducedExhaustion", doStrongAdventure());
+
+		head("experience");
+		experience = opt("experience", !doWeakBeta());
+		xpSpam = opt("xpSpam", doBeta() || doStrongAdventure());
+		skillMenu = opt("skillMenu", doEarlyChaos() && experience || doMidAdventure());
+
+		head("combat");
+		crits = opt("crits", !doEarlyBeta());
+		betaKnockback = opt("betaKnockback", !doWeakAdventure());
+		doKnockback = opt("doKnockback", doAdventure());
+		stopSprintingInCombat = opt("stopSprintingInCombat", !doStrongAdventure());
+		betterArmor = opt("betterArmor", doEarlyAdventure());
+		blocking = opt("blocking", !doEarlyBeta());
+		instantBows = opt("instantBows", doWeakBeta());
+
+		head("movement");
+		sprinting = opt("sprinting", !doWeakBeta());
+		paxSprinting = opt("paxSprinting", doEarlyBeta());
+		longJumping = opt("longJumping", doExtBeta());
+
+		head("endermen");
+		redEnderman = opt("redEnderman", doChaos());
+		whiteEnderman = opt("whiteEnderman", !redEnderman && (doStrongBeta() || doBeta() && doAltWeird()));
+		greenEnderman = opt("greenEnderman", !redEnderman && !whiteEnderman && doBeta());
+		weakEndermen = opt("weakEndermen", !redEnderman && !doAdventure());
+		commonEndermen = opt("commonEndermen", doVeryAbsWeird() || doChaos());
+
+		head("misc");
+		fishSponge = opt("fishSponge", doQuiteAbsWeird());
+		mt19937 = opt("mt19937", doChaos() && rand.nextInt(2) == 0 || doEarlyChaos() && pe8env);
+
+		personalizeItems();
+		personalizeBiomes();
+
+		head("fun");
+		owoSpeak = opt("owoSpeak", false);
+		googlyStaggo = opt("googlyStaggo", false);
+		explosiveArrows = opt("explosiveArrows", false);
+
+		if (version == null) version = getVersion();
+		updateHash = Objects.hash(betaness, weirdness, chaos, entropy, options);
+	}
+
+	private static boolean opt(String id, boolean value) {
+		if (optionMap.containsKey(id)) {
+			PersonalizationOption option = optionMap.get(id);
+			if (!options.contains(option)) {
+				options.add(option);
+			}
+			return option.value;
+		}
+
+		if (vanillaMode) {
+			try {
+				value = Personalization.class.getField(id).getBoolean(null);
+			} catch (NoSuchFieldException | IllegalAccessException e) {
+				value = false;
+			}
+		}
+
+		PersonalizationOption option = new PersonalizationOption(id, value);
+		options.add(option);
+		optionMap.put(id, option);
+		return value;
+	}
+
+	private static void setOpt(String id, boolean value) {
+		if (!optionMap.containsKey(id)) {
+			opt(id, value);
+		} else {
+			optionMap.get(id).value = value;
+		}
+	}
+
+	private static int multiOpt(Object... opts) {
+		int choice = -1;
+
+		for (int i = 0; i < opts.length; i += 2) {
+			String id = (String)opts[i];
+			boolean value = (boolean)opts[i + 1];
+			value = opt(id, value);
+
+			if (value && choice == -1) {
+				choice = i / 2;
+			}
+		}
+
+		if (vanillaMode) {
+			return -1;
+		}
+
+		return choice;
+	}
+
+	private static void head(String name) {
+		PersonalizationOption header = new PersonalizationOption("# " + name, false);
+		options.add(header);
+	}
+
+	private static String getVersion() {
+		if (DEMO_MODE) {
+			if (chaos > 0.0F) {
+				return "Minecraft Beta 1.8.X Chaotic";
+			} else if (betaness > 0.0F) {
+				return "Minecraft Beta 1.8.X Beta";
+			} else if (betaness < 0.0F) {
+				return "Minecraft Beta 1.8.X Adventure";
+			} else {
+				return "Minecraft Beta 1.8.X Neutral";
+			}
+		}
+
+		if (vanillaMode) {
+			return "Minecraft Beta 1.8.1";
+		}
+
+		String version = "Minecraft ";
+		boolean pe = false;
+		boolean alpha = false;
+		if (doChaos()) {
+			return "Minecraft Infdev";
+		} else if (pe8env || doAltWeird()) {
+			version += "v0.";
+			pe = true;
+		} else if (alphaTextures) {
+			version += "Alpha 1." + (rand.nextInt(3) == 0 ? "1." : "0.");
+			alpha = true;
+		} else {
+			version += "Beta 1.";
+		}
+
+		if (doWeakAdventure() && rand.nextInt(2) == 0) {
+			version = "Minecraft 11w";
+			version += String.format("%02d", rand.nextInt(25) + 22);
+			version += rand.nextInt(3) == 0
+					? rand.nextInt(3) == 0 ? "c"
+					: "b" : "a";
+			return version;
+		}
+
+		int minor = rand.nextInt(3) + 7;
+		if (doBeta() && minor == 9) minor = 8;
+		if (doAdventure() && minor == 7) minor = 8;
+		if (doWeakBeta() && minor > 7) minor = 7;
+		if (doWeakAdventure() && minor < 9) minor = 9;
+		minor += (int)((rand.nextFloat() * 2.0F - 1.0F) * chaos * 5.0F);
+		if (minor < 0) {
+			minor = 0;
+		}
+		version += minor;
+
+		if (doAdventure() && !pe && !alpha) {
+			int pre = rand.nextInt(10);
+			if (pre > (minor == 8 ? 2 : minor == 9 ? 6 : 0)) {
+				version += " Pre-release";
+				if (pre > 1) {
+					version += " " + pre;
+					if (doBeta() && rand.nextInt(2) == 0) {
+						version += " ;)";
+					}
+				}
+				return version;
+			}
+		}
+
+		int patch;
+		switch (minor) {
+			case 7: patch = rand.nextInt(6) + 4; break;
+			case 8: patch = rand.nextInt(8) + 2; break;
+			default: patch = rand.nextInt(10); break;
+		}
+
+		if ((patch > 0 || pe) && !alpha) {
+			version += "." + patch;
+		}
+
+		if (doBeta() && !pe) {
+			int fix = rand.nextInt(3);
+			if (fix > 0) {
+				version += "_0" + fix;
+			}
+		}
+
+		if (pe) {
+			version += " alpha";
+
+			int build = rand.nextInt(20) - 5;
+			if (build > 0) {
+				version += " build " + build;
+			}
+		}
+
+		return version;
+	}
+
+	private static void personalizeBiomes() {
+		int choice;
+
+		List<BiomeGenBase> biomes = new ArrayList<>(Arrays.asList(
+				desert,
+				forest,
+				extremeHills,
+				swampland,
+				plains,
+				taiga
+		));
+		List<BiomeGenBase> snowyBiomes = new ArrayList<>();
+
+		if (tallerBiomes) {
+			plains.setMinMaxHeight(0.2F, 0.4F);
+			forest.setMinMaxHeight(0.2F, 0.6F);
+			desert.setMinMaxHeight(0.2F, 0.5F);
+			taiga.setMinMaxHeight(0.2F, 0.6F);
+			snowyTaiga.setMinMaxHeight(0.2F, 0.6F);
+			icePlains.setMinMaxHeight(0.2F, 0.5F);
+			shrubland.setMinMaxHeight(0.2F, 0.5F);
+			seasonalForest.setMinMaxHeight(0.0F, 1.0F);
+			rainforest.setMinMaxHeight(0.0F, 1.8F);
+		} else {
+			plains.setMinMaxHeight(0.1F, 0.3F);
+			forest.setMinMaxHeight(0.1F, 0.3F);
+			desert.setMinMaxHeight(0.1F, 0.2F);
+			taiga.setMinMaxHeight(0.1F, 0.4F);
+			snowyTaiga.setMinMaxHeight(0.1F, 0.4F);
+			icePlains.setMinMaxHeight(0.1F, 0.3F);
+			shrubland.setMinMaxHeight(0.1F, 0.3F);
+			seasonalForest.setMinMaxHeight(1.0F, 0.3F);
+			rainforest.setMinMaxHeight(0.0F, 1.0F);
+		}
+
+		head("biomes.climate");
+
+		choice = multiOpt("biomes.forest.warm", doStrongBeta(), "biomes.forest.wet", doBeta());
+		if (choice == 0) forest.setTemperatureRainfall(0.9F, 1.0F);
+		else if (choice == 1) forest.setTemperatureRainfall(0.8F, 0.9F);
+		else forest.setTemperatureRainfall(0.7F, 0.8F);
+
+		if (opt("biomes.oldHills.humid", doWeakBeta())) oldHills.setTemperatureRainfall(1.0F, 0.3F);
+		else oldHills.setTemperatureRainfall(0.8F, 0.2F);
+
+		if (opt("biomes.seasonalForest.temperate", doWeakBeta())) {
+			seasonalForest.setTemperatureRainfall(1.0F, 0.7F);
+			seasonalForest.decorator.trees = 5;
+			seasonalForest.biomeName = "Seasonal Forest";
+		} else {
+			seasonalForest.setTemperatureRainfall(forest.field_35490_s, forest.field_35489_t);
+			seasonalForest.decorator.trees = 10;
+			seasonalForest.biomeName = "Forest";
+		}
+
+		choice = multiOpt("biomes.plains.dry", doStrongBeta(), "biomes.plains.warm", doBeta() || doAltWeird() && !doMidAdventure());
+		if (choice == 0) {
+			plains.setTemperatureRainfall(0.8F, 0.0F);
+			plains.biomeName = "Savanna";
+		} else if (choice == 1) {
+			plains.setTemperatureRainfall(1.0F, 0.5F);
+			plains.biomeName = "Plains";
+		} else {
+			plains.setTemperatureRainfall(0.8F, 0.4F);
+			plains.biomeName = "Plains";
+		}
+
+		((BiomeGenSwamp)swampland).moist = opt("biomes.swampland.moist", doEarlyAdventure());
+		((BiomeGenSwamp)swampland).blended = opt("biomes.swampland.blended", doStrongAdventure());
+		((BiomeGenSwamp)swampland).blobby = opt("biomes.swampland.blobby", doStrongAdventure());
+
+		head("biomes.height");
+
+		boolean deepOceans = opt("biomes.ocean.deep", doWeakAdventure());
+		if (deepOceans) ocean.setMinMaxHeight(-1.0F, 0.4F);
+		else ocean.setMinMaxHeight(-1.0F, 0.5F);
+
+		if (opt("biomes.plains.flat", doExtAdventure())) plains.field_35491_r = 0.1F;
+
+		if (opt("biomes.oldSwampland.hilly", doWeakBeta())) oldSwampland.setMinMaxHeight(0.0F, 0.3F);
+		else oldSwampland.setMinMaxHeight(-0.2F, 0.1F);
+
+		choice = multiOpt("biomes.extremeHills.raised", doStrongAdventure() && doAltWeird() || doExtAdventure(), "biomes.extremeHills.short", doMidAdventure());
+		if (choice == 0) extremeHills.setMinMaxHeight(1.0F, 1.0F);
+		else if (choice == 1) extremeHills.setMinMaxHeight(0.2F, 1.3F);
+		else extremeHills.setMinMaxHeight(0.2F, 1.8F);
+
+		choice = multiOpt("biomes.icePlains.icy", doStrongBeta(), "biomes.icePlains.flat", doBeta());
+		if (choice == 0) icePlains.setMinMaxHeight(-0.2F, 0.5F);
+		else if (choice == 1) icePlains.setMinMaxHeight(-0.1F, 0.2F);
+
+		if (opt("biomes.oldSwampland.hilly", doWeakBeta())) oldSwampland.setMinMaxHeight(0.0F, 0.3F);
+		else oldSwampland.setMinMaxHeight(-0.2F, 0.1F);
+
+		if (opt("biomes.swampland.hilly", doEarlyBeta() || doEarlyAdventure())) swampland.setMinMaxHeight(-0.2F, 0.2F);
+		else swampland.setMinMaxHeight(-0.2F, 0.1F);
+
+		head("biomes.features");
+
+		if (opt("biomes.plains.trees", doBeta() || doStrongAdventure())) plains.decorator.trees = 0;
+		else plains.decorator.trees = -999;
+
+		choice = multiOpt("biomes.plains.noGrass", doStrongBeta(), "biomes.plains.lessGrass", doBeta());
+		if (choice == 0) plains.decorator.grass = 0;
+		else if (choice == 1) plains.decorator.grass = 4;
+		else plains.decorator.grass = 10;
+
+		if (opt("biomes.oldSwampland.moreGrass", doWeakAdventure())) oldSwampland.decorator.grass = 2;
+		else oldSwampland.decorator.grass = 0;
+
+		boolean swampSand = !opt("biomes.swampland.noSand", doWeakAdventure());
+		swampland.decorator.sand = swampSand ? 1 : 0;
+		swampland.decorator.sand2 = swampSand ? 3 : 0;
+
+		if (opt("biomes.icePlains.barren", doWeakBeta())) {
+			icePlains.decorator.trees = -999;
+			icePlains.decorator.grass = 0;
+			icePlains.decorator.flowers = 0;
+		} else {
+			icePlains.decorator.trees = 0;
+			icePlains.decorator.grass = 1;
+			icePlains.decorator.flowers = 2;
+		}
+
+		((BiomeGenHills)extremeHills).stony = opt("biomes.extremeHills.stony", doStrongAdventure() && doAltWeird() || doExtAdventure());
+		((BiomeGenHills)extremeHills).snowy = opt("biomes.extremeHills.snowy", doStrongAdventure() && doAltWeird() || doExtAdventure());
+		((BiomeGenHills)extremeHills).trees = opt("biomes.extremeHills.trees", doStrongAdventure() && doAltWeird() || doExtAdventure());
+		((BiomeGenHills)extremeHills).spruce = opt("biomes.extremeHills.spruce", doStrongAdventure() && doAltWeird() || doExtAdventure());
+
+		((BiomeGenMegaTaiga)megaTaiga).dirtGround = opt("biomes.megaTaiga.dirtGround", doEarlyAdventure());
+
+		head("biomes.spawning");
+
+		plains.subVariant = opt("biomes.plains.subForest", doMidAdventure()) ? forest : null;
+
+		if (opt("biomes.extremeHills.swapWithOldHills", doBeta())) biomes.set(biomes.indexOf(extremeHills), oldHills);
+		if (opt("biomes.taiga.swapWithSnowyTaiga", doBeta()) && biomes.contains(taiga)) biomes.set(biomes.indexOf(taiga), snowyTaiga);
+		if (opt("biomes.taiga.swapWithShrubland", doAltWeird() && doNeutral() || biomes.contains(oldHills)) && biomes.contains(taiga)) biomes.set(biomes.indexOf(taiga), shrubland);
+		if (opt("biomes.snowyTaiga.add", doMidAdventure()) && biomes.contains(taiga) && !biomes.contains(snowyTaiga)) {
+			snowyBiomes.add(snowyTaiga);
+			snowyTaiga.biomeName = "Snowy Taiga";
+		} else {
+			snowyTaiga.biomeName = "Taiga";
+		}
+		if (opt("biomes.swampland.swapWithOldSwampland", doBeta())) biomes.set(biomes.indexOf(swampland), oldSwampland);
+		if (opt("biomes.seasonalForest.add", doBeta())) biomes.add(seasonalForest);
+		if (opt("biomes.icePlains.add", doBeta() || doMidAdventure())) snowyBiomes.add(icePlains);
+		if (opt("biomes.snowyTaiga.inIcePlains", doEarlyBeta()) && biomes.contains(snowyTaiga)) {
+			biomes.remove(snowyTaiga);
+			snowyBiomes.add(snowyTaiga);
+		}
+		if (opt("biomes.oldSwampland.add", doWeakAdventure() && !doExtAdventure()) && !biomes.contains(oldSwampland)) biomes.add(oldSwampland);
+		if (opt("biomes.oldHills.add", doMidAdventure() && !doEarlyAdventure() && doAltWeird()) && !biomes.contains(oldHills)) biomes.add(oldHills);
+		if (opt("biomes.oldHills.swapWithRainforest", doStrongBeta()) && biomes.contains(oldHills)) biomes.set(biomes.indexOf(oldHills), rainforest);
+		if (opt("biomes.jungle.add", doStrongAdventure()) && !biomes.contains(jungle)) biomes.add(jungle);
+		if (opt("biomes.rainforest.add", doMidAdventure() && doAltWeird()) && !biomes.contains(rainforest) && !biomes.contains(jungle)) biomes.add(rainforest);
+		if (opt("biomes.shrubland.add", doBeta() && doChaos()) && !biomes.contains(shrubland)) biomes.add(shrubland);
+		if (opt("biomes.savanna.add", doExtAdventure()) && !biomes.contains(savanna)) biomes.add(savanna);
+		if (opt("biomes.roofedForest.add", doExtAdventure()) && !biomes.contains(roofedForest)) biomes.add(roofedForest);
+		if (opt("biomes.birchForest.add", doExtAdventure()) && !biomes.contains(birchForest)) biomes.add(birchForest);
+		if (opt("biomes.megaTaiga.add", doExtAdventure()) && !biomes.contains(megaTaiga)) biomes.add(megaTaiga);
+		if (opt("biomes.snowyMegaTaiga.add", doExtAdventure() && doAbsWeird()) && snowyBiomes.contains(snowyTaiga)) {
+			snowyBiomes.add(snowyMegaTaiga);
+			if (snowyBiomes.contains(icePlains)) {
+				snowyBiomes.add(icePlains);
+			}
+		}
+
+		GenLayerVillageLandscape.biomes = biomes;
+		GenLayerVillageLandscape.snowyBiomes = snowyBiomes;
+	}
+
+	public static void personalizeItems() {
+		for (Item item : Item.itemsList) {
+			if (item instanceof ItemFood && !(item instanceof ItemSoup) && !(item instanceof ItemBottle)) {
+				item.maxStackSize = stackFood ? 64 : 1;
+			}
+
+			if (item instanceof ItemArmor) {
+				ItemArmor armor = (ItemArmor)item;
+				armor.damageReduceAmount = armor.material.getDamageReductionAmount(armor.armorType);
+				armor.setMaxDamage(armor.material.getDurability(armor.armorType));
+			}
+		}
+
+		if (Personalization.alphaTextures) {
+			Block.tallGrass.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F / 16.0F, 1.0F);
+			Block.deadBush.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F / 16.0F, 1.0F);
+		} else {
+			Block.tallGrass.setBlockBounds(0.1F, 0.0F, 0.1F, 0.9F, 0.8F, 0.9F);
+			Block.deadBush.setBlockBounds(0.1F, 0.0F, 0.1F, 0.9F, 0.8F, 0.9F);
+		}
+	}
+
+	public static void onWorldLoad(Minecraft minecraft) {
+		prevDay = minecraft.theWorld.getWorldTime() / 24000L;
+	}
+
+	public static void onWorldTick(Minecraft minecraft) {
+		long currentDay = minecraft.theWorld.getWorldTime() / 24000L;
+		if (currentDay != prevDay
+				&& (preset == null || preset.isEmpty())
+				&& noiseSeed != 0
+				&& minecraft.thePlayer.dimension < 2
+				&& gameMode == B18XGameMode.NORMAL
+				&& !DEMO_MODE) {
+			minecraft.displayGuiScreen(new GuiRemix());
+		}
+		prevDay = currentDay;
+
+		if (gameMode == B18XGameMode.ISLES_OF_TIME) {
+			minecraft.thePlayer.loadIsleOfTime(false);
+		}
+
+		if (hardcoreState == 2 ? minecraft.thePlayer.dimension != -2 : minecraft.thePlayer.dimension == -2) {
+			minecraft.toCaverns();
+		}
+	}
+
+	public static Random random() {
+		return Personalization.mt19937 ? new MersenneTwister() : new Random();
+	}
+
+	public static Random random(long seed) {
+		return Personalization.mt19937 ? new MersenneTwister(seed) : new Random(seed);
+	}
+
+	public static int getUpdateHash() {
+		return updateHash;
+	}
+
+	public static float chaotify(float x) {
+		if (!chaosEffects) {
+			return x;
+		}
+
+		float chaosFactor = chaos - 2.0F;
+		chaosFactor = MathHelper.clamp(chaosFactor, 0.0F, 1.0F);
+		chaosFactor *= chaosFactor;
+		return x + (rand.nextFloat() - x) * chaosFactor;
+	}
+
+	public static float chaotifyFlip(float x) {
+		x = chaotify(x);
+		if (doChaos() && !(doLateChaos() && rand.nextInt(2) == 0)) {
+			x = -x;
+		}
+		return x;
+	}
+
+	public static float getBetanessRange() {
+		if (!chaosEffects) {
+			return 3.0F;
+		}
+		return MathHelper.clamp(chaos * 3.0F, 1.0F, 3.0F);
+	}
+
+	public static float getWeirdnessRange() {
+		if (!chaosEffects) {
+			return 1.0F;
+		}
+		return MathHelper.clamp(chaos / 2.0F, 0.0F, 1.0F);
+	}
+
+	public static float getEntropyRange() {
+		if (!chaosEffects) {
+			return 0.0F;
+		}
+		float range = chaos - 1.0F;
+		range = MathHelper.clamp(range, 0.0F, 1.0F);
+		range *= range;
+		return range;
+	}
+
+	public static boolean chance50() {
+		return (rand.nextInt() & 1) == 0;
+	}
+
+	// BETANESS
+
+	public static boolean doExtBeta() {
+		return rand.nextFloat() < chaotify(betaness - 2.0F);
+	}
+
+	public static boolean doStrongBeta() {
+		return rand.nextFloat() < chaotify(betaness - 1.0F);
+	}
+
+	public static boolean doMidBeta() {
+		return rand.nextFloat() < chaotify(betaness - 0.5F);
+	}
+
+	public static boolean doBeta() {
+		return rand.nextFloat() < chaotify(betaness / 2.0F + 0.5F);
+	}
+
+	public static boolean doWeakBeta() {
+		return rand.nextFloat() < chaotify(betaness / 2.0F);
+	}
+
+	public static boolean doEarlyBeta() {
+		return rand.nextFloat() < chaotify(betaness);
+	}
+
+	public static boolean doNeutral() {
+		return rand.nextFloat() < chaotify(1.0F - Math.abs(betaness));
+	}
+
+	public static boolean doEarlyAdventure() {
+		return rand.nextFloat() < chaotify(-betaness);
+	}
+
+	public static boolean doWeakAdventure() {
+		return rand.nextFloat() < chaotify(-betaness / 2.0F);
+	}
+
+	public static boolean doAdventure() {
+		return rand.nextFloat() < chaotify(-betaness / 2.0F + 0.5F);
+	}
+
+	public static boolean doMidAdventure() {
+		return rand.nextFloat() < chaotify(-betaness - 0.5F);
+	}
+
+	public static boolean doStrongAdventure() {
+		return rand.nextFloat() < chaotify(-betaness - 1.0F);
+	}
+
+	public static boolean doExtAdventure() {
+		return rand.nextFloat() < chaotify(-betaness - 2.0F);
+	}
+
+	// WEIRDNESS
+
+	public static boolean doWeird() {
+		return rand.nextFloat() < chaotifyFlip(weirdness);
+	}
+
+	public static boolean doQuiteWeird() {
+		return rand.nextFloat() < chaotifyFlip(weirdness) * 2.0F;
+	}
+
+	public static boolean doMidWeird() {
+		return rand.nextFloat() < chaotifyFlip(weirdness) * 2.0F - 0.5F;
+	}
+
+	public static boolean doVeryWeird() {
+		return rand.nextFloat() < chaotifyFlip(weirdness) * 2.0F - 1.0F;
+	}
+
+	public static boolean doAltWeird() {
+		return rand.nextFloat() < chaotifyFlip(-weirdness);
+	}
+
+	public static boolean doQuiteAltWeird() {
+		return rand.nextFloat() < chaotifyFlip(-weirdness) * 2.0F;
+	}
+
+	public static boolean doMidAltWeird() {
+		return rand.nextFloat() < chaotifyFlip(-weirdness) * 2.0F - 0.5F;
+	}
+
+	public static boolean doVeryAltWeird() {
+		return rand.nextFloat() < chaotifyFlip(-weirdness) * 2.0F - 1.0F;
+	}
+
+	public static boolean doAbsWeird() {
+		return rand.nextFloat() < chaotifyFlip(Math.abs(weirdness));
+	}
+
+	public static boolean doQuiteAbsWeird() {
+		return rand.nextFloat() < Math.abs(weirdness) * 2.0F;
+	}
+
+	public static boolean doMidAbsWeird() {
+		return rand.nextFloat() < Math.abs(weirdness) * 2.0F - 0.5F;
+	}
+
+	public static boolean doVeryAbsWeird() {
+		return rand.nextFloat() < Math.abs(weirdness) * 2.0F - 1.0F;
+	}
+
+	// CHAOS
+
+	public static boolean doChaos() {
+		return (Personalization.preset == null || Personalization.preset.isEmpty()) && chaosEffects && rand.nextFloat() < chaos / 3.0F;
+	}
+
+	public static boolean doEarlyChaos() {
+		return (Personalization.preset == null || Personalization.preset.isEmpty()) && chaosEffects && rand.nextFloat() < chaos / 1.5F;
+	}
+
+	public static boolean doLateChaos() {
+		return (Personalization.preset == null || Personalization.preset.isEmpty()) && chaosEffects && rand.nextFloat() < chaos / 1.5F - 1.0F;
+	}
+}
--- /dev/null
+++ net/minecraft/src/ChunkProviderEnd.java
@@ -1,0 +1,287 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class ChunkProviderEnd implements IChunkProvider {
+	private Random field_40396_i;
+	private NoiseGeneratorOctaves field_40393_j;
+	private NoiseGeneratorOctaves field_40394_k;
+	private NoiseGeneratorOctaves field_40391_l;
+	public NoiseGeneratorOctaves field_40388_a;
+	public NoiseGeneratorOctaves field_40386_b;
+	private World worldObj;
+	private double[] field_40389_n;
+	private BiomeGenBase[] field_40390_o;
+	double[] field_40387_c;
+	double[] field_40384_d;
+	double[] field_40385_e;
+	double[] field_40382_f;
+	double[] field_40383_g;
+	int[][] field_40395_h = new int[32][32];
+
+	public ChunkProviderEnd(World var1, long var2) {
+		this.worldObj = var1;
+		this.field_40396_i = Personalization.random(var2);
+		this.field_40393_j = new NoiseGeneratorOctaves(this.field_40396_i, 16);
+		this.field_40394_k = new NoiseGeneratorOctaves(this.field_40396_i, 16);
+		this.field_40391_l = new NoiseGeneratorOctaves(this.field_40396_i, 8);
+		this.field_40388_a = new NoiseGeneratorOctaves(this.field_40396_i, 10);
+		this.field_40386_b = new NoiseGeneratorOctaves(this.field_40396_i, 16);
+	}
+
+	public void func_40380_a(int var1, int var2, byte[] var3, BiomeGenBase[] var4) {
+		byte var5 = 2;
+		int var6 = var5 + 1;
+		int var7 = this.worldObj.field_35472_c / 4 + 1;
+		int var8 = var5 + 1;
+		this.field_40389_n = this.func_40379_a(this.field_40389_n, var1 * var5, 0, var2 * var5, var6, var7, var8);
+
+		for(int var9 = 0; var9 < var5; ++var9) {
+			for(int var10 = 0; var10 < var5; ++var10) {
+				for(int var11 = 0; var11 < this.worldObj.field_35472_c / 4; ++var11) {
+					double var12 = 0.25D;
+					double var14 = this.field_40389_n[((var9 + 0) * var8 + var10 + 0) * var7 + var11 + 0];
+					double var16 = this.field_40389_n[((var9 + 0) * var8 + var10 + 1) * var7 + var11 + 0];
+					double var18 = this.field_40389_n[((var9 + 1) * var8 + var10 + 0) * var7 + var11 + 0];
+					double var20 = this.field_40389_n[((var9 + 1) * var8 + var10 + 1) * var7 + var11 + 0];
+					double var22 = (this.field_40389_n[((var9 + 0) * var8 + var10 + 0) * var7 + var11 + 1] - var14) * var12;
+					double var24 = (this.field_40389_n[((var9 + 0) * var8 + var10 + 1) * var7 + var11 + 1] - var16) * var12;
+					double var26 = (this.field_40389_n[((var9 + 1) * var8 + var10 + 0) * var7 + var11 + 1] - var18) * var12;
+					double var28 = (this.field_40389_n[((var9 + 1) * var8 + var10 + 1) * var7 + var11 + 1] - var20) * var12;
+
+					for(int var30 = 0; var30 < 4; ++var30) {
+						double var31 = 0.125D;
+						double var33 = var14;
+						double var35 = var16;
+						double var37 = (var18 - var14) * var31;
+						double var39 = (var20 - var16) * var31;
+
+						for(int var41 = 0; var41 < 8; ++var41) {
+							int var42 = var41 + var9 * 8 << this.worldObj.field_35471_b | 0 + var10 * 8 << this.worldObj.field_35473_a | var11 * 4 + var30;
+							int var43 = 1 << this.worldObj.field_35473_a;
+							double var44 = 0.125D;
+							double var46 = var33;
+							double var48 = (var35 - var33) * var44;
+
+							for(int var50 = 0; var50 < 8; ++var50) {
+								int var51 = 0;
+								if(var46 > 0.0D) {
+									var51 = Block.endStone.blockID;
+								}
+
+								var3[var42] = (byte)var51;
+								var42 += var43;
+								var46 += var48;
+							}
+
+							var33 += var37;
+							var35 += var39;
+						}
+
+						var14 += var22;
+						var16 += var24;
+						var18 += var26;
+						var20 += var28;
+					}
+				}
+			}
+		}
+
+	}
+
+	public void func_40381_b(int var1, int var2, byte[] var3, BiomeGenBase[] var4) {
+		for(int var5 = 0; var5 < 16; ++var5) {
+			for(int var6 = 0; var6 < 16; ++var6) {
+				byte var7 = 1;
+				int var8 = -1;
+				byte var9 = (byte)Block.endStone.blockID;
+				byte var10 = (byte)Block.endStone.blockID;
+
+				for(int var11 = this.worldObj.field_35469_d; var11 >= 0; --var11) {
+					int var12 = (var6 * 16 + var5) * this.worldObj.field_35472_c + var11;
+					byte var13 = var3[var12];
+					if(var13 == 0) {
+						var8 = -1;
+					} else if(var13 == Block.stone.blockID) {
+						if(var8 == -1) {
+							if(var7 <= 0) {
+								var9 = 0;
+								var10 = (byte)Block.endStone.blockID;
+							}
+
+							var8 = var7;
+							if(var11 >= 0) {
+								var3[var12] = var9;
+							} else {
+								var3[var12] = var10;
+							}
+						} else if(var8 > 0) {
+							--var8;
+							var3[var12] = var10;
+						}
+					}
+				}
+			}
+		}
+
+	}
+
+	public Chunk loadChunk(int var1, int var2) {
+		return this.provideChunk(var1, var2);
+	}
+
+	public Chunk provideChunk(int var1, int var2) {
+		this.field_40396_i.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
+		byte[] var3 = new byte[16 * this.worldObj.field_35472_c * 16];
+		this.field_40390_o = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.field_40390_o, var1 * 16, var2 * 16, 16, 16);
+		this.func_40380_a(var1, var2, var3, this.field_40390_o);
+		this.func_40381_b(var1, var2, var3, this.field_40390_o);
+		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
+		var4.generateSkylightMap();
+		return var4;
+	}
+
+	private double[] func_40379_a(double[] var1, int var2, int var3, int var4, int var5, int var6, int var7) {
+		if(var1 == null) {
+			var1 = new double[var5 * var6 * var7];
+		}
+
+		double var8 = 684.412D;
+		double var10 = 684.412D;
+		this.field_40382_f = this.field_40388_a.func_4109_a(this.field_40382_f, var2, var4, var5, var7, 1.121D, 1.121D, 0.5D);
+		this.field_40383_g = this.field_40386_b.func_4109_a(this.field_40383_g, var2, var4, var5, var7, 200.0D, 200.0D, 0.5D);
+		var8 *= 2.0D;
+		this.field_40387_c = this.field_40391_l.generateNoiseOctaves(this.field_40387_c, var2, var3, var4, var5, var6, var7, var8 / 80.0D, var10 / 160.0D, var8 / 80.0D);
+		this.field_40384_d = this.field_40393_j.generateNoiseOctaves(this.field_40384_d, var2, var3, var4, var5, var6, var7, var8, var10, var8);
+		this.field_40385_e = this.field_40394_k.generateNoiseOctaves(this.field_40385_e, var2, var3, var4, var5, var6, var7, var8, var10, var8);
+		int var12 = 0;
+		int var13 = 0;
+
+		for(int var14 = 0; var14 < var5; ++var14) {
+			for(int var15 = 0; var15 < var7; ++var15) {
+				double var16 = (this.field_40382_f[var13] + 256.0D) / 512.0D;
+				if(var16 > 1.0D) {
+					var16 = 1.0D;
+				}
+
+				double var18 = this.field_40383_g[var13] / 8000.0D;
+				if(var18 < 0.0D) {
+					var18 = -var18 * 0.3D;
+				}
+
+				var18 = var18 * 3.0D - 2.0D;
+				float var20 = (float)(var14 + var2 - 0) / 1.0F;
+				float var21 = (float)(var15 + var4 - 0) / 1.0F;
+				float var22 = 100.0F - MathHelper.sqrt_float(var20 * var20 + var21 * var21) * 8.0F;
+				if(var22 > 80.0F) {
+					var22 = 80.0F;
+				}
+
+				if(var22 < -100.0F) {
+					var22 = -100.0F;
+				}
+
+				if(var18 > 1.0D) {
+					var18 = 1.0D;
+				}
+
+				var18 /= 8.0D;
+				var18 = 0.0D;
+				if(var16 < 0.0D) {
+					var16 = 0.0D;
+				}
+
+				var16 += 0.5D;
+				var18 = var18 * (double)var6 / 16.0D;
+				++var13;
+				double var23 = (double)var6 / 2.0D;
+
+				for(int var25 = 0; var25 < var6; ++var25) {
+					double var26 = 0.0D;
+					double var28 = ((double)var25 - var23) * 8.0D / var16;
+					if(var28 < 0.0D) {
+						var28 *= -1.0D;
+					}
+
+					double var30 = this.field_40384_d[var12] / 512.0D;
+					double var32 = this.field_40385_e[var12] / 512.0D;
+					double var34 = (this.field_40387_c[var12] / 10.0D + 1.0D) / 2.0D;
+					if(var34 < 0.0D) {
+						var26 = var30;
+					} else if(var34 > 1.0D) {
+						var26 = var32;
+					} else {
+						var26 = var30 + (var32 - var30) * var34;
+					}
+
+					var26 -= 8.0D;
+					var26 += (double)var22;
+					byte var36 = 2;
+					double var37;
+					if(var25 > var6 / 2 - var36) {
+						var37 = (double)((float)(var25 - (var6 / 2 - var36)) / 64.0F);
+						if(var37 < 0.0D) {
+							var37 = 0.0D;
+						}
+
+						if(var37 > 1.0D) {
+							var37 = 1.0D;
+						}
+
+						var26 = var26 * (1.0D - var37) + -3000.0D * var37;
+					}
+
+					var36 = 8;
+					if(var25 < var36) {
+						var37 = (double)((float)(var36 - var25) / ((float)var36 - 1.0F));
+						var26 = var26 * (1.0D - var37) + -30.0D * var37;
+					}
+
+					var1[var12] = var26;
+					++var12;
+				}
+			}
+		}
+
+		return var1;
+	}
+
+	public boolean chunkExists(int var1, int var2) {
+		return true;
+	}
+
+	public void populate(IChunkProvider var1, int var2, int var3) {
+		BlockSand.fallInstantly = true;
+		int var4 = var2 * 16;
+		int var5 = var3 * 16;
+		BiomeGenBase var6 = this.worldObj.getWorldChunkManager().getBiomeGenAt(var4 + 16, var5 + 16);
+		var6.func_35477_a(this.worldObj, this.worldObj.rand, var4, var5);
+
+		if (var2 == 0 && var3 == 0
+				&& this.worldObj.countEntities(EntityDragon.class) == 0
+				&& this.worldObj.countEntities(EntityJeb.class) == 0
+				&& this.worldObj.countEntities(EntityNotch.class) == 0) {
+			EntityLiving boss = new EntityDragon(this.worldObj);
+			boss.setPosition(0.5D, 100.0D, 0.5D);
+			this.worldObj.entityJoinedWorld(boss);
+		}
+
+		BlockSand.fallInstantly = false;
+	}
+
+	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+		return true;
+	}
+
+	public boolean unload100OldestChunks() {
+		return false;
+	}
+
+	public boolean canSave() {
+		return true;
+	}
+
+	public String makeString() {
+		return "EndRandomLevelSource";
+	}
+}
--- net/minecraft/src/NoiseGeneratorOctaves.java
+++ net/minecraft/src/NoiseGeneratorOctaves.java
@@ -29,7 +29,7 @@
 	}
 
 	public double[] generateNoiseOctaves(double[] var1, int var2, int var3, int var4, int var5, int var6, int var7, double var8, double var10, double var12) {
-		if(var1 == null) {
+		if(var1 == null || var1.length < var5 * var6 * var7) {
 			var1 = new double[var5 * var6 * var7];
 		} else {
 			for(int var14 = 0; var14 < var1.length; ++var14) {
@@ -60,5 +60,76 @@
 
 	public double[] func_4109_a(double[] var1, int var2, int var3, int var4, int var5, double var6, double var8, double var10) {
 		return this.generateNoiseOctaves(var1, var2, 10, var3, var4, 1, var5, var6, 1.0D, var8);
+	}
+
+	public final double generateNoiseOctaves(double var1, double var3, double var5) {
+		double var7 = 0.0D;
+		double var9 = 1.0D;
+
+		for(int var11 = 0; var11 < this.field_1191_b; ++var11) {
+			var7 += this.generatorCollection[var11].generateNoiseD(var1 / var9, var3 / var9, var5 / var9) * var9;
+			var9 *= 2.0D;
+		}
+
+		return var7;
+	}
+
+	public double[] generateNoiseOctavesAlpha(double[] var1, double var2, double var4, double var6, int var8, int var9, int var10, double var11, double var13, double var15) {
+		if(var1 == null || var1.length < var8 * var9 * var10) {
+			var1 = new double[var8 * var9 * var10];
+		} else {
+			for(int var17 = 0; var17 < var1.length; ++var17) {
+				var1[var17] = 0.0D;
+			}
+		}
+
+		double var20 = 1.0D;
+
+		for(int var19 = 0; var19 < this.field_1191_b; ++var19) {
+			this.generatorCollection[var19].func_805_alpha(var1, var2, var4, var6, var8, var9, var10, var11 * var20, var13 * var20, var15 * var20, var20);
+			var20 /= 2.0D;
+		}
+
+		return var1;
+	}
+
+	public double generateNoise(double d1, double d3, double d5) {
+		double d7 = 0.0D;
+		double d9 = 1.0D;
+
+		for(int i11 = 0; i11 < this.field_1191_b; ++i11) {
+			d7 += this.generatorCollection[i11].generateNoise(d1 * d9, d3 * d9, d5 * d9) / d9;
+			d9 /= 2.0D;
+		}
+
+		return d7;
+	}
+
+	public double generateActualNoise(double d1, double d3) {
+		double d7 = 0.0D;
+		double d9 = 1.0D;
+		double d11 = 0.0D;
+
+		for(int i11 = 0; i11 < this.field_1191_b; ++i11) {
+			d7 += this.generatorCollection[i11].func_801_a(d1 / d9, d3 / d9) * d9;
+			d11 += d9;
+			d9 /= 2.0D;
+		}
+
+		return d7 / d11;
+	}
+
+	public double generateActualNoise(double d1, double d3, double d5) {
+		double d7 = 0.0D;
+		double d9 = 1.0D;
+		double d11 = 0.0D;
+
+		for(int i11 = 0; i11 < this.field_1191_b; ++i11) {
+			d7 += this.generatorCollection[i11].generateNoise(d1 / d9, d3 / d9, d5 / d9) * d9;
+			d11 += d9;
+			d9 /= 2.0D;
+		}
+
+		return d7 / d11;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenJungle.java
@@ -1,0 +1,56 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenJungle extends BiomeGenBase {
+	public BiomeGenJungle(int var1) {
+		super(var1);
+		this.decorator.trees = 50;
+		this.decorator.grass = 25;
+		this.decorator.flowers = 4;
+		this.subVariant = river;
+		this.subChance = 8;
+		this.subLevel = 1;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		if (Personalization.oakOnly) {
+			return var1.nextInt(10) == 0 ? new WorldGenShrub(0, 0)
+					: var1.nextInt(3 + Math.round(Personalization.entropy)) == 0 ? this.field_35480_A
+					: this.field_35493_z;
+		}
+
+		int hugeTreeHeight = Math.max((int)(10.0F - Personalization.entropy * 10.0F) + var1.nextInt((int)(20.0F - Personalization.entropy * 10.0F)), 10);
+		int treeHeight = Math.max((int)(4.0F - Personalization.entropy * 6.0F) + var1.nextInt(7), 4);
+
+		return var1.nextInt(10) == 0 ? this.field_35480_A
+				: var1.nextInt(2) == 0 ? new WorldGenShrub(0, 0)
+				: var1.nextInt(3 + Math.round(Personalization.entropy)) == 0 ? new WorldGenHugeTrees(hugeTreeHeight, 3, 3)
+				: new WorldGenTrees(treeHeight, 3, 3, 3, true);
+	}
+
+	public WorldGenerator getRandomWorldGenForGrass(Random var1) {
+		return var1.nextInt(4) == 0 ? new WorldGenTallGrass(Block.tallGrass.blockID, 2) : new WorldGenTallGrass(Block.tallGrass.blockID, 1);
+	}
+
+	public void func_35477_a(World var1, Random var2, int var3, int var4) {
+		super.func_35477_a(var1, var2, var3, var4);
+		WorldGenVines var5 = new WorldGenVines();
+
+		for(int var6 = 0; var6 < 50; ++var6) {
+			int var7 = var3 + var2.nextInt(16) + 8;
+			byte var8 = 64;
+			int var9 = var4 + var2.nextInt(16) + 8;
+			var5.generate(var1, var2, var7, var8, var9);
+		}
+
+	}
+
+	public float getMinHeight(int x, int z) {
+		return super.getMinHeight(x, z) + (doHills(x, z) ? 1.6F : 0.0F);
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) / (doHills(x, z) ? 2.0F : 1.0F);
+	}
+}
--- net/minecraft/src/WorldGenSand.java
+++ net/minecraft/src/WorldGenSand.java
@@ -26,7 +26,7 @@
 						for(int var12 = var4 - var7; var12 <= var4 + var7; ++var12) {
 							int var13 = var1.getBlockId(var8, var12, var9);
 							if(var13 == Block.dirt.blockID || var13 == Block.grass.blockID) {
-								var1.setBlock(var8, var12, var9, this.field_35264_a);
+								this.setBlock(var1, var8, var12, var9, this.field_35264_a);
 							}
 						}
 					}
--- net/minecraft/src/RenderLiving.java
+++ net/minecraft/src/RenderLiving.java
@@ -21,6 +21,9 @@
 	}
 
 	public void doRenderLiving(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
+		if (Personalization.pe8env) {
+			GL11.glDisable(GL11.GL_LIGHTING);
+		}
 		GL11.glPushMatrix();
 		GL11.glDisable(GL11.GL_CULL_FACE);
 		this.mainModel.onGround = this.renderSwingProgress(var1, var9);
@@ -51,10 +54,9 @@
 				var15 = 1.0F;
 			}
 
-			this.loadDownloadableImageTexture(var1.skinUrl, var1.getEntityTexture());
 			GL11.glEnable(GL11.GL_ALPHA_TEST);
 			this.mainModel.setLivingAnimations(var1, var16, var15, var9);
-			this.mainModel.render(var1, var16, var15, var13, var11 - var10, var12, var14);
+			this.func_40270_a(var1, var16, var15, var13, var11 - var10, var12, var14);
 
 			for(int var17 = 0; var17 < 4; ++var17) {
 				if(this.shouldRenderPass(var1, var17, var9)) {
@@ -125,6 +127,14 @@
 		GL11.glEnable(GL11.GL_CULL_FACE);
 		GL11.glPopMatrix();
 		this.passSpecialRender(var1, var2, var4, var6);
+		if (Personalization.pe8env) {
+			GL11.glEnable(GL11.GL_LIGHTING);
+		}
+	}
+
+	protected void func_40270_a(EntityLiving var1, float var2, float var3, float var4, float var5, float var6, float var7) {
+		this.loadDownloadableImageTexture(var1.skinUrl, var1.getEntityTexture());
+		this.mainModel.render(var1, var2, var3, var4, var5, var6, var7);
 	}
 
 	protected void renderLivingAt(EntityLiving var1, double var2, double var4, double var6) {
@@ -154,39 +164,6 @@
 	}
 
 	protected void renderEquippedItems(EntityLiving var1, float var2) {
-		if(var1.field_35172_bP > 0) {
-			EntityArrow var3 = new EntityArrow(var1.worldObj, var1.posX, var1.posY, var1.posZ);
-			Random var4 = new Random((long)var1.entityId);
-
-			for(int var5 = 0; var5 < var1.field_35172_bP; ++var5) {
-				GL11.glPushMatrix();
-				ModelRenderer var6 = this.mainModel.func_35393_a(var4);
-				var6.postRender(1.0F / 16.0F);
-				float var7 = var4.nextFloat();
-				float var8 = var4.nextFloat();
-				float var9 = var4.nextFloat();
-				float var10 = (var6.field_35977_i + (var6.field_35973_l - var6.field_35977_i) * var7) / 16.0F;
-				float var11 = (var6.field_35975_j + (var6.field_35974_m - var6.field_35975_j) * var8) / 16.0F;
-				float var12 = (var6.field_35976_k + (var6.field_35972_n - var6.field_35976_k) * var9) / 16.0F;
-				GL11.glTranslatef(var10, var11, var12);
-				var7 = var7 * 2.0F - 1.0F;
-				var8 = var8 * 2.0F - 1.0F;
-				var9 = var9 * 2.0F - 1.0F;
-				var7 *= -1.0F;
-				var8 *= -1.0F;
-				var9 *= -1.0F;
-				float var13 = MathHelper.sqrt_float(var7 * var7 + var9 * var9);
-				var3.prevRotationYaw = var3.rotationYaw = (float)(Math.atan2((double)var7, (double)var9) * 180.0D / (double)((float)Math.PI));
-				var3.prevRotationPitch = var3.rotationPitch = (float)(Math.atan2((double)var8, (double)var13) * 180.0D / (double)((float)Math.PI));
-				double var14 = 0.0D;
-				double var16 = 0.0D;
-				double var18 = 0.0D;
-				float var20 = 0.0F;
-				this.renderManager.renderEntityWithPosYaw(var3, var14, var16, var18, var20, var2);
-				GL11.glPopMatrix();
-			}
-		}
-
 	}
 
 	protected boolean inheritRenderPass(EntityLiving var1, int var2, float var3) {
--- net/minecraft/src/RenderFireball.java
+++ net/minecraft/src/RenderFireball.java
@@ -4,12 +4,17 @@
 import org.lwjgl.opengl.GL12;
 
 public class RenderFireball extends Render {
+	private float scale;
+
+	public RenderFireball(float scale) {
+		this.scale = scale;
+	}
+
 	public void func_4012_a(EntityFireball var1, double var2, double var4, double var6, float var8, float var9) {
 		GL11.glPushMatrix();
 		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-		float var10 = 2.0F;
-		GL11.glScalef(var10 / 1.0F, var10 / 1.0F, var10 / 1.0F);
+		GL11.glScalef(this.scale, this.scale, this.scale);
 		int var11 = Item.snowball.getIconFromDamage(0);
 		this.loadTexture("/gui/items.png");
 		Tessellator var12 = Tessellator.instance;
--- net/minecraft/src/BlockPistonBase.java
+++ net/minecraft/src/BlockPistonBase.java
@@ -233,6 +233,11 @@
 	}
 
 	private static boolean canExtend(World var0, int var1, int var2, int var3, int var4) {
+		if (var0.worldProvider instanceof WorldProviderOffices) {
+			var0.playSoundEffect(var1 + 0.5D, var2 + 0.5D, var3 + 0.5D, "random.breath", 1.0F, var0.rand.nextFloat() * 0.2F + 0.9F);
+			return false;
+		}
+
 		int var5 = var1 + PistonBlockTextures.offsetsXForSide[var4];
 		int var6 = var2 + PistonBlockTextures.offsetsYForSide[var4];
 		int var7 = var3 + PistonBlockTextures.offsetsZForSide[var4];
@@ -244,11 +249,6 @@
 					break;
 				}
 
-				var0.getClass();
-				if(var6 >= 128 - 1) {
-					break;
-				}
-
 				int var9 = var0.getBlockId(var5, var6, var7);
 				if(var9 != 0) {
 					if(!canPushBlock(var9, var0, var5, var6, var7, true)) {
@@ -285,11 +285,6 @@
 			int var10;
 			if(var9 < 13) {
 				if(var7 <= 0) {
-					break;
-				}
-
-				var1.getClass();
-				if(var7 >= 128 - 1) {
 					break;
 				}
 
--- net/minecraft/src/WorldGenTaiga2.java
+++ net/minecraft/src/WorldGenTaiga2.java
@@ -4,101 +4,91 @@
 
 public class WorldGenTaiga2 extends WorldGenerator {
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(4) + 6;
+		int var6 = Math.max(var2.nextInt(4 - Math.round(Personalization.entropy * 3.0F)) + 6 - Math.round(Personalization.entropy * 4.0F), 5);
 		int var7 = 1 + var2.nextInt(2);
 		int var8 = var6 - var7;
 		int var9 = 2 + var2.nextInt(2);
 		boolean var10 = true;
 		if(var4 >= 1) {
-			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
-				int var11;
-				int var13;
-				int var15;
-				int var21;
-				for(var11 = var4; var11 <= var4 + 1 + var6 && var10; ++var11) {
-					boolean var12 = true;
-					if(var11 - var4 < var7) {
-						var21 = 0;
-					} else {
-						var21 = var9;
-					}
-
-					for(var13 = var3 - var21; var13 <= var3 + var21 && var10; ++var13) {
-						for(int var14 = var5 - var21; var14 <= var5 + var21 && var10; ++var14) {
-							if(var11 >= 0) {
-								var1.getClass();
-								if(var11 < 128) {
-									var15 = var1.getBlockId(var13, var11, var14);
-									if(var15 != 0 && var15 != Block.leaves.blockID) {
-										var10 = false;
-									}
-									continue;
-								}
-							}
-
-							var10 = false;
-						}
-					}
-				}
-
-				if(!var10) {
-					return false;
-				}
-
-				var11 = var1.getBlockId(var3, var4 - 1, var5);
-				if(var11 == Block.grass.blockID || var11 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
-						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
-						var21 = var2.nextInt(2);
-						var13 = 1;
-						byte var22 = 0;
-
-						int var16;
-						int var17;
-						for(var15 = 0; var15 <= var8; ++var15) {
-							var16 = var4 + var6 - var15;
-
-							for(var17 = var3 - var21; var17 <= var3 + var21; ++var17) {
-								int var18 = var17 - var3;
-
-								for(int var19 = var5 - var21; var19 <= var5 + var21; ++var19) {
-									int var20 = var19 - var5;
-									if((Math.abs(var18) != var21 || Math.abs(var20) != var21 || var21 <= 0) && !Block.opaqueCubeLookup[var1.getBlockId(var17, var16, var19)]) {
-										var1.setBlockAndMetadata(var17, var16, var19, Block.leaves.blockID, 1);
-									}
-								}
-							}
-
-							if(var21 >= var13) {
-								var21 = var22;
-								var22 = 1;
-								++var13;
-								if(var13 > var9) {
-									var13 = var9;
-								}
-							} else {
-								++var21;
-							}
-						}
-
-						var15 = var2.nextInt(3);
-
-						for(var16 = 0; var16 < var6 - var15; ++var16) {
-							var17 = var1.getBlockId(var3, var4 + var16, var5);
-							if(var17 == 0 || var17 == Block.leaves.blockID) {
-								var1.setBlockAndMetadata(var3, var4 + var16, var5, Block.wood.blockID, 1);
-							}
-						}
-
-						return true;
-					}
-				}
-
+			int var11;
+			int var13;
+			int var15;
+			int var21;
+			for(var11 = var4; var11 <= var4 + 1 + var6 && var10; ++var11) {
+				boolean var12 = true;
+				if(var11 - var4 < var7) {
+					var21 = 0;
+				} else {
+					var21 = var9;
+				}
+
+				for(var13 = var3 - var21; var13 <= var3 + var21 && var10; ++var13) {
+					for(int var14 = var5 - var21; var14 <= var5 + var21 && var10; ++var14) {
+						if(var11 >= 0) {
+							var15 = var1.getBlockId(var13, var11, var14);
+							if(var15 != 0 && var15 != Block.leaves.blockID) {
+								var10 = false;
+							}
+							continue;
+						}
+
+						var10 = false;
+					}
+				}
+			}
+
+			if(!var10) {
 				return false;
 			}
+
+			var11 = var1.getBlockId(var3, var4 - 1, var5);
+			if(var11 == Block.grass.blockID || var11 == Block.dirt.blockID) {
+				this.setBlock(var1, var3, var4 - 1, var5, Block.dirt.blockID);
+				var21 = var2.nextInt(2);
+				var13 = 1;
+				byte var22 = 0;
+
+				int var16;
+				int var17;
+				for(var15 = 0; var15 <= var8; ++var15) {
+					var16 = var4 + var6 - var15;
+
+					for(var17 = var3 - var21; var17 <= var3 + var21; ++var17) {
+						int var18 = var17 - var3;
+
+						for(int var19 = var5 - var21; var19 <= var5 + var21; ++var19) {
+							int var20 = var19 - var5;
+							if((Math.abs(var18) != var21 || Math.abs(var20) != var21 || var21 <= 0) && !Block.opaqueCubeLookup[var1.getBlockId(var17, var16, var19)]) {
+								this.setBlockAndMetadata(var1, var17, var16, var19, Block.leaves.blockID, 1);
+							}
+						}
+					}
+
+					if(var21 >= var13) {
+						var21 = var22;
+						var22 = 1;
+						++var13;
+						if(var13 > var9) {
+							var13 = var9;
+						}
+					} else {
+						++var21;
+					}
+				}
+
+				var15 = var2.nextInt(3);
+
+				for(var16 = 0; var16 < var6 - var15; ++var16) {
+					var17 = var1.getBlockId(var3, var4 + var16, var5);
+					if(var17 == 0 || var17 == Block.leaves.blockID) {
+						this.setBlockAndMetadata(var1, var3, var4 + var16, var5, Block.wood.blockID, 1);
+					}
+				}
+
+				return true;
+			}
+
+			return false;
 		}
 
 		return false;
--- net/minecraft/src/PlayerControllerSP.java
+++ net/minecraft/src/PlayerControllerSP.java
@@ -90,7 +90,7 @@
 					this.curBlockDamage = 0.0F;
 					this.prevBlockDamage = 0.0F;
 					this.field_1069_h = 0.0F;
-					this.blockHitWait = 5;
+					this.blockHitWait = 5 + Math.round(Personalization.entropy * 5.0F);
 				}
 			} else {
 				this.curBlockDamage = 0.0F;
@@ -131,7 +131,7 @@
 
 	public void updateController() {
 		this.prevBlockDamage = this.curBlockDamage;
-		this.mc.sndManager.playRandomMusicIfReady();
+		super.updateController();
 	}
 
 	public boolean sendPlaceBlock(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7) {
--- /dev/null
+++ net/minecraft/src/PersonalizationOption.java
@@ -1,0 +1,52 @@
+package net.minecraft.src;
+
+import java.util.Objects;
+
+public class PersonalizationOption {
+	public final String id;
+	public final boolean isHeading;
+	public boolean value;
+
+	public PersonalizationOption(String id, boolean value) {
+		if (id.startsWith("# ")) {
+			id = id.substring(2);
+			this.isHeading = true;
+		} else {
+			this.isHeading = false;
+		}
+
+		this.id = id;
+		this.value = value;
+	}
+
+	public String getName() {
+		return StringTranslate.getInstance().translateKey("b18x." + (this.isHeading ? "heading" : "setting") + "." + this.id);
+	}
+
+	public String getDescription() {
+		String key = "b18x." + (this.isHeading ? "heading" : "setting") + "." + this.id + ".desc";
+		String value = StringTranslate.getInstance().translateKey(key);
+		return key.equals(value) ? null : value;
+	}
+
+	public String toString() {
+		if (this.isHeading) {
+			return "# " + this.getName();
+		} else {
+			return this.getName() + ": " + (value ? "ON" : "OFF");
+		}
+	}
+
+	public boolean equals(Object o) {
+		if (this == o) return true;
+		if (o == null || getClass() != o.getClass()) return false;
+		PersonalizationOption option = (PersonalizationOption) o;
+		return this.value == option.value
+				&& this.isHeading == option.isHeading
+				&& Objects.equals(id, option.id);
+	}
+
+	public int hashCode() {
+		return Objects.hash(id, value);
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiWinGame.java
@@ -1,0 +1,180 @@
+package net.minecraft.src;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.nio.charset.Charset;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.lwjgl.input.Keyboard;
+import org.lwjgl.opengl.GL11;
+
+public class GuiWinGame extends GuiScreen {
+	private int scrollAmount = 0;
+	private List<String> lines;
+	private int[] field_41045_c;
+	private int field_41042_d = 0;
+	private float scrollSpeed = 0.5F;
+
+	public void updateScreen() {
+		this.scrollAmount += Keyboard.isKeyDown(Keyboard.KEY_SPACE) ? 5 : 1;
+		float var1 = (float)(this.field_41042_d + this.height + this.height + 24) / this.scrollSpeed;
+		if((float)this.scrollAmount > var1) {
+			this.func_41041_e();
+		}
+
+		this.game.sndManager.playControlPanelMusic();
+	}
+
+	protected void keyTyped(char var1, int var2) {
+	}
+
+	private void func_41041_e() {
+		if (this.game.theWorld != null) {
+			this.game.respawn(this.game.theWorld.multiplayerWorld, 0, true);
+		}
+		this.game.displayGuiScreen(new GuiPersonalization().firstTime());
+//		this.game.displayGuiScreen(new GuiRemix().hardcore());
+	}
+
+	public boolean doesGuiPauseGame() {
+		return true;
+	}
+
+	public void initGui() {
+		Personalization.controlPanelUnlocked = true;
+
+		if(this.lines == null) {
+			this.lines = new ArrayList<>();
+
+			try {
+				String var1 = "";
+				BufferedReader var3 = new BufferedReader(new InputStreamReader(GuiWinGame.class.getResourceAsStream("/title/funnies.txt"), Charset.forName("UTF-8")));
+
+				List<String> funnies = new ArrayList<>();
+				while((var1 = var3.readLine()) != null) {
+					funnies.add(var1);
+				}
+
+				String[] funny = funnies.get(Personalization.rand.nextInt(funnies.size())).split("\\|");
+				String funnyAuthor = funny[0];
+				String funnyMessage = funny[1];
+
+				var3 = new BufferedReader(new InputStreamReader(GuiWinGame.class.getResourceAsStream("/title/win.txt"), Charset.forName("UTF-8")));
+				while((var1 = var3.readLine()) != null) {
+					var1 = var1.replace("PLAYERNAME", this.game.session.username)
+							.replace("FUNNY_AUTHOR", funnyAuthor)
+							.replace("FUNNY_MSG", funnyMessage);
+					this.lines.add(var1);
+				}
+
+				this.field_41045_c = new int[this.lines.size()];
+				short var9 = 274;
+
+				this.fontRenderer.lineHeight = 12;
+				for(int var10 = 0; var10 < this.lines.size(); ++var10) {
+					this.field_41042_d += this.field_41045_c[var10] = this.fontRenderer.splitStringWidth((String)this.lines.get(var10), var9);
+				}
+				this.fontRenderer.lineHeight = 8;
+			} catch (Exception var8) {
+				var8.printStackTrace();
+			}
+		}
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+	}
+
+	private void func_41040_b(int var1, int var2, float var3) {
+		Tessellator var4 = Tessellator.instance;
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.game.renderEngine.getTexture("%blur%/gui/background.png"));
+		var4.startDrawingQuads();
+		var4.setColorRGBA_F(1.0F, 1.0F, 1.0F, 1.0F);
+		int var5 = this.width;
+		float var6 = 0.0F - ((float)this.scrollAmount + var3) * 0.5F * this.scrollSpeed;
+		float var7 = (float)this.height - ((float)this.scrollAmount + var3) * 0.5F * this.scrollSpeed;
+		float var8 = 0.015625F;
+		float var9 = ((float)this.scrollAmount + var3 - 0.0F) * 0.02F;
+		float var10 = (float)(this.field_41042_d + this.height + this.height + 24) / this.scrollSpeed;
+		float var11 = (var10 - 20.0F - ((float)this.scrollAmount + var3)) * 0.005F;
+		if(var11 < var9) {
+			var9 = var11;
+		}
+
+		if(var9 > 1.0F) {
+			var9 = 1.0F;
+		}
+
+		var9 *= var9;
+		var9 = var9 * 96.0F / 255.0F;
+		var4.setColorOpaque_F(var9, var9, var9);
+		var4.addVertexWithUV(0.0D, (double)this.height, (double)this.zLevel, 0.0D, (double)(var6 * var8));
+		var4.addVertexWithUV((double)var5, (double)this.height, (double)this.zLevel, (double)((float)var5 * var8), (double)(var6 * var8));
+		var4.addVertexWithUV((double)var5, 0.0D, (double)this.zLevel, (double)((float)var5 * var8), (double)(var7 * var8));
+		var4.addVertexWithUV(0.0D, 0.0D, (double)this.zLevel, 0.0D, (double)(var7 * var8));
+		var4.draw();
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		if (Keyboard.isKeyDown(Keyboard.KEY_SPACE)) {
+			var3 *= 5.0F;
+		}
+
+		this.func_41040_b(var1, var2, var3);
+		Tessellator var4 = Tessellator.instance;
+		short var5 = 274;
+		int var6 = this.width / 2 - var5 / 2;
+		int var7 = this.height + 50;
+		float var8 = -((float)this.scrollAmount + var3) * this.scrollSpeed;
+		GL11.glPushMatrix();
+		GL11.glTranslatef(0.0F, var8, 0.0F);
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.game.renderEngine.getTexture("/title/mclogo.png"));
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		this.drawTexturedModalRect(var6 + 0, var7 + 0, 0, 0, 155, 44);
+		this.drawTexturedModalRect(var6 + 155, var7 + 0, 0, 45, 155, 44);
+		var4.setColorOpaque_I(16777215);
+		this.fontRenderer.lineHeight = 12;
+		int var9 = var7 + 200;
+
+		int var10;
+		int var11;
+		for(var10 = 0; var10 < this.lines.size(); ++var10) {
+			var11 = this.field_41045_c[var10];
+			if(var10 == this.lines.size() - 1) {
+				float var12 = (float)var9 + var8 - (float)(this.height / 2 - var11 / 2);
+				if(var12 < 0.0F) {
+					GL11.glTranslatef(0.0F, -var12, 0.0F);
+				}
+			}
+
+			if((float)var9 + var8 + (float)var11 + 8.0F > 0.0F && (float)var9 + var8 < (float)this.height) {
+				String var13 = this.lines.get(var10);
+				if(var13.startsWith("[C]")) {
+					this.fontRenderer.drawStringWithShadow(var13.substring(3), var6 + (var5 - this.fontRenderer.getStringWidth(var13.substring(3))) / 2, var9, 16777215);
+				} else {
+					this.fontRenderer.drawSplitString(var13, var6 + 1, var9 + 1, var5, 16777215, true);
+					this.fontRenderer.drawSplitString(var13, var6, var9, var5, 16777215, false);
+				}
+			}
+
+			var9 += var11;
+		}
+
+		this.fontRenderer.lineHeight = 8;
+		GL11.glPopMatrix();
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.game.renderEngine.getTexture("%blur%/misc/vignette.png"));
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glBlendFunc(GL11.GL_ZERO, GL11.GL_ONE_MINUS_SRC_COLOR);
+		var4.startDrawingQuads();
+		var4.setColorRGBA_F(1.0F, 1.0F, 1.0F, 1.0F);
+		var10 = this.width;
+		var11 = this.height;
+		var4.addVertexWithUV(0.0D, (double)var11, (double)this.zLevel, 0.0D, 1.0D);
+		var4.addVertexWithUV((double)var10, (double)var11, (double)this.zLevel, 1.0D, 1.0D);
+		var4.addVertexWithUV((double)var10, 0.0D, (double)this.zLevel, 1.0D, 0.0D);
+		var4.addVertexWithUV(0.0D, 0.0D, (double)this.zLevel, 0.0D, 0.0D);
+		var4.draw();
+		GL11.glDisable(GL11.GL_BLEND);
+		super.drawScreen(var1, var2, var3);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenSeasonalForest.java
@@ -1,0 +1,10 @@
+package net.minecraft.src;
+
+public class BiomeGenSeasonalForest extends BiomeGenBase {
+	public BiomeGenSeasonalForest(int var1) {
+		super(var1);
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 5, 4, 4));
+		this.decorator.trees = 5;
+		this.decorator.grass = 2;
+	}
+}
--- net/minecraft/src/EntityGiantZombie.java
+++ net/minecraft/src/EntityGiantZombie.java
@@ -5,13 +5,22 @@
 		super(var1);
 		this.texture = "/mob/zombie.png";
 		this.moveSpeed = 0.5F;
-		this.attackStrength = 50;
-		this.health *= 10;
+		this.attackStrength = 20;
 		this.yOffset *= 6.0F;
 		this.setSize(this.width * 6.0F, this.height * 6.0F);
+		this.sightDist = 32.0F;
+		this.attackDist = 4.0F;
+	}
+
+	public int getMaxHealth() {
+		return 100;
 	}
 
 	protected float getBlockPathWeight(int var1, int var2, int var3) {
-		return this.worldObj.getLightBrightness(var1, var2, var3) - 0.5F;
+		return 0.0F;
+	}
+
+	public boolean getCanSpawnHere() {
+		return this.getCanSpawnHereRegardlessOfLight();
 	}
 }
--- net/minecraft/src/RenderEngine.java
+++ net/minecraft/src/RenderEngine.java
@@ -14,7 +14,9 @@
 import java.util.List;
 import java.util.Map;
 import javax.imageio.ImageIO;
-import org.lwjgl.opengl.GL11;
+
+import org.lwjgl.opengl.*;
+import org.lwjgl.util.glu.GLU;
 
 public class RenderEngine {
 	public static boolean useMipmaps = false;
@@ -98,11 +100,28 @@
 	}
 
 	public int getTexture(String var1) {
+		if (var1.equals("/terrain.png")) {
+			var1 = Personalization.alphaTextures ? "/terrain-alpha.png"
+					: Personalization.jappaTextures ? "/terrain-jappa.png"
+					: Personalization.futureTextures ? "/terrain-future.png"
+					: Personalization.pastTextures ? "/terrain-past.png"
+					: "/terrain.png";
+		}
+
+		if (var1.equals("/gui/items.png") && Personalization.jappaTextures) {
+			var1 = "/gui/items-jappa.png";
+		}
+
+		if (var1.equals("/gui/gui.png") && Personalization.pe8env) {
+			var1 = "/gui/gui-pe.png";
+		}
+
 		TexturePackBase var2 = this.texturePack.selectedTexturePack;
 		Integer var3 = (Integer)this.textureMap.get(var1);
 		if(var3 != null) {
 			return var3.intValue();
 		} else {
+			useMipmaps = var1.equals("/terrain-jappa.png");
 			try {
 				this.singleIntBuffer.clear();
 				GLAllocation.generateTextureNames(this.singleIntBuffer);
@@ -133,8 +152,10 @@
 				}
 
 				this.textureMap.put(var1, Integer.valueOf(var6));
+				useMipmaps = false;
 				return var6;
 			} catch (Exception var5) {
+				useMipmaps = false;
 				var5.printStackTrace();
 				GLAllocation.generateTextureNames(this.singleIntBuffer);
 				int var4 = this.singleIntBuffer.get(0);
@@ -170,7 +191,7 @@
 	public void setupTexture(BufferedImage var1, int var2) {
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2);
 		if(useMipmaps) {
-			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST_MIPMAP_LINEAR);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST_MIPMAP_NEAREST);
 			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
 		} else {
 			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
@@ -218,6 +239,12 @@
 				var11 = var14;
 			}
 
+			if (var8 == 0) {
+				var9 = 0;
+				var10 = 0;
+				var11 = 0;
+			}
+
 			var6[var7 * 4 + 0] = (byte)var9;
 			var6[var7 * 4 + 1] = (byte)var10;
 			var6[var7 * 4 + 2] = (byte)var11;
@@ -225,25 +252,36 @@
 		}
 
 		this.imageData.clear();
+		if (this.imageData.capacity() < var6.length) {
+			this.imageData = GLAllocation.createDirectByteBuffer(var6.length);
+		}
 		this.imageData.put(var6);
 		this.imageData.position(0).limit(var6.length);
 		GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, var3, var4, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
 		if(useMipmaps) {
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL12.GL_TEXTURE_MAX_LEVEL, 4);
+			GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);
 			for(var7 = 1; var7 <= 4; ++var7) {
 				var8 = var3 >> var7 - 1;
 				var9 = var3 >> var7;
 				var10 = var4 >> var7;
 
+				int[] imageBuffer = new int[var9 * var10];
+
 				for(var11 = 0; var11 < var9; ++var11) {
 					for(var12 = 0; var12 < var10; ++var12) {
 						var13 = this.imageData.getInt((var11 * 2 + 0 + (var12 * 2 + 0) * var8) * 4);
 						var14 = this.imageData.getInt((var11 * 2 + 1 + (var12 * 2 + 0) * var8) * 4);
-						int var15 = this.imageData.getInt((var11 * 2 + 1 + (var12 * 2 + 1) * var8) * 4);
-						int var16 = this.imageData.getInt((var11 * 2 + 0 + (var12 * 2 + 1) * var8) * 4);
+						int var15 = this.imageData.getInt((var11 * 2 + 0 + (var12 * 2 + 1) * var8) * 4);
+						int var16 = this.imageData.getInt((var11 * 2 + 1 + (var12 * 2 + 1) * var8) * 4);
 						int var17 = this.alphaBlend(this.alphaBlend(var13, var14), this.alphaBlend(var15, var16));
-						this.imageData.putInt((var11 + var12 * var9) * 4, var17);
+						imageBuffer[var11 + var12 * var9] = var17;
 					}
 				}
+
+				this.imageData.clear();
+				this.imageData.asIntBuffer().put(imageBuffer);
+				this.imageData.position(0).limit(var8 * var9 * 4);
 
 				GL11.glTexImage2D(GL11.GL_TEXTURE_2D, var7, GL11.GL_RGBA, var9, var10, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
 			}
@@ -251,10 +289,21 @@
 
 	}
 
+	private void checkGLError(String var1) {
+		int var2 = GL11.glGetError();
+		if(var2 != 0) {
+			String var3 = GLU.gluErrorString(var2);
+			System.out.println("########## GL ERROR ##########");
+			System.out.println("@ " + var1);
+			System.out.println(var2 + ": " + var3);
+		}
+
+	}
+
 	public void createTextureFromBytes(int[] var1, int var2, int var3, int var4) {
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, var4);
 		if(useMipmaps) {
-			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST_MIPMAP_LINEAR);
+			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
 			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
 		} else {
 			GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
@@ -380,12 +429,18 @@
 
 			for(var3 = 0; var3 < var2.tileSize; ++var3) {
 				for(var4 = 0; var4 < var2.tileSize; ++var4) {
+					this.imageData.clear();
+					this.imageData.put(var2.imageData);
+					this.imageData.position(0).limit(var2.imageData.length);
+
 					GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, var2.iconIndex % 16 * 16 + var3 * 16, var2.iconIndex / 16 * 16 + var4 * 16, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
-					if(useMipmaps) {
+					if(useMipmaps || Personalization.jappaTextures && var2.tileImage == 0) {
 						for(var5 = 1; var5 <= 4; ++var5) {
 							var6 = 16 >> var5 - 1;
 							var7 = 16 >> var5;
 
+							int[] imageBuffer = new int[var7 * var7];
+
 							for(var8 = 0; var8 < var7; ++var8) {
 								for(var9 = 0; var9 < var7; ++var9) {
 									var10 = this.imageData.getInt((var8 * 2 + 0 + (var9 * 2 + 0) * var6) * 4);
@@ -393,11 +448,15 @@
 									var12 = this.imageData.getInt((var8 * 2 + 1 + (var9 * 2 + 1) * var6) * 4);
 									int var13 = this.imageData.getInt((var8 * 2 + 0 + (var9 * 2 + 1) * var6) * 4);
 									int var14 = this.averageColor(this.averageColor(var10, var11), this.averageColor(var12, var13));
-									this.imageData.putInt((var8 + var9 * var7) * 4, var14);
+									imageBuffer[var8 + var9 * var7] = var14;
 								}
 							}
 
-							GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, var5, var2.iconIndex % 16 * var7, var2.iconIndex / 16 * var7, var7, var7, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
+							this.imageData.clear();
+							this.imageData.asIntBuffer().put(imageBuffer);
+							this.imageData.position(0).limit(var7 * var7 * 4);
+
+							GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, var5, var2.iconIndex % 16 * var7 + var3 * var7, var2.iconIndex / 16 * var7 + var4 * var7, var7, var7, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
 						}
 					}
 				}
@@ -412,11 +471,13 @@
 				this.imageData.position(0).limit(var2.imageData.length);
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2.textureId);
 				GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
-				if(useMipmaps) {
+				if(useMipmaps || Personalization.jappaTextures && var2.tileImage == 0) {
 					for(var3 = 1; var3 <= 4; ++var3) {
 						var4 = 16 >> var3 - 1;
 						var5 = 16 >> var3;
 
+						int[] imageBuffer = new int[var5 * var5];
+
 						for(var6 = 0; var6 < var5; ++var6) {
 							for(var7 = 0; var7 < var5; ++var7) {
 								var8 = this.imageData.getInt((var6 * 2 + 0 + (var7 * 2 + 0) * var4) * 4);
@@ -424,16 +485,19 @@
 								var10 = this.imageData.getInt((var6 * 2 + 1 + (var7 * 2 + 1) * var4) * 4);
 								var11 = this.imageData.getInt((var6 * 2 + 0 + (var7 * 2 + 1) * var4) * 4);
 								var12 = this.averageColor(this.averageColor(var8, var9), this.averageColor(var10, var11));
-								this.imageData.putInt((var6 + var7 * var5) * 4, var12);
+								imageBuffer[var6 + var7 * var5] = var12;
 							}
 						}
+
+						this.imageData.clear();
+						this.imageData.asIntBuffer().put(imageBuffer);
+						this.imageData.position(0).limit(var5 * var5 * 4);
 
 						GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, var3, 0, 0, var5, var5, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)this.imageData);
 					}
 				}
 			}
 		}
-
 	}
 
 	private int averageColor(int var1, int var2) {
@@ -443,25 +507,25 @@
 	}
 
 	private int alphaBlend(int var1, int var2) {
-		int var3 = (var1 & -16777216) >> 24 & 255;
-		int var4 = (var2 & -16777216) >> 24 & 255;
-		short var5 = 255;
-		if(var3 + var4 == 0) {
-			var3 = 1;
-			var4 = 1;
-			var5 = 0;
+		int a1 = (var1 & -16777216) >> 24 & 255;
+		int a2 = (var2 & -16777216) >> 24 & 255;
+		int alpha = (a1 + a2) / 2;
+		if(a1 + a2 == 0) {
+			a1 = 1;
+			a2 = 1;
+			alpha = 0;
 		}
 
-		int var6 = (var1 >> 16 & 255) * var3;
-		int var7 = (var1 >> 8 & 255) * var3;
-		int var8 = (var1 & 255) * var3;
-		int var9 = (var2 >> 16 & 255) * var4;
-		int var10 = (var2 >> 8 & 255) * var4;
-		int var11 = (var2 & 255) * var4;
-		int var12 = (var6 + var9) / (var3 + var4);
-		int var13 = (var7 + var10) / (var3 + var4);
-		int var14 = (var8 + var11) / (var3 + var4);
-		return var5 << 24 | var12 << 16 | var13 << 8 | var14;
+		int r1 = (var1 >> 16 & 255) * a1;
+		int g1 = (var1 >> 8 & 255) * a1;
+		int b1 = (var1 & 255) * a1;
+		int r2 = (var2 >> 16 & 255) * a2;
+		int g2 = (var2 >> 8 & 255) * a2;
+		int b2 = (var2 & 255) * a2;
+		int r = (r1 + r2) / (a1 + a2);
+		int g = (g1 + g2) / (a1 + a2);
+		int b = (b1 + b2) / (a1 + a2);
+		return alpha << 24 | r << 16 | g << 8 | b;
 	}
 
 	public void refreshTextures() {
--- net/minecraft/src/WorldChunkManager.java
+++ net/minecraft/src/WorldChunkManager.java
@@ -9,7 +9,9 @@
 	private GenLayer field_34902_c;
 	private GenLayer field_34901_d;
 	private GenLayer field_35565_e;
-	private BiomeCache field_35563_f;
+	private GenLayer field_34901_d4;
+	private GenLayer field_35565_e4;
+	protected BiomeCache field_35563_f;
 	private List field_35564_g;
 	public BiomeGenBase[] field_4195_d;
 
@@ -19,15 +21,23 @@
 		this.field_35564_g.add(BiomeGenBase.forest);
 		this.field_35564_g.add(BiomeGenBase.swampland);
 		this.field_35564_g.add(BiomeGenBase.taiga);
+		this.field_35564_g.add(BiomeGenBase.snowyTaiga);
+		this.field_35564_g.add(BiomeGenBase.jungle);
 	}
 
-	public WorldChunkManager(World var1) {
+	public WorldChunkManager(long var1) {
 		this();
-		GenLayer[] var2 = GenLayer.func_35497_a(var1.getRandomSeed());
+		GenLayer[] var2 = GenLayer.func_35497_a(var1);
 		this.field_34903_b = var2[0];
 		this.field_34902_c = var2[1];
 		this.field_34901_d = var2[2];
 		this.field_35565_e = var2[3];
+		this.field_34901_d4 = var2[4];
+		this.field_35565_e4 = var2[5];
+	}
+
+	public WorldChunkManager(World var1) {
+		this(var1.getRandomSeed());
 	}
 
 	public List func_35559_a() {
@@ -66,6 +76,26 @@
 		return var1;
 	}
 
+	public float[] getRainfallsForGeneration(float[] var1, int var2, int var3, int var4, int var5) {
+		IntCache.func_35268_a();
+		if(var1 == null || var1.length < var4 * var5) {
+			var1 = new float[var4 * var5];
+		}
+
+		int[] var6 = this.field_35565_e4.func_35500_a(var2, var3, var4, var5);
+
+		for(int var7 = 0; var7 < var4 * var5; ++var7) {
+			float var8 = (float)var6[var7] / 65536.0F;
+			if(var8 > 1.0F) {
+				var8 = 1.0F;
+			}
+
+			var1[var7] = var8;
+		}
+
+		return var1;
+	}
+
 	public float func_35554_b(int var1, int var2) {
 		return this.field_35563_f.func_35722_b(var1, var2);
 	}
@@ -90,6 +120,26 @@
 		return var1;
 	}
 
+	public float[] getTemperaturesForGeneration(float[] var1, int var2, int var3, int var4, int var5) {
+		IntCache.func_35268_a();
+		if(var1 == null || var1.length < var4 * var5) {
+			var1 = new float[var4 * var5];
+		}
+
+		int[] var6 = this.field_34901_d4.func_35500_a(var2, var3, var4, var5);
+
+		for(int var7 = 0; var7 < var4 * var5; ++var7) {
+			float var8 = (float)var6[var7] / 65536.0F;
+			if(var8 > 1.0F) {
+				var8 = 1.0F;
+			}
+
+			var1[var7] = var8;
+		}
+
+		return var1;
+	}
+
 	public BiomeGenBase[] func_35557_b(BiomeGenBase[] var1, int var2, int var3, int var4, int var5) {
 		IntCache.func_35268_a();
 		if(var1 == null || var1.length < var4 * var5) {
@@ -150,7 +200,8 @@
 
 		for(int var12 = 0; var12 < var9 * var10; ++var12) {
 			BiomeGenBase var13 = BiomeGenBase.field_35486_a[var11[var12]];
-			if(!var4.contains(var13)) {
+			if(var4 == MapGenVillage.field_35635_a && Personalization.moreVillageBiomes
+					? MapGenVillage.field_35635_b.contains(var13) : !var4.contains(var13)) {
 				return false;
 			}
 		}
@@ -184,5 +235,9 @@
 
 	public void func_35561_b() {
 		this.field_35563_f.func_35724_a();
+	}
+
+	public boolean hasStoneGradient() {
+		return false;
 	}
 }
--- net/minecraft/src/ModelPig.java
+++ net/minecraft/src/ModelPig.java
@@ -9,18 +9,6 @@
 
 	public ModelPig(float var1) {
 		super(6, var1);
-		this.field_35401_a = new ModelRenderer(this, 16, 16);
-		this.field_35401_a.addBox(-2.0F, 0.0F, -9.0F, 4, 3, 1, var1);
-		this.field_35401_a.setRotationPoint(0.0F, 12.0F, -6.0F);
-	}
-
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
-		super.setRotationAngles(var1, var2, var3, var4, var5, var6);
-		this.field_35401_a.func_35969_a(this.head);
-	}
-
-	public void render(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		super.render(var1, var2, var3, var4, var5, var6, var7);
-		this.field_35401_a.render(var7);
+		this.head.setTextureOffset(16, 16).addBox(-2.0F, 0.0F, -9.0F, 4, 3, 1, var1);
 	}
 }
--- net/minecraft/src/GuiOptions.java
+++ net/minecraft/src/GuiOptions.java
@@ -42,18 +42,18 @@
 			}
 
 			if(var1.id == 101) {
-				this.mc.gameSettings.saveOptions();
-				this.mc.displayGuiScreen(new GuiVideoSettings(this, this.options));
+				this.game.gameSettings.saveOptions();
+				this.game.displayGuiScreen(new GuiVideoSettings(this, this.options));
 			}
 
 			if(var1.id == 100) {
-				this.mc.gameSettings.saveOptions();
-				this.mc.displayGuiScreen(new GuiControls(this, this.options));
+				this.game.gameSettings.saveOptions();
+				this.game.displayGuiScreen(new GuiControls(this, this.options));
 			}
 
 			if(var1.id == 200) {
-				this.mc.gameSettings.saveOptions();
-				this.mc.displayGuiScreen(this.parentScreen);
+				this.game.gameSettings.saveOptions();
+				this.game.displayGuiScreen(this.parentScreen);
 			}
 
 		}
--- net/minecraft/src/EntityPlayerSP.java
+++ net/minecraft/src/EntityPlayerSP.java
@@ -6,7 +6,6 @@
 	public MovementInput movementInput;
 	protected Minecraft mc;
 	protected int field_35224_c = 0;
-	public int field_35221_d = 0;
 	public float field_35222_e;
 	public float field_35223_ap;
 	public float field_35226_aq;
@@ -42,9 +41,11 @@
 	}
 
 	public void onLivingUpdate() {
-		if(this.field_35221_d > 0) {
-			--this.field_35221_d;
-			if(this.field_35221_d == 0) {
+		this.noClip = Personalization.DEBUG_MODE && this.field_35212_aW.field_35757_b;
+
+		if(this.sprintTimer > 0) {
+			--this.sprintTimer;
+			if(this.sprintTimer == 0) {
 				this.func_35113_c(false);
 			}
 		}
@@ -75,17 +76,27 @@
 					this.mc.displayGuiScreen((GuiScreen)null);
 				}
 
-				if(this.timeInPortal == 0.0F) {
-					this.mc.sndManager.playSoundFX("portal.trigger", 1.0F, this.rand.nextFloat() * 0.4F + 0.8F);
+				if(this.timeInPortal == 0.0F || this.inSkyPortal && Personalization.endSky && this.posY < 0.0D && this.rand.nextInt(50) == 0) {
+					this.mc.sndManager.playSoundFX("portal.trigger", 1.0F, this.inSkyPortal ? this.rand.nextFloat() * 0.5F + (Personalization.endSky ? 0.25F : 1.5F) : this.rand.nextFloat() * 0.4F + 0.8F);
 				}
 
-				this.timeInPortal += 0.0125F;
+				this.timeInPortal += this.inSkyPortal && this.posY < 0.0D && Personalization.endSky ? 0.005F
+						: this.inSkyPortal ? 0.05F
+						: 0.0125F;
 				if(this.timeInPortal >= 1.0F) {
 					this.timeInPortal = 1.0F;
 					if(!this.worldObj.multiplayerWorld) {
 						this.timeUntilPortal = 10;
-						this.mc.sndManager.playSoundFX("portal.travel", 1.0F, this.rand.nextFloat() * 0.4F + 0.8F);
-						this.mc.usePortal();
+						if (!this.inSkyPortal || !Personalization.endSky) {
+							this.mc.sndManager.playSoundFX("portal.travel", 1.0F, this.rand.nextFloat() * 0.4F + 0.8F);
+						}
+						if(this.inSkyPortal) {
+							this.mc.useSkyPortal();
+						} else if(this.inChargedPortal) {
+							this.mc.useChargedPortal();
+						} else {
+							this.mc.usePortal();
+						}
 					}
 				}
 
@@ -127,7 +138,8 @@
 			this.pushOutOfBlocks(this.posX - (double)this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ - (double)this.width * 0.35D);
 			this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ - (double)this.width * 0.35D);
 			this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ + (double)this.width * 0.35D);
-			boolean var4 = (float)this.func_35191_at().func_35765_a() > 6.0F;
+			boolean var4 = (this.func_35191_at().func_35765_a() > 6 || !Personalization.hunger)
+					&& (this.func_35191_at().getThirst() > 6 || !Personalization.thirst);
 			if(this.onGround && !var3 && this.movementInput.moveForward >= var2 && !this.func_35117_Q() && var4 && !this.func_35196_Z()) {
 				if(this.field_35224_c == 0) {
 					this.field_35224_c = 7;
@@ -349,11 +361,12 @@
 	}
 
 	public void func_35113_c(boolean var1) {
+		var1 &= Personalization.sprinting;
 		super.func_35113_c(var1);
 		if(!var1) {
-			this.field_35221_d = 0;
+			this.sprintTimer = 0;
 		} else {
-			this.field_35221_d = 600;
+			this.sprintTimer = Personalization.paxSprinting ? 100 : 600;
 		}
 
 	}
@@ -362,5 +375,28 @@
 		this.field_35211_aX = var1;
 		this.field_35209_aZ = var2;
 		this.field_35210_aY = var3;
+	}
+
+	public void onDeath(DamageSource var1) {
+		if (Personalization.hardcoreState > 0) {
+			Personalization.hardcoreState = 2;
+			this.health = this.getMaxHealth();
+			this.field_35217_av = new FoodStats();
+			this.mc.displayGuiScreen(new GuiRemix().diedHardcore());
+			return;
+		}
+
+		if (this.boss != null) {
+			this.boss = null;
+			this.health = this.getMaxHealth();
+			this.field_35217_av = new FoodStats();
+			this.mc.displayGuiScreen(new GuiRemix().battleMode());
+			return;
+		}
+		super.onDeath(var1);
+	}
+
+	protected void onIslandChange() {
+		this.mc.refreshWorld();
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiYesNoControlPanel.java
@@ -1,0 +1,35 @@
+package net.minecraft.src;
+
+public class GuiYesNoControlPanel extends GuiControlPanel {
+	private GuiScreen parentScreen;
+	private String message1;
+	private String message2;
+	private String buttonText1;
+	private String buttonText2;
+	private int worldNumber;
+
+	public GuiYesNoControlPanel(GuiScreen var1, String var2, String var3, String var4, String var5, int var6) {
+		this.parentScreen = var1;
+		this.message1 = var2;
+		this.message2 = var3;
+		this.buttonText1 = var4;
+		this.buttonText2 = var5;
+		this.worldNumber = var6;
+	}
+
+	public void initGui() {
+		this.controlList.add(new GuiSmallButton(0, this.width / 2 - 155 + 0, this.height / 6 + 96, this.buttonText1));
+		this.controlList.add(new GuiSmallButton(1, this.width / 2 - 155 + 160, this.height / 6 + 96, this.buttonText2));
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		this.parentScreen.deleteWorld(var1.id == 0, this.worldNumber);
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawControlPanelBackground();
+		this.drawCenteredString(this.fontRenderer, this.message1, this.width / 2, 70, 16777215);
+		this.drawCenteredString(this.fontRenderer, this.message2, this.width / 2, 90, 16777215);
+		super.drawScreen(var1, var2, var3);
+	}
+}
--- net/minecraft/src/GuiConflictWarning.java
+++ net/minecraft/src/GuiConflictWarning.java
@@ -15,7 +15,7 @@
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.enabled) {
 			if(var1.id == 0) {
-				this.mc.displayGuiScreen(new GuiMainMenu());
+				this.game.displayGuiScreen(new GuiMainMenu());
 			}
 
 		}
--- net/minecraft/src/BlockDispenser.java
+++ net/minecraft/src/BlockDispenser.java
@@ -71,6 +71,11 @@
 		} else {
 			TileEntityDispenser var6 = (TileEntityDispenser)var1.getBlockTileEntity(var2, var3, var4);
 			if(var6 != null) {
+				if (var6.splitStacks()) {
+					var1.playSoundEffect(var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, "random.explode", 4.0F, (1.0F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.2F) * 0.7F);
+					var1.spawnParticle("hugeexplosion", var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, 0.0D, 0.0D, 0.0D);
+				}
+
 				var5.displayGUIDispenser(var6);
 			}
 
@@ -180,6 +185,11 @@
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
 		TileEntityDispenser var5 = (TileEntityDispenser)var1.getBlockTileEntity(var2, var3, var4);
 		if(var5 != null) {
+			if (var5.splitStacks()) {
+				var1.playSoundEffect(var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, "random.explode", 4.0F, (1.0F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.2F) * 0.7F);
+				var1.spawnParticle("hugeexplosion", var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, 0.0D, 0.0D, 0.0D);
+			}
+
 			for(int var6 = 0; var6 < var5.getSizeInventory(); ++var6) {
 				ItemStack var7 = var5.getStackInSlot(var6);
 				if(var7 != null) {
--- net/minecraft/src/ThreadDownloadResources.java
+++ net/minecraft/src/ThreadDownloadResources.java
@@ -1,11 +1,9 @@
 package net.minecraft.src;
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
+import java.io.*;
 import java.net.URL;
+import java.nio.file.Files;
+import java.nio.file.StandardCopyOption;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import net.minecraft.client.Minecraft;
@@ -31,6 +29,36 @@
 
 	public void run() {
 		try {
+			this.loadPackedResource("/net/minecraft/client/remix.ogg", "newsound/random/remix.ogg");
+			this.loadPackedResource("/net/minecraft/client/remixquick.ogg", "newsound/random/remixquick.ogg");
+			this.loadPackedResource("/net/minecraft/client/amalgamation.ogg", "newsound/random/amalgamation.ogg");
+			this.loadPackedResource("/net/minecraft/client/overamalgamation.ogg", "newsound/random/overamalgamation.ogg");
+			this.loadPackedResource("/net/minecraft/client/biggerexplosion.ogg", "newsound/mob/biggerexplosion.ogg");
+
+			this.loadPackedResource("/net/minecraft/client/offices.ogg", "streaming/offices.ogg");
+			this.loadPackedResource("/net/minecraft/client/offices_intro.ogg", "streaming/offices_intro.ogg");
+			this.loadPackedResource("/net/minecraft/client/calm4.ogg", "music/calm4.ogg");
+			this.loadPackedResource("/net/minecraft/client/hotel.ogg", "streaming/hotel.ogg");
+			this.loadPackedResource("/net/minecraft/client/noway.ogg", "streaming/noway.ogg");
+
+			this.loadPackedResource("/net/minecraft/client/endermen/death.ogg", "newsound/mob/endermen/death.ogg");
+			this.loadPackedResource("/net/minecraft/client/endermen/hit#.ogg", "newsound/mob/endermen/hit#.ogg", 4);
+			this.loadPackedResource("/net/minecraft/client/endermen/idle#.ogg", "newsound/mob/endermen/idle#.ogg", 5);
+			this.loadPackedResource("/net/minecraft/client/endermen/portal.ogg", "newsound/mob/endermen/portal.ogg");
+			this.loadPackedResource("/net/minecraft/client/endermen/portal2.ogg", "newsound/mob/endermen/portal2.ogg");
+			this.loadPackedResource("/net/minecraft/client/endermen/scream#.ogg", "newsound/mob/endermen/scream#.ogg", 4);
+			this.loadPackedResource("/net/minecraft/client/endermen/stare.ogg", "newsound/mob/endermen/stare.ogg");
+
+			this.loadPackedResource("/net/minecraft/client/blaze/breathe#.ogg", "newsound/mob/blaze/breathe#.ogg", 4);
+			this.loadPackedResource("/net/minecraft/client/blaze/death.ogg", "newsound/mob/blaze/death.ogg");
+			this.loadPackedResource("/net/minecraft/client/blaze/hit#.ogg", "newsound/mob/blaze/hit#.ogg", 4);
+
+			this.loadPackedResource("/net/minecraft/client/enderdragon/charge.ogg", "newsound/mob/enderdragon/charge.ogg");
+			this.loadPackedResource("/net/minecraft/client/enderdragon/growl#.ogg", "newsound/mob/enderdragon/growl#.ogg", 4);
+			this.loadPackedResource("/net/minecraft/client/enderdragon/hit#.ogg", "newsound/mob/enderdragon/hit#.ogg", 4);
+
+			this.loadPackedResource("/net/minecraft/client/staggo/idle#.ogg", "newsound/mob/staggo/idle#.ogg", 8);
+
 			URL var1 = new URL("http://s3.amazonaws.com/MinecraftResources/");
 			DocumentBuilderFactory var2 = DocumentBuilderFactory.newInstance();
 			DocumentBuilder var3 = var2.newDocumentBuilder();
@@ -58,6 +86,21 @@
 			var13.printStackTrace();
 		}
 
+	}
+
+	private void loadPackedResource(String inPath, String outPath) throws IOException {
+		InputStream stream = this.getClass().getResourceAsStream(inPath);
+		if (stream == null) throw new IOException("Resource " + inPath + " is invalid.");
+		File file = new File(this.resourcesFolder, outPath);
+		file.mkdirs();
+		Files.copy(stream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);
+		this.mc.installResource(outPath, file);
+	}
+
+	private void loadPackedResource(String inPath, String outPath, int count) throws IOException {
+		for (int i = 1; i <= count; i++) {
+			this.loadPackedResource(inPath.replace("#", String.valueOf(i)), outPath.replace("#", String.valueOf(i)));
+		}
 	}
 
 	public void reloadResources() {
--- net/minecraft/src/WorldInfo.java
+++ net/minecraft/src/WorldInfo.java
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
-import java.util.List;
+import java.io.File;
+import java.util.*;
 
 public class WorldInfo {
 	private long randomSeed;
@@ -20,6 +21,8 @@
 	private int thunderTime;
 	private int field_35920_p;
 	private boolean field_35919_q;
+	private Map<Long, NBTTagCompound> islands;
+	private Map<Integer, File> fileRecordPaths;
 
 	public WorldInfo(NBTTagCompound var1) {
 		this.randomSeed = var1.getLong("RandomSeed");
@@ -47,6 +50,26 @@
 			this.dimension = this.playerTag.getInteger("Dimension");
 		}
 
+		if(var1.hasKey("IslesOfTime")) {
+			this.islands = new HashMap<>();
+			NBTTagCompound compound = var1.getCompoundTag("IslesOfTime");
+			for (String key : compound.getKeys()) {
+				this.islands.put(Long.parseLong(key), compound.getCompoundTag(key));
+			}
+		}
+
+		if(var1.hasKey("FileRecords")) {
+			this.fileRecordPaths = new HashMap<>();
+			NBTTagCompound compound = var1.getCompoundTag("FileRecords");
+			for (String key : compound.getKeys()) {
+				File file = new File(compound.getString(key));
+				if (!file.exists()) {
+					continue;
+				}
+				this.fileRecordPaths.put(Integer.parseInt(key), file);
+			}
+		}
+
 	}
 
 	public WorldInfo(WorldSettings var1, String var2) {
@@ -74,6 +97,8 @@
 		this.raining = var1.raining;
 		this.thunderTime = var1.thunderTime;
 		this.thundering = var1.thundering;
+		this.islands = var1.islands;
+		this.fileRecordPaths = var1.fileRecordPaths;
 	}
 
 	public NBTTagCompound getNBTTagCompound() {
@@ -119,6 +144,22 @@
 			var1.setCompoundTag("Player", var2);
 		}
 
+		if (this.islands != null) {
+			NBTTagCompound compound = new NBTTagCompound();
+			for (Map.Entry<Long, NBTTagCompound> island : this.islands.entrySet()) {
+				compound.setCompoundTag(Long.toString(island.getKey()), island.getValue());
+			}
+			var1.setCompoundTag("IslesOfTime", compound);
+		}
+
+		if (this.fileRecordPaths != null) {
+			NBTTagCompound compound = new NBTTagCompound();
+			for (Map.Entry<Integer, File> record : this.fileRecordPaths.entrySet()) {
+				compound.setString(Integer.toString(record.getKey()), record.getValue().toString());
+			}
+			var1.setCompoundTag("FileRecords", compound);
+		}
+
 	}
 
 	public long getRandomSeed() {
@@ -241,5 +282,106 @@
 
 	public boolean func_35917_r() {
 		return this.field_35919_q;
+	}
+
+	public void setIsleOfTime(long location, NBTTagCompound preset) {
+		if (this.islands == null) {
+			this.islands = new HashMap<>();
+		}
+		this.islands.put(location, preset);
+	}
+
+	public NBTTagCompound getIsleOfTime(long location) {
+		if (this.islands == null) {
+			return null;
+		}
+		return this.islands.get(location);
+	}
+
+	private static final Set<File> fileRoots = new HashSet<>();
+	private static Set<File> failedFiles = new HashSet<>();
+
+	static {
+		String home = System.getProperty("user.home");
+		File mainRoot = null;
+		if (home != null) {
+			File homeFile = new File(home);
+			if (homeFile.exists()) {
+				mainRoot = homeFile;
+				fileRoots.add(homeFile);
+			}
+		}
+
+		if (System.getProperty("os.name").toLowerCase().contains("windows")) {
+			String userProfile = System.getenv("USERPROFILE");
+			if (userProfile != null) {
+				File userProfileFile = new File(userProfile);
+				if (userProfileFile.exists()) {
+					mainRoot = userProfileFile;
+					fileRoots.add(userProfileFile);
+				}
+			}
+		}
+
+		if (mainRoot != null) {
+			File musicRoot = new File(mainRoot, "Music");
+			if (musicRoot.exists()) {
+				fileRoots.add(musicRoot);
+			}
+		}
+
+		for (File root : File.listRoots()) {
+			File[] subRoots = {
+					root,
+					new File(root, "Program Files"),
+					new File(root, "Program Files (x86)"),
+					new File(root, "SteamLibrary"),
+			};
+
+			for (File subRoot : subRoots) {
+				if (subRoot.exists()) {
+					fileRoots.add(subRoot);
+				}
+			}
+		}
+	}
+
+	private static File getFileRoot() {
+		return fileRoots.stream().skip(Personalization.rand.nextInt(fileRoots.size())).findFirst().orElse(null);
+	}
+
+	public File getFileRecord(int var1) {
+		if (this.fileRecordPaths == null) {
+			this.fileRecordPaths = new HashMap<>();
+		}
+
+		return this.fileRecordPaths.computeIfAbsent(var1, k -> {
+			File file = getFileRoot();
+			while (file.isDirectory()) {
+				File[] files = file.listFiles();
+				if (files == null) {
+					files = new File[0];
+				}
+				files = Arrays.stream(files)
+						.filter(f -> {
+							if (failedFiles.contains(f)) return false;
+							if (f.isDirectory()) return true;
+
+							String[] fileExts = f.getName().split("\\.");
+							String fileExt = fileExts[fileExts.length - 1];
+							return fileExt.equals("ogg") || fileExt.equals("wav");
+						})
+						.toArray(File[]::new);
+				if (files.length == 0) {
+					failedFiles.add(file);
+					file = getFileRoot();
+					continue;
+				}
+
+				file = files[Personalization.rand.nextInt(files.length)];
+			}
+			System.out.println("Found it! " + file);
+			return file;
+		});
 	}
 }
--- net/minecraft/src/BlockFluid.java
+++ net/minecraft/src/BlockFluid.java
@@ -16,6 +16,31 @@
 	}
 
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
+		if (this.blockMaterial == Material.water) {
+			if (Personalization.smoothBiomes) {
+				WorldChunkManager wcm = var1.getWorldChunkManager();
+				int var5 = 0;
+				int var6 = 0;
+				int var7 = 0;
+
+				for(int var8 = -1; var8 <= 1; ++var8) {
+					for(int var9 = -1; var9 <= 1; ++var9) {
+						double t = wcm.func_35554_b(var2 + var9, var4 + var8);
+						double r = wcm.func_35558_c(var2 + var9, var4 + var8);
+						int var10 = var1.getWorldChunkManager().getBiomeGenAt(var2 + var9, var4 + var8).getWaterColor(t, r, var2 + var9, var4 + var8);
+						var5 += (var10 & 16711680) >> 16;
+						var6 += (var10 & '\uff00') >> 8;
+						var7 += var10 & 255;
+					}
+				}
+
+				return (var5 / 9 & 255) << 16 | (var6 / 9 & 255) << 8 | var7 / 9 & 255;
+			} else {
+				double var5 = (double)var1.getWorldChunkManager().func_35554_b(var2, var4);
+				double var7 = (double)var1.getWorldChunkManager().func_35558_c(var2, var4);
+				return var1.getWorldChunkManager().getBiomeGenAt(var2, var4).getWaterColor(var5, var7, var2, var4);
+			}
+		}
 		return 16777215;
 	}
 
--- /dev/null
+++ net/minecraft/src/BiomeGenRainforest.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenRainforest extends BiomeGenBase {
+	protected BiomeGenRainforest(int var1) {
+		super(var1);
+		this.decorator.trees = 10;
+		this.decorator.grass = 10;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		if (var1.nextInt(5) == 0 && !Personalization.terrain415 && !Personalization.oakOnly) return this.field_35481_B;
+		if (var1.nextInt(3) == 0 || Personalization.terrain415) return this.field_35480_A;
+		return this.field_35493_z;
+	}
+
+	public WorldGenerator getRandomWorldGenForGrass(Random var1) {
+		return new WorldGenTallGrass(Block.tallGrass.blockID, var1.nextInt(3) != 0 ? 2 : 1);
+	}
+}
--- net/minecraft/src/GenLayerIsland.java
+++ net/minecraft/src/GenLayerIsland.java
@@ -22,14 +22,57 @@
 				int var16 = var9[var12 + 2 + (var11 + 2) * var7];
 				int var17 = var9[var12 + 1 + (var11 + 1) * var7];
 				this.func_35499_a((long)(var12 + var1), (long)(var11 + var2));
-				if(var17 != 0 || var13 == 0 && var14 == 0 && var15 == 0 && var16 == 0) {
-					if(var17 != 1 || var13 == 1 && var14 == 1 && var15 == 1 && var16 == 1) {
+
+				int b = 1;
+				b = Math.max(b, var13);
+				b = Math.max(b, var14);
+				b = Math.max(b, var15);
+				b = Math.max(b, var16);
+				b = Math.max(b, var17);
+
+				if (Personalization.smallOcean) {
+					if (var17 == 0 && (var13 != 0 || var14 != 0 || var15 != 0 || var16 != 0)) {
+	                    int var18 = 1;
+	                    int var19 = 1;
+
+	                    if (var13 != 0 && this.func_35498_a(var18++) == 0) {
+	                        var19 = var13;
+	                    }
+
+	                    if (var14 != 0 && this.func_35498_a(var18++) == 0) {
+	                        var19 = var14;
+	                    }
+
+	                    if (var15 != 0 && this.func_35498_a(var18++) == 0) {
+	                        var19 = var15;
+	                    }
+
+	                    if (var16 != 0 && this.func_35498_a(var18++) == 0) {
+	                        var19 = var16;
+	                    }
+
+	                    if (this.func_35498_a(3) == 0) {
+	                        var10[var12 + var11 * var3] = var19;
+	                    } else {
+	                        var10[var12 + var11 * var3] = 0;
+	                    }
+	                } else if (var17 > 0 && (var13 == 0 || var14 == 0 || var15 == 0 || var16 == 0)) {
+	                    if (this.func_35498_a(5) == 0) {
+                            var10[var12 + var11 * var3] = 0;
+	                    } else {
+	                        var10[var12 + var11 * var3] = var17;
+	                    }
+	                } else {
+	                    var10[var12 + var11 * var3] = var17;
+	                }
+				} else if(var17 != 0 || var13 == 0 && var14 == 0 && var15 == 0 && var16 == 0) {
+					if(var17 == 0 || var13 != 0 && var14 != 0 && var15 != 0 && var16 != 0) {
 						var10[var12 + var11 * var3] = var17;
 					} else {
-						var10[var12 + var11 * var3] = 1 - this.func_35498_a(5) / 4;
+						var10[var12 + var11 * var3] = (1 - this.func_35498_a(5) / 4) * b;
 					}
 				} else {
-					var10[var12 + var11 * var3] = 0 + this.func_35498_a(3) / 2;
+					var10[var12 + var11 * var3] = (this.func_35498_a(3) / 2) * b;
 				}
 			}
 		}
--- net/minecraft/src/ChunkLoader.java
+++ net/minecraft/src/ChunkLoader.java
@@ -1,223 +1,105 @@
 package net.minecraft.src;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.Iterator;
-
-public class ChunkLoader implements IChunkLoader {
-	private File saveDir;
-	private boolean createIfNecessary;
-
-	public ChunkLoader(File var1, boolean var2) {
-		this.saveDir = var1;
-		this.createIfNecessary = var2;
-	}
-
-	private File chunkFileForXZ(int var1, int var2) {
-		String var3 = "c." + Integer.toString(var1, 36) + "." + Integer.toString(var2, 36) + ".dat";
-		String var4 = Integer.toString(var1 & 63, 36);
-		String var5 = Integer.toString(var2 & 63, 36);
-		File var6 = new File(this.saveDir, var4);
-		if(!var6.exists()) {
-			if(!this.createIfNecessary) {
-				return null;
-			}
-
-			var6.mkdir();
-		}
-
-		var6 = new File(var6, var5);
-		if(!var6.exists()) {
-			if(!this.createIfNecessary) {
-				return null;
-			}
-
-			var6.mkdir();
-		}
-
-		var6 = new File(var6, var3);
-		return !var6.exists() && !this.createIfNecessary ? null : var6;
-	}
-
-	public Chunk loadChunk(World var1, int var2, int var3) throws IOException {
-		File var4 = this.chunkFileForXZ(var2, var3);
-		if(var4 != null && var4.exists()) {
-			try {
-				FileInputStream var5 = new FileInputStream(var4);
-				NBTTagCompound var6 = CompressedStreamTools.loadGzippedCompoundFromOutputStream(var5);
-				if(!var6.hasKey("Level")) {
-					System.out.println("Chunk file at " + var2 + "," + var3 + " is missing level data, skipping");
-					return null;
-				}
-
-				if(!var6.getCompoundTag("Level").hasKey("Blocks")) {
-					System.out.println("Chunk file at " + var2 + "," + var3 + " is missing block data, skipping");
-					return null;
-				}
-
-				Chunk var7 = loadChunkIntoWorldFromCompound(var1, var6.getCompoundTag("Level"));
-				if(!var7.isAtLocation(var2, var3)) {
-					System.out.println("Chunk file at " + var2 + "," + var3 + " is in the wrong location; relocating. (Expected " + var2 + ", " + var3 + ", got " + var7.xPosition + ", " + var7.zPosition + ")");
-					var6.setInteger("xPos", var2);
-					var6.setInteger("zPos", var3);
-					var7 = loadChunkIntoWorldFromCompound(var1, var6.getCompoundTag("Level"));
-				}
-
-				var7.func_25124_i();
-				return var7;
-			} catch (Exception var8) {
-				var8.printStackTrace();
-			}
-		}
-
-		return null;
-	}
-
-	public void saveChunk(World var1, Chunk var2) throws IOException {
-		var1.checkSessionLock();
-		File var3 = this.chunkFileForXZ(var2.xPosition, var2.zPosition);
-		if(var3.exists()) {
-			WorldInfo var4 = var1.getWorldInfo();
-			var4.setSizeOnDisk(var4.getSizeOnDisk() - var3.length());
-		}
+public class ChunkLoader {
+	public static AnvilConverterData load(NBTTagCompound var0) {
+		int var1 = var0.getInteger("xPos");
+		int var2 = var0.getInteger("zPos");
+		AnvilConverterData var3 = new AnvilConverterData(var1, var2);
+		var3.blocks = var0.getByteArray("Blocks");
+		var3.data = new NibbleArrayReader(var0.getByteArray("Data"), 7);
+		var3.skyLight = new NibbleArrayReader(var0.getByteArray("SkyLight"), 7);
+		var3.blockLight = new NibbleArrayReader(var0.getByteArray("BlockLight"), 7);
+		var3.heightmap = var0.getByteArray("HeightMap");
+		var3.terrainPopulated = var0.getBoolean("TerrainPopulated");
+		var3.entities = var0.getTagList("Entities");
+		var3.tileEntities = var0.getTagList("TileEntities");
+		var3.tileTicks = var0.getTagList("TileTicks");
 
 		try {
-			File var10 = new File(this.saveDir, "tmp_chunk.dat");
-			FileOutputStream var5 = new FileOutputStream(var10);
-			NBTTagCompound var6 = new NBTTagCompound();
-			NBTTagCompound var7 = new NBTTagCompound();
-			var6.setTag("Level", var7);
-			storeChunkInCompound(var2, var1, var7);
-			CompressedStreamTools.writeGzippedCompoundToOutputStream(var6, var5);
-			var5.close();
-			if(var3.exists()) {
-				var3.delete();
-			}
-
-			var10.renameTo(var3);
-			WorldInfo var8 = var1.getWorldInfo();
-			var8.setSizeOnDisk(var8.getSizeOnDisk() + var3.length());
-		} catch (Exception var9) {
-			var9.printStackTrace();
-		}
-
-	}
-
-	public static void storeChunkInCompound(Chunk var0, World var1, NBTTagCompound var2) {
-		var1.checkSessionLock();
-		var2.setInteger("xPos", var0.xPosition);
-		var2.setInteger("zPos", var0.zPosition);
-		var2.setLong("LastUpdate", var1.getWorldTime());
-		var2.setByteArray("Blocks", var0.blocks);
-		var2.setByteArray("Data", var0.data.data);
-		var2.setByteArray("SkyLight", var0.skylightMap.data);
-		var2.setByteArray("BlockLight", var0.blocklightMap.data);
-		var2.setByteArray("HeightMap", var0.heightMap);
-		var2.setBoolean("TerrainPopulated", var0.isTerrainPopulated);
-		var0.hasEntities = false;
-		NBTTagList var3 = new NBTTagList();
-
-		Iterator var5;
-		NBTTagCompound var7;
-		for(int var4 = 0; var4 < var0.entities.length; ++var4) {
-			var5 = var0.entities[var4].iterator();
-
-			while(var5.hasNext()) {
-				Entity var6 = (Entity)var5.next();
-				var0.hasEntities = true;
-				var7 = new NBTTagCompound();
-				if(var6.addEntityID(var7)) {
-					var3.setTag(var7);
-				}
-			}
-		}
-
-		var2.setTag("Entities", var3);
-		NBTTagList var8 = new NBTTagList();
-		var5 = var0.chunkTileEntityMap.values().iterator();
-
-		while(var5.hasNext()) {
-			TileEntity var9 = (TileEntity)var5.next();
-			var7 = new NBTTagCompound();
-			var9.writeToNBT(var7);
-			var8.setTag(var7);
-		}
-
-		var2.setTag("TileEntities", var8);
-	}
-
-	public static Chunk loadChunkIntoWorldFromCompound(World var0, NBTTagCompound var1) {
-		int var2 = var1.getInteger("xPos");
-		int var3 = var1.getInteger("zPos");
-		Chunk var4 = new Chunk(var0, var2, var3);
-		var4.blocks = var1.getByteArray("Blocks");
-		byte[] var10003 = var1.getByteArray("Data");
-		var0.getClass();
-		var4.data = new NibbleArray(var10003, 7);
-		var10003 = var1.getByteArray("SkyLight");
-		var0.getClass();
-		var4.skylightMap = new NibbleArray(var10003, 7);
-		var10003 = var1.getByteArray("BlockLight");
-		var0.getClass();
-		var4.blocklightMap = new NibbleArray(var10003, 7);
-		var4.heightMap = var1.getByteArray("HeightMap");
-		var4.isTerrainPopulated = var1.getBoolean("TerrainPopulated");
-		int var13;
-		if(!var4.data.isValid()) {
-			var13 = var4.blocks.length;
-			var0.getClass();
-			var4.data = new NibbleArray(var13, 7);
-		}
-
-		if(var4.heightMap == null || !var4.skylightMap.isValid()) {
-			var4.heightMap = new byte[256];
-			var13 = var4.blocks.length;
-			var0.getClass();
-			var4.skylightMap = new NibbleArray(var13, 7);
-			var4.generateSkylightMap();
-		}
-
-		if(!var4.blocklightMap.isValid()) {
-			var13 = var4.blocks.length;
-			var0.getClass();
-			var4.blocklightMap = new NibbleArray(var13, 7);
-			var4.func_1014_a();
-		}
-
-		NBTTagList var5 = var1.getTagList("Entities");
-		if(var5 != null) {
-			for(int var6 = 0; var6 < var5.tagCount(); ++var6) {
-				NBTTagCompound var7 = (NBTTagCompound)var5.tagAt(var6);
-				Entity var8 = EntityList.createEntityFromNBT(var7, var0);
-				var4.hasEntities = true;
-				if(var8 != null) {
-					var4.addEntity(var8);
-				}
-			}
-		}
-
-		NBTTagList var10 = var1.getTagList("TileEntities");
-		if(var10 != null) {
-			for(int var11 = 0; var11 < var10.tagCount(); ++var11) {
-				NBTTagCompound var12 = (NBTTagCompound)var10.tagAt(var11);
-				TileEntity var9 = TileEntity.createAndLoadEntity(var12);
-				if(var9 != null) {
-					var4.addTileEntity(var9);
-				}
-			}
-		}
-
-		return var4;
-	}
-
-	public void func_814_a() {
-	}
-
-	public void saveExtraData() {
-	}
-
-	public void saveExtraChunkData(World var1, Chunk var2) throws IOException {
+			var3.lastUpdated = var0.getLong("LastUpdate");
+		} catch (ClassCastException var5) {
+			var3.lastUpdated = (long)var0.getInteger("LastUpdate");
+		}
+
+		return var3;
+	}
+
+	public static void convertToAnvilFormat(AnvilConverterData var0, NBTTagCompound var1, WorldChunkManager var2) {
+		var1.setInteger("xPos", var0.x);
+		var1.setInteger("zPos", var0.z);
+		var1.setLong("LastUpdate", var0.lastUpdated);
+		int[] var3 = new int[var0.heightmap.length];
+
+		for(int var4 = 0; var4 < var0.heightmap.length; ++var4) {
+			var3[var4] = var0.heightmap[var4];
+		}
+
+		var1.func_48183_a("HeightMap", var3);
+		var1.setBoolean("TerrainPopulated", var0.terrainPopulated);
+		NBTTagList var16 = new NBTTagList();
+		var16.setKey("Sections");
+
+		int var7;
+		for(int var5 = 0; var5 < 8; ++var5) {
+			boolean var6 = true;
+
+			for(var7 = 0; var7 < 16 && var6; ++var7) {
+				for(int var8 = 0; var8 < 16 && var6; ++var8) {
+					for(int var9 = 0; var9 < 16; ++var9) {
+						int var10 = var7 << 11 | var9 << 7 | var8 + (var5 << 4);
+						byte var11 = var0.blocks[var10];
+						if(var11 != 0) {
+							var6 = false;
+							break;
+						}
+					}
+				}
+			}
+
+			if(!var6) {
+				byte[] var19 = new byte[4096];
+				NibbleArray var20 = new NibbleArray(var19.length, 4);
+				NibbleArray var21 = new NibbleArray(var19.length, 4);
+				NibbleArray var22 = new NibbleArray(var19.length, 4);
+
+				for(int var23 = 0; var23 < 16; ++var23) {
+					for(int var12 = 0; var12 < 16; ++var12) {
+						for(int var13 = 0; var13 < 16; ++var13) {
+							int var14 = var23 << 11 | var13 << 7 | var12 + (var5 << 4);
+							byte var15 = var0.blocks[var14];
+							var19[var12 << 8 | var13 << 4 | var23] = (byte)(var15 & 255);
+							var20.setNibble(var23, var12, var13, var0.data.get(var23, var12 + (var5 << 4), var13));
+							var21.setNibble(var23, var12, var13, var0.skyLight.get(var23, var12 + (var5 << 4), var13));
+							var22.setNibble(var23, var12, var13, var0.blockLight.get(var23, var12 + (var5 << 4), var13));
+						}
+					}
+				}
+
+				NBTTagCompound var24 = new NBTTagCompound();
+				var24.setByte("Y", (byte)(var5 & 255));
+				var24.setByteArray("Blocks", var19);
+				var24.setByteArray("Data", var20.data);
+				var24.setByteArray("SkyLight", var21.data);
+				var24.setByteArray("BlockLight", var22.data);
+				var16.setTag(var24);
+			}
+		}
+
+		var1.setTag("Sections", var16);
+		byte[] var17 = new byte[256];
+
+		for(int var18 = 0; var18 < 16; ++var18) {
+			for(var7 = 0; var7 < 16; ++var7) {
+				var17[var7 << 4 | var18] = (byte)(var2.getBiomeGenAt(var0.x << 4 | var18, var0.z << 4 | var7).field_35494_y & 255);
+			}
+		}
+
+		var1.setByteArray("Biomes", var17);
+		var1.setTag("Entities", var0.entities);
+		var1.setTag("TileEntities", var0.tileEntities);
+		if(var0.tileTicks != null) {
+			var1.setTag("TileTicks", var0.tileTicks);
+		}
+
 	}
 }
--- net/minecraft/src/EntitySkeleton.java
+++ net/minecraft/src/EntitySkeleton.java
@@ -99,4 +99,8 @@
 	public ItemStack getHeldItem() {
 		return defaultHeldItem;
 	}
+
+	public boolean canWearArmor() {
+		return true;
+	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenBirchForest.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenBirchForest extends BiomeGenBase {
+	private WorldGenTrees field_35481_Ba = new WorldGenTrees(5, 9, 2, 2, false);
+	private WorldGenerator tree;
+
+	public BiomeGenBirchForest(int var1) {
+		super(var1);
+		this.decorator.trees = 10;
+		this.decorator.grass = 2;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return this.tree;
+	}
+
+	@Override
+	public void func_35477_a(World var1, Random var2, int var3, int var4) {
+		this.tree = !Personalization.oakOnly ? this.field_35481_B : super.getRandomWorldGenForTrees(var2);
+		if (this.tree == this.field_35481_B && doMutation(var3, var4)) {
+			this.tree = this.field_35481_Ba;
+		}
+
+		super.func_35477_a(var1, var2, var3, var4);
+	}
+
+	public float getMinHeight(int x, int z) {
+		return super.getMinHeight(x, z) + (doHills(x, z) ? 0.1F : 0.0F);
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) + (doHills(x, z) ? 0.3F : 0.0F);
+	}
+}
--- net/minecraft/src/WorldGenMinable.java
+++ net/minecraft/src/WorldGenMinable.java
@@ -42,8 +42,12 @@
 						if(var39 * var39 + var42 * var42 < 1.0D) {
 							for(int var44 = var34; var44 <= var37; ++var44) {
 								double var45 = ((double)var44 + 0.5D - var24) / (var28 / 2.0D);
-								if(var39 * var39 + var42 * var42 + var45 * var45 < 1.0D && var1.getBlockId(var38, var41, var44) == Block.stone.blockID) {
-									var1.setBlock(var38, var41, var44, this.minableBlockId);
+								int b = var1.getBlockId(var38, var41, var44);
+								if(var39 * var39 + var42 * var42 + var45 * var45 < 1.0D
+										&& (this.minableBlockId == Block.oreQuartz.blockID && b == Block.netherrack.blockID
+												|| (b == Block.stone.blockID
+												|| b == Block.mossyStone.blockID))) {
+									this.setBlock(var1, var38, var41, var44, this.minableBlockId);
 								}
 							}
 						}
--- /dev/null
+++ net/minecraft/src/GuiPersonalization.java
@@ -1,0 +1,217 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class GuiPersonalization extends GuiControlPanel {
+	private static boolean openedBefore;
+	private int updateCounter;
+	private int oldUpdateCounter;
+	private GuiPersonalizationSlot optionSlotContainer;
+	private GuiPresetSlot presetSlotContainer;
+	private GuiButton doneButton;
+	private GuiButton presetButton;
+	private GuiButton valuesButton;
+	private GuiButton saveButton;
+	private GuiButton loadButton;
+	private GuiButton removeButton;
+	private boolean showPresets;
+	private boolean firstTime;
+	private int buttonDelay;
+
+	public GuiPersonalization() {
+		if (openedBefore) {
+			updateCounter = oldUpdateCounter = 20;
+		}
+	}
+
+	public GuiPersonalization firstTime() {
+		this.firstTime = true;
+		return this;
+	}
+
+	public void initGui() {
+		if (Personalization.DEMO_MODE) {
+			this.game.displayGuiScreen(null);
+			return;
+		}
+
+		this.controlList.clear();
+
+		if (this.firstTime) {
+			this.controlList.add(new GuiButton(-2, this.width / 2 - 50, this.height / 2 + 50, 100, 20, "OK"));
+			return;
+		}
+
+		this.optionSlotContainer = new GuiPersonalizationSlot(this);
+		this.presetSlotContainer = new GuiPresetSlot(this);
+		this.controlList.add(this.doneButton = new GuiButton(0, this.width / 2 + 52, this.height - 28, 100, 20, "Done"));
+		this.controlList.add(this.presetButton = new GuiButton(1, this.width / 2 - 156, this.height - 28, 100, 20, "Presets"));
+		this.controlList.add(this.valuesButton = new GuiButton(5, this.width / 2 - 52, this.height - 28, 100, 20, "Values"));
+		this.controlList.add(this.saveButton = new GuiButton(2, this.width / 2 - 166, this.height - 28, 80, 20, "Save"));
+		this.controlList.add(this.loadButton = new GuiButton(3, this.width / 2 - 82, this.height - 28, 80, 20, "Load"));
+		this.controlList.add(this.removeButton = new GuiButton(4, this.width / 2 + 2, this.height - 28, 80, 20, "Remove"));
+		this.updateButtons();
+	}
+
+	private void updateButtons() {
+		this.buttonDelay = 5;
+
+		if (this.showPresets) {
+			this.presetButton.xPosition = this.width / 2 + 86;
+			this.presetButton.width = 80;
+			this.presetButton.displayString = "Back";
+		} else {
+			this.presetButton.xPosition = this.width / 2 - 156;
+			this.presetButton.width = 100;
+			this.presetButton.displayString = "Presets";
+		}
+
+		this.doneButton.enabled2 = !this.showPresets;
+		this.valuesButton.enabled2 = !this.showPresets;
+		this.saveButton.enabled2 = this.showPresets;
+		this.loadButton.enabled2 = this.showPresets;
+		this.removeButton.enabled2 = this.showPresets;
+	}
+
+	public void updateScreen() {
+		super.updateScreen();
+
+		if (this.updateCounter == (openedBefore ? 20 : 0)) {
+			this.game.sndManager.playSoundFX("portal.travel", openedBefore ? 0.5F : 1.0F, 2.0F);
+		}
+
+		if (this.buttonDelay > 0) this.buttonDelay--;
+
+		if (this.updateCounter == 40) {
+			openedBefore = true;
+			this.game.sndManager.playControlPanelMusic();
+		}
+
+		this.updateCounter++;
+	}
+
+	protected void keyTyped(char var1, int var2) {
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		if (var1.id == -1) {
+			this.presetSlotContainer.selection = Personalization.getPresets().indexOf(Personalization.preset);
+		}
+
+		if (this.buttonDelay > 0) return;
+
+		switch (var1.id) {
+			case -2:
+				this.firstTime = false;
+				this.initGui();
+				break;
+
+			case 0:
+				Personalization.personalize();
+				this.game.sndManager.stopAllMusic();
+				this.game.displayGuiScreen(this.game.theWorld != null ? new GuiUpdate().dontRepersonalize().allowNotNow() : null);
+				break;
+
+			case 1:
+				this.showPresets = !this.showPresets;
+				this.updateButtons();
+				break;
+
+			case 2:
+				this.game.displayGuiScreen(new GuiSavePreset(this));
+				break;
+
+			case 3:
+				Personalization.setPreset(Personalization.getPresets().get(this.presetSlotContainer.selection));
+				break;
+
+			case 4:
+				String preset = Personalization.getPresets().get(this.presetSlotContainer.selection);
+				if (!preset.isEmpty()) {
+					String name = Personalization.getPresetName(preset);
+					this.game.displayGuiScreen(new GuiYesNoControlPanel(this, "Are you sure you want to delete this preset?", name + " will be lost forever!", "Yes", "No", this.presetSlotContainer.selection));
+				}
+				break;
+
+			case 5:
+				this.game.displayGuiScreen(new GuiModifyValues(this));
+				break;
+		}
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		if (this.updateCounter < 20) {
+			if (this.oldUpdateCounter != this.updateCounter) {
+				GL11.glEnable(GL11.GL_BLEND);
+				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE);
+				GL11.glDisable(GL11.GL_ALPHA_TEST);
+				this.drawRect(0, 0, this.width, this.height, 0xFFFFFF | this.updateCounter * 2 << 24);
+				GL11.glDisable(GL11.GL_BLEND);
+				GL11.glEnable(GL11.GL_ALPHA_TEST);
+			}
+			return;
+		}
+
+		GL11.glDisable(GL11.GL_BLEND);
+		this.drawControlPanelBackground();
+
+		if (this.firstTime) {
+			this.drawCenteredString(this.fontRenderer, "WELCOME TO THE CONTROL PANEL!", this.width / 2, this.height / 2 - 30, 0xFFFFFF);
+			this.drawCenteredString(this.fontRenderer, "Control this version of the game to", this.width / 2, this.height / 2 - 10, 0xFFFFFF);
+			this.drawCenteredString(this.fontRenderer, "your heart's content! Fiddle around", this.width / 2, this.height / 2, 0xFFFFFF);
+			this.drawCenteredString(this.fontRenderer, "with all the settings you want and", this.width / 2, this.height / 2 + 10, 0xFFFFFF);
+			this.drawCenteredString(this.fontRenderer, "save all the presets you want.", this.width / 2, this.height / 2 + 20, 0xFFFFFF);
+			super.drawScreen(var1, var2, var3);
+			return;
+		}
+
+		(this.showPresets ? this.presetSlotContainer : this.optionSlotContainer).drawScreen(var1, var2, var3);
+		this.drawCenteredString(this.fontRenderer, "Beta 1.8.X " + Personalization.B18X_VERSION + " Control Panel", this.width / 2, 20, 0xFFFFFF);
+		super.drawScreen(var1, var2, var3);
+
+		int hoveredSlot = this.optionSlotContainer.getHoveredSlot(var2);
+		if (!this.showPresets && hoveredSlot >= 0) {
+			PersonalizationOption option = Personalization.options.get(hoveredSlot);
+
+			String name = option.getName();
+			String desc = option.getDescription();
+			if (!option.isHeading && var1 >= this.width / 2 - 112 && var1 <= this.width / 2 - 104 + this.fontRenderer.getStringWidth(name)) {
+				String[] lines = desc == null ? new String[]{name} : (name + "|" + desc).split("\\|");
+
+				int width = 0;
+				for (String line : lines) {
+					width = Math.max(width, this.fontRenderer.getStringWidth(line));
+				}
+
+				this.drawGradientRect(var1 + 8, var2, var1 + 16 + width,
+						var2 + lines.length * 9 + 7, -1073741824, -1073741824);
+
+				int i = 0;
+				for (String line : lines) {
+					this.drawString(this.fontRenderer, line, var1 + 12, var2 + 4 + i * 9, i == 0 ? 0xFFFF55 : 0xFFFFFF);
+					i++;
+				}
+			}
+		}
+
+		if (this.updateCounter >= 20 && this.updateCounter < 40) {
+			float alpha = 1.0F - (this.updateCounter - 20 + var3) / 20.0F;
+			GL11.glEnable(GL11.GL_BLEND);
+			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+			GL11.glDisable(GL11.GL_ALPHA_TEST);
+			this.drawRect(0, 0, this.width, this.height, 0xFFFFFF | (int)(alpha * 255.0F) << 24);
+			GL11.glDisable(GL11.GL_BLEND);
+			GL11.glEnable(GL11.GL_ALPHA_TEST);
+		}
+
+		this.oldUpdateCounter = this.updateCounter;
+	}
+
+	public void deleteWorld(boolean var1, int var2) {
+		if (var1) {
+			String preset = Personalization.getPresets().get(var2);
+			Personalization.removePreset(preset);
+		}
+		this.game.displayGuiScreen(this);
+	}
+}
--- /dev/null
+++ com/github/sjcasey21/wavefunctioncollapse/Main.java
@@ -1,0 +1,210 @@
+package com.github.sjcasey21.wavefunctioncollapse;
+
+import java.awt.image.BufferedImage;
+import java.awt.Image;
+import java.io.*;
+import java.util.Arrays;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+//import java.io.File;
+//import java.io.IOException;
+import java.util.Random;
+import javax.imageio.ImageIO;
+import javax.xml.parsers.*;
+import org.w3c.dom.*;
+import org.xml.sax.SAXException;
+import com.github.sjcasey21.wavefunctioncollapse.*;
+
+public class Main {
+
+	public static String getAttributeWithDefault(Element elem, String key, String d) {
+		if (elem.hasAttribute(key))
+			return elem.getAttribute(key);
+		else
+			return d;
+	}
+	
+	static List<Map<String, String>> initTilesData() {
+	      List<Map<String, String>> tilesData = new ArrayList();
+	      String[] pairs = new String[] {
+	    		  "corner", "L",
+	    		  "cross", "I",
+	    		  "empty", "X",
+	    		  "line", "I",
+	    		  "t", "T"
+	      };
+	      
+	      for(int i = 0; i < pairs.length; i += 2) {
+	    	  int index = i / 2;
+	    	  tilesData.add(new HashMap<String, String>());
+	    	  
+	    	  tilesData.get(index).put("name", pairs[i]);
+	    	  tilesData.get(index).put("symmetry", pairs[i + 1]);
+	      }
+	      
+
+	      
+	      return tilesData;
+	}
+	
+	static List<Map<String, String>> initNeighborsData() {
+		List<Map<String, String>> neighborsData = new ArrayList();
+	      String[] pairs = new String[] {
+	    		  "corner 1", "empty",
+	    		  "corner", "cross",
+	    		  "corner", "cross 1",
+	    		  "corner", "line",
+	    		  "corner 1", "line 1",
+	    		  "corner", "t 2",
+	    		  "corner", "t 3",
+	    		  "corner", "t",
+	    		  "corner 1", "t 1",
+	    		  "corner 1", "corner 3",
+	    		  "corner 1", "corner",
+	    		  "corner", "corner 1",
+	    		  "corner", "corner 2",
+	    		  "cross", "cross",
+	    		  "cross", "cross 1",
+	    		  "cross 1", "cross 1",
+	    		  "cross", "line",
+	    		  "cross 1", "line",
+	    		  "cross", "t",
+	    		  "cross", "t 3",
+	    		  "cross 1", "t",
+	    		  "cross 1", "t 3",
+	    		  "empty", "empty",
+	    		  "empty", "line 1",
+	    		  "empty", "t 1",
+	    		  "line", "line",
+	    		  "line 1", "line 1",
+	    		  "line", "t",
+	    		  "line 1", "t 1",
+	    		  "line", "t 3",
+	    		  "t 1", "t 3",
+	    		  "t", "t",
+	    		  "t 2", "t",
+	    		  "t 1", "t",
+	    		  "t 3", "t 1"
+	      };
+	      
+	      for(int i = 0; i < pairs.length; i += 2) {
+	    	  int index = i / 2;
+	    	  neighborsData.add(new HashMap<String, String>());
+	    	  
+	    	  neighborsData.get(index).put("left", pairs[i]);
+	    	  neighborsData.get(index).put("right", pairs[i + 1]);
+	      }
+	      
+//	      for (HashMap<String, String> x : neighborsData) 
+//	    	  System.out.println(x);
+	      
+	      return neighborsData;
+	}
+	
+	static BufferedImage loadImage(String path) throws IOException {
+		Image knot = ImageIO.read(new File(path));
+		return (BufferedImage) knot;
+	}
+	
+	static void runTiledModel() {
+		String subset = "Dense Fabric";
+	    int width = 32;
+	    int height = 32;
+	    boolean periodic = true;
+
+	    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+	    try {
+	      int tilesize = 10;
+	      
+	      List<Map<String, String>> tiles = initTilesData();
+	      List<Map<String, String>> neighborsData = initNeighborsData();
+	      Map<String, String[]> subsetsData = new HashMap<String, String[]>();
+	      subsetsData.put("Standard", new String[] {"corner", "cross", "empty", "line", "t"});
+	      subsetsData.put("Crossless", new String[] {"corner", "empty", "line",});
+	      subsetsData.put("TE", new String[] { "empty", "t"});
+	      subsetsData.put("T", new String[] {"t"});
+	      subsetsData.put("CL", new String[] {"corner", "line" });
+	      subsetsData.put("CE", new String[] {"corner","empty", });
+	      subsetsData.put("C", new String[] {"corner"});
+	      subsetsData.put("Fabric", new String[] {"cross","line"});
+	      subsetsData.put("Dense Fabric", new String[] {"cross" });
+	      subsetsData.put("Dense", new String[] {"corner", "cross", "line"});
+
+	      
+	      Map<String, BufferedImage> tileData = new HashMap<String, BufferedImage>();
+	      String[] tileNames = new String[] {
+	    		  "corner",
+	    		  "cross",
+	    		  "empty",
+	    		  "line",
+	    		  "t"
+	      };
+	      for(String tile : tileNames) {
+	    	  String path = "./knot/" + tile + ".png";    	
+	    	  tileData.put(tile, loadImage(path));
+	      }
+	      Random random = new Random();
+	      
+	      SimpleTiledModel tiled_model = new SimpleTiledModel(
+	        tilesize,
+	        tiles,
+	        neighborsData,
+	        subsetsData,
+	        tileData,
+	        subset,
+	        width,
+	        height,
+	        periodic,
+	        false,
+	        false
+	      );
+	      
+	      Boolean finished = tiled_model.run(random.nextInt(), 0);
+	      
+	      System.out.println(String.format("Finished %s", finished));
+	      
+	      BufferedImage output = tiled_model.graphics();
+	      
+	      File output_file = new File("image_out.png");
+	      ImageIO.write(output, "png", output_file);
+	      
+	    } catch (Exception e) {
+	      e.printStackTrace();
+	    }
+	}
+	
+	static void runOverlappingModel() {
+	    try {
+			BufferedImage image_buffered = ImageIO.read(new File("Flowers.png"));
+			Random random = new Random();
+
+			OverlappingModel model = new OverlappingModel(
+			  image_buffered,
+			  3,
+			  32,
+			  32,
+			  true,
+			  false,
+		  2,
+			102
+			);
+			boolean finished = model.run(random.nextInt(), 0);
+
+			System.out.println("Finished: " + finished);
+
+			BufferedImage output = model.graphics();
+
+			File output_file = new File("image_out.png");
+			ImageIO.write(output, "png", output_file);
+	    } catch (Exception e) {
+	      e.printStackTrace();
+	    }
+	}
+	
+  public static void main(String[] args) {
+//    runTiledModel();
+    runOverlappingModel();
+  }
+}
--- net/minecraft/src/Entity.java
+++ net/minecraft/src/Entity.java
@@ -47,7 +47,7 @@
 	public float stepHeight = 0.0F;
 	public boolean noClip = false;
 	public float entityCollisionReduction = 0.0F;
-	protected Random rand = new Random();
+	protected Random rand = Personalization.random();
 	public int ticksExisted = 0;
 	public int fireResistance = 1;
 	public int fire = 0;
@@ -71,6 +71,7 @@
 	public int serverPosZ;
 	public boolean ignoreFrustumCheck;
 	public boolean field_35118_ao;
+	public boolean mirage;
 
 	public Entity(World var1) {
 		this.worldObj = var1;
@@ -154,6 +155,10 @@
 	}
 
 	public void onEntityUpdate() {
+		if (this.mirage && this.worldObj.getClosestPlayerToEntity(this, 32.0D) != null) {
+			this.setEntityDead();
+		}
+
 		if(this.ridingEntity != null && this.ridingEntity.isDead) {
 			this.ridingEntity = null;
 		}
@@ -721,6 +726,10 @@
 	}
 
 	protected void setBeenAttacked() {
+		if (this.mirage) {
+			this.setEntityDead();
+		}
+
 		this.beenAttacked = true;
 	}
 
@@ -760,7 +769,7 @@
 
 	public boolean addEntityID(NBTTagCompound var1) {
 		String var2 = this.getEntityString();
-		if(!this.isDead && var2 != null) {
+		if(!this.mirage && !this.isDead && var2 != null) {
 			var1.setString("id", var2);
 			this.writeToNBT(var1);
 			return true;
@@ -871,6 +880,10 @@
 	}
 
 	public boolean isEntityInsideOpaqueBlock() {
+		if (this.noClip) {
+			return false;
+		}
+
 		for(int var1 = 0; var1 < 8; ++var1) {
 			float var2 = ((float)((var1 >> 0) % 2) - 0.5F) * this.width * 0.9F;
 			float var3 = ((float)((var1 >> 1) % 2) - 0.5F) * 0.1F;
@@ -1017,6 +1030,10 @@
 	}
 
 	public void setInPortal() {
+		this.setInPortal(0);
+	}
+
+	public void setInPortal(int meta) {
 	}
 
 	public void setVelocity(double var1, double var3, double var5) {
@@ -1168,5 +1185,9 @@
 
 	public void func_35112_o() {
 		this.isInWeb = true;
+	}
+
+	public Entity[] func_40048_X() {
+		return null;
 	}
 }
--- net/minecraft/src/EntityChicken.java
+++ net/minecraft/src/EntityChicken.java
@@ -13,8 +13,11 @@
 		super(var1);
 		this.texture = "/mob/chicken.png";
 		this.setSize(0.3F, 0.7F);
-		this.health = 4;
 		this.timeUntilNextEgg = this.rand.nextInt(6000) + 6000;
+	}
+
+	public int getMaxHealth() {
+		return 4;
 	}
 
 	public void onLivingUpdate() {
--- net/minecraft/src/IInventory.java
+++ net/minecraft/src/IInventory.java
@@ -20,4 +20,8 @@
 	void func_35142_x_();
 
 	void func_35141_y_();
+
+	default boolean splitStacks() {
+		return false;
+	}
 }
--- /dev/null
+++ net/minecraft/src/ExtendedBlockStorage.java
@@ -1,0 +1,181 @@
+package net.minecraft.src;
+
+public class ExtendedBlockStorage {
+	private int yBase;
+	private int blockRefCount;
+	private int tickRefCount;
+	private byte[] blockLSBArray;
+	private NibbleArray blockMSBArray;
+	private NibbleArray blockMetadataArray;
+	private NibbleArray blocklightArray;
+	private NibbleArray skylightArray;
+
+	public ExtendedBlockStorage(int var1) {
+		this.yBase = var1;
+		this.blockLSBArray = new byte[4096];
+		this.blockMetadataArray = new NibbleArray(this.blockLSBArray.length, 4);
+		this.skylightArray = new NibbleArray(this.blockLSBArray.length, 4);
+		this.blocklightArray = new NibbleArray(this.blockLSBArray.length, 4);
+	}
+
+	public int getExtBlockID(int var1, int var2, int var3) {
+		int var4 = this.blockLSBArray[var2 << 8 | var3 << 4 | var1] & 255;
+		return this.blockMSBArray != null ? this.blockMSBArray.getNibble(var1, var2, var3) << 8 | var4 : var4;
+	}
+
+	public void setExtBlockID(int var1, int var2, int var3, int var4) {
+		int var5 = this.blockLSBArray[var2 << 8 | var3 << 4 | var1] & 255;
+		if(this.blockMSBArray != null) {
+			var5 |= this.blockMSBArray.getNibble(var1, var2, var3) << 8;
+		}
+
+		if(var5 == 0 && var4 != 0) {
+			++this.blockRefCount;
+			if(Block.blocksList[var4] != null && Block.blocksList[var4].getTickRandomly()) {
+				++this.tickRefCount;
+			}
+		} else if(var5 != 0 && var4 == 0) {
+			--this.blockRefCount;
+			if(Block.blocksList[var5] != null && Block.blocksList[var5].getTickRandomly()) {
+				--this.tickRefCount;
+			}
+		} else if(Block.blocksList[var5] == null || !Block.blocksList[var5].getTickRandomly() || Block.blocksList[var4] != null && Block.blocksList[var4].getTickRandomly()) {
+			if((Block.blocksList[var5] == null || !Block.blocksList[var5].getTickRandomly()) && Block.blocksList[var4] != null && Block.blocksList[var4].getTickRandomly()) {
+				++this.tickRefCount;
+			}
+		} else {
+			--this.tickRefCount;
+		}
+
+		this.blockLSBArray[var2 << 8 | var3 << 4 | var1] = (byte)(var4 & 255);
+		if(var4 > 255) {
+			if(this.blockMSBArray == null) {
+				this.blockMSBArray = new NibbleArray(this.blockLSBArray.length, 4);
+			}
+
+			this.blockMSBArray.setNibble(var1, var2, var3, (var4 & 3840) >> 8);
+		} else if(this.blockMSBArray != null) {
+			this.blockMSBArray.setNibble(var1, var2, var3, 0);
+		}
+
+	}
+
+	public int getExtBlockMetadata(int var1, int var2, int var3) {
+		return this.blockMetadataArray.getNibble(var1, var2, var3);
+	}
+
+	public void setExtBlockMetadata(int var1, int var2, int var3, int var4) {
+		this.blockMetadataArray.setNibble(var1, var2, var3, var4);
+	}
+
+	public boolean getIsEmpty() {
+		return this.blockRefCount == 0;
+	}
+
+	public boolean getNeedsRandomTick() {
+		return this.tickRefCount > 0;
+	}
+
+	public int getYLocation() {
+		return this.yBase;
+	}
+
+	public void setExtSkylightValue(int var1, int var2, int var3, int var4) {
+		this.skylightArray.setNibble(var1, var2, var3, var4);
+	}
+
+	public int getExtSkylightValue(int var1, int var2, int var3) {
+		return this.skylightArray.getNibble(var1, var2, var3);
+	}
+
+	public void setExtBlocklightValue(int var1, int var2, int var3, int var4) {
+		this.blocklightArray.setNibble(var1, var2, var3, var4);
+	}
+
+	public int getExtBlocklightValue(int var1, int var2, int var3) {
+		return this.blocklightArray.getNibble(var1, var2, var3);
+	}
+
+	public void func_48708_d() {
+		this.blockRefCount = 0;
+		this.tickRefCount = 0;
+
+		for(int var1 = 0; var1 < 16; ++var1) {
+			for(int var2 = 0; var2 < 16; ++var2) {
+				for(int var3 = 0; var3 < 16; ++var3) {
+					int var4 = this.getExtBlockID(var1, var2, var3);
+					if(var4 > 0) {
+						if(Block.blocksList[var4] == null) {
+							this.blockLSBArray[var2 << 8 | var3 << 4 | var1] = 0;
+							if(this.blockMSBArray != null) {
+								this.blockMSBArray.setNibble(var1, var2, var3, 0);
+							}
+						} else {
+							++this.blockRefCount;
+							if(Block.blocksList[var4].getTickRandomly()) {
+								++this.tickRefCount;
+							}
+						}
+					}
+				}
+			}
+		}
+
+	}
+
+	public void func_48711_e() {
+	}
+
+	public int func_48700_f() {
+		return this.blockRefCount;
+	}
+
+	public byte[] func_48692_g() {
+		return this.blockLSBArray;
+	}
+
+	public void func_48715_h() {
+		this.blockMSBArray = null;
+	}
+
+	public NibbleArray getBlockMSBArray() {
+		return this.blockMSBArray;
+	}
+
+	public NibbleArray func_48697_j() {
+		return this.blockMetadataArray;
+	}
+
+	public NibbleArray getBlocklightArray() {
+		return this.blocklightArray;
+	}
+
+	public NibbleArray getSkylightArray() {
+		return this.skylightArray;
+	}
+
+	public void setBlockLSBArray(byte[] var1) {
+		this.blockLSBArray = var1;
+	}
+
+	public void setBlockMSBArray(NibbleArray var1) {
+		this.blockMSBArray = var1;
+	}
+
+	public void setBlockMetadataArray(NibbleArray var1) {
+		this.blockMetadataArray = var1;
+	}
+
+	public void setBlocklightArray(NibbleArray var1) {
+		this.blocklightArray = var1;
+	}
+
+	public void setSkylightArray(NibbleArray var1) {
+		this.skylightArray = var1;
+	}
+
+	public NibbleArray createBlockMSBArray() {
+		this.blockMSBArray = new NibbleArray(this.blockLSBArray.length, 4);
+		return this.blockMSBArray;
+	}
+}
--- /dev/null
+++ com/github/sjcasey21/wavefunctioncollapse/SimpleTiledModel.java
@@ -1,0 +1,338 @@
+package com.github.sjcasey21.wavefunctioncollapse;
+
+
+
+import java.awt.Color;
+import java.awt.image.BufferedImage;
+import java.util.*;
+import java.util.function.*;
+import java.util.stream.IntStream;
+
+public class SimpleTiledModel extends Model {
+  List<Color[]> tiles;
+  List<String> tilenames;
+  int tilesize;
+  boolean black;
+
+  /**
+   * Create a new instance of a Simple Tiled Model.
+   * @param tilesize Size of the tile images in pixels.
+   * @param tileSymmetries Array of Map of tilenames and their symmetries.
+   * @param neighborData Array of Map of left and right neighbor combinations.
+   * @param subsetData Map of Subset definitions.
+   * @param tileData Map of tile image data indexed by tilename.
+   * @param subsetName Name of the subset in subsetData to use.
+   * @param width Output width in tiles.
+   * @param height Output height in tiles.
+   * @param periodic Should the output generation be tileable.
+   * @param black 
+   * @param unique
+   */
+  public SimpleTiledModel(
+    int tilesize,
+    List<Map<String, String>> tileSymmetries,
+    List<Map<String, String>> neighborData,
+    Map<String, String[]> subsetData,
+    Map<String, BufferedImage> tileData,
+    String subsetName,
+    int width,
+    int height,
+    boolean periodic,
+    boolean black,
+    boolean unique
+  ) {
+    super(width, height);
+    this.periodic = periodic;
+    this.black = black;
+    this.tilesize = tilesize;
+    
+    List<String> subset = null;
+    if (
+      subsetName != null &&
+      subsetData != null &&
+      subsetData.containsKey(subsetName)
+    ) {
+      subset = Arrays.asList(subsetData.get(subsetName));
+    }
+    
+
+    Function<BiFunction<Integer, Integer, Color>, Color[]> tile =
+      (BiFunction<Integer, Integer, Color> f) -> {
+        Color[] result = new Color[this.tilesize * this.tilesize];
+        for (int y = 0; y < this.tilesize; y++) for (int x = 0; x <
+          this.tilesize; x++) result[x + y * tilesize] = f.apply(x, y);
+        return result;
+      };
+
+    Function<Color[], Color[]> rotate =
+      (Color[] array) -> tile.apply(
+        (Integer x, Integer y) -> array[this.tilesize -
+            1 -
+            y +
+            x *
+            this.tilesize]
+      );
+
+    this.tiles = new ArrayList<Color[]>();
+    this.tilenames = new ArrayList<String>();
+    
+    List<Double> tempStationary = new ArrayList<Double>();
+    List<Integer[]> action = new ArrayList<Integer[]>();
+    HashMap<String, Integer> firstOccurrence = new HashMap<String, Integer>();
+
+    for (Map<String, String> xtile : tileSymmetries) {
+      String tilename = xtile.get("name");
+
+      Function<Integer, Integer> a, b;
+      int cardinality;
+
+      String sym = xtile.getOrDefault("symmetry", "X");
+
+      if (subset != null && !subset.contains(tilename)) continue;
+      
+      switch (sym) {
+        case "L":
+          cardinality = 4;
+          a = (Integer i) -> (i + 1) % 4;
+          b = (Integer i) -> (i % 2) == 0 ? i + 1 : i - 1;
+          break;
+        case "T":
+          cardinality = 4;
+          a = (Integer i) -> (i + 1) % 4;
+          b = (Integer i) -> (i % 2) == 0 ? i : 4 - i;
+          break;
+        case "I":
+          cardinality = 2;
+          a = (Integer i) -> 1 - i;
+          b = (Integer i) -> i;
+          break;
+        case "\\":
+          cardinality = 2;
+          a = (Integer i) -> 1 - i;
+          b = (Integer i) -> 1 - i;
+          break;
+        default:
+          cardinality = 1;
+          a = (Integer i) -> i;
+          b = (Integer i) -> i;
+          break;
+      }
+      
+      this.T = action.size();
+      firstOccurrence.put(tilename, this.T);
+
+      Integer[][] map = new Integer[cardinality][];
+      for (int t = 0; t < cardinality; t++) {
+        map[t] = new Integer[8];
+
+        map[t][0] = t;
+        map[t][1] = a.apply(t);
+        map[t][2] = a.apply(a.apply(t));
+        map[t][3] = a.apply(a.apply(a.apply(t)));
+        map[t][4] = b.apply(t);
+        map[t][5] = b.apply(a.apply(t));
+        map[t][6] = b.apply(a.apply(a.apply(t)));
+        map[t][7] = b.apply(a.apply(a.apply(a.apply(t))));
+
+        for (int s = 0; s < 8; s++) map[t][s] += this.T;
+        
+        action.add(map[t]);
+      }
+      
+      if (unique) {
+        for (int t = 0; t < cardinality; t++) {
+          BufferedImage xtileData = tileData.get(tilename);
+          this.tiles.add(
+              tile.apply(
+                (Integer x, Integer y) -> new Color(xtileData.getRGB(x, y))
+              )
+            );
+          this.tilenames.add(String.format("%s %s", tilename, t));
+        }
+      } else {
+        BufferedImage xtileData = tileData.get(tilename);
+        this.tiles.add(
+            tile.apply(
+              (Integer x, Integer y) -> new Color(xtileData.getRGB(x, y))
+            )
+          );
+        
+        this.tilenames.add(String.format("%s 0", tilename));
+        
+        for (int t = 1; t < cardinality; t++) {
+          this.tiles.add(rotate.apply(this.tiles.get(this.T + t - 1)));
+          this.tilenames.add(String.format("%s %s", tilename, t));
+        }
+      }
+
+      for (int t = 0; t < cardinality; t++) tempStationary.add(
+        Double.valueOf(xtile.getOrDefault("weight", "1.0"))
+      );
+    }
+
+    this.T = action.size();
+    this.weights = tempStationary.toArray(new Double[0]);
+
+    this.propagator = new int[4][][];
+    boolean[][][] tempPropagator = new boolean[4][][];
+    for (int d = 0; d < 4; d++) {
+      tempPropagator[d] = new boolean[this.T][];
+      this.propagator[d] = new int[this.T][];
+      for (int t = 0; t < this.T; t++) tempPropagator[d][t] =
+        new boolean[this.T];
+    }
+    
+    
+    for (Map<String, String> xneighbor : neighborData) {
+    	
+      String[] left = Arrays
+        .stream(xneighbor.get("left").split(" "))
+        .filter(x -> !x.isEmpty())
+        .toArray(String[]::new);
+
+      String[] right = Arrays
+        .stream(xneighbor.get("right").split(" "))
+        .filter(x -> !x.isEmpty())
+        .toArray(String[]::new);
+      
+      if (
+        subset != null &&
+        (!subset.contains(left[0]) || !subset.contains(right[0]))
+      ) continue;
+      
+      
+      int L = action.get(firstOccurrence.get(left[0]))[left.length == 1 ? 0
+          : Integer.valueOf(left[1])];
+      int D = action.get(L)[1];
+
+      int R = action.get(firstOccurrence.get(right[0]))[right.length == 1 ? 0
+          : Integer.valueOf(right[1])];
+      int U = action.get(R)[1];
+      
+      
+      tempPropagator[0][R][L] = true;
+      tempPropagator[0][action.get(R)[6]][action.get(L)[6]] = true;
+      tempPropagator[0][action.get(L)[4]][action.get(R)[4]] = true;
+      tempPropagator[0][action.get(L)[2]][action.get(R)[2]] = true;
+
+      tempPropagator[1][U][D] = true;
+      tempPropagator[1][action.get(D)[6]][action.get(U)[6]] = true;
+      tempPropagator[1][action.get(U)[4]][action.get(D)[4]] = true;
+      tempPropagator[1][action.get(D)[2]][action.get(U)[2]] = true;
+    }
+    
+    for (int t2 = 0; t2 < this.T; t2++) for (int t1 = 0; t1 < this.T; t1++) {
+      tempPropagator[2][t2][t1] = tempPropagator[0][t1][t2];
+      tempPropagator[3][t2][t1] = tempPropagator[1][t1][t2];
+    }
+
+    ArrayList<ArrayList<ArrayList<Integer>>> sparsePropagator = new ArrayList<ArrayList<ArrayList<Integer>>>();
+
+    for(int d = 0; d < 4; d++) {
+    	sparsePropagator.add(d, new ArrayList<ArrayList<Integer>>());
+    	for (int t = 0; t < this.T; t++) 
+    		sparsePropagator.get(d).add(t, new ArrayList<Integer>());
+    }
+
+    for (int d = 0; d < 4; d++) for (int t1 = 0; t1 < this.T; t1++) {
+      ArrayList<Integer> sp = sparsePropagator.get(d).get(t1);
+      boolean[] tp = tempPropagator[d][t1];
+            
+      for (int t2 = 0; t2 < this.T; t2++) {
+    	  if (tp[t2]) sp.add(t2);
+      }
+      
+
+      int ST = sp.size();
+      this.propagator[d][t1] = new int[ST];
+      for (int st = 0; st < ST; st++) this.propagator[d][t1][st] = sp.get(st);
+      
+    }
+  }
+
+  @Override
+  protected boolean onBoundary(int x, int y) {
+    return !this.periodic && (x < 0 || y < 0 || x >= this.FMX || y >= this.FMY);
+  }
+  
+  public String textOutput() {
+	  StringBuilder result = new StringBuilder();
+	  
+	  for (int y = 0; y < this.FMY; y++) {
+		  for (int x = 0; x < this.FMX; x++) 
+			  result.append(String.format("{%s}, ", this.tilenames.get(this.observed[x + y * this.FMX])));
+		  result.append("\n");
+	  }
+	  
+	  return result.toString();
+  }
+
+  @Override
+  public BufferedImage graphics() {
+    BufferedImage result = new BufferedImage(
+      this.FMX * this.tilesize,
+      this.FMY * this.tilesize,
+      BufferedImage.TYPE_INT_RGB
+    );
+    
+//    System.out.println(this.observed);
+
+    if (this.observed != null) {
+      for (int x = 0; x < this.FMX; x++) for (int y = 0; y < this.FMY; y++) {
+        Color[] tile = this.tiles.get(this.observed[x + y * this.FMX]);
+        for (int yt = 0; yt < this.tilesize; yt++) for (int xt = 0; xt <
+          this.tilesize; xt++) {
+          Color c = tile[xt + yt * this.tilesize];
+          result.setRGB(
+            x * this.tilesize + xt,
+            y * this.tilesize + yt,
+            c.getRGB()
+          );
+        }
+      }
+    } else {
+      for (int x = 0; x < this.FMX; x++) for (int y = 0; y < this.FMY; y++) {
+        boolean[] a = this.wave[x + y * this.FMX];
+        int amount = IntStream
+          .range(0, a.length)
+          .map(idx -> a[idx] ? 1 : 0)
+          .sum();
+        
+        
+        double lambda =
+          1.0 /
+            IntStream
+              .range(0, this.T)
+              .filter(idx -> a[idx])
+              .mapToDouble(idx -> this.weights[idx])
+              .sum();
+
+        for (int yt = 0; yt < this.tilesize; yt++) for (int xt = 0; xt <
+          this.tilesize; xt++) {
+          if (this.black && amount == this.T) result.setRGB(
+            x * this.tilesize + xt,
+            y * this.tilesize * yt,
+            (int) 0xff000000
+          ); else {
+            double r = 0, g = 0, b = 0;
+            for (int t = 0; t < this.T; t++) if (a[t]) {
+              Color c = this.tiles.get(t)[xt + yt * this.tilesize];
+              r += c.getRed() * this.weights[t] * lambda;
+              g += c.getGreen() * this.weights[t] * lambda;
+              b += c.getBlue() * this.weights[t] * lambda;
+            }
+
+            Color newColor = new Color((int) r, (int) g, (int) b);
+            result.setRGB(
+              x * tilesize + xt,
+              y * tilesize + yt,
+              newColor.getRGB()
+            );
+          }
+        }
+      }
+    }
+
+    return result;
+  }
+}
--- net/minecraft/src/BlockSponge.java
+++ net/minecraft/src/BlockSponge.java
@@ -1,18 +1,35 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class BlockSponge extends Block {
+	private static final byte range = 2;
+
 	protected BlockSponge(int var1) {
 		super(var1, Material.sponge);
 		this.blockIndexInTexture = 48;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		byte var5 = 2;
-
-		for(int var6 = var2 - var5; var6 <= var2 + var5; ++var6) {
-			for(int var7 = var3 - var5; var7 <= var3 + var5; ++var7) {
-				for(int var8 = var4 - var5; var8 <= var4 + var5; ++var8) {
+	public static boolean isSponged(World var1, int var2, int var3, int var4) {
+		for(int var6 = var2 - range; var6 <= var2 + range; ++var6) {
+			for(int var7 = var3 - range; var7 <= var3 + range; ++var7) {
+				for(int var8 = var4 - range; var8 <= var4 + range; ++var8) {
+					if(var1.getBlockId(var6, var7, var8) == Block.sponge.blockID) {
+						return true;
+					}
+				}
+			}
+		}
+
+		return false;
+	}
+
+	public void absorbWater(World var1, int var2, int var3, int var4) {
+		for(int var6 = var2 - range; var6 <= var2 + range; ++var6) {
+			for(int var7 = var3 - range; var7 <= var3 + range; ++var7) {
+				for(int var8 = var4 - range; var8 <= var4 + range; ++var8) {
 					if(var1.getBlockMaterial(var6, var7, var8) == Material.water) {
+						var1.setBlockWithNotify(var6, var7, var8, 0);
 					}
 				}
 			}
@@ -21,15 +38,27 @@
 	}
 
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		byte var5 = 2;
-
-		for(int var6 = var2 - var5; var6 <= var2 + var5; ++var6) {
-			for(int var7 = var3 - var5; var7 <= var3 + var5; ++var7) {
-				for(int var8 = var4 - var5; var8 <= var4 + var5; ++var8) {
+		for(int var6 = var2 - range; var6 <= var2 + range; ++var6) {
+			for(int var7 = var3 - range; var7 <= var3 + range; ++var7) {
+				for(int var8 = var4 - range; var8 <= var4 + range; ++var8) {
 					var1.notifyBlocksOfNeighborChange(var6, var7, var8, var1.getBlockId(var6, var7, var8));
 				}
 			}
 		}
 
+	}
+
+	public void onBlockAdded(World var1, int var2, int var3, int var4) {
+		this.absorbWater(var1, var2, var3, var4);
+		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
+			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
+		}
+	}
+
+	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
+		this.absorbWater(var1, var2, var3, var4);
+		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
+			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
+		}
 	}
 }
--- net/minecraft/src/SpawnerAnimals.java
+++ net/minecraft/src/SpawnerAnimals.java
@@ -11,12 +11,11 @@
 	protected static final Class[] nightSpawnEntities = new Class[]{EntitySpider.class, EntityZombie.class, EntitySkeleton.class};
 
 	protected static ChunkPosition getRandomSpawningPointInChunk(World var0, int var1, int var2) {
-		int var3 = var1 + var0.rand.nextInt(16);
-		Random var10000 = var0.rand;
-		var0.getClass();
-		int var4 = var10000.nextInt(128);
-		int var5 = var2 + var0.rand.nextInt(16);
-		return new ChunkPosition(var3, var4, var5);
+		Chunk var3 = var0.getChunkFromChunkCoords(var1, var2);
+		int var4 = var1 * 16 + var0.rand.nextInt(16);
+		int var5 = var0.rand.nextInt(var3 == null ? 128 : Math.max(128, var3.getTopFilledSegment()));
+		int var6 = var2 * 16 + var0.rand.nextInt(16);
+		return new ChunkPosition(var4, var5, var6);
 	}
 
 	public static final int performSpawning(World var0, boolean var1, boolean var2) {
@@ -48,7 +47,7 @@
 			label112:
 			for(int var35 = 0; var35 < var6; ++var35) {
 				EnumCreatureType var36 = var34[var35];
-				if((!var36.getPeacefulCreature() || var2) && (var36.getPeacefulCreature() || var1) && var0.countEntities(var36.getCreatureClass()) <= var36.getMaxNumberOfCreature() * eligibleChunksForSpawning.size() / 256) {
+				if((!var36.getPeacefulCreature() || var2) && (var36.getPeacefulCreature() || var1) && var0.countEntities(var36.getCreatureClass()) <= var36.getMaxNumberOfCreature() * eligibleChunksForSpawning.size() / getMaxCreatureDamp(var36)) {
 					Iterator var37 = eligibleChunksForSpawning.iterator();
 
 					label109:
@@ -69,12 +68,13 @@
 
 										var10 = (ChunkCoordIntPair)var37.next();
 										BiomeGenBase var11 = var0.getWorldChunkManager().getBiomeGenAtChunkCoord(var10);
+										var11.updateSpawnLists();
 										var12 = var11.getSpawnableList(var36);
 									} while(var12 == null);
 								} while(var12.isEmpty());
 
 								var13 = (SpawnListEntry)WeightedRandom.func_35733_a(var0.rand, var12);
-								ChunkPosition var14 = getRandomSpawningPointInChunk(var0, var10.chunkXPos * 16, var10.chunkZPos * 16);
+								ChunkPosition var14 = getRandomSpawningPointInChunk(var0, var10.chunkXPos, var10.chunkZPos);
 								var15 = var14.x;
 								var16 = var14.y;
 								var17 = var14.z;
@@ -104,6 +104,7 @@
 										float var31 = var28 * var28 + var29 * var29 + var30 * var30;
 										if(var31 >= 576.0F) {
 											EntityLiving var38;
+
 											try {
 												var38 = (EntityLiving)var13.entityClass.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var0});
 											} catch (Exception var32) {
@@ -113,6 +114,11 @@
 
 											var38.setLocationAndAngles((double)var25, (double)var26, (double)var27, var0.rand.nextFloat() * 360.0F, 0.0F);
 											if(var38.getCanSpawnHere()) {
+												if (var36 != EnumCreatureType.waterCreature && (Personalization.doChaos() || Personalization.googlyStaggo) && var0.rand.nextInt(400) == 0) {
+													var38 = new EntityFakePlayer(var0);
+													var38.setLocationAndAngles((double)var25, (double)var26, (double)var27, var0.rand.nextFloat() * 360.0F, 0.0F);
+												}
+
 												++var18;
 												var0.entityJoinedWorld(var38);
 												creatureSpecificInit(var38, var0, var25, var26, var27);
@@ -140,6 +146,8 @@
 	}
 
 	private static void creatureSpecificInit(EntityLiving var0, World var1, float var2, float var3, float var4) {
+		var0.mirage |= Personalization.doChaos() && var1.rand.nextInt(50) == 0;
+
 		if(var0 instanceof EntitySpider && var1.rand.nextInt(100) == 0) {
 			EntitySkeleton var5 = new EntitySkeleton(var1);
 			var5.setLocationAndAngles((double)var2, (double)var3, (double)var4, var0.rotationYaw, 0.0F);
@@ -178,12 +186,6 @@
 				int var11 = MathHelper.floor_double(var5.posY) + var0.rand.nextInt(16) - var0.rand.nextInt(16);
 				if(var11 < 1) {
 					var11 = 1;
-				} else {
-					var0.getClass();
-					if(var11 > 128) {
-						var0.getClass();
-						var11 = 128;
-					}
 				}
 
 				int var12 = var0.rand.nextInt(var6.length);
@@ -193,48 +195,40 @@
 				}
 
 				while(!canCreatureTypeSpawnAtLocation(EnumCreatureType.monster, var0, var9, var13, var10) && var13 < var11 + 16) {
-					var0.getClass();
-					if(var13 >= 128) {
-						break;
-					}
-
 					++var13;
 				}
 
 				if(var13 < var11 + 16) {
-					var0.getClass();
-					if(var13 < 128) {
-						float var14 = (float)var9 + 0.5F;
-						float var15 = (float)var13;
-						float var16 = (float)var10 + 0.5F;
-
-						EntityLiving var17;
-						try {
-							var17 = (EntityLiving)var6[var12].getConstructor(new Class[]{World.class}).newInstance(new Object[]{var0});
-						} catch (Exception var21) {
-							var21.printStackTrace();
-							return var2;
-						}
-
-						var17.setLocationAndAngles((double)var14, (double)var15, (double)var16, var0.rand.nextFloat() * 360.0F, 0.0F);
-						if(var17.getCanSpawnHere()) {
-							PathEntity var18 = var3.createEntityPathTo(var17, var5, 32.0F);
-							if(var18 != null && var18.pathLength > 1) {
-								PathPoint var19 = var18.getPathEnd();
-								if(Math.abs((double)var19.xCoord - var5.posX) < 1.5D && Math.abs((double)var19.zCoord - var5.posZ) < 1.5D && Math.abs((double)var19.yCoord - var5.posY) < 1.5D) {
-									ChunkCoordinates var20 = BlockBed.getNearestEmptyChunkCoordinates(var0, MathHelper.floor_double(var5.posX), MathHelper.floor_double(var5.posY), MathHelper.floor_double(var5.posZ), 1);
-									if(var20 == null) {
-										var20 = new ChunkCoordinates(var9, var13 + 1, var10);
-									}
-
-									var17.setLocationAndAngles((double)((float)var20.posX + 0.5F), (double)var20.posY, (double)((float)var20.posZ + 0.5F), 0.0F, 0.0F);
-									var0.entityJoinedWorld(var17);
-									creatureSpecificInit(var17, var0, (float)var20.posX + 0.5F, (float)var20.posY, (float)var20.posZ + 0.5F);
-									var5.wakeUpPlayer(true, false, false);
-									var17.playLivingSound();
-									var2 = true;
-									var7 = true;
+					float var14 = (float)var9 + 0.5F;
+					float var15 = (float)var13;
+					float var16 = (float)var10 + 0.5F;
+
+					EntityLiving var17;
+					try {
+						var17 = (EntityLiving)var6[var12].getConstructor(new Class[]{World.class}).newInstance(new Object[]{var0});
+					} catch (Exception var21) {
+						var21.printStackTrace();
+						return var2;
+					}
+
+					var17.setLocationAndAngles((double)var14, (double)var15, (double)var16, var0.rand.nextFloat() * 360.0F, 0.0F);
+					if(var17.getCanSpawnHere()) {
+						PathEntity var18 = var3.createEntityPathTo(var17, var5, 32.0F);
+						if(var18 != null && var18.pathLength > 1) {
+							PathPoint var19 = var18.getPathEnd();
+							if(Math.abs((double)var19.xCoord - var5.posX) < 1.5D && Math.abs((double)var19.zCoord - var5.posZ) < 1.5D && Math.abs((double)var19.yCoord - var5.posY) < 1.5D) {
+								ChunkCoordinates var20 = BlockBed.getNearestEmptyChunkCoordinates(var0, MathHelper.floor_double(var5.posX), MathHelper.floor_double(var5.posY), MathHelper.floor_double(var5.posZ), 1);
+								if(var20 == null) {
+									var20 = new ChunkCoordinates(var9, var13 + 1, var10);
 								}
+
+								var17.setLocationAndAngles((double)((float)var20.posX + 0.5F), (double)var20.posY, (double)((float)var20.posZ + 0.5F), 0.0F, 0.0F);
+								var0.entityJoinedWorld(var17);
+								creatureSpecificInit(var17, var0, (float)var20.posX + 0.5F, (float)var20.posY, (float)var20.posZ + 0.5F);
+								var5.wakeUpPlayer(true, false, false);
+								var17.playLivingSound();
+								var2 = true;
+								var7 = true;
 							}
 						}
 					}
@@ -246,7 +240,7 @@
 	public static void func_35957_a(World var0, BiomeGenBase var1, int var2, int var3, int var4, int var5, Random var6) {
 		List var7 = var1.getSpawnableList(EnumCreatureType.creature);
 		if(!var7.isEmpty()) {
-			while(var6.nextFloat() < var1.getBiome()) {
+			while(var6.nextFloat() < var1.getBiome() * (1.0F - Personalization.entropy * 0.75F)) {
 				SpawnListEntry var8 = (SpawnListEntry)WeightedRandom.func_35733_a(var0.rand, var7);
 				int var9 = var8.field_35591_b + var6.nextInt(1 + var8.field_35592_c - var8.field_35591_b);
 				int var10 = var2 + var6.nextInt(var4);
@@ -288,5 +282,17 @@
 			}
 
 		}
+	}
+
+	private static int getMaxCreatureDamp(EnumCreatureType type) {
+		int eFactor = Personalization.entropy < 0.0F ? 256 : 512;
+		eFactor = (int)(eFactor * Personalization.entropy);
+		int damp = type.getPeacefulCreature()
+				? 512 + eFactor
+				: 512 - eFactor / 2;
+		if (damp < 1) {
+			damp = 1;
+		}
+		return damp;
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiStatic.java
@@ -1,0 +1,78 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+import org.lwjgl.opengl.GL11;
+
+import java.util.Random;
+
+public class GuiStatic extends GuiScreen {
+	private static final Random rand = new Random();
+	private final Minecraft mc;
+	public float forcedStrength;
+
+	public GuiStatic(Minecraft mc) {
+		this.mc = mc;
+	}
+
+	private float getStrength() {
+		if (this.mc.thePlayer != null) {
+			return this.mc.thePlayer.staticStrength;
+		}
+		return this.forcedStrength;
+	}
+
+	private int getNoiseColor() {
+		float c = (2.0F - Personalization.chaos) / 2.0F;
+		c = 1.0F - c;
+		c *= c;
+		c = 1.0F - c;
+
+		int gray = rand.nextInt(16) + 8;
+		int r = rand.nextInt(9) - 4;
+		int g = rand.nextInt(9) - 4;
+		int b = rand.nextInt(9) - 4;
+		r *= Personalization.chaos * 4.0F + 1.0F;
+		g *= c;
+		b *= c;
+		gray *= c;
+		return ((int)(this.getStrength() * 255.0F) << 24)
+				| MathHelper.clamp(gray + r, 0, 255) << 16
+				| MathHelper.clamp(gray + g, 0, 255) << 8
+				| MathHelper.clamp(gray + b, 0, 255);
+	}
+
+	public void updateScreen() {
+		if (this.getStrength() > 0.0F) {
+			this.mc.sndManager.playSoundFX("random.remix", this.getStrength() * 0.5F, 1.0F);
+		}
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.mc.entityRenderer.func_905_b();
+		this.zLevel = 100;
+
+		ScaledResolution var5 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
+		int var6 = var5.getScaledWidth();
+		int var7 = var5.getScaledHeight();
+
+		for (int y = 0; y < var7; y++) {
+			this.drawGradientRectHorizontal(0, y, var6, y + 1, getNoiseColor(), getNoiseColor());
+		}
+
+		if (this.getStrength() >= 1.0F) {
+			if (this.mc.thePlayer != null) {
+				this.mc.thePlayer.staticStrength = 0.0F;
+				if (this.mc.thePlayer.dimension != 3) {
+					this.mc.thePlayer.angeredNotch = true;
+					this.mc.displayGuiScreen(new GuiRemix().fightNotch());
+				} else {
+					this.mc.thePlayer.angeredNotch = false;
+					this.mc.displayGuiScreen(new GuiRemix().beatTheGame());
+				}
+			} else {
+				this.mc.displayGuiScreen(new GuiRemix().resetValues());
+			}
+			this.forcedStrength = 0.0F;
+		}
+	}
+}
--- net/minecraft/src/ModelZombie.java
+++ net/minecraft/src/ModelZombie.java
@@ -1,6 +1,14 @@
 package net.minecraft.src;
 
 public class ModelZombie extends ModelBiped {
+	public ModelZombie() {
+		super();
+	}
+
+	public ModelZombie(float var1) {
+		super(var1);
+	}
+
 	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
 		super.setRotationAngles(var1, var2, var3, var4, var5, var6);
 		float var7 = MathHelper.sin(this.onGround * (float)Math.PI);
--- net/minecraft/src/ItemBow.java
+++ net/minecraft/src/ItemBow.java
@@ -47,7 +47,14 @@
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
 		if(var3.inventory.func_35157_d(Item.arrow.shiftedIndex)) {
-			var3.func_35199_b(var1, this.func_35411_c(var1));
+			if (Personalization.instantBows) {
+				var2.playSoundAtEntity(var3, "random.bow", 1.0F, 1.0F / (itemRand.nextFloat() * 0.4F + 0.8F));
+				if(!var2.multiplayerWorld) {
+					var2.entityJoinedWorld(new EntityArrow(var2, var3, 1.0F));
+				}
+			} else {
+				var3.func_35199_b(var1, this.func_35411_c(var1));
+			}
 		}
 
 		return var1;
--- net/minecraft/src/PlayerControllerMP.java
+++ net/minecraft/src/PlayerControllerMP.java
@@ -151,7 +151,7 @@
 	public void updateController() {
 		this.syncCurrentPlayItem();
 		this.prevBlockDamageMP = this.curBlockDamageMP;
-		this.mc.sndManager.playRandomMusicIfReady();
+		super.updateController();
 	}
 
 	private void syncCurrentPlayItem() {
--- net/minecraft/src/RecipesIngots.java
+++ net/minecraft/src/RecipesIngots.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class RecipesIngots {
-	private Object[][] recipeItems = new Object[][]{{Block.blockGold, new ItemStack(Item.ingotGold, 9)}, {Block.blockSteel, new ItemStack(Item.ingotIron, 9)}, {Block.blockDiamond, new ItemStack(Item.diamond, 9)}, {Block.blockLapis, new ItemStack(Item.dyePowder, 9, 4)}};
+	private Object[][] recipeItems = new Object[][]{{Block.blockGold, new ItemStack(Item.ingotGold, 9)}, {Block.blockSteel, new ItemStack(Item.ingotIron, 9)}, {Block.blockDiamond, new ItemStack(Item.diamond, 9)}, {Block.blockLapis, new ItemStack(Item.dyePowder, 9, 4)}, {Block.blockCopper, new ItemStack(Item.ingotCopper, 9)}};
 
 	public void addRecipes(CraftingManager var1) {
 		for(int var2 = 0; var2 < this.recipeItems.length; ++var2) {
@@ -11,5 +11,7 @@
 			var1.addRecipe(var4, new Object[]{"#", Character.valueOf('#'), var3});
 		}
 
+		var1.addRecipe(new ItemStack(Block.blockQuartz), "##", "##", '#', Item.quartz);
+		var1.addRecipe(new ItemStack(Block.quartzPillar), "#", "#", '#', Block.quartzPillar);
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiSavePreset.java
@@ -1,0 +1,51 @@
+package net.minecraft.src;
+
+import java.io.IOException;
+
+public class GuiSavePreset extends GuiControlPanel {
+	private final GuiScreen parentScreen;
+	private String name = Personalization.version;
+	private GuiTextField nameBox;
+
+	public GuiSavePreset(GuiScreen parentScreen) {
+		this.parentScreen = parentScreen;
+	}
+
+	public void updateScreen() {
+		super.updateScreen();
+		this.nameBox.updateCursorCounter();
+		this.name = this.nameBox.getText();
+	}
+
+	public void initGui() {
+		this.controlList.add(new GuiButton(-1, this.width / 2 - 50, this.height / 2 + 5, 100, 20, "OK"));
+		this.controlList.add(new GuiButton(0, this.width / 2 - 50, this.height / 2 + 30, 100, 20, "Cancel"));
+		this.nameBox = new GuiTextField(this, this.fontRenderer, this.width / 2 - 100, this.height / 2 - 25, 200, 20, this.name);
+		this.nameBox.setFocused(true);
+	}
+
+	protected void keyTyped(char var1, int var2) {
+		this.nameBox.textboxKeyTyped(var1, var2);
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		if (var1.id == -1) {
+			Personalization.version = this.name;
+			try {
+				Personalization.saveOptions(true);
+				this.parentScreen.actionPerformed(var1);
+			} catch (IOException e) {
+				System.out.println("Failed to save Beta 1.8.X options");
+				e.printStackTrace();
+			}
+		}
+
+		this.game.displayGuiScreen(this.parentScreen);
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawControlPanelBackground();
+		this.nameBox.drawTextBox();
+		super.drawScreen(var1, var2, var3);
+	}
+}
--- net/minecraft/src/GuiContainerCreative.java
+++ net/minecraft/src/GuiContainerCreative.java
@@ -18,8 +18,8 @@
 	}
 
 	public void updateScreen() {
-		if(!this.mc.playerController.func_35640_h()) {
-			this.mc.displayGuiScreen(new GuiInventory(this.mc.thePlayer));
+		if(!this.game.playerController.func_35640_h()) {
+			this.game.displayGuiScreen(new GuiInventory(this.game.thePlayer));
 		}
 
 	}
@@ -29,7 +29,7 @@
 		ItemStack var6;
 		if(var1 != null) {
 			if(var1.inventory == field_35311_f) {
-				var5 = this.mc.thePlayer.inventory;
+				var5 = this.game.thePlayer.inventory;
 				var6 = var5.getItemStack();
 				ItemStack var7 = var1.getStack();
 				if(var6 != null && var7 != null && var6.itemID == var7.itemID) {
@@ -56,23 +56,23 @@
 					}
 				}
 			} else {
-				this.inventorySlots.slotClick(var1.slotNumber, var3, var4, this.mc.thePlayer);
+				this.inventorySlots.slotClick(var1.slotNumber, var3, var4, this.game.thePlayer);
 				ItemStack var8 = this.inventorySlots.getSlot(var1.slotNumber).getStack();
-				this.mc.playerController.func_35637_a(var8, var1.slotNumber - this.inventorySlots.inventorySlots.size() + 9 + 36);
+				this.game.playerController.func_35637_a(var8, var1.slotNumber - this.inventorySlots.inventorySlots.size() + 9 + 36);
 			}
 		} else {
-			var5 = this.mc.thePlayer.inventory;
+			var5 = this.game.thePlayer.inventory;
 			if(var5.getItemStack() != null) {
 				if(var3 == 0) {
-					this.mc.thePlayer.dropPlayerItem(var5.getItemStack());
-					this.mc.playerController.func_35639_a(var5.getItemStack());
+					this.game.thePlayer.dropPlayerItem(var5.getItemStack());
+					this.game.playerController.func_35639_a(var5.getItemStack());
 					var5.setItemStack((ItemStack)null);
 				}
 
 				if(var3 == 1) {
 					var6 = var5.getItemStack().splitStack(1);
-					this.mc.thePlayer.dropPlayerItem(var6);
-					this.mc.playerController.func_35639_a(var6);
+					this.game.thePlayer.dropPlayerItem(var6);
+					this.game.playerController.func_35639_a(var6);
 					if(var5.getItemStack().stackSize == 0) {
 						var5.setItemStack((ItemStack)null);
 					}
@@ -83,8 +83,8 @@
 	}
 
 	public void initGui() {
-		if(!this.mc.playerController.func_35640_h()) {
-			this.mc.displayGuiScreen(new GuiInventory(this.mc.thePlayer));
+		if(!this.game.playerController.func_35640_h()) {
+			this.game.displayGuiScreen(new GuiInventory(this.game.thePlayer));
 		}
 
 		this.controlList.clear();
@@ -154,15 +154,15 @@
 		super.drawScreen(var1, var2, var3);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		GL11.glDisable(GL11.GL_LIGHTING);
-		int var11 = this.mc.renderEngine.getTexture("/gui/allitems.png");
-		this.mc.renderEngine.bindTexture(var11);
+		int var11 = this.game.renderEngine.getTexture("/gui/allitems.png");
+		this.game.renderEngine.bindTexture(var11);
 		this.drawTexturedModalRect(var5 + 154, var6 + 17 + (int)((float)(var10 - var8 - 17) * this.field_35312_g), 0, 208, 16, 16);
 	}
 
 	protected void drawGuiContainerBackgroundLayer(float var1) {
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		int var2 = this.mc.renderEngine.getTexture("/gui/allitems.png");
-		this.mc.renderEngine.bindTexture(var2);
+		int var2 = this.game.renderEngine.getTexture("/gui/allitems.png");
+		this.game.renderEngine.bindTexture(var2);
 		int var3 = (this.width - this.xSize) / 2;
 		int var4 = (this.height - this.ySize) / 2;
 		this.drawTexturedModalRect(var3, var4, 0, 0, this.xSize, this.ySize);
@@ -170,11 +170,11 @@
 
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.id == 0) {
-			this.mc.displayGuiScreen(new GuiAchievements(this.mc.statFileWriter));
+			this.game.displayGuiScreen(new GuiAchievements(this.game.statFileWriter));
 		}
 
 		if(var1.id == 1) {
-			this.mc.displayGuiScreen(new GuiStats(this, this.mc.statFileWriter));
+			this.game.displayGuiScreen(new GuiStats(this, this.game.statFileWriter));
 		}
 
 	}
--- net/minecraft/src/MapGenCavesHell.java
+++ net/minecraft/src/MapGenCavesHell.java
@@ -12,7 +12,7 @@
 		double var19 = (double)(var2 * 16 + 8);
 		float var21 = 0.0F;
 		float var22 = 0.0F;
-		Random var23 = new Random(this.rand.nextLong());
+		Random var23 = Personalization.random(this.rand.nextLong());
 		if(var14 <= 0) {
 			int var24 = this.field_1306_a * 16 - 16;
 			var14 = var24 - var23.nextInt(var24 / 4);
--- net/minecraft/src/InventoryLargeChest.java
+++ net/minecraft/src/InventoryLargeChest.java
@@ -66,4 +66,10 @@
 		this.upperChest.func_35141_y_();
 		this.lowerChest.func_35141_y_();
 	}
+
+	public boolean splitStacks() {
+		boolean upperChestSplit = this.upperChest.splitStacks();
+		boolean lowerChestSplit = this.lowerChest.splitStacks();
+		return upperChestSplit || lowerChestSplit;
+	}
 }
--- /dev/null
+++ net/minecraft/src/AnvilChunkLoader.java
@@ -1,0 +1,301 @@
+package net.minecraft.src;
+
+import java.io.DataInput;
+import java.io.DataInputStream;
+import java.io.DataOutput;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+
+public class AnvilChunkLoader implements IThreadedFileIO, IChunkLoader {
+	private List field_48451_a = new ArrayList();
+	private Set field_48449_b = new HashSet();
+	private Object field_48450_c = new Object();
+	private final File chunkSaveLocation;
+
+	public AnvilChunkLoader(File var1) {
+		this.chunkSaveLocation = var1;
+	}
+
+	public Chunk loadChunk(World var1, int var2, int var3) throws IOException {
+		NBTTagCompound var4 = null;
+		ChunkCoordIntPair var5 = new ChunkCoordIntPair(var2, var3);
+		Object var6 = this.field_48450_c;
+		synchronized(var6) {
+			if(this.field_48449_b.contains(var5)) {
+				for(int var7 = 0; var7 < this.field_48451_a.size(); ++var7) {
+					if(((AnvilChunkLoaderPending)this.field_48451_a.get(var7)).field_48427_a.equals(var5)) {
+						var4 = ((AnvilChunkLoaderPending)this.field_48451_a.get(var7)).field_48426_b;
+						break;
+					}
+				}
+			}
+		}
+
+		if(var4 == null) {
+			DataInputStream var10 = RegionFileCache.getChunkInputStream(this.chunkSaveLocation, var2, var3);
+			if(var10 == null) {
+				return null;
+			}
+
+			var4 = CompressedStreamTools.func_1141_a((DataInput)var10);
+		}
+
+		return this.func_48443_a(var1, var2, var3, var4);
+	}
+
+	protected Chunk func_48443_a(World var1, int var2, int var3, NBTTagCompound var4) {
+		if(!var4.hasKey("Level")) {
+			System.out.println("Chunk file at " + var2 + "," + var3 + " is missing level data, skipping");
+			return null;
+		} else if(!var4.getCompoundTag("Level").hasKey("Sections")) {
+			System.out.println("Chunk file at " + var2 + "," + var3 + " is missing block data, skipping");
+			return null;
+		} else if(var4.getCompoundTag("Level").getInteger("UpdateHash") != Personalization.getUpdateHash()
+				&& !var4.getCompoundTag("Level").getBoolean("PlayerModified")) {
+			return null;
+		} else {
+			Chunk var5 = this.func_48444_a(var1, var4.getCompoundTag("Level"));
+			if(!var5.isAtLocation(var2, var3)) {
+				System.out.println("Chunk file at " + var2 + "," + var3 + " is in the wrong location; relocating. (Expected " + var2 + ", " + var3 + ", got " + var5.xPosition + ", " + var5.zPosition + ")");
+				var4.setInteger("xPos", var2);
+				var4.setInteger("zPos", var3);
+				var5 = this.func_48444_a(var1, var4.getCompoundTag("Level"));
+			}
+
+			var5.removeUnknownBlocks();
+			return var5;
+		}
+	}
+
+	public void saveChunk(World var1, Chunk var2) {
+		var1.checkSessionLock();
+
+		try {
+			NBTTagCompound var3 = new NBTTagCompound();
+			NBTTagCompound var4 = new NBTTagCompound();
+			var3.setTag("Level", var4);
+			this.func_48445_a(var2, var1, var4);
+			this.func_48446_a(var2.getChunkCoordIntPair(), var3);
+		} catch (Exception var5) {
+			var5.printStackTrace();
+		}
+
+	}
+
+	protected void func_48446_a(ChunkCoordIntPair var1, NBTTagCompound var2) {
+		Object var3 = this.field_48450_c;
+		synchronized(var3) {
+			if(this.field_48449_b.contains(var1)) {
+				for(int var4 = 0; var4 < this.field_48451_a.size(); ++var4) {
+					if(((AnvilChunkLoaderPending)this.field_48451_a.get(var4)).field_48427_a.equals(var1)) {
+						this.field_48451_a.set(var4, new AnvilChunkLoaderPending(var1, var2));
+						return;
+					}
+				}
+			}
+
+			this.field_48451_a.add(new AnvilChunkLoaderPending(var1, var2));
+			this.field_48449_b.add(var1);
+			ThreadedFileIOBase.threadedIOInstance.queueIO(this);
+		}
+	}
+
+	public boolean writeNextIO() {
+		AnvilChunkLoaderPending var1 = null;
+		Object var2 = this.field_48450_c;
+		synchronized(var2) {
+			if(this.field_48451_a.size() <= 0) {
+				return false;
+			}
+
+			var1 = (AnvilChunkLoaderPending)this.field_48451_a.remove(0);
+			this.field_48449_b.remove(var1.field_48427_a);
+		}
+
+		if(var1 != null) {
+			try {
+				this.func_48447_a(var1);
+			} catch (Exception var4) {
+				var4.printStackTrace();
+			}
+		}
+
+		return true;
+	}
+
+	private void func_48447_a(AnvilChunkLoaderPending var1) throws IOException {
+		DataOutputStream var2 = RegionFileCache.getChunkOutputStream(this.chunkSaveLocation, var1.field_48427_a.chunkXPos, var1.field_48427_a.chunkZPos);
+		CompressedStreamTools.func_1139_a(var1.field_48426_b, (DataOutput)var2);
+		var2.close();
+	}
+
+	public void saveExtraChunkData(World var1, Chunk var2) {
+	}
+
+	public void func_814_a() {
+	}
+
+	public void saveExtraData() {
+	}
+
+	private void func_48445_a(Chunk var1, World var2, NBTTagCompound var3) {
+		var2.checkSessionLock();
+		var3.setInteger("xPos", var1.xPosition);
+		var3.setInteger("zPos", var1.zPosition);
+		var3.setLong("LastUpdate", var2.getWorldTime());
+		var3.func_48183_a("HeightMap", var1.heightMap);
+		var3.setBoolean("TerrainPopulated", var1.isTerrainPopulated);
+		var3.setBoolean("PlayerModified", var1.playerModified);
+		var3.setInteger("UpdateHash", var1.updateHash);
+		ExtendedBlockStorage[] var4 = var1.getBlockStorageArray();
+		NBTTagList var5 = new NBTTagList();
+		var5.setKey("Sections");
+		ExtendedBlockStorage[] var6 = var4;
+		int var7 = var4.length;
+
+		NBTTagCompound var10;
+		for(int var8 = 0; var8 < var7; ++var8) {
+			ExtendedBlockStorage var9 = var6[var8];
+			if(var9 != null && var9.func_48700_f() != 0) {
+				var10 = new NBTTagCompound();
+				var10.setByte("Y", (byte)(var9.getYLocation() >> 4 & 255));
+				var10.setByteArray("Blocks", var9.func_48692_g());
+				if(var9.getBlockMSBArray() != null) {
+					var10.setByteArray("Add", var9.getBlockMSBArray().data);
+				}
+
+				var10.setByteArray("Data", var9.func_48697_j().data);
+				var10.setByteArray("SkyLight", var9.getSkylightArray().data);
+				var10.setByteArray("BlockLight", var9.getBlocklightArray().data);
+				var5.setTag(var10);
+			}
+		}
+
+		var3.setTag("Sections", var5);
+		var3.setInteger("SectionCount", var6.length);
+		var3.setByteArray("Biomes", var1.getBiomeArray());
+		var1.hasEntities = false;
+		NBTTagList var15 = new NBTTagList();
+
+		Iterator var17;
+		for(var7 = 0; var7 < var1.entityLists.length; ++var7) {
+			var17 = var1.entityLists[var7].iterator();
+
+			while(var17.hasNext()) {
+				Entity var19 = (Entity)var17.next();
+				var1.hasEntities = true;
+				var10 = new NBTTagCompound();
+				if(var19.addEntityID(var10)) {
+					var15.setTag(var10);
+				}
+			}
+		}
+
+		var3.setTag("Entities", var15);
+		NBTTagList var16 = new NBTTagList();
+		var17 = var1.chunkTileEntityMap.values().iterator();
+
+		while(var17.hasNext()) {
+			TileEntity var20 = (TileEntity)var17.next();
+			var10 = new NBTTagCompound();
+			var20.writeToNBT(var10);
+			var16.setTag(var10);
+		}
+
+		var3.setTag("TileEntities", var16);
+		List var18 = var2.getPendingBlockUpdates(var1, false);
+		if(var18 != null) {
+			long var21 = var2.getWorldTime();
+			NBTTagList var11 = new NBTTagList();
+			Iterator var12 = var18.iterator();
+
+			while(var12.hasNext()) {
+				NextTickListEntry var13 = (NextTickListEntry)var12.next();
+				NBTTagCompound var14 = new NBTTagCompound();
+				var14.setInteger("i", var13.blockID);
+				var14.setInteger("x", var13.xCoord);
+				var14.setInteger("y", var13.yCoord);
+				var14.setInteger("z", var13.zCoord);
+				var14.setInteger("t", (int)(var13.scheduledTime - var21));
+				var11.setTag(var14);
+			}
+
+			var3.setTag("TileTicks", var11);
+		}
+
+	}
+
+	private Chunk func_48444_a(World var1, NBTTagCompound var2) {
+		int var3 = var2.getInteger("xPos");
+		int var4 = var2.getInteger("zPos");
+		Chunk var5 = new Chunk(var1, var3, var4);
+		var5.heightMap = var2.func_48182_l("HeightMap");
+		var5.isTerrainPopulated = var2.getBoolean("TerrainPopulated");
+		var5.playerModified = var2.getBoolean("PlayerModified");
+		NBTTagList var6 = var2.getTagList("Sections");
+		int var7 = var2.getInteger("SectionCount");
+		ExtendedBlockStorage[] var8 = new ExtendedBlockStorage[var7];
+
+		for(int var9 = 0; var9 < var6.tagCount(); ++var9) {
+			NBTTagCompound var10 = (NBTTagCompound)var6.tagAt(var9);
+			byte var11 = var10.getByte("Y");
+			ExtendedBlockStorage var12 = new ExtendedBlockStorage(var11 << 4);
+			var12.setBlockLSBArray(var10.getByteArray("Blocks"));
+			if(var10.hasKey("Add")) {
+				var12.setBlockMSBArray(new NibbleArray(var10.getByteArray("Add"), 4));
+			}
+
+			var12.setBlockMetadataArray(new NibbleArray(var10.getByteArray("Data"), 4));
+			var12.setSkylightArray(new NibbleArray(var10.getByteArray("SkyLight"), 4));
+			var12.setBlocklightArray(new NibbleArray(var10.getByteArray("BlockLight"), 4));
+			var12.func_48708_d();
+			var8[var11] = var12;
+		}
+
+		var5.setStorageArrays(var8);
+		if(var2.hasKey("Biomes")) {
+			var5.setBiomeArray(var2.getByteArray("Biomes"));
+		}
+
+		NBTTagList var14 = var2.getTagList("Entities");
+		if(var14 != null) {
+			for(int var15 = 0; var15 < var14.tagCount(); ++var15) {
+				NBTTagCompound var17 = (NBTTagCompound)var14.tagAt(var15);
+				Entity var19 = EntityList.createEntityFromNBT(var17, var1);
+				var5.hasEntities = true;
+				if(var19 != null) {
+					var5.addEntity(var19);
+				}
+			}
+		}
+
+		NBTTagList var16 = var2.getTagList("TileEntities");
+		if(var16 != null) {
+			for(int var18 = 0; var18 < var16.tagCount(); ++var18) {
+				NBTTagCompound var21 = (NBTTagCompound)var16.tagAt(var18);
+				TileEntity var13 = TileEntity.createAndLoadEntity(var21);
+				if(var13 != null) {
+					var5.addTileEntity(var13);
+				}
+			}
+		}
+
+		if(var2.hasKey("TileTicks")) {
+			NBTTagList var20 = var2.getTagList("TileTicks");
+			if(var20 != null) {
+				for(int var22 = 0; var22 < var20.tagCount(); ++var22) {
+					NBTTagCompound var23 = (NBTTagCompound)var20.tagAt(var22);
+					var1.scheduleBlockUpdateFromLoad(var23.getInteger("x"), var23.getInteger("y"), var23.getInteger("z"), var23.getInteger("i"), var23.getInteger("t"));
+				}
+			}
+		}
+
+		return var5;
+	}
+}
--- net/minecraft/src/FoodStats.java
+++ net/minecraft/src/FoodStats.java
@@ -6,21 +6,47 @@
 	private float field_35775_c;
 	private int field_35772_d = 0;
 	private int field_35773_e = 20;
+	private int thirst = 20;
+	private float thirstExhaustion;
+	private int thirstTickTimer = 0;
 
 	public void func_35771_a(int var1, float var2) {
+		if (!Personalization.hunger) return;
 		this.field_35776_a = Math.min(var1 + this.field_35776_a, 20);
 		this.field_35774_b = Math.min(this.field_35774_b + (float)var1 * var2 * 2.0F, (float)this.field_35776_a);
 	}
 
 	public void func_35761_a(ItemFood var1) {
+		if (!Personalization.hunger) return;
 		this.func_35771_a(var1.getHealAmount(), var1.func_35426_m());
 	}
 
 	public void func_35768_a(EntityPlayer var1) {
 		int var2 = var1.worldObj.difficultySetting;
+		if(Personalization.thirst) {
+			if (this.thirstExhaustion > 4.0F) {
+				this.thirstExhaustion -= 4.0F;
+				if(var2 > 0) {
+					this.thirst = Math.max(this.thirst - 1, 0);
+				}
+			}
+
+			if(this.thirst <= 0) {
+				++this.thirstTickTimer;
+				if(this.thirstTickTimer >= 40) {
+					if(var2 >= 3 || var1.health > 1 && var2 >= 2) {
+						var1.attackEntityFrom(DamageSource.field_35536_t, 1);
+					}
+
+					this.thirstTickTimer = 0;
+				}
+			}
+		}
+
+		if (!Personalization.hunger) return;
 		this.field_35773_e = this.field_35776_a;
 		if(this.field_35775_c > 4.0F) {
-			this.field_35775_c -= 4.0F;
+ 			this.field_35775_c -= 4.0F;
 			if(this.field_35774_b > 0.0F) {
 				this.field_35774_b = Math.max(this.field_35774_b - 1.0F, 0.0F);
 			} else if(var2 > 0) {
@@ -30,7 +56,7 @@
 
 		if(this.field_35776_a >= 18 && var1.func_35194_au()) {
 			++this.field_35772_d;
-			if(this.field_35772_d >= 80) {
+			if(this.field_35772_d >= 80 - var1.skills.stamina.getValue() * 4) {
 				var1.heal(1);
 				this.field_35772_d = 0;
 			}
@@ -57,6 +83,12 @@
 			this.field_35775_c = var1.getFloat("foodExhaustionLevel");
 		}
 
+		if(var1.hasKey("thirstLevel")) {
+			this.thirst = var1.getInteger("thirstLevel");
+			this.thirstExhaustion = var1.getFloat("thirstExhaustionLevel");
+			this.thirstTickTimer = var1.getInteger("thirstTickTimer");
+		}
+
 	}
 
 	public void func_35763_b(NBTTagCompound var1) {
@@ -64,6 +96,9 @@
 		var1.setInteger("foodTickTimer", this.field_35772_d);
 		var1.setFloat("foodSaturationLevel", this.field_35774_b);
 		var1.setFloat("foodExhaustionLevel", this.field_35775_c);
+		var1.setInteger("thirstLevel", this.thirst);
+		var1.setFloat("thirstExhaustionLevel", this.thirstExhaustion);
+		var1.setInteger("thirstTickTimer", this.thirstTickTimer);
 	}
 
 	public int func_35765_a() {
@@ -92,5 +127,18 @@
 
 	public void func_35767_b(float var1) {
 		this.field_35774_b = var1;
+	}
+
+	public void addThirst(float var1) {
+		if (Personalization.thirst)
+			this.thirstExhaustion += var1;
+	}
+
+	public int getThirst() {
+		return thirst;
+	}
+
+	public void drink(int var1) {
+		this.thirst = Math.min(this.thirst + var1, 20);
 	}
 }
--- /dev/null
+++ net/minecraft/src/TextureQuartzCompassFX.java
@@ -1,0 +1,146 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.IOException;
+
+public class TextureQuartzCompassFX extends TextureFX {
+	private Minecraft mc;
+	private int[] compassIconImageData = new int[256];
+	private double field_4229_i;
+	private double field_4228_j;
+
+	public TextureQuartzCompassFX(Minecraft var1) {
+		super(Item.quartzCompass.getIconFromDamage(0));
+		this.mc = var1;
+		this.tileImage = 1;
+
+		try {
+			BufferedImage var2 = ImageIO.read(Minecraft.class.getResource("/gui/items.png"));
+			int var3 = this.iconIndex % 16 * 16;
+			int var4 = this.iconIndex / 16 * 16;
+			var2.getRGB(var3, var4, 16, 16, this.compassIconImageData, 0, 16);
+		} catch (IOException var5) {
+			var5.printStackTrace();
+		}
+
+	}
+
+	public void onTick() {
+		for(int var1 = 0; var1 < 256; ++var1) {
+			int var2 = this.compassIconImageData[var1] >> 24 & 255;
+			int var3 = this.compassIconImageData[var1] >> 16 & 255;
+			int var4 = this.compassIconImageData[var1] >> 8 & 255;
+			int var5 = this.compassIconImageData[var1] >> 0 & 255;
+			if(this.anaglyphEnabled) {
+				int var6 = (var3 * 30 + var4 * 59 + var5 * 11) / 100;
+				int var7 = (var3 * 30 + var4 * 70) / 100;
+				int var8 = (var3 * 30 + var5 * 70) / 100;
+				var3 = var6;
+				var4 = var7;
+				var5 = var8;
+			}
+
+			this.imageData[var1 * 4 + 0] = (byte)var3;
+			this.imageData[var1 * 4 + 1] = (byte)var4;
+			this.imageData[var1 * 4 + 2] = (byte)var5;
+			this.imageData[var1 * 4 + 3] = (byte)var2;
+		}
+
+		double var20 = Math.PI + Personalization.betaness * Math.PI / 4.0F;
+		float chaosFactor = Personalization.chaos;
+		if (this.mc.theWorld != null && this.mc.thePlayer != null) {
+			if (this.mc.thePlayer.dimension == 3) {
+				chaosFactor = 2.0F;
+			}
+
+			if (this.mc.thePlayer.dimension == 2) {
+				var20 = (double)(this.mc.thePlayer.rotationYaw - 90.0F) * Math.PI / 180.0D - Math.atan2(-this.mc.thePlayer.posZ, -this.mc.thePlayer.posX);
+			} else if (chaosFactor > 1.0F) {
+				var20 += (Math.random() * Math.PI * 2.0D - var20) * (chaosFactor - 1.0F);
+			}
+		}
+
+		double var22;
+		for(var22 = var20 - this.field_4229_i; var22 < -Math.PI; var22 += Math.PI * 2.0D) {
+		}
+
+		while(var22 >= Math.PI) {
+			var22 -= Math.PI * 2.0D;
+		}
+
+		if(var22 < -1.0D) {
+			var22 = -1.0D;
+		}
+
+		if(var22 > 1.0D) {
+			var22 = 1.0D;
+		}
+
+		this.field_4228_j += var22 * 0.1D;
+		this.field_4228_j *= 0.8D;
+		this.field_4229_i += this.field_4228_j;
+		double var24 = Math.sin(this.field_4229_i);
+		double var26 = Math.cos(this.field_4229_i);
+
+		int var9;
+		int var10;
+		int var11;
+		int var12;
+		int var13;
+		int var14;
+		int var15;
+		short var16;
+		int var17;
+		int var18;
+		int var19;
+		for(var9 = -4; var9 <= 4; ++var9) {
+			var10 = (int)(8.5D + var26 * (double)var9 * 0.3D);
+			var11 = (int)(7.5D - var24 * (double)var9 * 0.3D * 0.5D);
+			var12 = var11 * 16 + var10;
+			var13 = 100;
+			var14 = 100;
+			var15 = 100;
+			var16 = 255;
+			if(this.anaglyphEnabled) {
+				var17 = (var13 * 30 + var14 * 59 + var15 * 11) / 100;
+				var18 = (var13 * 30 + var14 * 70) / 100;
+				var19 = (var13 * 30 + var15 * 70) / 100;
+				var13 = var17;
+				var14 = var18;
+				var15 = var19;
+			}
+
+			this.imageData[var12 * 4 + 0] = (byte)var13;
+			this.imageData[var12 * 4 + 1] = (byte)var14;
+			this.imageData[var12 * 4 + 2] = (byte)var15;
+			this.imageData[var12 * 4 + 3] = (byte)var16;
+		}
+
+		for(var9 = -8; var9 <= 16; ++var9) {
+			var10 = (int)(8.5D + var24 * (double)var9 * 0.3D);
+			var11 = (int)(7.5D + var26 * (double)var9 * 0.3D * 0.5D);
+			var12 = var11 * 16 + var10;
+			var13 = var9 >= 0 ? 255 : 100;
+			var14 = var9 >= 0 ? (int)((1.0F - Math.abs(Personalization.weirdness)) * 130.0F) + 20 : 100;
+			var15 = var9 >= 0 ? 20 : 100;
+			var16 = 255;
+			if(this.anaglyphEnabled) {
+				var17 = (var13 * 30 + var14 * 59 + var15 * 11) / 100;
+				var18 = (var13 * 30 + var14 * 70) / 100;
+				var19 = (var13 * 30 + var15 * 70) / 100;
+				var13 = var17;
+				var14 = var18;
+				var15 = var19;
+			}
+
+			this.imageData[var12 * 4 + 0] = (byte)var13;
+			this.imageData[var12 * 4 + 1] = (byte)var14;
+			this.imageData[var12 * 4 + 2] = (byte)var15;
+			this.imageData[var12 * 4 + 3] = (byte)var16;
+		}
+
+	}
+}
--- net/minecraft/src/BiomeDecorator.java
+++ net/minecraft/src/BiomeDecorator.java
@@ -7,6 +7,7 @@
 	private Random field_35890_C;
 	private int field_35885_D;
 	private int field_35886_E;
+	private int maxHeight;
 	private BiomeGenBase field_35887_F;
 	protected WorldGenerator field_35897_a = new WorldGenClay(4);
 	protected WorldGenerator field_35895_b = new WorldGenSand(7, Block.sand.blockID);
@@ -20,21 +21,21 @@
 	protected WorldGenerator field_35902_j = new WorldGenMinable(Block.oreDiamond.blockID, 7);
 	protected WorldGenerator field_35903_k = new WorldGenMinable(Block.oreLapis.blockID, 6);
 	protected WorldGenerator field_35900_l = new WorldGenFlowers(Block.plantYellow.blockID);
-	protected WorldGenerator field_35901_m = new WorldGenFlowers(Block.plantYellow.blockID);
+	protected WorldGenerator field_35901_m = new WorldGenFlowers(Block.plantRed.blockID);
 	protected WorldGenerator field_35898_n = new WorldGenFlowers(Block.mushroomBrown.blockID);
 	protected WorldGenerator field_35899_o = new WorldGenFlowers(Block.mushroomRed.blockID);
 	protected WorldGenerator field_35913_p = new WorldGenReed();
 	protected WorldGenerator field_35912_q = new WorldGenCactus();
-	protected int field_35911_r = 0;
-	protected int field_35910_s = 2;
-	protected int field_35909_t = 1;
-	protected int field_35908_u = 0;
-	protected int field_35907_v = 0;
-	protected int field_35906_w = 0;
-	protected int field_35916_x = 0;
-	protected int field_35915_y = 1;
-	protected int field_35914_z = 3;
-	protected int field_35888_A = 1;
+	protected int trees = 0;
+	protected int flowers = 2;
+	protected int grass = 1;
+	protected int deadBushes = 0;
+	protected int mushrooms = 0;
+	protected int reeds = 0;
+	protected int cacti = 0;
+	protected int sand = 1;
+	protected int sand2 = 3;
+	protected int clay = 1;
 
 	public BiomeDecorator(BiomeGenBase var1) {
 		this.field_35887_F = var1;
@@ -48,6 +49,11 @@
 			this.field_35890_C = var2;
 			this.field_35885_D = var3;
 			this.field_35886_E = var4;
+			this.maxHeight = 128;
+			this.maxHeight = Math.max(this.maxHeight, var1.getChunkFromChunkCoords((var3 >> 4), (var4 >> 4)).getTopFilledSegment() * 16);
+			this.maxHeight = Math.max(this.maxHeight, var1.getChunkFromChunkCoords((var3 >> 4) +  1, (var4 >> 4)).getTopFilledSegment() * 16);
+			this.maxHeight = Math.max(this.maxHeight, var1.getChunkFromChunkCoords((var3 >> 4), (var4 >> 4) + 1).getTopFilledSegment() * 16);
+			this.maxHeight = Math.max(this.maxHeight, var1.getChunkFromChunkCoords((var3 >> 4) +  1, (var4 >> 4) + 1).getTopFilledSegment() * 16);
 			this.func_35882_b();
 			this.field_35889_B = null;
 			this.field_35890_C = null;
@@ -60,25 +66,29 @@
 		int var1;
 		int var2;
 		int var3;
-		for(var1 = 0; var1 < this.field_35914_z; ++var1) {
+		for(var1 = 0; var1 < this.sand2; ++var1) {
 			var2 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var3 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			this.field_35895_b.generate(this.field_35889_B, this.field_35890_C, var2, this.field_35889_B.getTopSolidOrLiquidBlock(var2, var3), var3);
 		}
 
-		for(var1 = 0; var1 < this.field_35888_A; ++var1) {
+		for(var1 = 0; var1 < this.clay; ++var1) {
 			var2 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var3 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			this.field_35897_a.generate(this.field_35889_B, this.field_35890_C, var2, this.field_35889_B.getTopSolidOrLiquidBlock(var2, var3), var3);
 		}
 
-		for(var1 = 0; var1 < this.field_35915_y; ++var1) {
+		for(var1 = 0; var1 < this.sand; ++var1) {
 			var2 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var3 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			this.field_35895_b.generate(this.field_35889_B, this.field_35890_C, var2, this.field_35889_B.getTopSolidOrLiquidBlock(var2, var3), var3);
 		}
 
-		var1 = this.field_35911_r;
+		var1 = this.trees;
+		if (var1 >= 0) {
+			var1 = Math.round(var1 - Personalization.entropy * this.trees / 1.5F);
+		}
+
 		if(this.field_35890_C.nextInt(10) == 0) {
 			++var1;
 		}
@@ -94,43 +104,42 @@
 
 		Random var10000;
 		int var8;
-		for(var2 = 0; var2 < this.field_35910_s; ++var2) {
+		for(var2 = 0; var2 < this.flowers; ++var2) {
 			var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var10000 = this.field_35890_C;
 			this.field_35889_B.getClass();
-			var4 = var10000.nextInt(128);
+			var4 = var10000.nextInt(this.maxHeight);
 			var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			this.field_35900_l.generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 			if(this.field_35890_C.nextInt(4) == 0) {
 				var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 				var10000 = this.field_35890_C;
 				this.field_35889_B.getClass();
-				var4 = var10000.nextInt(128);
+				var4 = var10000.nextInt(this.maxHeight);
 				var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 				this.field_35901_m.generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 			}
 		}
 
-		for(var2 = 0; var2 < this.field_35909_t; ++var2) {
-			byte var7 = 1;
+		for(var2 = 0; var2 < this.grass; ++var2) {
 			var4 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var10000 = this.field_35890_C;
 			this.field_35889_B.getClass();
-			var8 = var10000.nextInt(128);
+			var8 = var10000.nextInt(this.maxHeight);
 			int var6 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
-			(new WorldGenTallGrass(Block.tallGrass.blockID, var7)).generate(this.field_35889_B, this.field_35890_C, var4, var8, var6);
+			field_35887_F.getRandomWorldGenForGrass(this.field_35890_C).generate(this.field_35889_B, this.field_35890_C, var4, var8, var6);
 		}
 
-		for(var2 = 0; var2 < this.field_35908_u; ++var2) {
+		for(var2 = 0; var2 < this.deadBushes; ++var2) {
 			var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var10000 = this.field_35890_C;
 			this.field_35889_B.getClass();
-			var4 = var10000.nextInt(128);
+			var4 = var10000.nextInt(this.maxHeight);
 			var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			(new WorldGenDeadBush(Block.deadBush.blockID)).generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 		}
 
-		for(var2 = 0; var2 < this.field_35907_v; ++var2) {
+		for(var2 = 0; var2 < this.mushrooms; ++var2) {
 			if(this.field_35890_C.nextInt(4) == 0) {
 				var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 				var4 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
@@ -143,7 +152,7 @@
 				var4 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 				var10000 = this.field_35890_C;
 				this.field_35889_B.getClass();
-				var8 = var10000.nextInt(128);
+				var8 = var10000.nextInt(this.maxHeight);
 				this.field_35899_o.generate(this.field_35889_B, this.field_35890_C, var3, var8, var4);
 			}
 		}
@@ -152,7 +161,7 @@
 			var2 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var10000 = this.field_35890_C;
 			this.field_35889_B.getClass();
-			var3 = var10000.nextInt(128);
+			var3 = var10000.nextInt(this.maxHeight);
 			var4 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			this.field_35898_n.generate(this.field_35889_B, this.field_35890_C, var2, var3, var4);
 		}
@@ -161,17 +170,17 @@
 			var2 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var10000 = this.field_35890_C;
 			this.field_35889_B.getClass();
-			var3 = var10000.nextInt(128);
+			var3 = var10000.nextInt(this.maxHeight);
 			var4 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			this.field_35899_o.generate(this.field_35889_B, this.field_35890_C, var2, var3, var4);
 		}
 
-		for(var2 = 0; var2 < this.field_35906_w; ++var2) {
+		for(var2 = 0; var2 < this.reeds; ++var2) {
 			var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var4 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			var10000 = this.field_35890_C;
 			this.field_35889_B.getClass();
-			var8 = var10000.nextInt(128);
+			var8 = var10000.nextInt(this.maxHeight);
 			this.field_35913_p.generate(this.field_35889_B, this.field_35890_C, var3, var8, var4);
 		}
 
@@ -179,7 +188,7 @@
 			var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var10000 = this.field_35890_C;
 			this.field_35889_B.getClass();
-			var4 = var10000.nextInt(128);
+			var4 = var10000.nextInt(this.maxHeight);
 			var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			this.field_35913_p.generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 		}
@@ -188,16 +197,16 @@
 			var2 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var10000 = this.field_35890_C;
 			this.field_35889_B.getClass();
-			var3 = var10000.nextInt(128);
+			var3 = var10000.nextInt(this.maxHeight);
 			var4 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			(new WorldGenPumpkin()).generate(this.field_35889_B, this.field_35890_C, var2, var3, var4);
 		}
 
-		for(var2 = 0; var2 < this.field_35916_x; ++var2) {
+		for(var2 = 0; var2 < this.cacti; ++var2) {
 			var3 = this.field_35885_D + this.field_35890_C.nextInt(16) + 8;
 			var10000 = this.field_35890_C;
 			this.field_35889_B.getClass();
-			var4 = var10000.nextInt(128);
+			var4 = var10000.nextInt(this.maxHeight);
 			var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			this.field_35912_q.generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 		}
@@ -208,7 +217,7 @@
 			var10000 = this.field_35890_C;
 			var10001 = this.field_35890_C;
 			this.field_35889_B.getClass();
-			var4 = var10000.nextInt(var10001.nextInt(128 - 8) + 8);
+			var4 = var10000.nextInt(var10001.nextInt(this.maxHeight - 8) + 8);
 			var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			(new WorldGenLiquids(Block.waterMoving.blockID)).generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 		}
@@ -219,7 +228,7 @@
 			var10001 = this.field_35890_C;
 			Random var10002 = this.field_35890_C;
 			this.field_35889_B.getClass();
-			var4 = var10000.nextInt(var10001.nextInt(var10002.nextInt(128 - 16) + 8) + 8);
+			var4 = var10000.nextInt(var10001.nextInt(var10002.nextInt(this.maxHeight - 16) + 8) + 8);
 			var8 = this.field_35886_E + this.field_35890_C.nextInt(16) + 8;
 			(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.field_35889_B, this.field_35890_C, var3, var4, var8);
 		}
@@ -249,10 +258,10 @@
 	protected void func_35880_a() {
 		WorldGenerator var10002 = this.field_35893_d;
 		this.field_35889_B.getClass();
-		this.func_35884_a(20, var10002, 0, 128);
+		this.func_35884_a(20, var10002, 0, this.maxHeight);
 		var10002 = this.field_35894_e;
 		this.field_35889_B.getClass();
-		this.func_35884_a(10, var10002, 0, 128);
+		this.func_35884_a(10, var10002, 0, this.maxHeight);
 		var10002 = this.field_35891_f;
 		this.field_35889_B.getClass();
 		this.func_35884_a(20, var10002, 0, 128);
--- /dev/null
+++ net/minecraft/src/WorldGenSavannaTree.java
@@ -1,0 +1,158 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenSavannaTree extends WorldGenerator {
+	public boolean generate(World world, Random random, int x, int y, int z) {
+		int var6 = Math.max(random.nextInt(3 - Math.round(Personalization.entropy * 2)) + random.nextInt(3) + 5 - Math.round(Personalization.entropy * 3), 4);
+		boolean var7 = true;
+
+		if (y >= 1) {
+			int var10;
+			int var11;
+
+			for (int var8 = y; var8 <= y + 1 + var6; ++var8) {
+				byte var9 = 1;
+
+				if (var8 == y) {
+					var9 = 0;
+				}
+
+				if (var8 >= y + 1 + var6 - 2) {
+					var9 = 2;
+				}
+
+				for (var10 = x - var9; var10 <= x + var9 && var7; ++var10) {
+					for (var11 = z - var9; var11 <= z + var9 && var7; ++var11) {
+						if (var8 >= 0) {
+							int var12 = world.getBlockId(var10, var8, var11);
+
+							if (!this.func_150523_a(var12)) {
+								var7 = false;
+							}
+						} else {
+							var7 = false;
+						}
+					}
+				}
+			}
+
+			if (!var7) {
+				return false;
+			} else {
+				int var21 = world.getBlockId(x, y - 1, z);
+
+				if (var21 == Block.grass.blockID || var21 == Block.dirt.blockID) {
+					world.setNewBlock(x, y - 1, z, Block.dirt.blockID);
+					int var22 = random.nextInt(4);
+					var10 = var6 - random.nextInt(4) - 1;
+					var11 = 3 - random.nextInt(3);
+					int var23 = x;
+					int var13 = z;
+					int var14 = 0;
+					int var15;
+					int var16;
+
+					for (var15 = 0; var15 < var6; ++var15) {
+						var16 = y + var15;
+
+						if (var15 >= var10 && var11 > 0) {
+							var23 += ModelBed.field_35871_a[var22];
+							var13 += ModelBed.field_35870_b[var22];
+							--var11;
+						}
+
+						int var17 = world.getBlockId(var23, var16, var13);
+
+						if (var17 == 0 || Block.blocksList[var17].blockMaterial == Material.leaves) {
+							this.setBlockAndMetadata(world, var23, var16, var13, Block.wood.blockID, 4);
+							var14 = var16;
+						}
+					}
+
+					for (var15 = -1; var15 <= 1; ++var15) {
+						for (var16 = -1; var16 <= 1; ++var16) {
+							this.func_150525_a(world, var23 + var15, var14 + 1, var13 + var16);
+						}
+					}
+
+					this.func_150525_a(world, var23 + 2, var14 + 1, var13);
+					this.func_150525_a(world, var23 - 2, var14 + 1, var13);
+					this.func_150525_a(world, var23, var14 + 1, var13 + 2);
+					this.func_150525_a(world, var23, var14 + 1, var13 - 2);
+
+					for (var15 = -3; var15 <= 3; ++var15) {
+						for (var16 = -3; var16 <= 3; ++var16) {
+							if (Math.abs(var15) != 3 || Math.abs(var16) != 3) {
+								this.func_150525_a(world, var23 + var15, var14, var13 + var16);
+							}
+						}
+					}
+
+					var23 = x;
+					var13 = z;
+					var15 = random.nextInt(4);
+
+					if (var15 != var22) {
+						var16 = var10 - random.nextInt(2) - 1;
+						int var24 = 1 + random.nextInt(3);
+						var14 = 0;
+						int var18;
+						int var19;
+
+						for (var18 = var16; var18 < var6 && var24 > 0; --var24) {
+							if (var18 >= 1) {
+								var19 = y + var18;
+								var23 += ModelBed.field_35871_a[var15];
+								var13 += ModelBed.field_35870_b[var15];
+								int var20 = world.getBlockId(var23, var19, var13);
+
+								if (var20 == 0 || Block.blocksList[var20].blockMaterial == Material.leaves) {
+									this.setBlockAndMetadata(world, var23, var19, var13, Block.wood.blockID, 4);
+									var14 = var19;
+								}
+							}
+
+							++var18;
+						}
+
+						if (var14 > 0) {
+							for (var18 = -1; var18 <= 1; ++var18) {
+								for (var19 = -1; var19 <= 1; ++var19) {
+									this.func_150525_a(world, var23 + var18, var14 + 1, var13 + var19);
+								}
+							}
+
+							for (var18 = -2; var18 <= 2; ++var18) {
+								for (var19 = -2; var19 <= 2; ++var19) {
+									if (Math.abs(var18) != 2 || Math.abs(var19) != 2) {
+										this.func_150525_a(world, var23 + var18, var14, var13 + var19);
+									}
+								}
+							}
+						}
+					}
+
+					return true;
+				} else {
+					return false;
+				}
+			}
+		} else {
+			return false;
+		}
+	}
+
+	private void func_150525_a(World var1, int var2, int var3, int var4) {
+		int var5 = var1.getBlockId(var2, var3, var4);
+
+		if (var5 == 0 || Block.blocksList[var5].blockMaterial == Material.leaves) {
+			this.setBlockAndMetadata(var1, var2, var3, var4, Block.leaves.blockID, 4);
+		}
+	}
+
+	protected boolean func_150523_a(int var1) {
+		Block var2 = Block.blocksList[var1];
+		return var1 == 0 || var2.blockMaterial == Material.leaves || var2 == Block.grass || var2 == Block.dirt || var2 == Block.wood || var2 == Block.sapling || var2 == Block.field_35278_bv;
+	}
+}
--- net/minecraft/src/Block.java
+++ net/minecraft/src/Block.java
@@ -24,7 +24,7 @@
 	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stone");
 	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("grass");
 	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep).setBlockName("dirt");
-	public static final Block cobblestone = (new Block(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebrick");
+	public static final Block cobblestone = (new BlockStone(4, 16)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebrick");
 	public static final Block planks = (new Block(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("wood").setRequiresSelfNotify();
 	public static final Block sapling = (new BlockSapling(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("sapling").setRequiresSelfNotify();
 	public static final Block bedrock = (new Block(7, 17, Material.rock)).setBlockUnbreakable().setResistance(6000000.0F).setStepSound(soundStoneFootstep).setBlockName("bedrock").disableStats();
@@ -39,7 +39,7 @@
 	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCoal");
 	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep).setBlockName("log").setRequiresSelfNotify();
 	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setBlockName("leaves").setRequiresSelfNotify();
-	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("sponge");
+	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("sponge").setRequiresSelfNotify();
 	public static final Block glass = (new BlockGlass(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setBlockName("glass");
 	public static final Block oreLapis = (new BlockOre(21, 160)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreLapis");
 	public static final Block blockLapis = (new Block(22, 144, Material.rock)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("blockLapis");
@@ -68,8 +68,8 @@
 	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("brick");
 	public static final Block tnt = (new BlockTNT(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("tnt");
 	public static final Block bookShelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep).setBlockName("bookshelf");
-	public static final Block cobblestoneMossy = (new Block(48, 36, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneMoss");
-	public static final Block obsidian = (new BlockObsidian(49, 37)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep).setBlockName("obsidian");
+	public static final Block cobblestoneMossy = (new BlockStone(48, 36)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneMoss");
+	public static final Block obsidian = (new Block(49, 37, Material.rock)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep).setBlockName("obsidian");
 	public static final Block torchWood = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(15.0F / 16.0F).setStepSound(soundWoodFootstep).setBlockName("torch").setRequiresSelfNotify();
 	public static final BlockFire fire = (BlockFire)(new BlockFire(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep).setBlockName("fire").disableStats();
 	public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep).setBlockName("mobSpawner").disableStats();
@@ -130,6 +130,21 @@
 	public static final Block field_35277_bw = (new BlockFenceGate(107, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fenceGate").setRequiresSelfNotify();
 	public static final Block field_35280_bx = (new BlockStairs(108, brick)).setBlockName("stairsBrick").setRequiresSelfNotify();
 	public static final Block field_35279_by = (new BlockStairs(109, field_35285_bn)).setBlockName("stairsStoneBrickSmooth").setRequiresSelfNotify();
+	public static final Block skyPortalFrame = (new BlockSkyPortalFrame(110, 158)).setHardness(-1.0F).setStepSound(soundGlassFootstep).setBlockName("skyPortalFrame");
+	public static final Block oreQuartz = (new BlockOre(111, 191)).setHardness(3.0F).setResistance(3.0F).setStepSound(soundStoneFootstep).setBlockName("oreQuartz");
+	public static final Block endStone = (new Block(112, 175, Material.rock)).setHardness(3.0F).setResistance(6000000.0F).setStepSound(soundStoneFootstep).setBlockName("whiteStone");
+	public static final Block oreCopper = (new BlockOre(113, 224)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCopper");
+	public static final Block blockCopper = (new BlockOreStorage(114, 30)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockCopper");
+	public static final Block chargedPortalFrame = (new BlockSkyPortalFrame(115, 156)).setHardness(-1.0F).setStepSound(soundGlassFootstep).setBlockName("chargedPortalFrame");
+	public static final Block lightPlanks = (new Block(116, 189, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("wood").setRequiresSelfNotify();
+	public static final Block quartzPillar = (new BlockPillar(117, 188, Material.rock)).setHardness(0.8F).setResistance(0.8F).setStepSound(soundStoneFootstep).setBlockName("quartzPillar");
+	public static final Block stairsLightPlanks = (new BlockStairs(118, lightPlanks)).setBlockName("stairsWood").setRequiresSelfNotify();
+	public static final Block computer = (new BlockComputer(119)).setHardness(2.0F).setResistance(5.0F).setLightValue(0.5F).setLightOpacity(255).setStepSound(soundMetalFootstep).setBlockName("computer").setRequiresSelfNotify();
+	public static final Block table = (new BlockTable(120, 64, Material.cloth)).setHardness(0.8F).setStepSound(soundClothFootstep).setBlockName("table").setRequiresSelfNotify();
+	public static final Block lamp = (new Block(121, 139, Material.glass)).setHardness(0.3F).setStepSound(soundGlassFootstep).setLightValue(1.0F).setBlockName("lamp");
+	public static final Block blockQuartz = (new Block(122, 172, Material.rock)).setHardness(0.8F).setResistance(0.8F).setStepSound(soundStoneFootstep).setBlockName("blockQuartz");
+	public static final Block mossyStone = (new BlockMossyStone(123)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stone");
+	public static final Block oreEmerald = (new BlockOre(124, 76)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreDiamond");
 	public int blockIndexInTexture;
 	public final int blockID;
 	protected float blockHardness;
@@ -541,7 +556,7 @@
 
 	public void harvestBlock(World var1, EntityPlayer var2, int var3, int var4, int var5, int var6) {
 		var2.addStat(StatList.mineBlockStatArray[this.blockID], 1);
-		var2.func_35198_d(0.025F);
+		var2.func_35198_d(Personalization.reducedExhaustion ? 0.005F : 0.025F);
 		this.dropBlockAsItem(var1, var3, var4, var5, var6);
 	}
 
@@ -582,7 +597,28 @@
 	}
 
 	public float func_35276_e(IBlockAccess var1, int var2, int var3, int var4) {
-		return var1.isBlockNormalCube(var2, var3, var4) ? 0.2F : 1.0F;
+		boolean pe = Personalization.pe8env || Personalization.pe7env;
+		float ao = 1.0F;
+		if (Personalization.oldAO || pe) {
+			int opacity = lightOpacity[var1.getBlockId(var2, var3, var4)];
+			if (opacity == 255) {
+				ao = pe ? 0.2F : 0.0F;
+			}
+		} else {
+			ao = var1.isBlockNormalCube(var2, var3, var4) ? 0.2F : 1.0F;
+		}
+//		if (ao < 0.5F) {
+//			ao = MathHelper.lerp(ao, 0.5F, -Math.min(Personalization.entropy / 2.0F, 0.0F));
+//		}
+		if (Personalization.directionalLighting) {
+			ao = 1.0F - (1.0F - ao) / 2.0F;
+		}
+
+		return ao;
+	}
+
+	public boolean getTickRandomly() {
+		return true;
 	}
 
 	static {
@@ -596,6 +632,7 @@
 		Item.itemsList[tallGrass.blockID] = new ItemVine(tallGrass.blockID - 256, true);
 		Item.itemsList[pistonBase.blockID] = new ItemPiston(pistonBase.blockID - 256);
 		Item.itemsList[pistonStickyBase.blockID] = new ItemPiston(pistonStickyBase.blockID - 256);
+		Item.itemsList[dirt.blockID] = (new ItemLog(dirt.blockID - 256, dirt)).setItemName("dirt");
 
 		for(int var0 = 0; var0 < 256; ++var0) {
 			if(blocksList[var0] != null && Item.itemsList[var0] == null) {
--- net/minecraft/src/GuiScreen.java
+++ net/minecraft/src/GuiScreen.java
@@ -11,7 +11,7 @@
 import org.lwjgl.opengl.GL11;
 
 public class GuiScreen extends Gui {
-	protected Minecraft mc;
+	protected Minecraft game;
 	public int width;
 	public int height;
 	protected List controlList = new ArrayList();
@@ -23,15 +23,15 @@
 	public void drawScreen(int var1, int var2, float var3) {
 		for(int var4 = 0; var4 < this.controlList.size(); ++var4) {
 			GuiButton var5 = (GuiButton)this.controlList.get(var4);
-			var5.drawButton(this.mc, var1, var2);
+			var5.drawButton(this.game, var1, var2);
 		}
 
 	}
 
 	protected void keyTyped(char var1, int var2) {
 		if(var2 == 1) {
-			this.mc.displayGuiScreen((GuiScreen)null);
-			this.mc.setIngameFocus();
+			this.game.displayGuiScreen((GuiScreen)null);
+			this.game.setIngameFocus();
 		}
 
 	}
@@ -53,9 +53,9 @@
 		if(var3 == 0) {
 			for(int var4 = 0; var4 < this.controlList.size(); ++var4) {
 				GuiButton var5 = (GuiButton)this.controlList.get(var4);
-				if(var5.mousePressed(this.mc, var1, var2)) {
+				if(var5.mousePressed(this.game, var1, var2)) {
 					this.selectedButton = var5;
-					this.mc.sndManager.playSoundFX("random.click", 1.0F, 1.0F);
+					this.game.sndManager.playSoundFX("random.click", 1.0F, 1.0F);
 					this.actionPerformed(var5);
 				}
 			}
@@ -76,7 +76,7 @@
 
 	public void setWorldAndResolution(Minecraft var1, int var2, int var3) {
 		this.guiParticles = new GuiParticle(var1);
-		this.mc = var1;
+		this.game = var1;
 		this.fontRenderer = var1.fontRenderer;
 		this.width = var2;
 		this.height = var3;
@@ -102,12 +102,12 @@
 		int var1;
 		int var2;
 		if(Mouse.getEventButtonState()) {
-			var1 = Mouse.getEventX() * this.width / this.mc.displayWidth;
-			var2 = this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1;
+			var1 = Mouse.getEventX() * this.width / this.game.displayWidth;
+			var2 = this.height - Mouse.getEventY() * this.height / this.game.displayHeight - 1;
 			this.mouseClicked(var1, var2, Mouse.getEventButton());
 		} else {
-			var1 = Mouse.getEventX() * this.width / this.mc.displayWidth;
-			var2 = this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1;
+			var1 = Mouse.getEventX() * this.width / this.game.displayWidth;
+			var2 = this.height - Mouse.getEventY() * this.height / this.game.displayHeight - 1;
 			this.mouseMovedOrUp(var1, var2, Mouse.getEventButton());
 		}
 
@@ -116,7 +116,7 @@
 	public void handleKeyboardInput() {
 		if(Keyboard.getEventKeyState()) {
 			if(Keyboard.getEventKey() == Keyboard.KEY_F11) {
-				this.mc.toggleFullscreen();
+				this.game.toggleFullscreen();
 				return;
 			}
 
@@ -136,7 +136,7 @@
 	}
 
 	public void drawWorldBackground(int var1) {
-		if(this.mc.theWorld != null) {
+		if(this.game.theWorld != null) {
 			this.drawGradientRect(0, 0, this.width, this.height, -1072689136, -804253680);
 		} else {
 			this.drawBackground(var1);
@@ -148,7 +148,7 @@
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_FOG);
 		Tessellator var2 = Tessellator.instance;
-		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/background.png"));
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.game.renderEngine.getTexture("/gui/background.png"));
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		float var3 = 32.0F;
 		var2.startDrawingQuads();
--- net/minecraft/src/RenderHelper.java
+++ net/minecraft/src/RenderHelper.java
@@ -1,6 +1,8 @@
 package net.minecraft.src;
 
 import java.nio.FloatBuffer;
+
+import net.minecraft.client.Minecraft;
 import org.lwjgl.opengl.GL11;
 
 public class RenderHelper {
@@ -34,6 +36,36 @@
 		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_SPECULAR, func_1156_a(var2, var2, var2, 1.0F));
 		GL11.glShadeModel(GL11.GL_FLAT);
 		GL11.glLightModel(GL11.GL_LIGHT_MODEL_AMBIENT, func_1156_a(var0, var0, var0, 1.0F));
+	}
+
+	public static void enableStandardEntityLighting() {
+		float celestialAngle = Minecraft.getRenderCelestialAngle();
+		if (Personalization.directionalLighting) {
+			GL11.glRotatef(celestialAngle * 360.0F, 1.0F, 0.0F, 0.0F);
+		}
+		GL11.glEnable(GL11.GL_LIGHTING);
+		GL11.glEnable(GL11.GL_LIGHT0);
+		GL11.glEnable(GL11.GL_LIGHT1);
+		GL11.glEnable(GL11.GL_COLOR_MATERIAL);
+		GL11.glColorMaterial(GL11.GL_FRONT_AND_BACK, GL11.GL_AMBIENT_AND_DIFFUSE);
+		float var0 = 0.4F;
+		float var1 = 0.6F;
+		float var2 = 0.0F;
+		Vec3D var3 = Vec3D.createVector((double)0.2F, 1.0D, (double)-0.7F).normalize();
+		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_POSITION, func_1157_a(var3.xCoord, var3.yCoord, var3.zCoord, 0.0D));
+		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_DIFFUSE, func_1156_a(var1, var1, var1, 1.0F));
+		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_AMBIENT, func_1156_a(0.0F, 0.0F, 0.0F, 1.0F));
+		GL11.glLight(GL11.GL_LIGHT0, GL11.GL_SPECULAR, func_1156_a(var2, var2, var2, 1.0F));
+		var3 = Vec3D.createVector((double)-0.2F, 1.0D, (double)0.7F).normalize();
+		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_POSITION, func_1157_a(var3.xCoord, var3.yCoord, var3.zCoord, 0.0D));
+		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_DIFFUSE, func_1156_a(var1, var1, var1, 1.0F));
+		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_AMBIENT, func_1156_a(0.0F, 0.0F, 0.0F, 1.0F));
+		GL11.glLight(GL11.GL_LIGHT1, GL11.GL_SPECULAR, func_1156_a(var2, var2, var2, 1.0F));
+		GL11.glShadeModel(GL11.GL_FLAT);
+		GL11.glLightModel(GL11.GL_LIGHT_MODEL_AMBIENT, func_1156_a(var0, var0, var0, 1.0F));
+		if (Personalization.directionalLighting) {
+			GL11.glRotatef(celestialAngle * -360.0F, 1.0F, 0.0F, 0.0F);
+		}
 	}
 
 	private static FloatBuffer func_1157_a(double var0, double var2, double var4, double var6) {
--- /dev/null
+++ net/minecraft/src/GuiTextureViewer.java
@@ -1,0 +1,73 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+import java.util.Collections;
+
+public class GuiTextureViewer extends GuiScreen {
+	private String texture = "/terrain.png";
+	private int zoom = 0;
+
+	public GuiTextureViewer() {
+	}
+
+	public void initGui() {
+		this.controlList.add(new GuiButton(1, this.width - 100, 0, 100, 20, "Exit"));
+		this.controlList.add(new GuiButton(2, this.width - 100, 20, 100, 20, "/terrain.png"));
+		this.controlList.add(new GuiButton(3, this.width - 100, 40, 100, 20, "/gui/items.png"));
+		this.controlList.add(new GuiButton(4, this.width - 40, 60, 20, 20, "-"));
+		this.controlList.add(new GuiButton(5, this.width - 20, 60, 20, 20, "+"));
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		switch (var1.id) {
+			case 1:
+				this.game.displayGuiScreen(null);
+				break;
+
+			case 2:
+				this.texture = "/terrain.png";
+				break;
+
+			case 3:
+				this.texture = "/gui/items.png";
+				break;
+
+			case 4:
+				this.zoom++;
+				break;
+
+			case 5:
+				if (this.zoom > 0) this.zoom--;
+				break;
+		}
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		if (true) {
+			int y = this.height - 10 * (GenLayerVillageLandscape.biomes.size() + GenLayerVillageLandscape.snowyBiomes.size());
+			for (BiomeGenBase biome : GenLayerVillageLandscape.biomes) {
+				this.drawString(this.fontRenderer, biome.debugBiomeName, 2, y, 0xFFFFFF);
+				y += 10;
+			}
+			for (BiomeGenBase biome : GenLayerVillageLandscape.snowyBiomes) {
+				this.drawString(this.fontRenderer, biome.debugBiomeName, 2, y, 0xAAAAFF);
+				y += 10;
+			}
+			return;
+		}
+
+		super.drawScreen(var1, var2, var3);
+
+		GL11.glDisable(GL11.GL_LIGHTING);
+		GL11.glDisable(GL11.GL_FOG);
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.game.renderEngine.getTexture(this.texture));
+
+		float zoomDiv = 1.0F / (1 << zoom);
+		GL11.glPushMatrix();
+		GL11.glScalef(zoomDiv, zoomDiv, zoomDiv);
+		this.drawTexturedModalRect(0, 0, 0, 0, 256, 256);
+		GL11.glPopMatrix();
+	}
+}
--- net/minecraft/src/EntityZombie.java
+++ net/minecraft/src/EntityZombie.java
@@ -34,4 +34,8 @@
 	protected int getDropItemId() {
 		return Item.field_35415_bn.shiftedIndex;
 	}
+
+	public boolean canWearArmor() {
+		return true;
+	}
 }
--- net/minecraft/src/BlockLeaves.java
+++ net/minecraft/src/BlockLeaves.java
@@ -13,136 +13,79 @@
 	}
 
 	public int func_35274_i() {
+		if (Personalization.alphaTextures) return 0xFFFFFF;
 		double var1 = 0.5D;
 		double var3 = 1.0D;
 		return ColorizerFoliage.getFoliageColor(var1, var3);
 	}
 
 	public int getRenderColor(int var1) {
-		return (var1 & 1) == 1 ? ColorizerFoliage.getFoliageColorPine() : ((var1 & 2) == 2 ? ColorizerFoliage.getFoliageColorBirch() : ColorizerFoliage.func_31073_c());
+		if (Personalization.alphaTextures) return 0xFFFFFF;
+		return (var1 & 7) == 1 ? ColorizerFoliage.getFoliageColorPine() : ((var1 & 7) == 2 ? ColorizerFoliage.getFoliageColorBirch() : ColorizerFoliage.func_31073_c());
 	}
 
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if((var5 & 1) == 1) {
-			return ColorizerFoliage.getFoliageColorPine();
-		} else if((var5 & 2) == 2) {
-			return ColorizerFoliage.getFoliageColorBirch();
+		if (Personalization.alphaTextures) return 0xFFFFFF;
+		WorldChunkManager wcm = var1.getWorldChunkManager();
+		int var5a = var1.getBlockMetadata(var2, var3, var4);
+
+		double temp = 0.0D;
+		if (Personalization.smoothBiomes) {
+			for (int x = -1; x <= 1; x++) {
+				for (int z = -1; z <= 1; z++) {
+					temp += wcm.func_35554_b(var2 + x, var4 + z);
+				}
+			}
+			temp /= 9.0D;
 		} else {
-			double var6 = (double)var1.getWorldChunkManager().func_35554_b(var2, var4);
-			double var8 = (double)var1.getWorldChunkManager().func_35558_c(var2, var4);
-			return ColorizerFoliage.getFoliageColor(var6, var8);
+			temp = wcm.func_35554_b(var2, var4);
 		}
-	}
-
-	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		byte var5 = 1;
-		int var6 = var5 + 1;
-		if(var1.checkChunksExist(var2 - var6, var3 - var6, var4 - var6, var2 + var6, var3 + var6, var4 + var6)) {
-			for(int var7 = -var5; var7 <= var5; ++var7) {
-				for(int var8 = -var5; var8 <= var5; ++var8) {
-					for(int var9 = -var5; var9 <= var5; ++var9) {
-						int var10 = var1.getBlockId(var2 + var7, var3 + var8, var4 + var9);
-						if(var10 == Block.leaves.blockID) {
-							int var11 = var1.getBlockMetadata(var2 + var7, var3 + var8, var4 + var9);
-							var1.setBlockMetadata(var2 + var7, var3 + var8, var4 + var9, var11 | 8);
-						}
+
+		if((var5a & 7) == 1) {
+			return ColorizerGrass.frostify(ColorizerFoliage.getFoliageColorPine(), temp);
+		} else if((var5a & 7) == 2) {
+			return ColorizerGrass.frostify(ColorizerFoliage.getFoliageColorBirch(), temp);
+		} else {
+			if (Personalization.smoothBiomes) {
+				int var5 = 0;
+				int var6 = 0;
+				int var7 = 0;
+
+				for(int var8 = -1; var8 <= 1; ++var8) {
+					for(int var9 = -1; var9 <= 1; ++var9) {
+						double t = wcm.func_35554_b(var2 + var9, var4 + var8);
+						double r = wcm.func_35558_c(var2 + var9, var4 + var8);
+						int var10 = var1.getWorldChunkManager().getBiomeGenAt(var2 + var9, var4 + var8).getFoliageColor(t, r, var2 + var9, var4 + var8);
+						var5 += (var10 & 16711680) >> 16;
+						var6 += (var10 & '\uff00') >> 8;
+						var7 += var10 & 255;
 					}
 				}
+
+				return (var5 / 9 & 255) << 16 | (var6 / 9 & 255) << 8 | var7 / 9 & 255;
+			} else {
+				double var5 = (double)var1.getWorldChunkManager().func_35554_b(var2, var4);
+				double var7 = (double)var1.getWorldChunkManager().func_35558_c(var2, var4);
+				return var1.getWorldChunkManager().getBiomeGenAt(var2, var4).getFoliageColor(var5, var7, var2, var4);
 			}
 		}
-
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(!var1.multiplayerWorld) {
+		if(!var1.multiplayerWorld && !Personalization.terrain415 && !var1.getBlockMaterial(var2, var3 - 1, var4).isSolid()) {
 			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if((var6 & 8) != 0 && (var6 & 4) == 0) {
-				byte var7 = 4;
-				int var8 = var7 + 1;
-				byte var9 = 32;
-				int var10 = var9 * var9;
-				int var11 = var9 / 2;
-				if(this.adjacentTreeBlocks == null) {
-					this.adjacentTreeBlocks = new int[var9 * var9 * var9];
-				}
-
-				int var12;
-				if(var1.checkChunksExist(var2 - var8, var3 - var8, var4 - var8, var2 + var8, var3 + var8, var4 + var8)) {
-					var12 = -var7;
-
-					label112:
-					while(true) {
-						int var13;
-						int var14;
-						int var15;
-						if(var12 > var7) {
-							var12 = 1;
-
-							while(true) {
-								if(var12 > 4) {
-									break label112;
-								}
-
-								for(var13 = -var7; var13 <= var7; ++var13) {
-									for(var14 = -var7; var14 <= var7; ++var14) {
-										for(var15 = -var7; var15 <= var7; ++var15) {
-											if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11] == var12 - 1) {
-												if(this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] = var12;
-												}
-											}
-										}
-									}
-								}
-
-								++var12;
-							}
-						}
-
-						for(var13 = -var7; var13 <= var7; ++var13) {
-							for(var14 = -var7; var14 <= var7; ++var14) {
-								var15 = var1.getBlockId(var2 + var12, var3 + var13, var4 + var14);
-								if(var15 == Block.wood.blockID) {
-									this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = 0;
-								} else if(var15 == Block.leaves.blockID) {
-									this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = -2;
-								} else {
-									this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = -1;
-								}
-							}
-						}
-
-						++var12;
+			if((var6 & 8) == 0) {
+				for(int var8 = var2 - 4; var8 <= var2 + 4; ++var8) {
+					for(int var9 = var3 - 3; var9 <= var3 + 1; ++var9) {
+						for(int var7 = var4 - 4; var7 <= var4 + 4; ++var7) {
+							if(var1.getBlockId(var8, var9, var7) == Block.wood.blockID) {
+								return;
+							}
+						}
 					}
 				}
 
-				var12 = this.adjacentTreeBlocks[var11 * var10 + var11 * var9 + var11];
-				if(var12 >= 0) {
-					var1.setBlockMetadata(var2, var3, var4, var6 & -9);
-				} else {
-					this.removeLeaves(var1, var2, var3, var4);
-				}
+				this.removeLeaves(var1, var2, var3, var4);
 			}
 
 		}
@@ -172,7 +115,7 @@
 	}
 
 	protected int damageDropped(int var1) {
-		return var1 & 3;
+		return var1 & 7;
 	}
 
 	public boolean isOpaqueCube() {
@@ -180,7 +123,9 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return (var2 & 3) == 1 ? this.blockIndexInTexture + 80 : this.blockIndexInTexture;
+		return (var2 & 7) == 1 ? this.blockIndexInTexture + 80
+				: (var2 & 7) == 3 && !Personalization.inheritLogs ? this.blockIndexInTexture + 144
+				: this.blockIndexInTexture;
 	}
 
 	public void setGraphicsLevel(boolean var1) {
--- /dev/null
+++ net/minecraft/src/BlockMossyStone.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockMossyStone extends BlockStone {
+	public BlockMossyStone(int var1) {
+		super(var1, 1);
+	}
+
+	public int idDropped(int var1, Random var2) {
+		return Block.cobblestoneMossy.blockID;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return var1 == 0 ? this.blockIndexInTexture : var1 == 1 ? 170 : 186;
+	}
+}
--- net/minecraft/src/ColorizerWater.java
+++ net/minecraft/src/ColorizerWater.java
@@ -6,4 +6,15 @@
 	public static void func_28182_a(int[] var0) {
 		waterBuffer = var0;
 	}
+
+	public static int getWaterColor(double var0, double var2) {
+		double eMul = Personalization.entropy > 0.0F ? 0.35D : 0.5D;
+		var0 = MathHelper.clamp((var0 - 0.5D) * (1.0D - Personalization.entropy * eMul) + 0.5D, 0.0D, 1.0D);
+		var2 = MathHelper.clamp((var2 - 0.5D) * (1.0D - Personalization.entropy * eMul) + 0.5D, 0.0D, 1.0D);
+
+		var2 *= var0;
+		int var4 = (int)((1.0D - var0) * 255.0D);
+		int var5 = (int)((1.0D - var2) * 255.0D);
+		return waterBuffer[var5 << 8 | var4];
+	}
 }
--- net/minecraft/src/MapGenCaves.java
+++ net/minecraft/src/MapGenCaves.java
@@ -12,7 +12,7 @@
 		double var21 = (double)(var4 * 16 + 8);
 		float var23 = 0.0F;
 		float var24 = 0.0F;
-		Random var25 = new Random(var1);
+		Random var25 = Personalization.random(var1);
 		if(var16 <= 0) {
 			int var26 = this.field_1306_a * 16 - 16;
 			var16 = var26 - var25.nextInt(var26 / 4);
@@ -80,9 +80,7 @@
 						var56 = 1;
 					}
 
-					this.field_35625_d.getClass();
 					if(var38 > 128 - 8) {
-						this.field_35625_d.getClass();
 						var38 = 128 - 8;
 					}
 
@@ -103,10 +101,8 @@
 						for(int var43 = var57; !var58 && var43 < var40; ++var43) {
 							for(int var44 = var38 + 1; !var58 && var44 >= var56 - 1; --var44) {
 								var10000 = var42 * 16 + var43;
-								this.field_35625_d.getClass();
-								var45 = var10000 * 128 + var44;
+								var45 = var10000 * 512 + var44;
 								if(var44 >= 0) {
-									this.field_35625_d.getClass();
 									if(var44 < 128) {
 										if(var5[var45] == Block.waterMoving.blockID || var5[var45] == Block.waterStill.blockID) {
 											var58 = true;
@@ -128,8 +124,7 @@
 							for(var45 = var57; var45 < var40; ++var45) {
 								double var46 = ((double)(var45 + var4 * 16) + 0.5D - var10) / var29;
 								var10000 = var42 * 16 + var45;
-								this.field_35625_d.getClass();
-								int var48 = var10000 * 128 + var38;
+								int var48 = var10000 * 512 + var38;
 								boolean var49 = false;
 								if(var59 * var59 + var46 * var46 < 1.0D) {
 									for(int var50 = var38 - 1; var50 >= var56; --var50) {
--- net/minecraft/src/ComponentVillage.java
+++ net/minecraft/src/ComponentVillage.java
@@ -46,9 +46,18 @@
 			for(int var6 = this.field_35024_g.field_35753_a; var6 <= this.field_35024_g.field_35749_d; ++var6) {
 				if(var2.func_35742_b(var6, 64, var5)) {
 					int var10001 = var1.getTopSolidOrLiquidBlock(var6, var5);
-					var1.getClass();
-					var3 += Math.max(var10001, 63);
-					++var4;
+					if (Personalization.notchVillages) {
+						if (var10001 < 64) {
+							return -1;
+						}
+						if (var10001 < var3 || var4 == 0) {
+							var3 = var10001;
+							var4 = 1;
+						}
+					} else {
+						var3 += Math.max(var10001, 63);
+						++var4;
+					}
 				}
 			}
 		}
--- net/minecraft/src/EntitySheep.java
+++ net/minecraft/src/EntitySheep.java
@@ -48,6 +48,22 @@
 		return false;
 	}
 
+	public boolean attackEntityFrom(DamageSource var1, int var2) {
+		if(Personalization.woolPunch && !this.worldObj.multiplayerWorld && !this.getSheared() && var1 instanceof EntityDamageSource) {
+			this.setSheared(true);
+			int var3 = 1 + this.rand.nextInt(3);
+
+			for(int var4 = 0; var4 < var3; ++var4) {
+				EntityItem var5 = this.entityDropItem(new ItemStack(Block.cloth.blockID, 1, this.getFleeceColor()), 1.0F);
+				var5.motionY += (double)(this.rand.nextFloat() * 0.05F);
+				var5.motionX += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+				var5.motionZ += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+			}
+		}
+
+		return super.attackEntityFrom(var1, var2);
+	}
+
 	public void writeEntityToNBT(NBTTagCompound var1) {
 		super.writeEntityToNBT(var1);
 		var1.setBoolean("Sheared", this.getSheared());
--- net/minecraft/src/EntityFireball.java
+++ net/minecraft/src/EntityFireball.java
@@ -120,14 +120,7 @@
 		}
 
 		if(var3 != null) {
-			if(!this.worldObj.multiplayerWorld) {
-				if(var3.entityHit != null && var3.entityHit.attackEntityFrom(DamageSource.func_35530_a(this, this.shootingEntity), 0)) {
-				}
-
-				this.worldObj.newExplosion((Entity)null, this.posX, this.posY, this.posZ, 1.0F, true);
-			}
-
-			this.setEntityDead();
+			this.onHit(var3);
 		}
 
 		this.posX += this.motionX;
@@ -220,5 +213,16 @@
 
 	public float getShadowSize() {
 		return 0.0F;
+	}
+
+	protected void onHit(MovingObjectPosition var1) {
+		if(!this.worldObj.multiplayerWorld) {
+			if(var1.entityHit != null && var1.entityHit.attackEntityFrom(DamageSource.func_35530_a(this, this.shootingEntity), 4)) {
+			}
+
+			this.worldObj.newExplosion((Entity)null, this.posX, this.posY, this.posZ, 1.0F, true);
+		}
+
+		this.setEntityDead();
 	}
 }
--- net/minecraft/src/FontRenderer.java
+++ net/minecraft/src/FontRenderer.java
@@ -11,6 +11,7 @@
 	public int fontTextureName = 0;
 	private int fontDisplayLists;
 	private IntBuffer buffer = GLAllocation.createDirectIntBuffer(1024);
+	public int lineHeight = 8;
 
 	public FontRenderer(GameSettings var1, String var2, RenderEngine var3) {
 		BufferedImage var4;
@@ -123,6 +124,7 @@
 
 	public void renderString(String var1, int var2, int var3, int var4, boolean var5) {
 		if(var1 != null) {
+			var1 = modifyString(var1);
 			int var6;
 			if(var5) {
 				var6 = var4 & -16777216;
@@ -184,6 +186,7 @@
 		if(var1 == null) {
 			return 0;
 		} else {
+			var1 = modifyString(var1);
 			int var2 = 0;
 
 			for(int var3 = 0; var3 < var1.length(); ++var3) {
@@ -202,36 +205,50 @@
 	}
 
 	public void drawSplitString(String var1, int var2, int var3, int var4, int var5) {
-		String[] var6 = var1.split("\n");
-		if(var6.length > 1) {
-			for(int var11 = 0; var11 < var6.length; ++var11) {
-				this.drawSplitString(var6[var11], var2, var3, var4, var5);
-				var3 += this.splitStringWidth(var6[var11], var4);
+		this.drawSplitString(var1, var2, var3, var4, var5, false);
+	}
+
+	public void drawSplitString(String var1, int var2, int var3, int var4, int var5, boolean var6) {
+		String[] var7 = var1.split("\n");
+		if(var7.length > 1) {
+			for(int var14 = 0; var14 < var7.length; ++var14) {
+				this.drawSplitString(var7[var14], var2, var3, var4, var5);
+				var3 += this.splitStringWidth(var7[var14], var4);
 			}
 
 		} else {
-			String[] var7 = var1.split(" ");
-			int var8 = 0;
-
-			while(var8 < var7.length) {
-				String var9;
-				for(var9 = var7[var8++] + " "; var8 < var7.length && this.getStringWidth(var9 + var7[var8]) < var4; var9 = var9 + var7[var8++] + " ") {
-				}
-
-				int var10;
-				for(; this.getStringWidth(var9) > var4; var9 = var9.substring(var10)) {
-					for(var10 = 0; this.getStringWidth(var9.substring(0, var10 + 1)) <= var4; ++var10) {
-					}
-
-					if(var9.substring(0, var10).trim().length() > 0) {
-						this.drawString(var9.substring(0, var10), var2, var3, var5);
-						var3 += 8;
-					}
-				}
-
-				if(var9.trim().length() > 0) {
-					this.drawString(var9, var2, var3, var5);
-					var3 += 8;
+			String[] var8 = var1.split(" ");
+			int var9 = 0;
+			String var10 = "";
+
+			while(var9 < var8.length) {
+				String var11;
+				for(var11 = var10 + var8[var9++] + " "; var9 < var8.length && this.getStringWidth(var11 + var8[var9]) < var4; var11 = var11 + var8[var9++] + " ") {
+				}
+
+				int var12;
+				for(; this.getStringWidth(var11) > var4; var11 = var10 + var11.substring(var12)) {
+					for(var12 = 0; this.getStringWidth(var11.substring(0, var12 + 1)) <= var4; ++var12) {
+					}
+
+					if(var11.substring(0, var12).trim().length() > 0) {
+						String var13 = var11.substring(0, var12);
+						if(var13.lastIndexOf("\u00a7") >= 0) {
+							var10 = "\u00a7" + var13.charAt(var13.lastIndexOf("\u00a7") + 1);
+						}
+
+						this.renderString(var13, var2, var3, var5, var6);
+						var3 += this.lineHeight;
+					}
+				}
+
+				if(this.getStringWidth(var11.trim()) > 0) {
+					if(var11.lastIndexOf("\u00a7") >= 0) {
+						var10 = "\u00a7" + var11.charAt(var11.lastIndexOf("\u00a7") + 1);
+					}
+
+					this.renderString(var11, var2, var3, var5, var6);
+					var3 += this.lineHeight;
 				}
 			}
 
@@ -250,6 +267,7 @@
 
 			return var9;
 		} else {
+			var1 = modifyString(var1);
 			String[] var4 = var1.split(" ");
 			var5 = 0;
 			int var6 = 0;
@@ -265,20 +283,51 @@
 					}
 
 					if(var7.substring(0, var8).trim().length() > 0) {
-						var6 += 8;
+						var6 += this.lineHeight;
 					}
 				}
 
 				if(var7.trim().length() > 0) {
-					var6 += 8;
+					var6 += this.lineHeight;
 				}
 			}
 
 			if(var6 < 8) {
-				var6 += 8;
+				var6 += this.lineHeight;
 			}
 
 			return var6;
 		}
+	}
+
+	private static String modifyString(String string) {
+		if (Personalization.owoSpeak) {
+			string = string
+					.replace(":)", ":3")
+					.replace(":D", "OwO")
+					.replace(":(", ">w<")
+					.replace("you", "uwu")
+					.replace("You", "UwU")
+					.replace('l', 'w')
+					.replace('r', 'w')
+					.replace('L', 'W')
+					.replace('R', 'W')
+					.replace('z', 's')
+					.replace('Z', 'S')
+					.replace("ov", "owov")
+					.replace("now", "nowo")
+					.replace("Now", "Nowo")
+					.replace("ch", "chw")
+					.replace("Ch", "Chw")
+					.replace("sh", "shw")
+					.replace("Sh", "Shw")
+					.replace("tion", "shun")
+					.replace("v", "bw")
+					.replace("V", "Bw")
+					.replaceAll("([^A-z])([A-VXZ])([AEIOUaeiou])", "$1$2w$3")
+			;
+		}
+
+		return string;
 	}
 }
--- net/minecraft/src/WorldGenFlowers.java
+++ net/minecraft/src/WorldGenFlowers.java
@@ -15,7 +15,7 @@
 			int var8 = var4 + var2.nextInt(4) - var2.nextInt(4);
 			int var9 = var5 + var2.nextInt(8) - var2.nextInt(8);
 			if(var1.isAirBlock(var7, var8, var9) && ((BlockFlower)Block.blocksList[this.plantBlockId]).canBlockStay(var1, var7, var8, var9)) {
-				var1.setBlock(var7, var8, var9, this.plantBlockId);
+				this.setBlock(var1, var7, var8, var9, this.plantBlockId);
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/EntityNotch.java
@@ -1,0 +1,250 @@
+package net.minecraft.src;
+
+import java.util.List;
+
+public class EntityNotch extends EntityLiving {
+	private EntityPlayer targetPlayer;
+	private double spin = 0.0D;
+	private double spinAccel = 0.0D;
+	private int chargeTimer = 100;
+	private int state = 0;
+	private int explosionTime = this.getNextExplosionTime();
+	private double explodeX = 0.0D;
+	private double explodeZ = 0.0D;
+	private int deathTimer = 0;
+
+	public EntityNotch(World var1) {
+		super(var1);
+		this.ignoreFrustumCheck = true;
+		this.noClip = true;
+		this.setSize(1.5F, 2.5F);
+	}
+
+	public int getMaxHealth() {
+		return 500;
+	}
+
+	public boolean attackEntityFrom(DamageSource var1, int var2) {
+		if (var1 instanceof EntityDamageSourceIndirect) {
+			var2 = var2 / 2 + 1;
+		}
+
+		boolean result = this.state != 3
+				&& var1 != DamageSource.field_35549_h
+				&& var1 != DamageSource.field_35538_d
+				&& super.attackEntityFrom(var1, var2);
+		if (result && this.state == 2) {
+			this.motionX *= -2.5D;
+			this.motionY *= -2.5D;
+			this.motionZ *= -2.5D;
+			this.spin += Math.PI / 2.0D;
+		}
+		return result;
+	}
+
+	public void onLivingUpdate() {
+		for (EntityPlayer player : (List<EntityPlayer>)this.worldObj.playerEntities) {
+			player.boss = this;
+		}
+
+		for(int i = 0; i < 8; ++i) {
+			this.worldObj.spawnParticle(
+					"cloud",
+					this.posX + this.rand.nextDouble() - this.rand.nextDouble(),
+					this.boundingBox.minY,
+					this.posZ + this.rand.nextDouble() - this.rand.nextDouble(),
+					0.0D,
+					0.0D,
+					0.0D
+			);
+		}
+
+		if (this.targetPlayer == null || this.targetPlayer.isDead) {
+			this.targetPlayer = this.worldObj.getClosestPlayerToEntity(this, -1.0F);
+		}
+
+		if (this.targetPlayer != null && this.health > 0) {
+			if (this.chargeTimer > 0) {
+				this.chargeTimer--;
+			}
+
+			double spinFactor = 1.0D + (double)(this.getMaxHealth() - this.health) / this.getMaxHealth() * 0.5D;
+
+			this.spinAccel += Math.cos(this.ticksExisted / 100.0D) * 0.005D * spinFactor;
+			if (Math.abs(this.spinAccel) > 0.1D * spinFactor) {
+				this.spinAccel = 0.1D * spinFactor * Math.signum(this.spinAccel);
+			}
+			this.spin += this.spinAccel;
+
+			double sin = Math.sin(this.spin);
+			double cos = Math.cos(this.spin);
+			double dist = 10.0D;
+			double height = 5.0D;
+			int warn = 10 + this.health * 20 / this.getMaxHealth();
+
+			if (this.state == 0 && this.chargeTimer < warn) {
+				dist = 12.0D;
+				height = 2.0D;
+				this.spinAccel *= 0.8D;
+			} else if (this.state == 3) {
+				dist = 7.5D;
+				height = 7.5D;
+			}
+
+			this.noClip = this.state != 4;
+
+			if (this.state == 0) {
+				this.moveToTarget(this.targetPlayer.posX + sin * dist, this.targetPlayer.posY + height, this.targetPlayer.posZ + cos * dist, 0.25D);
+
+				if (this.chargeTimer <= warn && this.chargeTimer % 4 == 0) {
+					this.worldObj.playSoundEffect(this.posX, this.posY, this.posZ, "note.snare", this.getSoundVolume(), 1.0F);
+				}
+				if (this.chargeTimer <= 0) {
+					this.state = 1;
+					this.chargeTimer = 20;
+					this.spin += Math.PI / 2.0D;
+					this.spinAccel = 0.0D;
+					this.worldObj.playSoundEffect(this.posX, this.posY, this.posZ, "random.remix", this.getSoundVolume(), 2.0F);
+					this.worldObj.playSoundEffect(this.posX, this.posY, this.posZ, "random.overamalgamation", this.getSoundVolume(), 2.0F);
+				}
+			} else if (this.state == 1) {
+				this.moveToTarget(this.targetPlayer.posX, this.targetPlayer.posY - 1.5D, this.targetPlayer.posZ,
+						0.15D + (this.getMaxHealth() - this.health) / (double)this.getMaxHealth() * 0.05D);
+				this.state = 2;
+			} else if (this.state == 2) {
+				if (this.chargeTimer == 0) {
+					this.chargeTimer = this.getNextChargeTimer();
+					if (--this.explosionTime <= 0) {
+						this.worldObj.playSoundAtEntity(this, "mob.biggerexplosion", 100.0F, 1.0F);
+						this.state = 3;
+						this.explosionTime = this.getNextExplosionTime();
+						this.chargeTimer = this.getNextExplosionTimer();
+						this.pickExplosionPosition();
+					} else {
+						this.state = 0;
+					}
+				}
+			} else if (this.state == 3) {
+				int interval = 30 + this.health * 10 / this.getMaxHealth();
+
+				double offX = this.explodeX * dist;
+				double offZ = this.explodeZ * dist;
+				this.moveToTarget(this.targetPlayer.posX + offX, this.targetPlayer.posY + height, this.targetPlayer.posZ + offZ, 0.1D);
+
+				if (this.chargeTimer % interval == 0) {
+					this.worldObj.playSoundAtEntity(this, "random.bow", this.getSoundVolume(), 1.0F / (this.rand.nextFloat() * 0.4F + 0.8F));
+					EntityArrow arrow = new EntityArrow(this.worldObj, this.posX, this.boundingBox.minY - 0.5D, this.posZ);
+					arrow.makeItABIGGEREXPLOSION = true;
+					arrow.setVelocity(0.0D, -0.5D, 0.0D);
+					this.worldObj.entityJoinedWorld(arrow);
+					this.pickExplosionPosition();
+				}
+
+				if (this.chargeTimer <= 0) {
+					this.worldObj.playSoundAtEntity(this, "random.explode", this.getSoundVolume(), 1.5F);
+					this.worldObj.spawnParticle("hugeexplosion", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
+					this.motionY = 0.0D;
+					this.state = 4;
+					this.chargeTimer = 100 + this.rand.nextInt(100);
+				}
+			} else if (this.state == 4) {
+				this.deathTime++;
+				this.hurtTime = 1;
+				this.motionX = 0.0D;
+				this.motionY -= 0.1D;
+				this.motionZ = 0.0D;
+				if (this.chargeTimer <= 0) {
+					this.state = 0;
+					this.chargeTimer = Math.max(this.getNextChargeTimer(), 100);
+					this.deathTime = 0;
+				}
+			}
+
+			if (this.hurtTime == 0 && this.state == 2 && this.getDistanceToEntity(this.targetPlayer) < 2.5F) {
+				this.targetPlayer.attackEntityFrom(DamageSource.func_35525_a(this), 20);
+			}
+		}
+
+		if (this.targetPlayer != null) {
+			this.faceEntity(this.targetPlayer, 30.0F, 30.0F);
+		}
+
+		if (this.health > 0) {
+			this.motionX *= 0.95D;
+			this.motionY *= 0.95D;
+			this.motionZ *= 0.95D;
+		} else {
+			this.motionX = 0.0D;
+			this.motionY -= 0.1D;
+			this.motionZ = 0.0D;
+		}
+		this.moveEntity(this.motionX, this.motionY, this.motionZ);
+	}
+
+	private void moveToTarget(double targetPosX, double targetPosY, double targetPosZ, double speed) {
+		this.motionX = targetPosX - this.posX;
+		this.motionY = targetPosY - this.posY;
+		this.motionZ = targetPosZ - this.posZ;
+		this.motionX *= speed;
+		this.motionY *= speed;
+		this.motionZ *= speed;
+	}
+
+	private int getNextChargeTimer() {
+		return (int)((100 + this.rand.nextInt(100))
+				* (1 - (float)(this.getMaxHealth() - this.health) / this.getMaxHealth() * 0.5F));
+	}
+
+	private int getNextExplosionTime() {
+		return 2 + this.rand.nextInt(3);
+	}
+
+	private int getNextExplosionTimer() {
+		int range = 100 + (this.getMaxHealth() - this.health) * 100 / this.getMaxHealth();
+		return range + this.rand.nextInt(range);
+	}
+
+	private void pickExplosionPosition() {
+		this.explodeX = (this.rand.nextDouble() - 0.5D) * 2.0D;
+		this.explodeZ = (this.rand.nextDouble() - 0.5D) * 2.0D;
+	}
+
+	public boolean canBePushed() {
+		return false;
+	}
+
+	protected void func_40120_m_() {
+		this.noClip = false;
+		++this.deathTimer;
+
+		if(this.rand.nextInt(10) == 0) {
+			float var1 = (this.rand.nextFloat() - 0.5F) * 2.0F;
+			float var2 = (this.rand.nextFloat() - 0.5F) * 2.0F;
+			float var3 = (this.rand.nextFloat() - 0.5F) * 2.0F;
+			this.worldObj.playSoundAtEntity(this, "random.explode", this.getSoundVolume(), 1.5F);
+			this.worldObj.spawnParticle("hugeexplosion", this.posX + (double)var1, this.posY + (double)var2, this.posZ + (double)var3, 0.0D, 0.0D, 0.0D);
+		}
+
+		this.renderYawOffset = this.rotationYaw += 20.0F;
+
+		for (EntityPlayer player : (List<EntityPlayer>)this.worldObj.playerEntities) {
+			player.staticStrength = this.rand.nextFloat() * 0.1F + this.deathTimer / 200.0F;
+		}
+	}
+
+	public String getEntityTexture() {
+		return "/mob/notch.png";
+	}
+
+	protected boolean canDespawn() {
+		return false;
+	}
+
+	public boolean isInRangeToRenderDist(double var1) {
+		return true;
+	}
+
+	protected float getSoundVolume() {
+		return 100.0F;
+	}
+}
--- net/minecraft/src/GuiSelectWorld.java
+++ net/minecraft/src/GuiSelectWorld.java
@@ -39,8 +39,8 @@
 	}
 
 	private void loadSaves() {
-		ISaveFormat var1 = this.mc.getSaveLoader();
-		this.saveList = var1.func_22176_b();
+		ISaveFormat var1 = this.game.getSaveLoader();
+		this.saveList = var1.getSaveList();
 		Collections.sort(this.saveList);
 		this.selectedWorld = -1;
 	}
@@ -83,16 +83,16 @@
 					String var6 = var3.translateKey("selectWorld.deleteButton");
 					String var7 = var3.translateKey("gui.cancel");
 					GuiYesNo var8 = new GuiYesNo(this, var4, var5, var6, var7, this.selectedWorld);
-					this.mc.displayGuiScreen(var8);
+					this.game.displayGuiScreen(var8);
 				}
 			} else if(var1.id == 1) {
 				this.selectWorld(this.selectedWorld);
 			} else if(var1.id == 3) {
-				this.mc.displayGuiScreen(new GuiCreateWorld(this));
+				this.game.displayGuiScreen(new GuiCreateWorld(this));
 			} else if(var1.id == 6) {
-				this.mc.displayGuiScreen(new GuiRenameWorld(this, this.getSaveFileName(this.selectedWorld)));
+				this.game.displayGuiScreen(new GuiRenameWorld(this, this.getSaveFileName(this.selectedWorld)));
 			} else if(var1.id == 0) {
-				this.mc.displayGuiScreen(this.parentScreen);
+				this.game.displayGuiScreen(this.parentScreen);
 			} else {
 				this.worldSlotContainer.actionPerformed(var1);
 			}
@@ -101,14 +101,14 @@
 	}
 
 	public void selectWorld(int var1) {
-		this.mc.displayGuiScreen((GuiScreen)null);
+		this.game.displayGuiScreen((GuiScreen)null);
 		if(!this.selected) {
 			this.selected = true;
 			int var2 = ((SaveFormatComparator)this.saveList.get(var1)).func_35719_f();
 			if(var2 == 0) {
-				this.mc.playerController = new PlayerControllerSP(this.mc);
+				this.game.playerController = new PlayerControllerSP(this.game);
 			} else {
-				this.mc.playerController = new PlayerControllerTest(this.mc);
+				this.game.playerController = new PlayerControllerTest(this.game);
 			}
 
 			String var3 = this.getSaveFileName(var1);
@@ -116,8 +116,8 @@
 				var3 = "World" + var1;
 			}
 
-			this.mc.startWorld(var3, this.getSaveName(var1), (WorldSettings)null);
-			this.mc.displayGuiScreen((GuiScreen)null);
+			this.game.startWorld(var3, this.getSaveName(var1), (WorldSettings)null);
+			this.game.displayGuiScreen((GuiScreen)null);
 		}
 	}
 
@@ -125,13 +125,13 @@
 		if(this.deleting) {
 			this.deleting = false;
 			if(var1) {
-				ISaveFormat var3 = this.mc.getSaveLoader();
+				ISaveFormat var3 = this.game.getSaveLoader();
 				var3.flushCache();
-				var3.func_22172_c(this.getSaveFileName(var2));
+				var3.deleteWorldDirectory(this.getSaveFileName(var2));
 				this.loadSaves();
 			}
 
-			this.mc.displayGuiScreen(this);
+			this.game.displayGuiScreen(this);
 		}
 
 	}
--- net/minecraft/src/GuiChest.java
+++ net/minecraft/src/GuiChest.java
@@ -24,9 +24,9 @@
 	}
 
 	protected void drawGuiContainerBackgroundLayer(float var1) {
-		int var2 = this.mc.renderEngine.getTexture("/gui/container.png");
+		int var2 = this.game.renderEngine.getTexture("/gui/container.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(var2);
+		this.game.renderEngine.bindTexture(var2);
 		int var3 = (this.width - this.xSize) / 2;
 		int var4 = (this.height - this.ySize) / 2;
 		this.drawTexturedModalRect(var3, var4, 0, 0, this.xSize, this.inventoryRows * 18 + 17);
--- /dev/null
+++ net/minecraft/src/BiomeGenOldHills.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenOldHills extends BiomeGenBase {
+	protected BiomeGenOldHills(int var1) {
+		super(var1);
+		this.decorator.trees = 10;
+		this.decorator.grass = 2;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		if (var1.nextInt(5) == 0 && !Personalization.terrain415 && !Personalization.oakOnly) return this.field_35481_B;
+		if (var1.nextInt(3) == 0 || Personalization.terrain415) return this.field_35480_A;
+		return this.field_35493_z;
+	}
+}
--- net/minecraft/src/PlayerController.java
+++ net/minecraft/src/PlayerController.java
@@ -25,6 +25,7 @@
 			int var7 = var5.getBlockMetadata(var1, var2, var3);
 			boolean var8 = var5.setBlockWithNotify(var1, var2, var3, 0);
 			if(var6 != null && var8) {
+				var5.getChunkFromBlockCoords(var1, var3).playerModified = true;
 				var6.onBlockDestroyedByPlayer(var5, var1, var2, var3, var7);
 			}
 
@@ -60,6 +61,15 @@
 	}
 
 	public void updateController() {
+		if (this.mc.thePlayer.angeredNotch) {
+			this.mc.sndManager.playBossMusic();
+		} else if (this.mc.thePlayer.dimension == 2 && this.mc.thePlayer.posY < ChunkProviderOffices.height * 7) {
+			if (this.mc.thePlayer.ticksExisted > 20) {
+				this.mc.sndManager.playOfficeMusic();
+			}
+		} else {
+			this.mc.sndManager.playRandomMusicIfReady();
+		}
 	}
 
 	public abstract boolean shouldDrawHUD();
--- net/minecraft/src/TextureWaterFlowFX.java
+++ net/minecraft/src/TextureWaterFlowFX.java
@@ -76,9 +76,16 @@
 				var7 = var11;
 			}
 
-			this.imageData[var2 * 4 + 0] = (byte)var5;
-			this.imageData[var2 * 4 + 1] = (byte)var6;
-			this.imageData[var2 * 4 + 2] = (byte)var7;
+			if (Personalization.coloredWater) {
+				int color = Math.min((var7 + var6 + var5) / 2, 255);
+				this.imageData[var2 * 4 + 0] = (byte)color;
+				this.imageData[var2 * 4 + 1] = (byte)color;
+				this.imageData[var2 * 4 + 2] = (byte)color;
+			} else {
+				this.imageData[var2 * 4 + 0] = (byte)var5;
+				this.imageData[var2 * 4 + 1] = (byte)var6;
+				this.imageData[var2 * 4 + 2] = (byte)var7;
+			}
 			this.imageData[var2 * 4 + 3] = (byte)var8;
 		}
 
--- net/minecraft/src/ItemSword.java
+++ net/minecraft/src/ItemSword.java
@@ -41,7 +41,7 @@
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		var3.func_35199_b(var1, this.func_35411_c(var1));
+		if (Personalization.blocking) var3.func_35199_b(var1, this.func_35411_c(var1));
 		return var1;
 	}
 
--- net/minecraft/src/EntitySlime.java
+++ net/minecraft/src/EntitySlime.java
@@ -134,7 +134,7 @@
 
 	public boolean getCanSpawnHere() {
 		Chunk var1 = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posZ));
-		return (this.getSlimeSize() == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && var1.func_997_a(987234911L).nextInt(10) == 0 && this.posY < 16.0D;
+		return (this.getSlimeSize() == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && var1.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 16.0D;
 	}
 
 	protected float getSoundVolume() {
--- net/minecraft/src/TileEntityChest.java
+++ net/minecraft/src/TileEntityChest.java
@@ -1,6 +1,6 @@
 package net.minecraft.src;
 
-public class TileEntityChest extends TileEntity implements IInventory {
+public class TileEntityChest extends TileEntityContainer {
 	private ItemStack[] chestContents = new ItemStack[36];
 	public boolean field_35155_a = false;
 	public TileEntityChest field_35152_b;
@@ -163,7 +163,9 @@
 				var2 += 0.5D;
 			}
 
-			this.worldObj.playSoundEffect(var2, (double)this.yCoord + 0.5D, var4, "random.door_open", 1.0F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
+			if (!Personalization.fullBlockChests) {
+				this.worldObj.playSoundEffect(var2, (double)this.yCoord + 0.5D, var4, "random.door_open", 1.0F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
+			}
 		}
 
 		if(this.field_35156_h == 0 && this.field_35148_f > 0.0F || this.field_35156_h > 0 && this.field_35148_f < 1.0F) {
@@ -190,7 +192,9 @@
 						var2 += 0.5D;
 					}
 
-					this.worldObj.playSoundEffect(var2, (double)this.yCoord + 0.5D, var4, "random.door_close", 1.0F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
+					if (!Personalization.fullBlockChests) {
+						this.worldObj.playSoundEffect(var2, (double)this.yCoord + 0.5D, var4, "random.door_close", 1.0F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
+					}
 				}
 			}
 		}
--- net/minecraft/src/BlockGrass.java
+++ net/minecraft/src/BlockGrass.java
@@ -25,6 +25,8 @@
 	}
 
 	public int func_35274_i() {
+		if (Personalization.alphaTextures) return 0xFFFFFF;
+
 		double var1 = 0.5D;
 		double var3 = 1.0D;
 		return ColorizerGrass.getGrassColor(var1, var3);
@@ -35,9 +37,31 @@
 	}
 
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-		double var5 = (double)var1.getWorldChunkManager().func_35554_b(var2, var4);
-		double var7 = (double)var1.getWorldChunkManager().func_35558_c(var2, var4);
-		return ColorizerGrass.getGrassColor(var5, var7);
+		if (Personalization.alphaTextures) return 0xFFFFFF;
+
+		if (Personalization.smoothBiomes) {
+			WorldChunkManager wcm = var1.getWorldChunkManager();
+			int var5 = 0;
+			int var6 = 0;
+			int var7 = 0;
+
+			for(int var8 = -1; var8 <= 1; ++var8) {
+				for(int var9 = -1; var9 <= 1; ++var9) {
+					double t = wcm.func_35554_b(var2 + var9, var4 + var8);
+					double r = wcm.func_35558_c(var2 + var9, var4 + var8);
+					int var10 = var1.getWorldChunkManager().getBiomeGenAt(var2 + var9, var4 + var8).getGrassColor(t, r, var2 + var9, var4 + var8);
+					var5 += (var10 & 16711680) >> 16;
+					var6 += (var10 & '\uff00') >> 8;
+					var7 += var10 & 255;
+				}
+			}
+
+			return (var5 / 9 & 255) << 16 | (var6 / 9 & 255) << 8 | var7 / 9 & 255;
+		} else {
+			double var5 = (double)var1.getWorldChunkManager().func_35554_b(var2, var4);
+			double var7 = (double)var1.getWorldChunkManager().func_35558_c(var2, var4);
+			return var1.getWorldChunkManager().getBiomeGenAt(var2, var4).getGrassColor(var5, var7, var2, var4);
+		}
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
@@ -53,7 +77,9 @@
 				int var7 = var3 + var5.nextInt(5) - 3;
 				int var8 = var4 + var5.nextInt(3) - 1;
 				int var9 = var1.getBlockId(var6, var7 + 1, var8);
-				if(var1.getBlockId(var6, var7, var8) == Block.dirt.blockID && var1.getBlockLightValue(var6, var7 + 1, var8) >= 4 && Block.lightOpacity[var9] <= 2) {
+				if(var1.getBlockId(var6, var7, var8) == Block.dirt.blockID
+						&& var1.getBlockMetadata(var6, var7, var8) == 0
+						&& var1.getBlockLightValue(var6, var7 + 1, var8) >= 4 && Block.lightOpacity[var9] <= 2) {
 					var1.setBlockWithNotify(var6, var7, var8, Block.grass.blockID);
 				}
 			}
--- net/minecraft/src/TileEntityChestRenderer.java
+++ net/minecraft/src/TileEntityChestRenderer.java
@@ -8,6 +8,10 @@
 	private ModelChest field_35378_c = new ModelLargeChest();
 
 	public void func_35376_a(TileEntityChest var1, double var2, double var4, double var6, float var8) {
+		if (Personalization.fullBlockChests) {
+			return;
+		}
+
 		int var9;
 		if(var1.worldObj == null) {
 			var9 = 0;
--- net/minecraft/src/MapGenStronghold.java
+++ net/minecraft/src/MapGenStronghold.java
@@ -3,7 +3,7 @@
 import java.util.ArrayList;
 
 public class MapGenStronghold extends MapGenStructure {
-	private BiomeGenBase[] field_35634_a = new BiomeGenBase[]{BiomeGenBase.desert, BiomeGenBase.forest, BiomeGenBase.field_35483_e, BiomeGenBase.swampland};
+	private BiomeGenBase[] field_35634_a = new BiomeGenBase[]{BiomeGenBase.desert, BiomeGenBase.forest, BiomeGenBase.extremeHills, BiomeGenBase.swampland};
 	private boolean field_35632_f;
 	private ChunkCoordIntPair[] field_35633_g = new ChunkCoordIntPair[3];
 
--- /dev/null
+++ net/minecraft/src/EntityBlaze.java
@@ -1,0 +1,172 @@
+package net.minecraft.src;
+
+public class EntityBlaze extends EntityMob {
+	private float field_40154_a = 0.5F;
+	private int field_40153_b;
+	private int field_40152_d;
+
+	public EntityBlaze(World var1) {
+		super(var1);
+		this.texture = "/mob/fire.png";
+		this.isImmuneToFire = true;
+		this.attackStrength = 6;
+		this.field_35171_bJ = 10;
+	}
+
+	public int getMaxHealth() {
+		return 20;
+	}
+
+	protected void entityInit() {
+		super.entityInit();
+		this.dataWatcher.addObject(16, new Byte((byte)0));
+	}
+
+	protected String getLivingSound() {
+		return "mob.blaze.breathe";
+	}
+
+	protected String getHurtSound() {
+		return "mob.blaze.hit";
+	}
+
+	protected String getDeathSound() {
+		return "mob.blaze.death";
+	}
+
+	public boolean attackEntityFrom(DamageSource var1, int var2) {
+		return super.attackEntityFrom(var1, var2);
+	}
+
+	public void onDeath(DamageSource var1) {
+		super.onDeath(var1);
+	}
+
+	public int getEntityBrightnessForRender(float var1) {
+		return 15728880;
+	}
+
+	public float getEntityBrightness(float var1) {
+		return 1.0F;
+	}
+
+	public void onLivingUpdate() {
+		if(!this.worldObj.multiplayerWorld) {
+			if(this.isWet()) {
+				this.attackEntityFrom(DamageSource.field_35539_e, 1);
+			}
+
+			--this.field_40153_b;
+			if(this.field_40153_b <= 0) {
+				this.field_40153_b = 100;
+				this.field_40154_a = 0.5F + (float)this.rand.nextGaussian() * 3.0F;
+			}
+
+			if(this.getEntityToAttack() != null && this.getEntityToAttack().posY + (double)this.getEntityToAttack().getEyeHeight() > this.posY + (double)this.getEyeHeight() + (double)this.field_40154_a) {
+				this.motionY += ((double)0.3F - this.motionY) * (double)0.3F;
+			}
+		}
+
+		if(this.rand.nextInt(24) == 0) {
+			this.worldObj.playSoundEffect(this.posX + 0.5D, this.posY + 0.5D, this.posZ + 0.5D, "fire.fire", 1.0F + this.rand.nextFloat(), this.rand.nextFloat() * 0.7F + 0.3F);
+		}
+
+		if(!this.onGround && this.motionY < 0.0D) {
+			this.motionY *= 0.6D;
+		}
+
+		for(int var1 = 0; var1 < 2; ++var1) {
+			this.worldObj.spawnParticle("largesmoke", this.posX + (this.rand.nextDouble() - 0.5D) * (double)this.width, this.posY + this.rand.nextDouble() * (double)this.height, this.posZ + (this.rand.nextDouble() - 0.5D) * (double)this.width, 0.0D, 0.0D, 0.0D);
+		}
+
+		super.onLivingUpdate();
+	}
+
+	protected void attackEntity(Entity var1, float var2) {
+		if(this.attackTime <= 0 && var2 < 2.0F && var1.boundingBox.maxY > this.boundingBox.minY && var1.boundingBox.minY < this.boundingBox.maxY) {
+			this.attackTime = 20;
+			var1.attackEntityFrom(DamageSource.func_35525_a(this), this.attackStrength);
+		} else if(var2 < 30.0F) {
+			double var3 = var1.posX - this.posX;
+			double var5 = var1.boundingBox.minY + (double)(var1.height / 2.0F) - (this.posY + (double)(this.height / 2.0F));
+			double var7 = var1.posZ - this.posZ;
+			if(this.attackTime == 0) {
+				++this.field_40152_d;
+				if(this.field_40152_d == 1) {
+					this.attackTime = 60;
+					this.func_40150_a(true);
+				} else if(this.field_40152_d <= 4) {
+					this.attackTime = 6;
+				} else {
+					this.attackTime = 100;
+					this.field_40152_d = 0;
+					this.func_40150_a(false);
+				}
+
+				if(this.field_40152_d > 1) {
+					float var9 = MathHelper.sqrt_float(var2) * 0.5F;
+					this.worldObj.playAuxSFXAtEntity((EntityPlayer)null, 1009, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
+
+					for(int var10 = 0; var10 < 1; ++var10) {
+						EntitySmallFireball var11 = new EntitySmallFireball(this.worldObj, this, var3 + this.rand.nextGaussian() * (double)var9, var5, var7 + this.rand.nextGaussian() * (double)var9);
+						var11.posY = this.posY + (double)(this.height / 2.0F) + 0.5D;
+						this.worldObj.entityJoinedWorld(var11);
+					}
+				}
+			}
+
+			this.rotationYaw = (float)(Math.atan2(var7, var3) * 180.0D / (double)((float)Math.PI)) - 90.0F;
+			this.hasAttacked = true;
+		}
+
+	}
+
+	protected void fall(float var1) {
+	}
+
+	public void writeEntityToNBT(NBTTagCompound var1) {
+		super.writeEntityToNBT(var1);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound var1) {
+		super.readEntityFromNBT(var1);
+	}
+
+	protected int getDropItemId() {
+		return Item.blazeRod.shiftedIndex;
+	}
+
+	public boolean isBurning() {
+		return this.func_40151_ac();
+	}
+
+	protected void dropFewItems(boolean var1, int var2) {
+		if(var1) {
+			int var3 = this.rand.nextInt(2 + var2);
+
+			for(int var4 = 0; var4 < var3; ++var4) {
+				this.dropItem(Item.blazeRod.shiftedIndex, 1);
+			}
+		}
+
+	}
+
+	public boolean func_40151_ac() {
+		return (this.dataWatcher.getWatchableObjectByte(16) & 1) != 0;
+	}
+
+	public void func_40150_a(boolean var1) {
+		byte var2 = this.dataWatcher.getWatchableObjectByte(16);
+		if(var1) {
+			var2 = (byte)(var2 | 1);
+		} else {
+			var2 &= -2;
+		}
+
+		this.dataWatcher.updateObject(16, Byte.valueOf(var2));
+	}
+
+	protected boolean func_40147_Y() {
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenEnd.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+public class BiomeGenEnd extends BiomeGenBase {
+	public BiomeGenEnd(int var1) {
+		super(var1);
+		this.spawnableMonsterList.clear();
+		this.spawnableCreatureList.clear();
+		this.spawnableWaterCreatureList.clear();
+	}
+
+	public int getSkyColorByTemp(float var1) {
+		return 0;
+	}
+}
--- /dev/null
+++ net/minecraft/src/ItemEyeOfEnder.java
@@ -1,0 +1,18 @@
+package net.minecraft.src;
+
+public class ItemEyeOfEnder extends Item {
+	protected ItemEyeOfEnder(int var1) {
+		super(var1);
+	}
+
+	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
+		if (var3.getBlockId(var4, var5, var6) == Block.chargedPortalFrame.blockID && var3.getBlockMetadata(var4, var5, var6) == 0) {
+			var3.playSoundEffect((double)var4 + 0.5D, (double)var5 + 0.5D, (double)var6 + 0.5D, "fire.ignite", 1.0F, itemRand.nextFloat() * 0.4F + 0.8F);
+			var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.chargedPortalFrame.blockID, 1);
+			var1.stackSize--;
+			return true;
+		}
+
+		return false;
+	}
+}
--- net/minecraft/src/BlockFurnace.java
+++ net/minecraft/src/BlockFurnace.java
@@ -95,6 +95,11 @@
 		} else {
 			TileEntityFurnace var6 = (TileEntityFurnace)var1.getBlockTileEntity(var2, var3, var4);
 			if(var6 != null) {
+				if (var6.splitStacks()) {
+					var1.playSoundEffect(var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, "random.explode", 4.0F, (1.0F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.2F) * 0.7F);
+					var1.spawnParticle("hugeexplosion", var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, 0.0D, 0.0D, 0.0D);
+				}
+
 				var5.displayGUIFurnace(var6);
 			}
 
@@ -149,6 +154,11 @@
 		if(!keepFurnaceInventory) {
 			TileEntityFurnace var5 = (TileEntityFurnace)var1.getBlockTileEntity(var2, var3, var4);
 			if(var5 != null) {
+				if (var5.splitStacks()) {
+					var1.playSoundEffect(var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, "random.explode", 4.0F, (1.0F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.2F) * 0.7F);
+					var1.spawnParticle("hugeexplosion", var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, 0.0D, 0.0D, 0.0D);
+				}
+
 				for(int var6 = 0; var6 < var5.getSizeInventory(); ++var6) {
 					ItemStack var7 = var5.getStackInSlot(var6);
 					if(var7 != null) {
--- net/minecraft/src/SoundManager.java
+++ net/minecraft/src/SoundManager.java
@@ -1,7 +1,10 @@
 package net.minecraft.src;
 
 import java.io.File;
+import java.net.MalformedURLException;
 import java.util.Random;
+
+import net.minecraft.client.Minecraft;
 import paulscode.sound.SoundSystem;
 import paulscode.sound.SoundSystemConfig;
 import paulscode.sound.codecs.CodecJOrbis;
@@ -18,6 +21,7 @@
 	private static boolean loaded = false;
 	private Random rand = new Random();
 	private int ticksBeforeMusic = this.rand.nextInt(12000);
+	private boolean officeLoopStart = true;
 
 	public void loadSoundSettings(GameSettings var1) {
 		this.soundPoolStreaming.field_1657_b = false;
@@ -59,8 +63,15 @@
 		if(loaded) {
 			if(this.options.musicVolume == 0.0F) {
 				sndSystem.stop("BgMusic");
+				sndSystem.stop("OfficeMusic");
+				sndSystem.stop("BossMusic");
+				sndSystem.stop("ControlPanelMusic");
+				this.officeLoopStart = true;
 			} else {
 				sndSystem.setVolume("BgMusic", this.options.musicVolume);
+				sndSystem.setVolume("OfficeMusic", this.options.musicVolume);
+				sndSystem.setVolume("BossMusic", this.options.musicVolume);
+				sndSystem.setVolume("ControlPanelMusic", this.options.musicVolume);
 			}
 		}
 
@@ -88,6 +99,15 @@
 	public void playRandomMusicIfReady() {
 		if(loaded && this.options.musicVolume != 0.0F) {
 			if(!sndSystem.playing("BgMusic") && !sndSystem.playing("streaming")) {
+				if (sndSystem.playing("OfficeMusic")) {
+					sndSystem.stop("OfficeMusic");
+					this.officeLoopStart = true;
+				}
+
+				if (sndSystem.playing("BossMusic")) {
+					sndSystem.stop("BossMusic");
+				}
+
 				if(this.ticksBeforeMusic > 0) {
 					--this.ticksBeforeMusic;
 					return;
@@ -95,9 +115,20 @@
 
 				SoundPoolEntry var1 = this.soundPoolMusic.getRandomSound();
 				if(var1 != null) {
+					if (var1.soundName.contains("calm4") && !Personalization.doEarlyChaos()) {
+						return;
+					}
+
 					this.ticksBeforeMusic = this.rand.nextInt(12000) + 12000;
 					sndSystem.backgroundMusic("BgMusic", var1.soundUrl, var1.soundName, false);
 					sndSystem.setVolume("BgMusic", this.options.musicVolume);
+					if ((Personalization.preset == null || Personalization.preset.isEmpty())
+							&& Personalization.chaosEffects || this.options.mc.thePlayer.dimension == 2) {
+						sndSystem.setPitch("BgMusic", this.options.mc.thePlayer.dimension == 2 ? 0.5F
+								: 1.0F + MathHelper.lerp(rand.nextFloat() - 0.5F,
+										Math.signum(Personalization.entropy) - 0.5F, Math.abs(Personalization.entropy))
+										* MathHelper.lerp(Personalization.chaos / 3.0F, 1.0F, Math.abs(Personalization.entropy)));
+					}
 					sndSystem.play("BgMusic");
 				}
 			}
@@ -150,6 +181,32 @@
 		}
 	}
 
+	public void playStreamingFile(File var1, float var2, float var3, float var4, float var5, float var6) {
+		if(loaded && this.options.soundVolume != 0.0F) {
+			String var7 = "streaming";
+			if(sndSystem.playing("streaming")) {
+				sndSystem.stop("streaming");
+			}
+
+			if(var1 != null && var5 >= 0.0F) {
+				if(sndSystem.playing("BgMusic")) {
+					sndSystem.stop("BgMusic");
+				}
+
+				float var9 = 16.0F;
+				try {
+					sndSystem.newStreamingSource(true, var7, var1.toURI().toURL(), var1.getName(), false, var2, var3, var4, 2, var9 * 4.0F);
+				} catch (MalformedURLException e) {
+					System.err.println("Failed to play file \"" + var1 + "\"!");
+					e.printStackTrace();
+					return;
+				}
+				sndSystem.setVolume(var7, 0.5F * this.options.soundVolume);
+				sndSystem.play(var7);
+			}
+		}
+	}
+
 	public void playSound(String var1, float var2, float var3, float var4, float var5, float var6) {
 		if(loaded && this.options.soundVolume != 0.0F) {
 			SoundPoolEntry var7 = this.soundPoolSounds.getRandomSoundFromSoundPool(var1);
@@ -178,6 +235,8 @@
 		if(loaded && this.options.soundVolume != 0.0F) {
 			SoundPoolEntry var4 = this.soundPoolSounds.getRandomSoundFromSoundPool(var1);
 			if(var4 != null) {
+				sndSystem.setListenerPosition(0, 0, 0);
+				sndSystem.setListenerOrientation(0, 1, 0, 0, 1, 0);
 				this.latestSoundID = (this.latestSoundID + 1) % 256;
 				String var5 = "sound_" + this.latestSoundID;
 				sndSystem.newSource(false, var5, var4.soundUrl, var4.soundName, false, 0.0F, 0.0F, 0.0F, 0, 0.0F);
@@ -185,12 +244,132 @@
 					var2 = 1.0F;
 				}
 
-				var2 *= 0.25F;
+				if (var2 < 0.0F) {
+					var2 *= -1.0F;
+				} else {
+					var2 *= 0.25F;
+				}
 				sndSystem.setPitch(var5, var3);
 				sndSystem.setVolume(var5, var2 * this.options.soundVolume);
 				sndSystem.play(var5);
 			}
 
+		}
+	}
+
+	public void playOfficeMusic() {
+		if(loaded && this.options.musicVolume != 0.0F) {
+			if(!sndSystem.playing("OfficeMusic")) {
+				if (sndSystem.playing("BgMusic")) {
+					sndSystem.stop("BgMusic");
+				}
+
+				File file = new File(Minecraft.getMinecraftDir(), "/resources/streaming/offices"
+						+ (this.officeLoopStart ? "_intro.ogg" : ".ogg"));
+
+				try {
+					sndSystem.backgroundMusic("OfficeMusic", file.toURI().toURL(), file.getName(), !this.officeLoopStart);
+					sndSystem.setVolume("OfficeMusic", this.options.musicVolume);
+					sndSystem.play("OfficeMusic");
+					this.officeLoopStart = false;
+					this.ticksBeforeMusic = 0;
+				} catch (MalformedURLException e) {
+					e.printStackTrace();
+				}
+			}
+
+		}
+	}
+
+	public void playBossMusic() {
+		if(loaded && this.options.musicVolume != 0.0F) {
+			if(!sndSystem.playing("BossMusic")) {
+				if (sndSystem.playing("OfficeMusic")) {
+					sndSystem.stop("OfficeMusic");
+					this.officeLoopStart = true;
+				}
+
+				if (sndSystem.playing("BgMusic")) {
+					sndSystem.stop("BgMusic");
+				}
+
+				File file = new File(Minecraft.getMinecraftDir(), "/resources/music/calm4.ogg");
+
+				try {
+					sndSystem.backgroundMusic("BossMusic", file.toURI().toURL(), file.getName(), true);
+					sndSystem.setVolume("BossMusic", this.options.musicVolume * 0.5F);
+					sndSystem.setPitch("BossMusic", 1.0F);
+					sndSystem.play("BossMusic");
+				} catch (MalformedURLException e) {
+					e.printStackTrace();
+				}
+			}
+
+			float pitch = 1.0F;
+			EntityLiving boss = this.options.mc.thePlayer.boss;
+			if (boss != null) {
+				if (boss.health <= 0) {
+					pitch = 0.5F;
+				} else if (boss instanceof EntityNotch) {
+					pitch = 1.5F;
+				} else if (boss instanceof EntityJeb) {
+					pitch = 1.2F;
+				}
+			}
+
+			sndSystem.setPitch("BossMusic", pitch);
+		}
+	}
+
+	public void playControlPanelMusic() {
+		if(loaded && this.options.musicVolume != 0.0F) {
+			if(!sndSystem.playing("ControlPanelMusic")) {
+				this.stopAllMusic();
+				File file = new File(Minecraft.getMinecraftDir(), "/resources/streaming/hotel.ogg");
+
+				try {
+					sndSystem.backgroundMusic("ControlPanelMusic", file.toURI().toURL(), file.getName(), true);
+					sndSystem.setVolume("ControlPanelMusic", this.options.musicVolume);
+					sndSystem.play("ControlPanelMusic");
+				} catch (MalformedURLException e) {
+					e.printStackTrace();
+				}
+			}
+		}
+	}
+
+	public void playSecretMusic(float pitch) {
+		if(loaded && this.options.musicVolume != 0.0F) {
+			if(!sndSystem.playing("ControlPanelMusic")) {
+				this.stopAllMusic();
+				File file = new File(Minecraft.getMinecraftDir(), "/resources/streaming/noway.ogg");
+
+				try {
+					sndSystem.backgroundMusic("ControlPanelMusic", file.toURI().toURL(), file.getName(), true);
+					sndSystem.setVolume("ControlPanelMusic", this.options.musicVolume * 0.5F);
+					sndSystem.setPitch("ControlPanelMusic", pitch);
+					sndSystem.play("ControlPanelMusic");
+				} catch (MalformedURLException e) {
+					e.printStackTrace();
+				}
+			}
+		}
+	}
+
+	public void stopAllMusic() {
+		if (loaded) {
+			sndSystem.stop("BgMusic");
+			sndSystem.stop("OfficeMusic");
+			sndSystem.stop("BossMusic");
+			sndSystem.stop("ControlPanelMusic");
+		}
+	}
+
+	public void stopAllSounds() {
+		if (loaded) {
+			for (int i = 0; i < 256; i++) {
+				sndSystem.stop("sound_" + i);
+			}
 		}
 	}
 }
--- net/minecraft/src/SlotCrafting.java
+++ net/minecraft/src/SlotCrafting.java
@@ -15,6 +15,7 @@
 	}
 
 	public void onPickupFromSlot(ItemStack var1) {
+		Personalization.betaBias += 2.5F;
 		var1.onCrafting(this.thePlayer.worldObj, this.thePlayer);
 		if(var1.itemID == Block.workbench.blockID) {
 			this.thePlayer.addStat(AchievementList.buildWorkBench, 1);
--- net/minecraft/src/GuiFurnace.java
+++ net/minecraft/src/GuiFurnace.java
@@ -16,9 +16,9 @@
 	}
 
 	protected void drawGuiContainerBackgroundLayer(float var1) {
-		int var2 = this.mc.renderEngine.getTexture("/gui/furnace.png");
+		int var2 = this.game.renderEngine.getTexture("/gui/furnace.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(var2);
+		this.game.renderEngine.bindTexture(var2);
 		int var3 = (this.width - this.xSize) / 2;
 		int var4 = (this.height - this.ySize) / 2;
 		this.drawTexturedModalRect(var3, var4, 0, 0, this.xSize, this.ySize);
--- /dev/null
+++ net/minecraft/src/EntityOfficeNotch.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+public class EntityOfficeNotch extends EntityLiving {
+	public EntityOfficeNotch(World var1) {
+		super(var1);
+	}
+
+	public boolean attackEntityFrom(DamageSource var1, int var2) {
+		return false;
+	}
+
+	public void onLivingUpdate() {
+		EntityPlayer player = this.worldObj.getClosestPlayer(this.posX, this.posY, this.posZ, 16.0D);
+		if (player != null && player.posY >= this.posY - 0.1D) {
+			player.staticStrength = 1.0F - Math.min(Math.max(player.getDistanceToEntity(this) - 2.0F, 0.0F) / 16.0F, 1.0F);
+			this.faceEntity(player, 30.0F, 30.0F);
+		}
+		super.onLivingUpdate();
+	}
+
+	public boolean canBePushed() {
+		return false;
+	}
+
+	public String getEntityTexture() {
+		return "/mob/notch.png";
+	}
+
+	protected boolean canDespawn() {
+		return false;
+	}
+
+	public boolean isInRangeToRenderDist(double var1) {
+		return true;
+	}
+}
--- net/minecraft/src/EntityWolf.java
+++ net/minecraft/src/EntityWolf.java
@@ -20,6 +20,10 @@
 		this.health = 8;
 	}
 
+	public int getMaxHealth() {
+		return this.isWolfTamed() ? 20 : 8;
+	}
+
 	protected void entityInit() {
 		super.entityInit();
 		this.dataWatcher.addObject(16, Byte.valueOf((byte)0));
--- net/minecraft/src/ColorizerFoliage.java
+++ net/minecraft/src/ColorizerFoliage.java
@@ -8,10 +8,20 @@
 	}
 
 	public static int getFoliageColor(double var0, double var2) {
+		if (Personalization.pe7env) {
+			return 0x27ff1a;
+		} else if (Personalization.pe8env) {
+			return 0x47b118;
+		}
+
+		double eMul = Personalization.entropy > 0.0F ? 0.35D : 0.5D;
+		var0 = MathHelper.clamp((var0 - 0.5D) * (1.0D - Personalization.entropy * eMul) + 0.5D, 0.0D, 1.0D);
+		var2 = MathHelper.clamp((var2 - 0.5D) * (1.0D - Personalization.entropy * eMul) + 0.5D, 0.0D, 1.0D);
+
 		var2 *= var0;
 		int var4 = (int)((1.0D - var0) * 255.0D);
 		int var5 = (int)((1.0D - var2) * 255.0D);
-		return foliageBuffer[var5 << 8 | var4];
+		return ColorizerGrass.frostify(foliageBuffer[var5 << 8 | var4], var0);
 	}
 
 	public static int getFoliageColorPine() {
--- net/minecraft/src/GuiDispenser.java
+++ net/minecraft/src/GuiDispenser.java
@@ -13,9 +13,9 @@
 	}
 
 	protected void drawGuiContainerBackgroundLayer(float var1) {
-		int var2 = this.mc.renderEngine.getTexture("/gui/trap.png");
+		int var2 = this.game.renderEngine.getTexture("/gui/trap.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(var2);
+		this.game.renderEngine.bindTexture(var2);
 		int var3 = (this.width - this.xSize) / 2;
 		int var4 = (this.height - this.ySize) / 2;
 		this.drawTexturedModalRect(var3, var4, 0, 0, this.xSize, this.ySize);
--- /dev/null
+++ net/minecraft/src/GuiPresetSlot.java
@@ -1,0 +1,48 @@
+package net.minecraft.src;
+
+public class GuiPresetSlot extends GuiSlot {
+	private final GuiPersonalization parentGui;
+	public int selection;
+
+	public GuiPresetSlot(GuiPersonalization var1) {
+		super(var1.game, var1.width, var1.height, 32, var1.height - 32, 16);
+		this.parentGui = var1;
+		try {
+			this.selection = Personalization.getPresets().indexOf(Personalization.preset);
+			if (this.selection < 0) {
+				this.selection = 0;
+			}
+		} catch (Exception e) {
+			// Don't care
+		}
+	}
+
+	protected int getSize() {
+		return Personalization.getPresets().size();
+	}
+
+	protected void elementClicked(int var1, boolean var2) {
+		if (var1 < 0 || var1 > Personalization.getPresets().size()) return;
+		selection = var1;
+	}
+
+	protected boolean isSelected(int var1) {
+		return var1 == this.selection;
+	}
+
+	protected void drawBackground() {
+		this.parentGui.drawControlPanelBackground();
+	}
+
+	protected boolean overrideBackground() {
+		return true;
+	}
+
+	protected void drawSlot(int var1, int var2, int var3, int var4, Tessellator var5) {
+		String preset = Personalization.getPresets().get(var1);
+		String name = Personalization.getPresetName(preset);
+		int color = preset.isEmpty() ? 0xFF5555 : 0xFFFFFF;
+
+		this.parentGui.drawString(this.parentGui.fontRenderer, name, var2 + 2, var3 + 2, color);
+	}
+}
--- net/minecraft/src/EntityLiving.java
+++ net/minecraft/src/EntityLiving.java
@@ -3,6 +3,7 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Random;
 
 public abstract class EntityLiving extends Entity {
 	public int heartsHalvesLife = 20;
@@ -27,7 +28,7 @@
 	public float field_35168_bw = 0.02F;
 	public float prevSwingProgress;
 	public float swingProgress;
-	public int health = 10;
+	public int health;
 	public int prevHealth;
 	private int livingSoundTime;
 	public int hurtTime;
@@ -69,6 +70,7 @@
 
 	public EntityLiving(World var1) {
 		super(var1);
+		this.health = getMaxHealth();
 		this.preventEntitySpawning = true;
 		this.field_9363_r = (float)(Math.random() + 1.0D) * 0.01F;
 		this.setPosition(this.posX, this.posY, this.posZ);
@@ -163,28 +165,7 @@
 		}
 
 		if(this.health <= 0) {
-			++this.deathTime;
-			if(this.deathTime > 20) {
-				if(this.field_34905_c > 0 || this.func_35163_av()) {
-					var1 = this.a(this.field_34904_b);
-
-					while(var1 > 0) {
-						int var8 = EntityXPOrb.func_35121_b(var1);
-						var1 -= var8;
-						this.worldObj.entityJoinedWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, var8));
-					}
-				}
-
-				this.onEntityDeath();
-				this.setEntityDead();
-
-				for(var1 = 0; var1 < 20; ++var1) {
-					double var9 = this.rand.nextGaussian() * 0.02D;
-					double var10 = this.rand.nextGaussian() * 0.02D;
-					double var6 = this.rand.nextGaussian() * 0.02D;
-					this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, var9, var10, var6);
-				}
-			}
+			this.func_40120_m_();
 		}
 
 		if(this.field_34905_c > 0) {
@@ -204,6 +185,14 @@
 		return this.field_35171_bJ;
 	}
 
+	protected int getXpSpammed(EntityPlayer var1) {
+		return 10;
+	}
+
+	protected int getXpSpamGroup(int var1) {
+		return 1;
+	}
+
 	protected boolean func_35163_av() {
 		return false;
 	}
@@ -342,8 +331,8 @@
 	public void heal(int var1) {
 		if(this.health > 0) {
 			this.health += var1;
-			if(this.health > 20) {
-				this.health = 20;
+			if(this.health > this.getMaxHealth()) {
+				this.health = this.getMaxHealth();
 			}
 
 			this.heartsLife = this.heartsHalvesLife / 2;
@@ -538,64 +527,123 @@
 				this.motionY = (double)0.3F;
 			}
 		} else {
-			float var8 = 0.91F;
-			if(this.onGround) {
-				var8 = 546.0F * 0.1F * 0.1F * 0.1F;
-				int var4 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
-				if(var4 > 0) {
-					var8 = Block.blocksList[var4].slipperiness * 0.91F;
-				}
-			}
-
-			float var9 = 0.16277136F / (var8 * var8 * var8);
-			float var5 = this.onGround ? this.field_35169_bv * var9 : this.field_35168_bw;
-			this.moveFlying(var1, var2, var5);
-			var8 = 0.91F;
-			if(this.onGround) {
-				var8 = 546.0F * 0.1F * 0.1F * 0.1F;
-				int var6 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
-				if(var6 > 0) {
-					var8 = Block.blocksList[var6].slipperiness * 0.91F;
-				}
-			}
-
-			if(this.isOnLadder()) {
-				float var11 = 0.15F;
-				if(this.motionX < (double)(-var11)) {
-					this.motionX = (double)(-var11);
-				}
-
-				if(this.motionX > (double)var11) {
-					this.motionX = (double)var11;
-				}
-
-				if(this.motionZ < (double)(-var11)) {
-					this.motionZ = (double)(-var11);
-				}
-
-				if(this.motionZ > (double)var11) {
-					this.motionZ = (double)var11;
-				}
-
-				this.fallDistance = 0.0F;
-				if(this.motionY < -0.15D) {
-					this.motionY = -0.15D;
-				}
-
-				if(this.isSneaking() && this.motionY < 0.0D) {
-					this.motionY = 0.0D;
-				}
-			}
-
-			this.moveEntity(this.motionX, this.motionY, this.motionZ);
-			if(this.isCollidedHorizontally && this.isOnLadder()) {
-				this.motionY = 0.2D;
-			}
-
-			this.motionY -= 0.08D;
-			this.motionY *= (double)0.98F;
-			this.motionX *= (double)var8;
-			this.motionZ *= (double)var8;
+			if (Personalization.longJumping) {
+				float slip = 0.6F;
+				float var8 = 0.91F;
+				if(this.onGround) {
+					var8 = 546.0F * 0.1F * 0.1F * 0.1F;
+					int var4 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
+					if(var4 > 0) {
+						slip = Block.blocksList[var4].slipperiness;
+						var8 = Block.blocksList[var4].slipperiness * 0.91F;
+					}
+				}
+
+				float var9 = 0.16277136F / (var8 * var8 * var8);
+				float var5 = this.onGround ? this.field_35169_bv * var9 : this.field_35168_bw;
+				this.moveFlying(var1, var2, var5);
+
+				if(this.isOnLadder()) {
+					float var10 = 0.15F;
+					if(this.motionX < (double)(-var10)) {
+						this.motionX = (double)(-var10);
+					}
+
+					if(this.motionX > (double)var10) {
+						this.motionX = (double)var10;
+					}
+
+					if(this.motionZ < (double)(-var10)) {
+						this.motionZ = (double)(-var10);
+					}
+
+					if(this.motionZ > (double)var10) {
+						this.motionZ = (double)var10;
+					}
+
+					this.fallDistance = 0.0F;
+					if(this.motionY < -0.15D) {
+						this.motionY = -0.15D;
+					}
+
+					if(this.isSneaking() && this.motionY < 0.0D) {
+						this.motionY = 0.0D;
+					}
+				}
+
+				this.moveEntity(this.motionX, this.motionY, this.motionZ);
+				if(this.isCollidedHorizontally && this.isOnLadder()) {
+					this.motionY = 0.2D;
+				}
+
+				this.motionZ *= (double)0.91F;
+				this.motionY *= (double)0.98F;
+				this.motionX *= (double)0.91F;
+				this.motionY -= 0.08D;
+				if(this.onGround) {
+					this.motionZ *= (double)slip;
+					this.motionX *= (double)slip;
+				}
+			} else {
+				float var8 = 0.91F;
+				if(this.onGround) {
+					var8 = 546.0F * 0.1F * 0.1F * 0.1F;
+					int var4 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
+					if(var4 > 0) {
+						var8 = Block.blocksList[var4].slipperiness * 0.91F;
+					}
+				}
+
+				float var9 = 0.16277136F / (var8 * var8 * var8);
+				float var5 = this.onGround ? this.field_35169_bv * var9 : this.field_35168_bw;
+				this.moveFlying(var1, var2, var5);
+				var8 = 0.91F;
+				if(this.onGround) {
+					var8 = 546.0F * 0.1F * 0.1F * 0.1F;
+					int var6 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
+					if(var6 > 0) {
+						var8 = Block.blocksList[var6].slipperiness * 0.91F;
+					}
+				}
+
+				if(this.isOnLadder()) {
+					float var11 = 0.15F;
+					if(this.motionX < (double)(-var11)) {
+						this.motionX = (double)(-var11);
+					}
+
+					if(this.motionX > (double)var11) {
+						this.motionX = (double)var11;
+					}
+
+					if(this.motionZ < (double)(-var11)) {
+						this.motionZ = (double)(-var11);
+					}
+
+					if(this.motionZ > (double)var11) {
+						this.motionZ = (double)var11;
+					}
+
+					this.fallDistance = 0.0F;
+					if(this.motionY < -0.15D) {
+						this.motionY = -0.15D;
+					}
+
+					if(this.isSneaking() && this.motionY < 0.0D) {
+						this.motionY = 0.0D;
+					}
+				}
+
+				this.moveEntity(this.motionX, this.motionY, this.motionZ);
+				if(this.isCollidedHorizontally && this.isOnLadder()) {
+					this.motionY = 0.2D;
+				}
+
+				this.motionY -= 0.08D;
+				this.motionY *= (double)0.98F;
+				this.motionX *= (double)var8;
+				this.motionZ *= (double)var8;
+			}
 		}
 
 		this.field_705_Q = this.field_704_R;
@@ -643,7 +691,7 @@
 	public void readEntityFromNBT(NBTTagCompound var1) {
 		this.health = var1.getShort("Health");
 		if(!var1.hasKey("Health")) {
-			this.health = 10;
+			this.health = getMaxHealth();
 		}
 
 		this.hurtTime = var1.getShort("HurtTime");
@@ -1039,5 +1087,35 @@
 		}
 
 		return var1;
+	}
+
+	public int getMaxHealth() {
+		return 10;
+	}
+
+	protected void func_40120_m_() {
+		++this.deathTime;
+		if(this.deathTime > 20) {
+			int var1;
+			if((this.field_34905_c > 0 || this.func_35163_av()) && Personalization.experience) {
+				var1 = Personalization.xpSpam ? this.getXpSpammed(this.field_34904_b) : this.a(this.field_34904_b);
+
+				while(var1 > 0) {
+					int var8 = Personalization.xpSpam ? this.getXpSpamGroup(var1) : EntityXPOrb.func_35121_b(var1);
+					var1 -= var8;
+					this.worldObj.entityJoinedWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, var8));
+				}
+			}
+
+			this.onEntityDeath();
+			this.setEntityDead();
+
+			for(var1 = 0; var1 < 20; ++var1) {
+				double var9 = this.rand.nextGaussian() * 0.02D;
+				double var10 = this.rand.nextGaussian() * 0.02D;
+				double var6 = this.rand.nextGaussian() * 0.02D;
+				this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, var9, var10, var6);
+			}
+		}
 	}
 }
--- net/minecraft/src/DamageSource.java
+++ net/minecraft/src/DamageSource.java
@@ -13,6 +13,7 @@
 	public static DamageSource field_35547_j = (new DamageSource("generic")).func_35528_f();
 	public static DamageSource field_35548_k = new DamageSource("explosion");
 	public static DamageSource field_35545_l = (new DamageSource("magic")).func_35528_f();
+	public static DamageSource field_35536_t = (new DamageSource("dehydration")).func_35528_f();
 	private boolean field_35543_n = false;
 	private boolean field_35544_o = false;
 	private float field_35551_p = 0.3F;
--- /dev/null
+++ net/minecraft/src/BiomeGenAlpha.java
@@ -1,0 +1,57 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenAlpha extends BiomeGenBase {
+	private NoiseGeneratorOctaves forestNoise;
+	private long forestSeed;
+
+	protected BiomeGenAlpha(int var1) {
+		super(var1);
+		this.decorator.grass = 0;
+		this.decorator.sand = 0;
+		this.decorator.sand2 = 0;
+		this.decorator.clay = 0;
+	}
+
+	public void func_35477_a(World var1, Random var2, int var3, int var4) {
+		if (this.forestNoise == null || this.forestSeed != var1.getRandomSeed()) {
+			this.forestSeed = var1.getRandomSeed();
+			Random forestRandom = new Random(this.forestSeed);
+
+			for (int i = 0; i < 16 + 16 + 8 + 4 + 4 + 10 + 16; i++) {
+				for (int j = 0; j < 3; j++) forestRandom.nextDouble();
+				for (int j = 0; j < 256; j++) forestRandom.nextInt();
+			}
+
+			this.forestNoise = new NoiseGeneratorOctaves(forestRandom, 8);
+		}
+
+		this.decorator.trees = (int)((this.forestNoise.func_806_a((double)var3 * 0.5D, (double)var4 * 0.5D) / 8.0D + var2.nextDouble() * 4.0D + 4.0D) / 3.0D);
+		if (this.decorator.trees < 0) {
+			this.decorator.trees = 0;
+		}
+
+		super.func_35477_a(var1, var2, var3, var4);
+	}
+
+	public int getGrassColor(double temp, double rain, int x, int z) {
+		if (Personalization.pe7env) {
+			return 0x339933;
+		} else if (Personalization.pe8env) {
+			return 0x87cd49;
+		}
+
+		return 0x9dff5c;
+	}
+
+	public int getFoliageColor(double temp, double rain, int x, int z) {
+		if (Personalization.pe7env) {
+			return 0x27ff1a;
+		} else if (Personalization.pe8env) {
+			return 0x47b118;
+		}
+
+		return 0x55ff3f;
+	}
+}
--- net/minecraft/src/MapGenRavine.java
+++ net/minecraft/src/MapGenRavine.java
@@ -6,7 +6,7 @@
 	private float[] field_35627_a = new float[1024];
 
 	protected void func_35626_a(long var1, int var3, int var4, byte[] var5, double var6, double var8, double var10, float var12, float var13, float var14, int var15, int var16, double var17) {
-		Random var19 = new Random(var1);
+		Random var19 = Personalization.random(var1);
 		double var20 = (double)(var3 * 16 + 8);
 		double var22 = (double)(var4 * 16 + 8);
 		float var24 = 0.0F;
@@ -97,7 +97,7 @@
 									for(int var43 = var37 + 1; !var58 && var43 >= var56 - 1; --var43) {
 										var10000 = var41 * 16 + var42;
 										this.field_35625_d.getClass();
-										var44 = var10000 * 128 + var43;
+										var44 = var10000 * 512 + var43;
 										if(var43 >= 0) {
 											this.field_35625_d.getClass();
 											if(var43 < 128) {
@@ -122,7 +122,7 @@
 										double var45 = ((double)(var44 + var4 * 16) + 0.5D - var10) / var54;
 										var10000 = var41 * 16 + var44;
 										this.field_35625_d.getClass();
-										int var47 = var10000 * 128 + var37;
+										int var47 = var10000 * 512 + var37;
 										boolean var48 = false;
 										if(var59 * var59 + var45 * var45 < 1.0D) {
 											for(int var49 = var37 - 1; var49 >= var56; --var49) {
--- net/minecraft/src/BlockDoor.java
+++ net/minecraft/src/BlockDoor.java
@@ -182,8 +182,7 @@
 	}
 
 	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		var1.getClass();
-		return var3 >= 128 - 1 ? false : var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
+		return var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
 	}
 
 	public static boolean isOpen(int var0) {
--- net/minecraft/src/BlockVine.java
+++ net/minecraft/src/BlockVine.java
@@ -139,17 +139,41 @@
 	}
 
 	public int func_35274_i() {
+		if (Personalization.alphaTextures) return 0xFFFFFF;
 		return ColorizerFoliage.func_31073_c();
 	}
 
 	public int getRenderColor(int var1) {
+		if (Personalization.alphaTextures) return 0xFFFFFF;
 		return ColorizerFoliage.func_31073_c();
 	}
 
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-		double var5 = (double)var1.getWorldChunkManager().func_35554_b(var2, var4);
-		double var7 = (double)var1.getWorldChunkManager().func_35558_c(var2, var4);
-		return ColorizerFoliage.getFoliageColor(var5, var7);
+		if (Personalization.alphaTextures) return 0xFFFFFF;
+
+		if (Personalization.smoothBiomes) {
+			WorldChunkManager wcm = var1.getWorldChunkManager();
+			int var5 = 0;
+			int var6 = 0;
+			int var7 = 0;
+
+			for(int var8 = -1; var8 <= 1; ++var8) {
+				for(int var9 = -1; var9 <= 1; ++var9) {
+					double t = wcm.func_35554_b(var2 + var9, var4 + var8);
+					double r = wcm.func_35558_c(var2 + var9, var4 + var8);
+					int var10 = var1.getWorldChunkManager().getBiomeGenAt(var2 + var9, var4 + var8).getFoliageColor(t, r, var2 + var9, var4 + var8);
+					var5 += (var10 & 16711680) >> 16;
+					var6 += (var10 & '\uff00') >> 8;
+					var7 += var10 & 255;
+				}
+			}
+
+			return (var5 / 9 & 255) << 16 | (var6 / 9 & 255) << 8 | var7 / 9 & 255;
+		} else {
+			double var5 = (double)var1.getWorldChunkManager().func_35554_b(var2, var4);
+			double var7 = (double)var1.getWorldChunkManager().func_35558_c(var2, var4);
+			return var1.getWorldChunkManager().getBiomeGenAt(var2, var4).getFoliageColor(var5, var7, var2, var4);
+		}
 	}
 
 	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
@@ -190,8 +214,7 @@
 			int var12;
 			int var13;
 			if(var10 == 1) {
-				var1.getClass();
-				if(var3 < 128 - 1 && var1.isAirBlock(var2, var3 + 1, var4)) {
+				if(var1.isAirBlock(var2, var3 + 1, var4)) {
 					if(var8) {
 						return;
 					}
--- net/minecraft/src/BlockStone.java
+++ net/minecraft/src/BlockStone.java
@@ -1,13 +1,23 @@
 package net.minecraft.src;
 
+import java.awt.*;
 import java.util.Random;
 
 public class BlockStone extends Block {
+	private static final NoiseGeneratorSimplexOctaves colorNoise = new NoiseGeneratorSimplexOctaves(new Random("colourful rainbows WOW!".hashCode()), 4);
+
 	public BlockStone(int var1, int var2) {
 		super(var1, var2, Material.rock);
 	}
 
 	public int idDropped(int var1, Random var2) {
-		return Block.cobblestone.blockID;
+		return this.blockID == 1 ? Block.cobblestone.blockID : this.blockID;
+	}
+
+	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
+		if (var1.getWorldChunkManager().hasStoneGradient()) {
+			return Color.getHSBColor((float)colorNoise.func_151601_a(var2 * 0.001F, var4 * 0.001F), 0.1F, Math.min((var3 / 256.0F) * 0.8F + 0.2F, 1.0F)).getRGB();
+		}
+		return 0xFFFFFF;
 	}
 }
--- /dev/null
+++ net/minecraft/src/RenderDragon.java
@@ -1,0 +1,190 @@
+package net.minecraft.src;
+
+import java.util.Random;
+import org.lwjgl.opengl.GL11;
+
+public class RenderDragon extends RenderLiving {
+	public static EntityDragon boss;
+	private static int field_40284_d = 0;
+	protected ModelDragon field_40285_c = (ModelDragon)this.mainModel;
+
+	public RenderDragon() {
+		super(new ModelDragon(0.0F), 0.5F);
+		this.setRenderPassModel(this.mainModel);
+	}
+
+	protected void func_40282_a(EntityDragon var1, float var2, float var3, float var4) {
+		float var5 = (float)var1.func_40160_a(7, var4)[0];
+		float var6 = (float)(var1.func_40160_a(5, var4)[1] - var1.func_40160_a(10, var4)[1]);
+		GL11.glRotatef(-var5, 0.0F, 1.0F, 0.0F);
+		GL11.glRotatef(var6 * 10.0F, 1.0F, 0.0F, 0.0F);
+		GL11.glTranslatef(0.0F, 0.0F, 1.0F);
+		if(var1.deathTime > 0) {
+			float var7 = ((float)var1.deathTime + var4 - 1.0F) / 20.0F * 1.6F;
+			var7 = MathHelper.sqrt_float(var7);
+			if(var7 > 1.0F) {
+				var7 = 1.0F;
+			}
+
+			GL11.glRotatef(var7 * this.getDeathMaxRotation(var1), 0.0F, 0.0F, 1.0F);
+		}
+
+	}
+
+	protected void func_40280_a(EntityDragon var1, float var2, float var3, float var4, float var5, float var6, float var7) {
+		if(var1.deathTimer > 0) {
+			float var8 = (float)var1.deathTimer / 200.0F;
+			GL11.glDepthFunc(GL11.GL_LEQUAL);
+			GL11.glEnable(GL11.GL_ALPHA_TEST);
+			GL11.glAlphaFunc(GL11.GL_GREATER, var8);
+			this.loadDownloadableImageTexture(var1.skinUrl, "/mob/enderdragon/shuffle.png");
+			this.mainModel.render(var1, var2, var3, var4, var5, var6, var7);
+			GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
+			GL11.glDepthFunc(GL11.GL_EQUAL);
+		}
+
+		this.loadDownloadableImageTexture(var1.skinUrl, var1.getEntityTexture());
+		this.mainModel.render(var1, var2, var3, var4, var5, var6, var7);
+		if(var1.hurtTime > 0) {
+			GL11.glDepthFunc(GL11.GL_EQUAL);
+			GL11.glDisable(GL11.GL_TEXTURE_2D);
+			GL11.glDisable(GL11.GL_LIGHTING);
+			GL11.glEnable(GL11.GL_BLEND);
+			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+			GL11.glColor4f(1.0F, 0.0F, 0.0F, 0.5F);
+			this.mainModel.render(var1, var2, var3, var4, var5, var6, var7);
+			GL11.glEnable(GL11.GL_TEXTURE_2D);
+			GL11.glEnable(GL11.GL_LIGHTING);
+			GL11.glDisable(GL11.GL_BLEND);
+			GL11.glDepthFunc(GL11.GL_LEQUAL);
+		}
+
+		float flash = var1.getFlash(var7);
+		if(flash > 0.0F) {
+			GL11.glDepthFunc(GL11.GL_EQUAL);
+			GL11.glDisable(GL11.GL_TEXTURE_2D);
+			GL11.glEnable(GL11.GL_BLEND);
+			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, flash);
+			this.mainModel.render(var1, var2, var3, var4, var5, var6, var7);
+			GL11.glEnable(GL11.GL_TEXTURE_2D);
+			GL11.glDisable(GL11.GL_BLEND);
+			GL11.glDepthFunc(GL11.GL_LEQUAL);
+		}
+
+	}
+
+	public void func_40281_a(EntityDragon var1, double var2, double var4, double var6, float var8, float var9) {
+		boss = var1;
+		if(field_40284_d != 4) {
+			this.mainModel = new ModelDragon(0.0F);
+			field_40284_d = 4;
+		}
+
+		super.doRenderLiving(var1, var2, var4, var6, var8, var9);
+	}
+
+	protected void func_40279_a(EntityDragon var1, float var2) {
+		super.renderEquippedItems(var1, var2);
+		Tessellator var3 = Tessellator.instance;
+		if(var1.deathTimer > 0) {
+			RenderHelper.disableStandardItemLighting();
+			float var4 = ((float)var1.deathTimer + var2) / 200.0F;
+			float var5 = 0.0F;
+			if(var4 > 0.8F) {
+				var5 = (var4 - 0.8F) / 0.2F;
+			}
+
+			Random var6 = new Random(432L);
+			GL11.glDisable(GL11.GL_TEXTURE_2D);
+			GL11.glShadeModel(GL11.GL_SMOOTH);
+			GL11.glEnable(GL11.GL_BLEND);
+			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE);
+			GL11.glDisable(GL11.GL_ALPHA_TEST);
+			GL11.glEnable(GL11.GL_CULL_FACE);
+			GL11.glDepthMask(false);
+			GL11.glPushMatrix();
+			GL11.glTranslatef(0.0F, -1.0F, -2.0F);
+
+			for(int var7 = 0; (float)var7 < (var4 + var4 * var4) / 2.0F * 60.0F; ++var7) {
+				GL11.glRotatef(var6.nextFloat() * 360.0F, 1.0F, 0.0F, 0.0F);
+				GL11.glRotatef(var6.nextFloat() * 360.0F, 0.0F, 1.0F, 0.0F);
+				GL11.glRotatef(var6.nextFloat() * 360.0F, 0.0F, 0.0F, 1.0F);
+				GL11.glRotatef(var6.nextFloat() * 360.0F, 1.0F, 0.0F, 0.0F);
+				GL11.glRotatef(var6.nextFloat() * 360.0F, 0.0F, 1.0F, 0.0F);
+				GL11.glRotatef(var6.nextFloat() * 360.0F + var4 * 90.0F, 0.0F, 0.0F, 1.0F);
+				var3.startDrawing(6);
+				float var8 = var6.nextFloat() * 20.0F + 5.0F + var5 * 10.0F;
+				float var9 = var6.nextFloat() * 2.0F + 1.0F + var5 * 2.0F;
+				var3.setColorRGBA_I(16777215, (int)(255.0F * (1.0F - var5)));
+				var3.addVertex(0.0D, 0.0D, 0.0D);
+				var3.setColorRGBA_I(16711935, 0);
+				var3.addVertex(-0.866D * (double)var9, (double)var8, (double)(-0.5F * var9));
+				var3.addVertex(0.866D * (double)var9, (double)var8, (double)(-0.5F * var9));
+				var3.addVertex(0.0D, (double)var8, (double)(1.0F * var9));
+				var3.addVertex(-0.866D * (double)var9, (double)var8, (double)(-0.5F * var9));
+				var3.draw();
+			}
+
+			GL11.glPopMatrix();
+			GL11.glDepthMask(true);
+			GL11.glDisable(GL11.GL_CULL_FACE);
+			GL11.glDisable(GL11.GL_BLEND);
+			GL11.glShadeModel(GL11.GL_FLAT);
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			GL11.glEnable(GL11.GL_TEXTURE_2D);
+			GL11.glEnable(GL11.GL_ALPHA_TEST);
+			RenderHelper.enableStandardEntityLighting();
+		}
+
+	}
+
+	protected int func_40283_a(EntityDragon var1, int var2, float var3) {
+		if(var2 == 1) {
+			GL11.glDepthFunc(GL11.GL_LEQUAL);
+		}
+
+		if(var2 != 0) {
+			return -1;
+		} else {
+			this.loadTexture("/mob/enderdragon/ender_eyes.png");
+			float var4 = 1.0F;
+			GL11.glEnable(GL11.GL_BLEND);
+			GL11.glDisable(GL11.GL_ALPHA_TEST);
+			GL11.glBlendFunc(GL11.GL_ONE, GL11.GL_ONE);
+			GL11.glDisable(GL11.GL_LIGHTING);
+			GL11.glDepthFunc(GL11.GL_EQUAL);
+			char var5 = '\uf0f0';
+			int var6 = var5 % 65536;
+			int var7 = var5 / 65536;
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			GL11.glEnable(GL11.GL_LIGHTING);
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, var4);
+			return 1;
+		}
+	}
+
+	protected boolean shouldRenderPass(EntityLiving var1, int var2, float var3) {
+		return this.func_40283_a((EntityDragon)var1, var2, var3) > 0;
+	}
+
+	protected void renderEquippedItems(EntityLiving var1, float var2) {
+		this.func_40279_a((EntityDragon)var1, var2);
+	}
+
+	protected void rotateCorpse(EntityLiving var1, float var2, float var3, float var4) {
+		this.func_40282_a((EntityDragon)var1, var2, var3, var4);
+	}
+
+	protected void func_40270_a(EntityLiving var1, float var2, float var3, float var4, float var5, float var6, float var7) {
+		this.func_40280_a((EntityDragon)var1, var2, var3, var4, var5, var6, var7);
+	}
+
+	public void doRenderLiving(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
+		this.func_40281_a((EntityDragon)var1, var2, var4, var6, var8, var9);
+	}
+
+	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
+		this.func_40281_a((EntityDragon)var1, var2, var4, var6, var8, var9);
+	}
+}
--- net/minecraft/src/GuiTexturePacks.java
+++ net/minecraft/src/GuiTexturePacks.java
@@ -18,7 +18,7 @@
 		StringTranslate var1 = StringTranslate.getInstance();
 		this.controlList.add(new GuiSmallButton(5, this.width / 2 - 154, this.height - 48, var1.translateKey("texturePack.openFolder")));
 		this.controlList.add(new GuiSmallButton(6, this.width / 2 + 4, this.height - 48, var1.translateKey("gui.done")));
-		this.mc.texturePackList.updateAvaliableTexturePacks();
+		this.game.texturePackList.updateAvaliableTexturePacks();
 		this.fileLocation = (new File(Minecraft.getMinecraftDir(), "texturepacks")).getAbsolutePath();
 		this.guiTexturePackSlot = new GuiTexturePackSlot(this);
 		this.guiTexturePackSlot.registerScrollButtons(this.controlList, 7, 8);
@@ -29,8 +29,8 @@
 			if(var1.id == 5) {
 				Sys.openURL("file://" + this.fileLocation);
 			} else if(var1.id == 6) {
-				this.mc.renderEngine.refreshTextures();
-				this.mc.displayGuiScreen(this.guiScreen);
+				this.game.renderEngine.refreshTextures();
+				this.game.displayGuiScreen(this.guiScreen);
 			} else {
 				this.guiTexturePackSlot.actionPerformed(var1);
 			}
@@ -49,7 +49,7 @@
 	public void drawScreen(int var1, int var2, float var3) {
 		this.guiTexturePackSlot.drawScreen(var1, var2, var3);
 		if(this.field_6454_o <= 0) {
-			this.mc.texturePackList.updateAvaliableTexturePacks();
+			this.game.texturePackList.updateAvaliableTexturePacks();
 			this.field_6454_o += 20;
 		}
 
@@ -65,47 +65,47 @@
 	}
 
 	static Minecraft func_22124_a(GuiTexturePacks var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static Minecraft func_22126_b(GuiTexturePacks var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static Minecraft func_22119_c(GuiTexturePacks var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static Minecraft func_22122_d(GuiTexturePacks var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static Minecraft func_22117_e(GuiTexturePacks var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static Minecraft func_35307_f(GuiTexturePacks var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static Minecraft func_35308_g(GuiTexturePacks var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static Minecraft func_22118_f(GuiTexturePacks var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static Minecraft func_22116_g(GuiTexturePacks var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static Minecraft func_22121_h(GuiTexturePacks var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static Minecraft func_22123_i(GuiTexturePacks var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static FontRenderer func_22127_j(GuiTexturePacks var0) {
--- net/minecraft/src/GuiStats.java
+++ net/minecraft/src/GuiStats.java
@@ -55,7 +55,7 @@
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.enabled) {
 			if(var1.id == 0) {
-				this.mc.displayGuiScreen(this.parentGui);
+				this.game.displayGuiScreen(this.parentGui);
 			} else if(var1.id == 1) {
 				this.selectedSlot = this.slotGeneral;
 			} else if(var1.id == 3) {
@@ -82,7 +82,7 @@
 		GL11.glRotatef(180.0F, 1.0F, 0.0F, 0.0F);
 		RenderHelper.enableStandardItemLighting();
 		GL11.glPopMatrix();
-		renderItem.drawItemIntoGui(this.fontRenderer, this.mc.renderEngine, var3, 0, Item.itemsList[var3].getIconFromDamage(0), var1 + 2, var2 + 2);
+		renderItem.drawItemIntoGui(this.fontRenderer, this.game.renderEngine, var3, 0, Item.itemsList[var3].getIconFromDamage(0), var1 + 2, var2 + 2);
 		RenderHelper.disableStandardItemLighting();
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 	}
@@ -92,9 +92,9 @@
 	}
 
 	private void drawSprite(int var1, int var2, int var3, int var4) {
-		int var5 = this.mc.renderEngine.getTexture("/gui/slot.png");
+		int var5 = this.game.renderEngine.getTexture("/gui/slot.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(var5);
+		this.game.renderEngine.bindTexture(var5);
 		Tessellator var10 = Tessellator.instance;
 		var10.startDrawingQuads();
 		var10.addVertexWithUV((double)(var1 + 0), (double)(var2 + 18), (double)this.zLevel, (double)((float)(var3 + 0) * 0.0078125F), (double)((float)(var4 + 18) * 0.0078125F));
@@ -105,7 +105,7 @@
 	}
 
 	static Minecraft getMinecraft(GuiStats var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static FontRenderer getFontRenderer1(GuiStats var0) {
@@ -125,7 +125,7 @@
 	}
 
 	static Minecraft getMinecraft1(GuiStats var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static void drawSprite(GuiStats var0, int var1, int var2, int var3, int var4) {
@@ -133,7 +133,7 @@
 	}
 
 	static Minecraft getMinecraft2(GuiStats var0) {
-		return var0.mc;
+		return var0.game;
 	}
 
 	static FontRenderer getFontRenderer4(GuiStats var0) {
--- net/minecraft/src/WorldGenTaiga1.java
+++ net/minecraft/src/WorldGenTaiga1.java
@@ -4,89 +4,79 @@
 
 public class WorldGenTaiga1 extends WorldGenerator {
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(5) + 7;
+		int var6 = Math.max(var2.nextInt(5) + 7 - Math.round(Personalization.entropy * 5.0F), 6);
 		int var7 = var6 - var2.nextInt(2) - 3;
 		int var8 = var6 - var7;
 		int var9 = 1 + var2.nextInt(var8 + 1);
 		boolean var10 = true;
 		if(var4 >= 1) {
-			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
-				int var11;
-				int var13;
-				int var14;
-				int var15;
-				int var18;
-				for(var11 = var4; var11 <= var4 + 1 + var6 && var10; ++var11) {
-					boolean var12 = true;
-					if(var11 - var4 < var7) {
-						var18 = 0;
-					} else {
-						var18 = var9;
-					}
-
-					for(var13 = var3 - var18; var13 <= var3 + var18 && var10; ++var13) {
-						for(var14 = var5 - var18; var14 <= var5 + var18 && var10; ++var14) {
-							if(var11 >= 0) {
-								var1.getClass();
-								if(var11 < 128) {
-									var15 = var1.getBlockId(var13, var11, var14);
-									if(var15 != 0 && var15 != Block.leaves.blockID) {
-										var10 = false;
-									}
-									continue;
-								}
-							}
-
-							var10 = false;
-						}
-					}
-				}
-
-				if(!var10) {
-					return false;
-				}
-
-				var11 = var1.getBlockId(var3, var4 - 1, var5);
-				if(var11 == Block.grass.blockID || var11 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
-						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
-						var18 = 0;
-
-						for(var13 = var4 + var6; var13 >= var4 + var7; --var13) {
-							for(var14 = var3 - var18; var14 <= var3 + var18; ++var14) {
-								var15 = var14 - var3;
-
-								for(int var16 = var5 - var18; var16 <= var5 + var18; ++var16) {
-									int var17 = var16 - var5;
-									if((Math.abs(var15) != var18 || Math.abs(var17) != var18 || var18 <= 0) && !Block.opaqueCubeLookup[var1.getBlockId(var14, var13, var16)]) {
-										var1.setBlockAndMetadata(var14, var13, var16, Block.leaves.blockID, 1);
-									}
-								}
-							}
-
-							if(var18 >= 1 && var13 == var4 + var7 + 1) {
-								--var18;
-							} else if(var18 < var9) {
-								++var18;
-							}
-						}
-
-						for(var13 = 0; var13 < var6 - 1; ++var13) {
-							var14 = var1.getBlockId(var3, var4 + var13, var5);
-							if(var14 == 0 || var14 == Block.leaves.blockID) {
-								var1.setBlockAndMetadata(var3, var4 + var13, var5, Block.wood.blockID, 1);
-							}
-						}
-
-						return true;
-					}
-				}
-
+			int var11;
+			int var13;
+			int var14;
+			int var15;
+			int var18;
+			for(var11 = var4; var11 <= var4 + 1 + var6 && var10; ++var11) {
+				boolean var12 = true;
+				if(var11 - var4 < var7) {
+					var18 = 0;
+				} else {
+					var18 = var9;
+				}
+
+				for(var13 = var3 - var18; var13 <= var3 + var18 && var10; ++var13) {
+					for(var14 = var5 - var18; var14 <= var5 + var18 && var10; ++var14) {
+						if(var11 >= 0) {
+							var15 = var1.getBlockId(var13, var11, var14);
+							if(var15 != 0 && var15 != Block.leaves.blockID) {
+								var10 = false;
+							}
+							continue;
+						}
+
+						var10 = false;
+					}
+				}
+			}
+
+			if(!var10) {
 				return false;
 			}
+
+			var11 = var1.getBlockId(var3, var4 - 1, var5);
+			if(var11 == Block.grass.blockID || var11 == Block.dirt.blockID) {
+				this.setBlock(var1, var3, var4 - 1, var5, Block.dirt.blockID);
+				var18 = 0;
+
+				for(var13 = var4 + var6; var13 >= var4 + var7; --var13) {
+					for(var14 = var3 - var18; var14 <= var3 + var18; ++var14) {
+						var15 = var14 - var3;
+
+						for(int var16 = var5 - var18; var16 <= var5 + var18; ++var16) {
+							int var17 = var16 - var5;
+							if((Math.abs(var15) != var18 || Math.abs(var17) != var18 || var18 <= 0) && !Block.opaqueCubeLookup[var1.getBlockId(var14, var13, var16)]) {
+								this.setBlockAndMetadata(var1, var14, var13, var16, Block.leaves.blockID, 1);
+							}
+						}
+					}
+
+					if(var18 >= 1 && var13 == var4 + var7 + 1) {
+						--var18;
+					} else if(var18 < var9) {
+						++var18;
+					}
+				}
+
+				for(var13 = 0; var13 < var6 - 1; ++var13) {
+					var14 = var1.getBlockId(var3, var4 + var13, var5);
+					if(var14 == 0 || var14 == Block.leaves.blockID) {
+						this.setBlockAndMetadata(var1, var3, var4 + var13, var5, Block.wood.blockID, 1);
+					}
+				}
+
+				return true;
+			}
+
+			return false;
 		}
 
 		return false;
--- net/minecraft/src/LayerIsland.java
+++ net/minecraft/src/LayerIsland.java
@@ -7,16 +7,26 @@
 
 	public int[] func_35500_a(int var1, int var2, int var3, int var4) {
 		int[] var5 = IntCache.func_35267_a(var3 * var4);
+		int land = Personalization.alphaBiome ? BiomeGenBase.alpha.field_35494_y : 1;
 
 		for(int var6 = 0; var6 < var4; ++var6) {
 			for(int var7 = 0; var7 < var3; ++var7) {
-				this.func_35499_a((long)(var1 + var7), (long)(var2 + var6));
-				var5[var7 + var6 * var3] = this.func_35498_a(10) == 0 ? 1 : 0;
+				boolean value = true;
+				if (!Personalization.pureGeneration && !Personalization.alphaBiome) {
+					this.func_35499_a((long)(var1 + var7), (long)(var2 + var6));
+					if (Personalization.gameMode == B18XGameMode.ISLES_OF_TIME) {
+						value = this.func_35498_a(3) == 0;
+					} else {
+						value = this.func_35498_a(10) == 0;
+					}
+				}
+
+				var5[var7 + var6 * var3] = value ? land : 0;
 			}
 		}
 
 		if(var1 > -var3 && var1 <= 0 && var2 > -var4 && var2 <= 0) {
-			var5[-var1 + -var2 * var3] = 1;
+			var5[-var1 + -var2 * var3] = land;
 		}
 
 		return var5;
--- /dev/null
+++ net/minecraft/src/ModelBox.java
@@ -1,0 +1,79 @@
+package net.minecraft.src;
+
+public class ModelBox {
+	private PositionTextureVertex[] field_40679_h;
+	private TexturedQuad[] field_40680_i;
+	public final float field_40678_a;
+	public final float field_40676_b;
+	public final float field_40677_c;
+	public final float field_40674_d;
+	public final float field_40675_e;
+	public final float field_40672_f;
+	public String field_40673_g;
+
+	public ModelBox(ModelRenderer var1, int var2, int var3, float var4, float var5, float var6, int var7, int var8, int var9, float var10) {
+		this.field_40678_a = var4;
+		this.field_40676_b = var5;
+		this.field_40677_c = var6;
+		this.field_40674_d = var4 + (float)var7;
+		this.field_40675_e = var5 + (float)var8;
+		this.field_40672_f = var6 + (float)var9;
+		this.field_40679_h = new PositionTextureVertex[8];
+		this.field_40680_i = new TexturedQuad[6];
+		float var11 = var4 + (float)var7;
+		float var12 = var5 + (float)var8;
+		float var13 = var6 + (float)var9;
+		var4 -= var10;
+		var5 -= var10;
+		var6 -= var10;
+		var11 += var10;
+		var12 += var10;
+		var13 += var10;
+		if(var1.mirror) {
+			float var14 = var11;
+			var11 = var4;
+			var4 = var14;
+		}
+
+		PositionTextureVertex var23 = new PositionTextureVertex(var4, var5, var6, 0.0F, 0.0F);
+		PositionTextureVertex var15 = new PositionTextureVertex(var11, var5, var6, 0.0F, 8.0F);
+		PositionTextureVertex var16 = new PositionTextureVertex(var11, var12, var6, 8.0F, 8.0F);
+		PositionTextureVertex var17 = new PositionTextureVertex(var4, var12, var6, 8.0F, 0.0F);
+		PositionTextureVertex var18 = new PositionTextureVertex(var4, var5, var13, 0.0F, 0.0F);
+		PositionTextureVertex var19 = new PositionTextureVertex(var11, var5, var13, 0.0F, 8.0F);
+		PositionTextureVertex var20 = new PositionTextureVertex(var11, var12, var13, 8.0F, 8.0F);
+		PositionTextureVertex var21 = new PositionTextureVertex(var4, var12, var13, 8.0F, 0.0F);
+		this.field_40679_h[0] = var23;
+		this.field_40679_h[1] = var15;
+		this.field_40679_h[2] = var16;
+		this.field_40679_h[3] = var17;
+		this.field_40679_h[4] = var18;
+		this.field_40679_h[5] = var19;
+		this.field_40679_h[6] = var20;
+		this.field_40679_h[7] = var21;
+		this.field_40680_i[0] = new TexturedQuad(new PositionTextureVertex[]{var19, var15, var16, var20}, var2 + var9 + var7, var3 + var9, var2 + var9 + var7 + var9, var3 + var9 + var8, var1.textureWidth, var1.textureHeight);
+		this.field_40680_i[1] = new TexturedQuad(new PositionTextureVertex[]{var23, var18, var21, var17}, var2 + 0, var3 + var9, var2 + var9, var3 + var9 + var8, var1.textureWidth, var1.textureHeight);
+		this.field_40680_i[2] = new TexturedQuad(new PositionTextureVertex[]{var19, var18, var23, var15}, var2 + var9, var3 + 0, var2 + var9 + var7, var3 + var9, var1.textureWidth, var1.textureHeight);
+		this.field_40680_i[3] = new TexturedQuad(new PositionTextureVertex[]{var16, var17, var21, var20}, var2 + var9 + var7, var3, var2 + var9 + var7 + var7, var3 + var9, var1.textureWidth, var1.textureHeight);
+		this.field_40680_i[4] = new TexturedQuad(new PositionTextureVertex[]{var15, var23, var17, var16}, var2 + var9, var3 + var9, var2 + var9 + var7, var3 + var9 + var8, var1.textureWidth, var1.textureHeight);
+		this.field_40680_i[5] = new TexturedQuad(new PositionTextureVertex[]{var18, var19, var20, var21}, var2 + var9 + var7 + var9, var3 + var9, var2 + var9 + var7 + var9 + var7, var3 + var9 + var8, var1.textureWidth, var1.textureHeight);
+		if(var1.mirror) {
+			for(int var22 = 0; var22 < this.field_40680_i.length; ++var22) {
+				this.field_40680_i[var22].flipFace();
+			}
+		}
+
+	}
+
+	public void func_40670_a(Tessellator var1, float var2) {
+		for(int var3 = 0; var3 < this.field_40680_i.length; ++var3) {
+			this.field_40680_i[var3].draw(var1, var2);
+		}
+
+	}
+
+	public ModelBox func_40671_a(String var1) {
+		this.field_40673_g = var1;
+		return this;
+	}
+}
--- net/minecraft/src/MapGenBase.java
+++ net/minecraft/src/MapGenBase.java
@@ -4,7 +4,7 @@
 
 public class MapGenBase {
 	protected int field_1306_a = 8;
-	protected Random rand = new Random();
+	protected Random rand = Personalization.random();
 	protected World field_35625_d;
 
 	public void generate(IChunkProvider var1, World var2, int var3, int var4, byte[] var5) {
--- net/minecraft/src/WorldGenGlowStone1.java
+++ net/minecraft/src/WorldGenGlowStone1.java
@@ -6,7 +6,7 @@
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		if(!var1.isAirBlock(var3, var4, var5)) {
 			return false;
-		} else if(var1.getBlockId(var3, var4 + 1, var5) != Block.netherrack.blockID) {
+		} else if(!var1.isBlockNormalCube(var3, var4 + 1, var5)) {
 			return false;
 		} else {
 			var1.setBlockWithNotify(var3, var4, var5, Block.glowStone.blockID);
--- net/minecraft/src/BlockTallGrass.java
+++ net/minecraft/src/BlockTallGrass.java
@@ -14,28 +14,54 @@
 	}
 
 	public int func_35274_i() {
+		if (Personalization.alphaTextures) return 0xFFFFFF;
 		double var1 = 0.5D;
 		double var3 = 1.0D;
 		return ColorizerGrass.getGrassColor(var1, var3);
 	}
 
 	public int getRenderColor(int var1) {
+		if (Personalization.alphaTextures) return 0xFFFFFF;
 		return var1 == 0 ? 16777215 : ColorizerFoliage.func_31073_c();
 	}
 
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if(var5 == 0) {
+		if (Personalization.alphaTextures) return 0xFFFFFF;
+		int var5a = var1.getBlockMetadata(var2, var3, var4);
+		if(var5a == 0) {
 			return 16777215;
 		} else {
-			long var6 = (long)(var2 * 3129871 + var4 * 6129781 + var3);
-			var6 = var6 * var6 * 42317861L + var6 * 11L;
-			var2 = (int)((long)var2 + ((var6 >> 14 & 31L) - 16L));
-			var3 = (int)((long)var3 + ((var6 >> 19 & 31L) - 16L));
-			var4 = (int)((long)var4 + ((var6 >> 24 & 31L) - 16L));
-			double var8 = (double)var1.getWorldChunkManager().func_35554_b(var2, var4);
-			double var10 = (double)var1.getWorldChunkManager().func_35558_c(var2, var4);
-			return ColorizerGrass.getGrassColor(var8, var10);
+			if (Personalization.fuzzyGrass) {
+				long var6 = (long)(var2 * 3129871 + var4 * 6129781 + var3);
+				var6 = var6 * var6 * 42317861L + var6 * 11L;
+				var2 = (int)((long)var2 + ((var6 >> 14 & 31L) - 16L));
+				var3 = (int)((long)var3 + ((var6 >> 19 & 31L) - 16L));
+				var4 = (int)((long)var4 + ((var6 >> 24 & 31L) - 16L));
+			}
+
+			if (Personalization.smoothBiomes) {
+				WorldChunkManager wcm = var1.getWorldChunkManager();
+				int var5 = 0;
+				int var6 = 0;
+				int var7 = 0;
+
+				for(int var8 = -1; var8 <= 1; ++var8) {
+					for(int var9 = -1; var9 <= 1; ++var9) {
+						double t = wcm.func_35554_b(var2 + var9, var4 + var8);
+						double r = wcm.func_35558_c(var2 + var9, var4 + var8);
+						int var10 = var1.getWorldChunkManager().getBiomeGenAt(var2 + var9, var4 + var8).getGrassColor(t, r, var2 + var9, var4 + var8);
+						var5 += (var10 & 16711680) >> 16;
+						var6 += (var10 & '\uff00') >> 8;
+						var7 += var10 & 255;
+					}
+				}
+
+				return (var5 / 9 & 255) << 16 | (var6 / 9 & 255) << 8 | var7 / 9 & 255;
+			} else {
+				double var5 = (double)var1.getWorldChunkManager().func_35554_b(var2, var4);
+				double var7 = (double)var1.getWorldChunkManager().func_35558_c(var2, var4);
+				return var1.getWorldChunkManager().getBiomeGenAt(var2, var4).getGrassColor(var5, var7, var2, var4);
+			}
 		}
 	}
 
--- net/minecraft/src/NBTTagCompound.java
+++ net/minecraft/src/NBTTagCompound.java
@@ -3,10 +3,7 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
+import java.util.*;
 
 public class NBTTagCompound extends NBTBase {
 	private Map tagMap = new HashMap();
@@ -39,12 +36,20 @@
 		return this.tagMap.values();
 	}
 
+	public Set<String> getKeys() {
+		return (Set<String>)this.tagMap.keySet();
+	}
+
 	public byte getType() {
 		return (byte)10;
 	}
 
 	public void setTag(String var1, NBTBase var2) {
-		this.tagMap.put(var1, var2.setKey(var1));
+		if (var2 == null) {
+			this.tagMap.remove(var1);
+		} else {
+			this.tagMap.put(var1, var2.setKey(var1));
+		}
 	}
 
 	public void setByte(String var1, byte var2) {
@@ -79,6 +84,10 @@
 		this.tagMap.put(var1, (new NBTTagByteArray(var2)).setKey(var1));
 	}
 
+	public void func_48183_a(String var1, int[] var2) {
+		this.tagMap.put(var1, (new NBTTagIntArray(var2)).setKey(var1));
+	}
+
 	public void setCompoundTag(String var1, NBTTagCompound var2) {
 		this.tagMap.put(var1, var2.setKey(var1));
 	}
@@ -121,6 +130,10 @@
 
 	public byte[] getByteArray(String var1) {
 		return !this.tagMap.containsKey(var1) ? new byte[0] : ((NBTTagByteArray)this.tagMap.get(var1)).byteArray;
+	}
+
+	public int[] func_48182_l(String var1) {
+		return !this.tagMap.containsKey(var1) ? new int[0] : ((NBTTagIntArray)this.tagMap.get(var1)).field_48447_a;
 	}
 
 	public NBTTagCompound getCompoundTag(String var1) {
--- net/minecraft/src/MapStorage.java
+++ net/minecraft/src/MapStorage.java
@@ -29,7 +29,7 @@
 		} else {
 			if(this.saveHandler != null) {
 				try {
-					File var4 = this.saveHandler.func_28113_a(var2);
+					File var4 = this.saveHandler.getMapFileFromName(var2);
 					if(var4 != null && var4.exists()) {
 						try {
 							var3 = (MapDataBase)var1.getConstructor(new Class[]{String.class}).newInstance(new Object[]{var2});
@@ -83,7 +83,7 @@
 	private void saveData(MapDataBase var1) {
 		if(this.saveHandler != null) {
 			try {
-				File var2 = this.saveHandler.func_28113_a(var1.field_28168_a);
+				File var2 = this.saveHandler.getMapFileFromName(var1.field_28168_a);
 				if(var2 != null) {
 					NBTTagCompound var3 = new NBTTagCompound();
 					var1.writeToNBT(var3);
@@ -107,7 +107,7 @@
 				return;
 			}
 
-			File var1 = this.saveHandler.func_28113_a("idcounts");
+			File var1 = this.saveHandler.getMapFileFromName("idcounts");
 			if(var1 != null && var1.exists()) {
 				DataInputStream var2 = new DataInputStream(new FileInputStream(var1));
 				NBTTagCompound var3 = CompressedStreamTools.func_1141_a(var2);
@@ -143,7 +143,7 @@
 			return var2.shortValue();
 		} else {
 			try {
-				File var3 = this.saveHandler.func_28113_a("idcounts");
+				File var3 = this.saveHandler.getMapFileFromName("idcounts");
 				if(var3 != null) {
 					NBTTagCompound var4 = new NBTTagCompound();
 					Iterator var5 = this.idCounts.keySet().iterator();
--- net/minecraft/src/StructureVillageStart.java
+++ net/minecraft/src/StructureVillageStart.java
@@ -8,40 +8,54 @@
 	private boolean field_35718_c = false;
 
 	public StructureVillageStart(World var1, Random var2, int var3, int var4) {
-		byte var5 = 0;
-		ArrayList var6 = StructureVillagePieces.func_35705_a(var2, var5);
-		ComponentVillageStartPiece var7 = new ComponentVillageStartPiece(var1.getWorldChunkManager(), 0, var2, (var3 << 4) + 2, (var4 << 4) + 2, var6, var5);
-		this.field_35717_a.add(var7);
-		var7.func_35004_a(var7, this.field_35717_a, var2);
-		ArrayList var8 = var7.field_35106_f;
-		ArrayList var9 = var7.field_35108_e;
-
-		int var10;
-		while(!var8.isEmpty() || !var9.isEmpty()) {
-			StructureComponent var11;
-			if(!var8.isEmpty()) {
-				var10 = var2.nextInt(var8.size());
-				var11 = (StructureComponent)var8.remove(var10);
-				var11.func_35004_a(var7, this.field_35717_a, var2);
-			} else {
-				var10 = var2.nextInt(var9.size());
-				var11 = (StructureComponent)var9.remove(var10);
-				var11.func_35004_a(var7, this.field_35717_a, var2);
-			}
-		}
-
-		this.func_35714_b();
-		var10 = 0;
-		Iterator var13 = this.field_35717_a.iterator();
-
-		while(var13.hasNext()) {
-			StructureComponent var12 = (StructureComponent)var13.next();
-			if(!(var12 instanceof ComponentVillageRoadPiece)) {
-				++var10;
-			}
-		}
-
-		this.field_35718_c = var10 > 2;
+		if (Personalization.notchVillages) {
+			int count = 10 + var2.nextInt(10);
+			for (int i = 0; i < count; i++) {
+				ComponentVillageHouseNotch house = ComponentVillageHouseNotch.func_35095_a(this.field_35717_a, var2,
+						var3 * 16 + var2.nextInt(64) - var2.nextInt(64), 64,
+						var4 * 16 + var2.nextInt(64) - var2.nextInt(64), var2.nextInt(2), 0);
+				if (house != null) {
+					this.field_35717_a.add(house);
+					this.field_35718_c = true;
+				}
+			}
+			this.func_35714_b();
+		} else {
+			byte var5 = 0;
+			ArrayList var6 = StructureVillagePieces.func_35705_a(var2, var5);
+			ComponentVillageStartPiece var7 = new ComponentVillageStartPiece(var1.getWorldChunkManager(), 0, var2, (var3 << 4) + 2, (var4 << 4) + 2, var6, var5);
+			this.field_35717_a.add(var7);
+			var7.func_35004_a(var7, this.field_35717_a, var2);
+			ArrayList var8 = var7.field_35106_f;
+			ArrayList var9 = var7.field_35108_e;
+
+			int var10;
+			while(!var8.isEmpty() || !var9.isEmpty()) {
+				StructureComponent var11;
+				if(!var8.isEmpty()) {
+					var10 = var2.nextInt(var8.size());
+					var11 = (StructureComponent)var8.remove(var10);
+					var11.func_35004_a(var7, this.field_35717_a, var2);
+				} else {
+					var10 = var2.nextInt(var9.size());
+					var11 = (StructureComponent)var9.remove(var10);
+					var11.func_35004_a(var7, this.field_35717_a, var2);
+				}
+			}
+
+			this.func_35714_b();
+			var10 = 0;
+			Iterator var13 = this.field_35717_a.iterator();
+
+			while(var13.hasNext()) {
+				StructureComponent var12 = (StructureComponent)var13.next();
+				if(!(var12 instanceof ComponentVillageRoadPiece)) {
+					++var10;
+				}
+			}
+
+			this.field_35718_c = var10 > 2;
+		}
 	}
 
 	public boolean func_35715_c() {
--- /dev/null
+++ net/minecraft/src/GenLayerSubBiomes.java
@@ -1,0 +1,35 @@
+package net.minecraft.src;
+
+public class GenLayerSubBiomes extends GenLayer {
+	private int subLevel;
+
+	public GenLayerSubBiomes(long var1, GenLayer var3, int var4) {
+		super(var1);
+		this.field_35504_a = var3;
+		this.subLevel = var4;
+	}
+
+	public int[] func_35500_a(int var1, int var2, int var3, int var4) {
+		int[] var5 = this.field_35504_a.func_35500_a(var1 - 1, var2 - 1, var3 + 2, var4 + 2);
+		int[] var6 = IntCache.func_35267_a(var3 * var4);
+
+		for(int var7 = 0; var7 < var4; ++var7) {
+			for(int var8 = 0; var8 < var3; ++var8) {
+				this.func_35499_a((long)(var8 + var1), (long)(var7 + var2));
+				int var9 = var5[var8 + 1 + (var7 + 1) * (var3 + 2)];
+				BiomeGenBase biome = BiomeGenBase.field_35486_a[var9];
+				BiomeGenBase variant = biome.subVariant;
+
+				if(biome.subLevel == this.subLevel
+						&& variant != null
+						&& this.func_35498_a(biome.subChance) == 0) {
+					var6[var8 + var7 * var3] = variant.field_35494_y;
+				} else {
+					var6[var8 + var7 * var3] = var9;
+				}
+			}
+		}
+
+		return var6;
+	}
+}
--- net/minecraft/src/BlockLog.java
+++ net/minecraft/src/BlockLog.java
@@ -21,28 +21,35 @@
 	}
 
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-		byte var5 = 4;
-		int var6 = var5 + 1;
-		if(var1.checkChunksExist(var2 - var6, var3 - var6, var4 - var6, var2 + var6, var3 + var6, var4 + var6)) {
-			for(int var7 = -var5; var7 <= var5; ++var7) {
-				for(int var8 = -var5; var8 <= var5; ++var8) {
-					for(int var9 = -var5; var9 <= var5; ++var9) {
-						int var10 = var1.getBlockId(var2 + var7, var3 + var8, var4 + var9);
-						if(var10 == Block.leaves.blockID) {
-							int var11 = var1.getBlockMetadata(var2 + var7, var3 + var8, var4 + var9);
-							if((var11 & 8) == 0) {
-								var1.setBlockMetadata(var2 + var7, var3 + var8, var4 + var9, var11 | 8);
-							}
-						}
-					}
-				}
-			}
-		}
+//		byte var5 = 4;
+//		int var6 = var5 + 1;
+//		if(var1.checkChunksExist(var2 - var6, var3 - var6, var4 - var6, var2 + var6, var3 + var6, var4 + var6)) {
+//			for(int var7 = -var5; var7 <= var5; ++var7) {
+//				for(int var8 = -var5; var8 <= var5; ++var8) {
+//					for(int var9 = -var5; var9 <= var5; ++var9) {
+//						int var10 = var1.getBlockId(var2 + var7, var3 + var8, var4 + var9);
+//						if(var10 == Block.leaves.blockID) {
+//							int var11 = var1.getBlockMetadata(var2 + var7, var3 + var8, var4 + var9);
+//							if((var11 & 8) == 0) {
+//								var1.setBlockMetadata(var2 + var7, var3 + var8, var4 + var9, var11 | 8);
+//							}
+//						}
+//					}
+//				}
+//			}
+//		}
 
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return var1 == 1 ? 21 : (var1 == 0 ? 21 : (var2 == 1 ? 116 : (var2 == 2 ? 117 : 20)));
+		return var1 == 1 ? 21
+				: var1 == 0 ? 21
+				: var2 == 1 || Personalization.inheritLogs && (var2 == 3 || var2 == 5) ? 116
+				: var2 == 2 ? 117
+				: var2 == 3 || Personalization.inheritLogs && var2 == 4 ? 227
+				: var2 == 4 ? 228
+				: var2 == 5 ? 229
+				: 20;
 	}
 
 	protected int damageDropped(int var1) {
--- net/minecraft/src/ModelRenderer.java
+++ net/minecraft/src/ModelRenderer.java
@@ -1,12 +1,12 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import org.lwjgl.opengl.GL11;
 
 public class ModelRenderer {
-	public float field_35971_a = 64.0F;
-	public float field_35970_b = 32.0F;
-	private PositionTextureVertex[] field_35978_r;
-	private TexturedQuad[] faces;
+	public float textureWidth;
+	public float textureHeight;
 	private int textureOffsetX;
 	private int textureOffsetY;
 	public float rotationPointX;
@@ -15,80 +15,69 @@
 	public float rotateAngleX;
 	public float rotateAngleY;
 	public float rotateAngleZ;
-	public float field_35977_i;
-	public float field_35975_j;
-	public float field_35976_k;
-	public float field_35973_l;
-	public float field_35974_m;
-	public float field_35972_n;
-	private boolean compiled = false;
-	private int displayList = 0;
-	public boolean mirror = false;
-	public boolean showModel = true;
-	public boolean field_1402_i = false;
+	private boolean compiled;
+	private int displayList;
+	public boolean mirror;
+	public boolean showModel;
+	public boolean isHidden;
+	public List cubeList;
+	public List childModels;
+	public final String boxName;
+	private ModelBase baseModel;
 
-	public ModelRenderer(ModelBase var1, int var2, int var3) {
-		this.textureOffsetX = var2;
-		this.textureOffsetY = var3;
+	public ModelRenderer(ModelBase var1, String var2) {
+		this.textureWidth = 64.0F;
+		this.textureHeight = 32.0F;
+		this.compiled = false;
+		this.displayList = 0;
+		this.mirror = false;
+		this.showModel = true;
+		this.isHidden = false;
+		this.cubeList = new ArrayList();
+		this.baseModel = var1;
 		var1.field_35394_j.add(this);
-	}
-
-	public void addBox(float var1, float var2, float var3, int var4, int var5, int var6) {
-		this.addBox(var1, var2, var3, var4, var5, var6, 0.0F);
+		this.boxName = var2;
+		this.setTextureSize(var1.textureWidth, var1.textureHeight);
+	}
+
+	public ModelRenderer(ModelBase var1) {
+		this(var1, (String)null);
+	}
+
+	public ModelRenderer(ModelBase var1, int var2, int var3) {
+		this(var1);
+		this.setTextureOffset(var2, var3);
+	}
+
+	public void addChild(ModelRenderer var1) {
+		if(this.childModels == null) {
+			this.childModels = new ArrayList();
+		}
+
+		this.childModels.add(var1);
+	}
+
+	public ModelRenderer setTextureOffset(int var1, int var2) {
+		this.textureOffsetX = var1;
+		this.textureOffsetY = var2;
+		return this;
+	}
+
+	public ModelRenderer addBox(String var1, float var2, float var3, float var4, int var5, int var6, int var7) {
+		var1 = this.boxName + "." + var1;
+		TextureOffset var8 = this.baseModel.func_40297_a(var1);
+		this.setTextureOffset(var8.field_40734_a, var8.field_40733_b);
+		this.cubeList.add((new ModelBox(this, this.textureOffsetX, this.textureOffsetY, var2, var3, var4, var5, var6, var7, 0.0F)).func_40671_a(var1));
+		return this;
+	}
+
+	public ModelRenderer addBox(float var1, float var2, float var3, int var4, int var5, int var6) {
+		this.cubeList.add(new ModelBox(this, this.textureOffsetX, this.textureOffsetY, var1, var2, var3, var4, var5, var6, 0.0F));
+		return this;
 	}
 
 	public void addBox(float var1, float var2, float var3, int var4, int var5, int var6, float var7) {
-		this.field_35977_i = var1;
-		this.field_35975_j = var2;
-		this.field_35976_k = var3;
-		this.field_35973_l = var1 + (float)var4;
-		this.field_35974_m = var2 + (float)var5;
-		this.field_35972_n = var3 + (float)var6;
-		this.field_35978_r = new PositionTextureVertex[8];
-		this.faces = new TexturedQuad[6];
-		float var8 = var1 + (float)var4;
-		float var9 = var2 + (float)var5;
-		float var10 = var3 + (float)var6;
-		var1 -= var7;
-		var2 -= var7;
-		var3 -= var7;
-		var8 += var7;
-		var9 += var7;
-		var10 += var7;
-		if(this.mirror) {
-			float var11 = var8;
-			var8 = var1;
-			var1 = var11;
-		}
-
-		PositionTextureVertex var20 = new PositionTextureVertex(var1, var2, var3, 0.0F, 0.0F);
-		PositionTextureVertex var12 = new PositionTextureVertex(var8, var2, var3, 0.0F, 8.0F);
-		PositionTextureVertex var13 = new PositionTextureVertex(var8, var9, var3, 8.0F, 8.0F);
-		PositionTextureVertex var14 = new PositionTextureVertex(var1, var9, var3, 8.0F, 0.0F);
-		PositionTextureVertex var15 = new PositionTextureVertex(var1, var2, var10, 0.0F, 0.0F);
-		PositionTextureVertex var16 = new PositionTextureVertex(var8, var2, var10, 0.0F, 8.0F);
-		PositionTextureVertex var17 = new PositionTextureVertex(var8, var9, var10, 8.0F, 8.0F);
-		PositionTextureVertex var18 = new PositionTextureVertex(var1, var9, var10, 8.0F, 0.0F);
-		this.field_35978_r[0] = var20;
-		this.field_35978_r[1] = var12;
-		this.field_35978_r[2] = var13;
-		this.field_35978_r[3] = var14;
-		this.field_35978_r[4] = var15;
-		this.field_35978_r[5] = var16;
-		this.field_35978_r[6] = var17;
-		this.field_35978_r[7] = var18;
-		this.faces[0] = new TexturedQuad(new PositionTextureVertex[]{var16, var12, var13, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6 + var5, this.field_35971_a, this.field_35970_b);
-		this.faces[1] = new TexturedQuad(new PositionTextureVertex[]{var20, var15, var18, var14}, this.textureOffsetX + 0, this.textureOffsetY + var6, this.textureOffsetX + var6, this.textureOffsetY + var6 + var5, this.field_35971_a, this.field_35970_b);
-		this.faces[2] = new TexturedQuad(new PositionTextureVertex[]{var16, var15, var20, var12}, this.textureOffsetX + var6, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6, this.field_35971_a, this.field_35970_b);
-		this.faces[3] = new TexturedQuad(new PositionTextureVertex[]{var13, var14, var18, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4 + var4, this.textureOffsetY + var6, this.field_35971_a, this.field_35970_b);
-		this.faces[4] = new TexturedQuad(new PositionTextureVertex[]{var12, var20, var14, var13}, this.textureOffsetX + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6 + var5, this.field_35971_a, this.field_35970_b);
-		this.faces[5] = new TexturedQuad(new PositionTextureVertex[]{var15, var16, var17, var18}, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6 + var4, this.textureOffsetY + var6 + var5, this.field_35971_a, this.field_35970_b);
-		if(this.mirror) {
-			for(int var19 = 0; var19 < this.faces.length; ++var19) {
-				this.faces[var19].flipFace();
-			}
-		}
-
+		this.cubeList.add(new ModelBox(this, this.textureOffsetX, this.textureOffsetY, var1, var2, var3, var4, var5, var6, var7));
 	}
 
 	public void setRotationPoint(float var1, float var2, float var3) {
@@ -98,18 +87,30 @@
 	}
 
 	public void render(float var1) {
-		if(!this.field_1402_i) {
+		if(!this.isHidden) {
 			if(this.showModel) {
 				if(!this.compiled) {
 					this.compileDisplayList(var1);
 				}
 
+				int var2;
 				if(this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F) {
 					if(this.rotationPointX == 0.0F && this.rotationPointY == 0.0F && this.rotationPointZ == 0.0F) {
 						GL11.glCallList(this.displayList);
+						if(this.childModels != null) {
+							for(var2 = 0; var2 < this.childModels.size(); ++var2) {
+								((ModelRenderer)this.childModels.get(var2)).render(var1);
+							}
+						}
 					} else {
 						GL11.glTranslatef(this.rotationPointX * var1, this.rotationPointY * var1, this.rotationPointZ * var1);
 						GL11.glCallList(this.displayList);
+						if(this.childModels != null) {
+							for(var2 = 0; var2 < this.childModels.size(); ++var2) {
+								((ModelRenderer)this.childModels.get(var2)).render(var1);
+							}
+						}
+
 						GL11.glTranslatef(-this.rotationPointX * var1, -this.rotationPointY * var1, -this.rotationPointZ * var1);
 					}
 				} else {
@@ -128,6 +129,12 @@
 					}
 
 					GL11.glCallList(this.displayList);
+					if(this.childModels != null) {
+						for(var2 = 0; var2 < this.childModels.size(); ++var2) {
+							((ModelRenderer)this.childModels.get(var2)).render(var1);
+						}
+					}
+
 					GL11.glPopMatrix();
 				}
 
@@ -136,7 +143,7 @@
 	}
 
 	public void renderWithRotation(float var1) {
-		if(!this.field_1402_i) {
+		if(!this.isHidden) {
 			if(this.showModel) {
 				if(!this.compiled) {
 					this.compileDisplayList(var1);
@@ -163,7 +170,7 @@
 	}
 
 	public void postRender(float var1) {
-		if(!this.field_1402_i) {
+		if(!this.isHidden) {
 			if(this.showModel) {
 				if(!this.compiled) {
 					this.compileDisplayList(var1);
@@ -197,26 +204,17 @@
 		GL11.glNewList(this.displayList, GL11.GL_COMPILE);
 		Tessellator var2 = Tessellator.instance;
 
-		for(int var3 = 0; var3 < this.faces.length; ++var3) {
-			this.faces[var3].draw(var2, var1);
+		for(int var3 = 0; var3 < this.cubeList.size(); ++var3) {
+			((ModelBox)this.cubeList.get(var3)).func_40670_a(var2, var1);
 		}
 
 		GL11.glEndList();
 		this.compiled = true;
 	}
 
-	public ModelRenderer func_35968_a(int var1, int var2) {
-		this.field_35971_a = (float)var1;
-		this.field_35970_b = (float)var2;
+	public ModelRenderer setTextureSize(int var1, int var2) {
+		this.textureWidth = (float)var1;
+		this.textureHeight = (float)var2;
 		return this;
-	}
-
-	public void func_35969_a(ModelRenderer var1) {
-		this.rotationPointX = var1.rotationPointX;
-		this.rotationPointY = var1.rotationPointY;
-		this.rotationPointZ = var1.rotationPointZ;
-		this.rotateAngleX = var1.rotateAngleX;
-		this.rotateAngleY = var1.rotateAngleY;
-		this.rotateAngleZ = var1.rotateAngleZ;
 	}
 }
--- /dev/null
+++ net/minecraft/src/NBTTagIntArray.java
@@ -1,0 +1,57 @@
+package net.minecraft.src;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.Arrays;
+
+public class NBTTagIntArray extends NBTBase {
+	public int[] field_48447_a;
+
+	public NBTTagIntArray() {
+	}
+
+	public NBTTagIntArray(int[] var2) {
+		this.field_48447_a = var2;
+	}
+
+	void writeTagContents(DataOutput var1) throws IOException {
+		var1.writeInt(this.field_48447_a.length);
+
+		for(int var2 = 0; var2 < this.field_48447_a.length; ++var2) {
+			var1.writeInt(this.field_48447_a[var2]);
+		}
+
+	}
+
+	void readTagContents(DataInput var1) throws IOException {
+		int var2 = var1.readInt();
+		this.field_48447_a = new int[var2];
+
+		for(int var3 = 0; var3 < var2; ++var3) {
+			this.field_48447_a[var3] = var1.readInt();
+		}
+
+	}
+
+	public byte getType() {
+		return (byte)11;
+	}
+
+	public String toString() {
+		return "[" + this.field_48447_a.length + " bytes]";
+	}
+
+	public boolean equals(Object var1) {
+		if(!super.equals(var1)) {
+			return false;
+		} else {
+			NBTTagIntArray var2 = (NBTTagIntArray)var1;
+			return this.field_48447_a == null && var2.field_48447_a == null || this.field_48447_a != null && this.field_48447_a.equals(var2.field_48447_a);
+		}
+	}
+
+	public int hashCode() {
+		return super.hashCode() ^ Arrays.hashCode(this.field_48447_a);
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiDemoPreset.java
@@ -1,0 +1,175 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class GuiDemoPreset extends GuiScreen {
+	private static final int hoverSpeed = 5;
+
+	private int[] hoverPanels = new int[4];
+	private int hovered;
+	private int exitTicks;
+	private boolean exiting;
+
+	public void updateScreen() {
+		for (int i = 0; i < 4; i++) {
+			if (i == this.hovered) {
+				hoverPanels[i] = Math.min(hoverPanels[i] + 1, hoverSpeed);
+			} else {
+				hoverPanels[i] = Math.max(hoverPanels[i] - 1, 0);
+			}
+		}
+
+		if (this.exiting && ++this.exitTicks > 30) {
+			this.game.displayGuiScreen(null);
+		}
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		super.drawScreen(var1, var2, var3);
+
+		if (!this.exiting) {
+			if (var1 >= 0 && var1 <= this.width && var2 >= 40 && var2 <= this.height) {
+				this.hovered = var1 * 4 / this.width;
+			} else {
+				this.hovered = -1;
+			}
+		}
+
+		int tex = this.game.renderEngine.getTexture("%blur%/gui/demo/beta.jpg");
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, tex);
+		this.drawImageRect(0.0F, 0.0F, this.width / 4.0F, this.height, this.getHoverAmount(0, var3) * 0.1F);
+		this.drawGradientRect(0, 0, this.width / 4, this.height, this.getHoverColor(0, var3), this.getHoverColor(0, var3));
+
+		tex = this.game.renderEngine.getTexture("%blur%/gui/demo/neutral.jpg");
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, tex);
+		this.drawImageRect(this.width / 4.0F, 0.0F, this.width / 4.0F, this.height, this.getHoverAmount(1, var3) * 0.1F);
+		this.drawGradientRect(this.width / 4, 0, this.width / 2, this.height, this.getHoverColor(1, var3), this.getHoverColor(1, var3));
+
+		tex = this.game.renderEngine.getTexture("%blur%/gui/demo/adventure.jpg");
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, tex);
+		this.drawImageRect(this.width / 2.0F, 0.0F, this.width / 4.0F, this.height, this.getHoverAmount(2, var3) * 0.1F);
+		this.drawGradientRect(this.width / 2, 0, this.width * 3 / 4, this.height, this.getHoverColor(2, var3), this.getHoverColor(2, var3));
+
+		tex = this.game.renderEngine.getTexture("%blur%/gui/demo/chaotic.jpg");
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, tex);
+		this.drawImageRect(this.width * 3.0F / 4.0F, 0.0F, this.width / 4.0F, this.height, this.getHoverAmount(3, var3) * 0.1F);
+		this.drawGradientRect(this.width * 3 / 4, 0, this.width, this.height, this.getHoverColor(3, var3), this.getHoverColor(3, var3));
+
+		this.drawGradientRect(this.width / 4 - 1, 0, this.width / 4 + 1, this.height, 0xFFFFFFFF, 0xFFFFFFFF);
+		this.drawGradientRect(this.width / 2 - 1, 0, this.width / 2 + 1, this.height, 0xFFFFFFFF, 0xFFFFFFFF);
+		this.drawGradientRect(this.width * 3 / 4 - 1, 0, this.width * 3 / 4 + 1, this.height, 0xFFFFFFFF, 0xFFFFFFFF);
+
+		this.drawGradientRect(0, 0, this.width, 40, 0xFF1F1F1F, 0xFF1F1F1F);
+		this.drawGradientRect(0, 39, this.width, 41, 0xFFFFFFFF, 0xFFFFFFFF);
+
+		GL11.glPushMatrix();
+		GL11.glScalef(1.5F, 1.5F, 1.5F);
+		this.drawCenteredString(this.fontRenderer, "SELECT PRESET", this.width / 3, 8, 0xFFFFFF);
+
+		GL11.glPushMatrix();
+		GL11.glTranslatef(0.0F, -this.getHoverAmount(0, var3) * this.height / 40.0F, 0.0F);
+		this.drawCenteredString(this.fontRenderer, "Beta", this.width / 12, this.height / 3, 0xFFFFFF);
+		GL11.glPopMatrix();
+
+		GL11.glPushMatrix();
+		GL11.glTranslatef(0.0F, -this.getHoverAmount(1, var3) * this.height / 40.0F, 0.0F);
+		this.drawCenteredString(this.fontRenderer, "Neutral", this.width / 3 - this.width / 12, this.height / 3, 0xFFFFFF);
+		GL11.glPopMatrix();
+
+		GL11.glPushMatrix();
+		GL11.glTranslatef(0.0F, -this.getHoverAmount(2, var3) * this.height / 40.0F, 0.0F);
+		this.drawCenteredString(this.fontRenderer, "Adventure", this.width / 3 + this.width / 12, this.height / 3, 0xFFFFFF);
+		GL11.glPopMatrix();
+
+		GL11.glPushMatrix();
+		GL11.glTranslatef(0.0F, -this.getHoverAmount(3, var3) * this.height / 40.0F, 0.0F);
+		this.drawCenteredString(this.fontRenderer, "Chaotic", this.width * 2 / 3 - this.width / 12, this.height / 3, 0xFFFFFF);
+		GL11.glPopMatrix();
+
+		GL11.glPopMatrix();
+
+		GL11.glPushMatrix();
+		GL11.glTranslatef(0.0F, -this.getHoverAmount(3, var3) * this.height / 40.0F * 1.5F, 0.0F);
+		this.drawCenteredString(this.fontRenderer, "(Limited time)", this.width - this.width / 8, this.height / 2 + 16, 0xAAAAAA);
+		GL11.glPopMatrix();
+
+		if (this.exiting) {
+			float af = MathHelper.clamp((this.exitTicks + var3) / 10.0F, 0.0F, 1.0F);
+			int a = MathHelper.clamp((int)(af * 255.0F), 0, 255);
+			int c = a << 24 | 0xFFFFFF;
+			this.drawGradientRect(0, 0, this.width, this.height, c, c);
+			GL11.glEnable(GL11.GL_BLEND);
+			GL11.glBlendFunc(GL11.GL_DST_COLOR, GL11.GL_ZERO);
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, af);
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.game.renderEngine.getTexture("/title/mojang.png"));
+			this.drawTexturedModalRect(this.width / 2 - 128, this.height / 2 - 128, 0, 0, 256, 256);
+			GL11.glDisable(GL11.GL_BLEND);
+			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+		}
+	}
+
+	protected void mouseClicked(int var1, int var2, int var3) {
+		super.mouseClicked(var1, var2, var3);
+
+		if (var3 == 0 && this.hovered >= 0) {
+			Personalization.betaness = 0.0F;
+			Personalization.weirdness = 0.0F;
+			Personalization.chaos = 0.0F;
+
+			switch (this.hovered) {
+				case 0:
+					Personalization.betaness = 3.0F;
+					break;
+
+				case 2:
+					Personalization.betaness = -3.0F;
+					break;
+
+				case 3:
+					Personalization.chaos = 3.0F;
+					break;
+			}
+
+			Personalization.repersonalize();
+			this.game.sndManager.playSoundFX("random.click", 1.0F, 1.0F);
+			this.exiting = true;
+		}
+	}
+
+	protected void keyTyped(char var1, int var2) {
+	}
+
+	private float getHoverAmount(int index, float partialTick) {
+		boolean isHovered = this.hovered == index;
+
+		float hover = this.hoverPanels[index];
+		if (isHovered) {
+			hover += partialTick;
+		} else {
+			hover -= partialTick;
+		}
+		hover = MathHelper.clamp(hover / hoverSpeed, 0.0F, 1.0F);
+		hover = 1.0F - hover;
+		hover *= hover;
+		hover = 1.0F - hover;
+		return hover;
+	}
+
+	private int getHoverColor(int index, float partialTick) {
+		float hover = this.getHoverAmount(index, partialTick);
+		int a = (int)(hover * 0.2F * 255.0F);
+		return a << 24 | 0xFFFFFF;
+	}
+
+	private void drawImageRect(float x, float y, float width, float height, float scale) {
+		float aspect = Math.min(width / height, height / width);
+
+		Tessellator var9 = Tessellator.instance;
+		var9.startDrawingQuads();
+		var9.addVertexWithUV((double)(x + 0), (double)(y + height), (double)this.zLevel, scale * aspect, 1.0D - scale * aspect);
+		var9.addVertexWithUV((double)(x + width), (double)(y + height), (double)this.zLevel, 1.0D - scale * aspect, 1.0D - scale * aspect);
+		var9.addVertexWithUV((double)(x + width), (double)(y + 0), (double)this.zLevel, 1.0D - scale * aspect, scale * aspect);
+		var9.addVertexWithUV((double)(x + 0), (double)(y + 0), (double)this.zLevel, scale * aspect, scale * aspect);
+		var9.draw();
+	}
+}
--- net/minecraft/src/ItemFood.java
+++ net/minecraft/src/ItemFood.java
@@ -2,14 +2,14 @@
 
 public class ItemFood extends Item {
 	public final int field_35430_a;
-	private final int healAmount;
-	private final float field_35428_c;
-	private final boolean isWolfsFavoriteMeat;
-	private boolean field_35431_bw;
-	private int field_35433_bx;
-	private int field_35432_by;
-	private int field_35427_bz;
-	private float field_35429_bA;
+	protected final int healAmount;
+	protected final float field_35428_c;
+	protected final boolean isWolfsFavoriteMeat;
+	protected boolean field_35431_bw;
+	protected int field_35433_bx;
+	protected int field_35432_by;
+	protected int field_35427_bz;
+	protected float field_35429_bA;
 
 	public ItemFood(int var1, int var2, float var3, boolean var4) {
 		super(var1);
@@ -25,7 +25,11 @@
 
 	public ItemStack func_35413_b(ItemStack var1, World var2, EntityPlayer var3) {
 		--var1.stackSize;
-		var3.func_35191_at().func_35761_a(this);
+		if (Personalization.hunger) {
+			var3.func_35191_at().func_35761_a(this);
+		} else {
+			var3.heal(this.healAmount);
+		}
 		if(!var2.multiplayerWorld && this.field_35433_bx > 0 && var2.rand.nextFloat() < this.field_35429_bA) {
 			var3.func_35165_a(new PotionEffect(this.field_35433_bx, this.field_35432_by * 20, this.field_35427_bz));
 		}
@@ -42,8 +46,24 @@
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		if(var3.func_35197_b(this.field_35431_bw)) {
-			var3.func_35199_b(var1, this.func_35411_c(var1));
+		if (!Personalization.stackFood && var1.stackSize > 1) {
+			while (var1.stackSize > 0) {
+				EntityItem item = new EntityItem(var2, var3.posX, var3.posY, var3.posZ, var1.splitStack(1));
+				item.delayBeforeCanPickup = 40;
+				var2.entityJoinedWorld(item);
+			}
+
+			var2.playSoundEffect(var3.posX, var3.posY, var3.posZ, "random.explode", 4.0F, (1.0F + (var3.rand.nextFloat() - var3.rand.nextFloat()) * 0.2F) * 0.7F);
+			var2.spawnParticle("hugeexplosion", var3.posX, var3.posY, var3.posZ, 0.0D, 0.0D, 0.0D);
+			return var1;
+		}
+
+		if(!Personalization.hunger || var3.func_35197_b(this.field_35431_bw)) {
+			if(Personalization.fastEat) {
+				if (var3.health < var3.getMaxHealth()) var1 = this.func_35413_b(var1, var2, var3);
+			} else {
+				var3.func_35199_b(var1, this.func_35411_c(var1));
+			}
 		}
 
 		return var1;
--- /dev/null
+++ net/minecraft/src/GuiStupid.java
@@ -1,0 +1,121 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class GuiStupid extends GuiControlPanel {
+	private static final String[][] messages = {
+			{
+					"Hi! I was a stupid dev!",
+					"You may have noticed that the game is very adventure-esque.",
+					"That's a huge bug! Sorry.",
+					"I rushed the release of this mod and I didn't test it properly.",
+					"It's fixed now, but the damage has already been done.",
+					"Time to reset your settings!"
+			},
+			{
+					"AAGH! I DIDN'T FIX IT!",
+					"Turns out mining ore caused the bug.",
+					"Fixed now! Resetting again! Sorry!"
+			}
+	};
+
+	private int updateCounter = -10;
+	private int state = 0;
+	private int msgNum = 0;
+	private int type = 0;
+	private boolean justClicked;
+
+	public GuiStupid(int type) {
+		this.type = type;
+		Personalization.betaness = 0.0F;
+		Personalization.weirdness = 0.0F;
+		Personalization.chaos = 0.0F;
+		Personalization.days = 0;
+		Personalization.controlPanelUnlocked = false;
+		Personalization.vanillaMode = Personalization.rand.nextInt(3) == 0;
+		Personalization.version = null;
+		Personalization.noiseSeed = 0;
+		while (Personalization.noiseSeed == 0) {
+			Personalization.noiseSeed = Personalization.rand.nextLong();
+		}
+
+		Personalization.options.clear();
+		Personalization.optionMap.clear();
+		Personalization.personalize();
+	}
+
+	public void updateScreen() {
+		super.updateScreen();
+		this.updateCounter++;
+
+		if (this.state == 0 && this.updateCounter > 20) {
+			this.state = 1;
+			this.updateCounter = 0;
+			this.game.sndManager.playSoundFX("mob.wolf.bark", 1.0F, 1.2F + Personalization.rand.nextFloat() * 0.2F);
+		} else if (this.state == 1 && (this.updateCounter > 100 || this.justClicked)) {
+			if (++this.msgNum >= messages[this.type].length) {
+				this.state = 2;
+			} else {
+				this.game.sndManager.playSoundFX("mob.wolf.bark", 1.0F, 1.2F + Personalization.rand.nextFloat() * 0.2F);
+			}
+			this.updateCounter = 0;
+		}
+
+		this.justClicked = false;
+		this.game.sndManager.playSecretMusic(1.0F + this.type * 0.25F);
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawControlPanelBackground();
+
+		int staggoTexture = this.game.renderEngine.getTexture("/gui/staggo.png");
+		this.game.renderEngine.bindTexture(staggoTexture);
+
+		int slide = 200;
+		float squash = 0.0F;
+		float tween = (this.updateCounter + var3) / 10.0F;
+		tween = MathHelper.clamp(tween, 0.0F, 1.0F);
+		tween = this.state == 2 ? tween * tween : squareOut(tween);
+
+		if (this.state == 0) {
+			slide = (int)(tween * 200.0F);
+		} else if (this.state == 1) {
+			squash = (1.0F - tween) * 0.05F;
+		} else if (this.state == 2) {
+			slide = (int)(200.0F - tween * 200.0F);
+			this.game.guiStatic.forcedStrength = (this.updateCounter + var3) / 20.0F;
+		}
+
+		GL11.glPushMatrix();
+		GL11.glTranslatef(256.0F, 256.0F, 0.0F);
+		GL11.glScalef(1.0F + squash, 1.0F - squash, 1.0F);
+		GL11.glTranslatef(-256.0F, -256.0F, 0.0F);
+		GL11.glTranslatef(this.width - slide, this.height - 240, 0.0F);
+		this.drawTexturedModalRect(0, 0, 0, 0, 256, 256);
+		GL11.glPopMatrix();
+
+		if (this.state == 1) {
+			GL11.glPushMatrix();
+			GL11.glTranslatef(this.width / 10.0F, this.height / 2.0F - 24.0F, 0);
+			GL11.glScalef(2.0F, 2.0F, 0.0F);
+			GL11.glEnable(GL11.GL_BLEND);
+			this.fontRenderer.lineHeight = 10;
+			this.fontRenderer.drawSplitString(messages[type][msgNum], 1, 1, this.width / 4, 0xFFFFFF, true);
+			this.fontRenderer.drawSplitString(messages[type][msgNum], 0, 0, this.width / 4, 0xFFFFFF, false);
+			this.fontRenderer.lineHeight = 8;
+			GL11.glDisable(GL11.GL_BLEND);
+			GL11.glPopMatrix();
+		}
+	}
+
+	protected void mouseClicked(int var1, int var2, int var3) {
+		this.justClicked = true;
+	}
+
+	private static float squareOut(float f) {
+		f = 1.0F - f;
+		f *= f;
+		f = 1.0F - f;
+		return f;
+	}
+}
--- net/minecraft/src/BiomeGenHills.java
+++ net/minecraft/src/BiomeGenHills.java
@@ -1,7 +1,60 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class BiomeGenHills extends BiomeGenBase {
+    private static final NoiseGeneratorSimplexOctaves snowNoise
+		    = new NoiseGeneratorSimplexOctaves(new Random(1234L), 1);
+	public boolean stony;
+	public boolean snowy;
+	public boolean spruce;
+	public boolean trees;
+
 	protected BiomeGenHills(int var1) {
 		super(var1);
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return this.spruce && !Personalization.oakOnly && var1.nextInt(3) > 0 ? new WorldGenTaiga2() : super.getRandomWorldGenForTrees(var1);
+	}
+
+	public void func_35477_a(World var1, Random var2, int var3, int var4) {
+		this.decorator.trees = this.trees && doHills(var3, var4) ? 3 : 0;
+		super.func_35477_a(var1, var2, var3, var4);
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, int topTerrainHeight,
+	                              double sandValue, double gravelValue, double erosionValue, double simplexValue) {
+		if (this.stony && doMutation((x + random.nextInt(4)) >> 2, (z + random.nextInt(4)) >> 2) && (erosionValue < -1.0D || erosionValue > 2.0D)) {
+			this.topBlock = this.fillerBlock = (byte)Block.gravel.blockID;
+		} else if (this.stony && erosionValue > 1.0D) {
+			this.topBlock = this.fillerBlock = (byte)Block.stone.blockID;
+		} else {
+			this.topBlock = (byte)Block.grass.blockID;
+			this.fillerBlock = (byte)Block.dirt.blockID;
+		}
+
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, topTerrainHeight, sandValue, gravelValue, erosionValue, simplexValue);
+
+		int height = blocks.length / 256;
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+
+		float tempOffset = (float)snowNoise.func_151601_a(x / 8.0D, z / 8.0D) * 4.0F;
+		for (int y = Math.min(topTerrainHeight + 1, height - 1),
+		         i = chunkX * 16 * height + chunkZ * height + y;
+				 y > 64; y--, i--) {
+			if (blocks[i] != 0 && y == height - 1) {
+				return;
+			}
+
+			if (this.snowy && blocks[i] == 0 && blocks[i - 1] != 0) {
+				float temp = this.field_35490_s - (tempOffset + y - 64.0F) * 0.05F / 30.0F;
+				if (temp <= 0.15F) {
+					blocks[i] = (byte)Block.snow.blockID;
+					return;
+				}
+			}
+		}
 	}
 }
--- net/minecraft/src/RenderBlocks.java
+++ net/minecraft/src/RenderBlocks.java
@@ -95,6 +95,12 @@
 	private boolean aoGrassXYZPNC;
 	private boolean aoGrassXYZNNC;
 	private boolean aoGrassXYZCNP;
+	private float topLight;
+	private float bottomLight;
+	private float northLight;
+	private float southLight;
+	private float westLight;
+	private float eastLight;
 
 	public RenderBlocks(IBlockAccess var1) {
 		this.blockAccess = var1;
@@ -112,9 +118,21 @@
 			}
 		}
 
+		this.updateDirectionalLighting();
+
 	}
 
 	public RenderBlocks() {
+		this.updateDirectionalLighting();
+	}
+
+	public void updateDirectionalLighting() {
+		this.topLight = this.getTopLight();
+		this.bottomLight = this.getBottomLight();
+		this.northLight = this.getNorthLight();
+		this.southLight = this.getSouthLight();
+		this.westLight = this.getWestLight();
+		this.eastLight = this.getEastLight();
 	}
 
 	public void renderBlockUsingTexture(Block var1, int var2, int var3, int var4, int var5) {
@@ -167,7 +185,7 @@
 	public boolean renderBlockByRenderType(Block var1, int var2, int var3, int var4) {
 		int var5 = var1.getRenderType();
 		var1.setBlockBoundsBasedOnState(this.blockAccess, var2, var3, var4);
-		return var5 == 0 ? this.renderStandardBlock(var1, var2, var3, var4) : (var5 == 4 ? this.renderBlockFluids(var1, var2, var3, var4) : (var5 == 13 ? this.renderBlockCactus(var1, var2, var3, var4) : (var5 == 1 ? this.renderBlockReed(var1, var2, var3, var4) : (var5 == 19 ? this.renderBlockCrops(var1, var2, var3, var4) : (var5 == 6 ? this.func_35930_l(var1, var2, var3, var4) : (var5 == 2 ? this.renderBlockTorch(var1, var2, var3, var4) : (var5 == 3 ? this.renderBlockFire(var1, var2, var3, var4) : (var5 == 5 ? this.renderBlockRedstoneWire(var1, var2, var3, var4) : (var5 == 8 ? this.renderBlockLadder(var1, var2, var3, var4) : (var5 == 7 ? this.renderBlockDoor(var1, var2, var3, var4) : (var5 == 9 ? this.renderBlockMinecartTrack((BlockRail)var1, var2, var3, var4) : (var5 == 10 ? this.renderBlockStairs(var1, var2, var3, var4) : (var5 == 11 ? this.func_35925_a((BlockFence)var1, var2, var3, var4) : (var5 == 12 ? this.renderBlockLever(var1, var2, var3, var4) : (var5 == 14 ? this.renderBlockBed(var1, var2, var3, var4) : (var5 == 15 ? this.renderBlockRepeater(var1, var2, var3, var4) : (var5 == 16 ? this.renderPistonBase(var1, var2, var3, var4, false) : (var5 == 17 ? this.renderPistonExtension(var1, var2, var3, var4, true) : (var5 == 18 ? this.func_35922_a((BlockPane)var1, var2, var3, var4) : (var5 == 20 ? this.func_35929_i(var1, var2, var3, var4) : (var5 == 21 ? this.func_35923_a((BlockFenceGate)var1, var2, var3, var4) : false)))))))))))))))))))));
+		return var5 == 0 ? this.renderStandardBlock(var1, var2, var3, var4) : (var5 == 4 ? this.renderBlockFluids(var1, var2, var3, var4) : (var5 == 13 ? this.renderBlockCactus(var1, var2, var3, var4) : (var5 == 1 ? this.renderBlockReed(var1, var2, var3, var4) : (var5 == 19 ? this.renderBlockCrops(var1, var2, var3, var4) : (var5 == 6 ? this.func_35930_l(var1, var2, var3, var4) : (var5 == 2 ? this.renderBlockTorch(var1, var2, var3, var4) : (var5 == 3 ? this.renderBlockFire(var1, var2, var3, var4) : (var5 == 5 ? this.renderBlockRedstoneWire(var1, var2, var3, var4) : (var5 == 8 ? this.renderBlockLadder(var1, var2, var3, var4) : (var5 == 7 ? this.renderBlockDoor(var1, var2, var3, var4) : (var5 == 9 ? this.renderBlockMinecartTrack((BlockRail)var1, var2, var3, var4) : (var5 == 10 ? this.renderBlockStairs(var1, var2, var3, var4) : (var5 == 11 ? this.func_35925_a((BlockFence)var1, var2, var3, var4) : (var5 == 12 ? this.renderBlockLever(var1, var2, var3, var4) : (var5 == 14 ? this.renderBlockBed(var1, var2, var3, var4) : (var5 == 15 ? this.renderBlockRepeater(var1, var2, var3, var4) : (var5 == 16 ? this.renderPistonBase(var1, var2, var3, var4, false) : (var5 == 17 ? this.renderPistonExtension(var1, var2, var3, var4, true) : (var5 == 18 ? this.func_35922_a((BlockPane)var1, var2, var3, var4) : (var5 == 20 ? this.func_35929_i(var1, var2, var3, var4) : (var5 == 21 ? this.func_35923_a((BlockFenceGate)var1, var2, var3, var4) : (var5 == 23 ? this.renderBlockSkyPortalFrame(var1, var2, var3, var4) : false))))))))))))))))))))));
 	}
 
 	private boolean renderBlockBed(Block var1, int var2, int var3, int var4) {
@@ -175,10 +193,12 @@
 		int var6 = this.blockAccess.getBlockMetadata(var2, var3, var4);
 		int var7 = BlockBed.getDirectionFromMetadata(var6);
 		boolean var8 = BlockBed.isBlockFootOfBed(var6);
-		float var9 = 0.5F;
-		float var10 = 1.0F;
-		float var11 = 0.8F;
-		float var12 = 0.6F;
+		float var9 = this.bottomLight;
+		float var10 = this.topLight;
+		float var11 = this.westLight;
+		float var11a = this.eastLight;
+		float var12 = this.northLight;
+		float var12a = this.southLight;
 		int var25 = var1.func_35275_c(this.blockAccess, var2, var3, var4);
 		var5.func_35835_b(var25);
 		var5.setColorOpaque_F(var9, var9, var9);
@@ -266,7 +286,7 @@
 
 		if(var27 != 2 && (this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2))) {
 			var5.func_35835_b(var1.minZ > 0.0D ? var25 : var1.func_35275_c(this.blockAccess, var2, var3, var4 - 1));
-			var5.setColorOpaque_F(var11, var11, var11);
+			var5.setColorOpaque_F(var11a, var11a, var11a);
 			this.flipTexture = var64 == 2;
 			this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2));
 		}
@@ -287,7 +307,7 @@
 
 		if(var27 != 5 && (this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5))) {
 			var5.func_35835_b(var1.maxZ < 1.0D ? var25 : var1.func_35275_c(this.blockAccess, var2 + 1, var3, var4));
-			var5.setColorOpaque_F(var12, var12, var12);
+			var5.setColorOpaque_F(var12a, var12a, var12a);
 			this.flipTexture = var64 == 5;
 			this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5));
 		}
@@ -2015,7 +2035,7 @@
 	public boolean renderBlockReed(Block var1, int var2, int var3, int var4) {
 		Tessellator var5 = Tessellator.instance;
 		var5.func_35835_b(var1.func_35275_c(this.blockAccess, var2, var3, var4));
-		float var6 = 1.0F;
+		float var6 = this.topLight;
 		int var7 = var1.colorMultiplier(this.blockAccess, var2, var3, var4);
 		float var8 = (float)(var7 >> 16 & 255) / 255.0F;
 		float var9 = (float)(var7 >> 8 & 255) / 255.0F;
@@ -2049,7 +2069,7 @@
 		BlockStem var5 = (BlockStem)var1;
 		Tessellator var6 = Tessellator.instance;
 		var6.func_35835_b(var5.func_35275_c(this.blockAccess, var2, var3, var4));
-		float var7 = 1.0F;
+		float var7 = this.topLight;
 		int var8 = var5.colorMultiplier(this.blockAccess, var2, var3, var4);
 		float var9 = (float)(var8 >> 16 & 255) / 255.0F;
 		float var10 = (float)(var8 >> 8 & 255) / 255.0F;
@@ -2316,10 +2336,17 @@
 			return false;
 		} else {
 			boolean var13 = false;
-			float var14 = 0.5F;
-			float var15 = 1.0F;
-			float var16 = 0.8F;
-			float var17 = 0.6F;
+			float var14 = this.bottomLight;
+			float var15 = this.topLight;
+			float var16 = this.eastLight;
+			float var17 = this.northLight;
+			float lightValue;
+			if (Personalization.directionalLighting && (lightValue = Block.lightValue[var1.blockID]) > 0.0F) {
+				var14 += (1.0F - var14) * lightValue;
+				var15 += (1.0F - var15) * lightValue;
+				var16 += (1.0F - var16) * lightValue;
+				var17 += (1.0F - var17) * lightValue;
+			}
 			double var18 = 0.0D;
 			double var20 = 1.0D;
 			Material var22 = var1.blockMaterial;
@@ -2363,7 +2390,7 @@
 			if(this.renderAllFaces || var11) {
 				var5.func_35835_b(var1.func_35275_c(this.blockAccess, var2, var3 - 1, var4));
 				float var62 = 1.0F;
-				var5.setColorOpaque_F(var14 * var62, var14 * var62, var14 * var62);
+				var5.setColorOpaque_F(var14 * var62 * var7, var14 * var62 * var8, var14 * var62 * var9);
 				this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTextureFromSide(0));
 				var13 = true;
 			}
@@ -2488,10 +2515,12 @@
 	}
 
 	public void renderBlockFallingSand(Block var1, World var2, int var3, int var4, int var5) {
-		float var6 = 0.5F;
-		float var7 = 1.0F;
-		float var8 = 0.8F;
-		float var9 = 0.6F;
+		float var6 = this.bottomLight;
+		float var7 = this.topLight;
+		float var8 = this.westLight;
+		float var8a = this.eastLight;
+		float var9 = this.northLight;
+		float var9a = this.southLight;
 		Tessellator var10 = Tessellator.instance;
 		var10.startDrawingQuads();
 		var10.func_35835_b(var1.func_35275_c(var2, var3, var4, var5));
@@ -2515,7 +2544,7 @@
 			var12 = var11;
 		}
 
-		var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
+		var10.setColorOpaque_F(var8a * var12, var8a * var12, var8a * var12);
 		this.renderEastFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(2));
 		var12 = 1.0F;
 		if(var12 < var11) {
@@ -2536,7 +2565,7 @@
 			var12 = var11;
 		}
 
-		var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
+		var10.setColorOpaque_F(var9a * var12, var9a * var12, var9a * var12);
 		this.renderSouthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(5));
 		var10.draw();
 	}
@@ -2565,6 +2594,12 @@
 		float var10 = this.lightValueOwn;
 		float var11 = this.lightValueOwn;
 		float var12 = this.lightValueOwn;
+		float bottomLight = this.bottomLight;
+		float topLight = this.topLight;
+		float westLight = this.westLight;
+		float eastLight = this.eastLight;
+		float northLight = this.northLight;
+		float southLight = this.southLight;
 		boolean var13 = true;
 		boolean var14 = true;
 		boolean var15 = true;
@@ -2572,6 +2607,15 @@
 		boolean var17 = true;
 		boolean var18 = true;
 		this.lightValueOwn = var1.func_35276_e(this.blockAccess, var2, var3, var4);
+		float lightValue;
+		if (Personalization.directionalLighting && (lightValue = Block.lightValue[var1.blockID]) > 0.0F) {
+			bottomLight += (1.0F - bottomLight) * lightValue;
+			topLight += (1.0F - topLight) * lightValue;
+			westLight += (1.0F - westLight) * lightValue;
+			eastLight += (1.0F - eastLight) * lightValue;
+			northLight += (1.0F - northLight) * lightValue;
+			southLight += (1.0F - southLight) * lightValue;
+		}
 		this.aoLightValueXNeg = var1.func_35276_e(this.blockAccess, var2 - 1, var3, var4);
 		this.aoLightValueYNeg = var1.func_35276_e(this.blockAccess, var2, var3 - 1, var4);
 		this.aoLightValueZNeg = var1.func_35276_e(this.blockAccess, var2, var3, var4 - 1);
@@ -2674,9 +2718,9 @@
 				this.field_35944_al = this.func_35924_c(this.field_35935_Q, this.field_35936_P, this.field_35937_S, var20);
 			}
 
-			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = (var13 ? var5 : 1.0F) * 0.5F;
-			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = (var13 ? var6 : 1.0F) * 0.5F;
-			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = (var13 ? var7 : 1.0F) * 0.5F;
+			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = (var13 ? var5 : 1.0F) * bottomLight;
+			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = (var13 ? var6 : 1.0F) * bottomLight;
+			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = (var13 ? var7 : 1.0F) * bottomLight;
 			this.colorRedTopLeft *= var9;
 			this.colorGreenTopLeft *= var9;
 			this.colorBlueTopLeft *= var9;
@@ -2753,9 +2797,9 @@
 				this.field_35947_am = this.func_35924_c(this.field_35939_Y, this.field_35940_X, this.field_35951_aa, var23);
 			}
 
-			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = var14 ? var5 : 1.0F;
-			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = var14 ? var6 : 1.0F;
-			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = var14 ? var7 : 1.0F;
+			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = (var14 ? var5 : 1.0F) * topLight;
+			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = (var14 ? var6 : 1.0F) * topLight;
+			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = (var14 ? var7 : 1.0F) * topLight;
 			this.colorRedTopLeft *= var9;
 			this.colorGreenTopLeft *= var9;
 			this.colorBlueTopLeft *= var9;
@@ -2833,9 +2877,9 @@
 				this.field_35948_an = this.func_35924_c(this.field_35936_P, this.field_35956_af, this.field_35937_S, var21);
 			}
 
-			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = (var15 ? var5 : 1.0F) * 0.8F;
-			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = (var15 ? var6 : 1.0F) * 0.8F;
-			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = (var15 ? var7 : 1.0F) * 0.8F;
+			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = (var15 ? var5 : 1.0F) * eastLight;
+			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = (var15 ? var6 : 1.0F) * eastLight;
+			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = (var15 ? var7 : 1.0F) * eastLight;
 			this.colorRedTopLeft *= var9;
 			this.colorGreenTopLeft *= var9;
 			this.colorBlueTopLeft *= var9;
@@ -2929,9 +2973,9 @@
 				this.field_35944_al = this.func_35924_c(this.field_35938_R, this.field_35954_ah, this.field_35932_T, var24);
 			}
 
-			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = (var16 ? var5 : 1.0F) * 0.8F;
-			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = (var16 ? var6 : 1.0F) * 0.8F;
-			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = (var16 ? var7 : 1.0F) * 0.8F;
+			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = (var16 ? var5 : 1.0F) * westLight;
+			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = (var16 ? var6 : 1.0F) * westLight;
+			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = (var16 ? var7 : 1.0F) * westLight;
 			this.colorRedTopLeft *= var9;
 			this.colorGreenTopLeft *= var9;
 			this.colorBlueTopLeft *= var9;
@@ -3025,9 +3069,9 @@
 				this.field_35947_am = this.func_35924_c(this.field_35936_P, this.field_35935_Q, this.field_35956_af, var19);
 			}
 
-			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = (var17 ? var5 : 1.0F) * 0.6F;
-			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = (var17 ? var6 : 1.0F) * 0.6F;
-			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = (var17 ? var7 : 1.0F) * 0.6F;
+			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = (var17 ? var5 : 1.0F) * northLight;
+			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = (var17 ? var6 : 1.0F) * northLight;
+			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = (var17 ? var7 : 1.0F) * northLight;
 			this.colorRedTopLeft *= var9;
 			this.colorGreenTopLeft *= var9;
 			this.colorBlueTopLeft *= var9;
@@ -3121,9 +3165,9 @@
 				this.field_35944_al = this.func_35924_c(this.field_35931_U, this.field_35934_V, this.field_35953_ag, var22);
 			}
 
-			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = (var18 ? var5 : 1.0F) * 0.6F;
-			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = (var18 ? var6 : 1.0F) * 0.6F;
-			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = (var18 ? var7 : 1.0F) * 0.6F;
+			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = (var18 ? var5 : 1.0F) * southLight;
+			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = (var18 ? var6 : 1.0F) * southLight;
+			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = (var18 ? var7 : 1.0F) * southLight;
 			this.colorRedTopLeft *= var9;
 			this.colorGreenTopLeft *= var9;
 			this.colorBlueTopLeft *= var9;
@@ -3181,32 +3225,55 @@
 		this.enableAO = false;
 		Tessellator var8 = Tessellator.instance;
 		boolean var9 = false;
-		float var10 = 0.5F;
-		float var11 = 1.0F;
-		float var12 = 0.8F;
-		float var13 = 0.6F;
+		float var10 = this.bottomLight;
+		float var11 = this.topLight;
+		float var12 = this.westLight;
+		float var12a = this.eastLight;
+		float var13 = this.northLight;
+		float var13a = this.southLight;
+		float lightValue;
+		if (Personalization.directionalLighting && (lightValue = Block.lightValue[var1.blockID]) > 0.0F) {
+			var10 += (1.0F - var10) * lightValue;
+			var11 += (1.0F - var11) * lightValue;
+			var12 += (1.0F - var12) * lightValue;
+			var12a += (1.0F - var12a) * lightValue;
+			var13 += (1.0F - var13) * lightValue;
+			var13a += (1.0F - var13a) * lightValue;
+		}
 		float var14 = var11 * var5;
 		float var15 = var11 * var6;
 		float var16 = var11 * var7;
 		float var17 = var10;
 		float var18 = var12;
+		float var18a = var12a;
 		float var19 = var13;
+		float var19a = var13a;
 		float var20 = var10;
 		float var21 = var12;
+		float var21a = var12a;
 		float var22 = var13;
+		float var22a = var13a;
 		float var23 = var10;
 		float var24 = var12;
+		float var24a = var12a;
 		float var25 = var13;
+		float var25a = var13a;
 		if(var1 != Block.grass) {
 			var17 = var10 * var5;
 			var18 = var12 * var5;
+			var18a = var12a * var5;
 			var19 = var13 * var5;
+			var19a = var13a * var5;
 			var20 = var10 * var6;
 			var21 = var12 * var6;
+			var21a = var12a * var6;
 			var22 = var13 * var6;
+			var22a = var13a * var6;
 			var23 = var10 * var7;
 			var24 = var12 * var7;
+			var24a = var12a * var7;
 			var25 = var13 * var7;
+			var25a = var13a * var7;
 		}
 
 		int var26 = var1.func_35275_c(this.blockAccess, var2, var3, var4);
@@ -3227,11 +3294,11 @@
 		int var28;
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2)) {
 			var8.func_35835_b(var1.minZ > 0.0D ? var26 : var1.func_35275_c(this.blockAccess, var2, var3, var4 - 1));
-			var8.setColorOpaque_F(var18, var21, var24);
+			var8.setColorOpaque_F(var18a, var21a, var24a);
 			var28 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2);
 			this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var28);
 			if(fancyGrass && var28 == 3 && this.overrideBlockTexture < 0) {
-				var8.setColorOpaque_F(var18 * var5, var21 * var6, var24 * var7);
+				var8.setColorOpaque_F(var18a * var5, var21a * var6, var24a * var7);
 				this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, 38);
 			}
 
@@ -3266,11 +3333,11 @@
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)) {
 			var8.func_35835_b(var1.maxX < 1.0D ? var26 : var1.func_35275_c(this.blockAccess, var2 + 1, var3, var4));
-			var8.setColorOpaque_F(var19, var22, var25);
+			var8.setColorOpaque_F(var19a, var22a, var25a);
 			var28 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5);
 			this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var28);
 			if(fancyGrass && var28 == 3 && this.overrideBlockTexture < 0) {
-				var8.setColorOpaque_F(var19 * var5, var22 * var6, var25 * var7);
+				var8.setColorOpaque_F(var19a * var5, var22a * var6, var25a * var7);
 				this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, 38);
 			}
 
@@ -3300,22 +3367,30 @@
 	public boolean func_1230_b(Block var1, int var2, int var3, int var4, float var5, float var6, float var7) {
 		Tessellator var8 = Tessellator.instance;
 		boolean var9 = false;
-		float var10 = 0.5F;
-		float var11 = 1.0F;
-		float var12 = 0.8F;
-		float var13 = 0.6F;
+		float var10 = this.bottomLight;
+		float var11 = this.topLight;
+		float var12 = this.westLight;
+		float var12a = this.eastLight;
+		float var13 = this.northLight;
+		float var13a = this.southLight;
 		float var14 = var10 * var5;
 		float var15 = var11 * var5;
 		float var16 = var12 * var5;
+		float var16a = var12a * var5;
 		float var17 = var13 * var5;
+		float var17a = var13a * var5;
 		float var18 = var10 * var6;
 		float var19 = var11 * var6;
 		float var20 = var12 * var6;
+		float var20a = var12a * var6;
 		float var21 = var13 * var6;
+		float var21a = var13a * var6;
 		float var22 = var10 * var7;
 		float var23 = var11 * var7;
 		float var24 = var12 * var7;
+		float var24a = var12a * var7;
 		float var25 = var13 * var7;
+		float var25a = var13a * var7;
 		float var26 = 1.0F / 16.0F;
 		int var28 = var1.func_35275_c(this.blockAccess, var2, var3, var4);
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0)) {
@@ -3334,7 +3409,7 @@
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2)) {
 			var8.func_35835_b(var1.minZ > 0.0D ? var28 : var1.func_35275_c(this.blockAccess, var2, var3, var4 - 1));
-			var8.setColorOpaque_F(var16, var20, var24);
+			var8.setColorOpaque_F(var16a, var20a, var24a);
 			var8.setTranslationF(0.0F, 0.0F, var26);
 			this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2));
 			var8.setTranslationF(0.0F, 0.0F, -var26);
@@ -3361,7 +3436,7 @@
 
 		if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)) {
 			var8.func_35835_b(var1.maxX < 1.0D ? var28 : var1.func_35275_c(this.blockAccess, var2 + 1, var3, var4));
-			var8.setColorOpaque_F(var17, var21, var25);
+			var8.setColorOpaque_F(var17a, var21a, var25a);
 			var8.setTranslationF(-var26, 0.0F, 0.0F);
 			this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5));
 			var8.setTranslationF(var26, 0.0F, 0.0F);
@@ -3610,10 +3685,12 @@
 		Tessellator var5 = Tessellator.instance;
 		BlockDoor var6 = (BlockDoor)var1;
 		boolean var7 = false;
-		float var8 = 0.5F;
-		float var9 = 1.0F;
-		float var10 = 0.8F;
-		float var11 = 0.6F;
+		float var8 = this.bottomLight;
+		float var9 = this.topLight;
+		float var10 = this.westLight;
+		float var10a = this.eastLight;
+		float var11 = this.northLight;
+		float var11a = this.southLight;
 		int var12 = var1.func_35275_c(this.blockAccess, var2, var3, var4);
 		var5.func_35835_b(var1.minY > 0.0D ? var12 : var1.func_35275_c(this.blockAccess, var2, var3 - 1, var4));
 		var5.setColorOpaque_F(var8, var8, var8);
@@ -3624,7 +3701,7 @@
 		this.renderTopFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1));
 		var7 = true;
 		var5.func_35835_b(var1.minZ > 0.0D ? var12 : var1.func_35275_c(this.blockAccess, var2, var3, var4 - 1));
-		var5.setColorOpaque_F(var10, var10, var10);
+		var5.setColorOpaque_F(var10a, var10a, var10a);
 		int var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2);
 		if(var14 < 0) {
 			this.flipTexture = true;
@@ -3657,7 +3734,7 @@
 		var7 = true;
 		this.flipTexture = false;
 		var5.func_35835_b(var1.maxX < 1.0D ? var12 : var1.func_35275_c(this.blockAccess, var2 + 1, var3, var4));
-		var5.setColorOpaque_F(var11, var11, var11);
+		var5.setColorOpaque_F(var11a, var11a, var11a);
 		var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5);
 		if(var14 < 0) {
 			this.flipTexture = true;
@@ -4235,6 +4312,7 @@
 
 		var6 = var1.getRenderType();
 		int var11;
+		if (var6 == 23) var2 = 0;
 		if(var6 != 0 && var6 != 16) {
 			if(var6 == 1) {
 				var4.startDrawingQuads();
@@ -4477,7 +4555,75 @@
 
 	}
 
+	public boolean renderBlockSkyPortalFrame(Block var1, int var2, int var3, int var4) {
+		int meta = this.blockAccess.getBlockMetadata(var2, var3, var4);
+		if (meta == 0 || var1 == Block.chargedPortalFrame) {
+			Tessellator.instance.func_35835_b(var1.func_35275_c(this.blockAccess, var2, var3, var4));
+			Tessellator.instance.setColorOpaque_I(0xFFFFFF);
+			this.renderCrossedSquares(var1, meta, var2, var3, var4);
+			return true;
+		}
+		return this.renderStandardBlock(var1, var2, var3, var4);
+	}
+
 	public static boolean renderItemIn3d(int var0) {
 		return var0 == 0 ? true : (var0 == 13 ? true : (var0 == 10 ? true : (var0 == 11 ? true : (var0 == 22 ? true : (var0 == 21 ? true : var0 == 16)))));
+	}
+
+	public float getTopLight() {
+		if (!Personalization.directionalLighting || this.blockAccess == null) {
+			return 1.0F;
+		}
+
+		float a = this.blockAccess.getRenderCelestialAngle();
+		a = MathHelper.abs(1.0F - 2.0F * (a - MathHelper.floor_float(a)));
+		a = a * 0.75F + 0.25F;
+		return a;
+	}
+
+	public float getBottomLight() {
+		return (Personalization.directionalLighting ? 0.25F : 0.5F)
+				- Math.max(Personalization.entropy, 0.0F) * 0.4F
+				- Math.min(Personalization.entropy, 0.0F) * 0.25F;
+	}
+
+	public float getNorthLight() {
+		return (Personalization.directionalLighting ? 0.5F : 0.6F)
+				- Math.max(Personalization.entropy, 0.0F) * 0.3F
+				- Math.min(Personalization.entropy, 0.0F) * 0.2F;
+	}
+
+	public float getSouthLight() {
+		return (Personalization.directionalLighting ? 0.5F : 0.6F)
+				- Math.max(Personalization.entropy, 0.0F) * 0.3F
+				- Math.min(Personalization.entropy, 0.0F) * 0.2F;
+	}
+
+	public float getWestLight() {
+		float l = 0.8F
+				- Math.max(Personalization.entropy, 0.0F) * 0.4F
+				- Math.min(Personalization.entropy, 0.0F) * 0.1F;
+
+		if (Personalization.directionalLighting && this.blockAccess != null) {
+			float a = this.blockAccess.getRenderCelestialAngle() - 0.25F;
+			a = MathHelper.abs(1.0F - 2.0F * (a - MathHelper.floor_float(a)));
+			l = MathHelper.lerp(l / 4.0F, 1.0F, a);
+		}
+
+		return l;
+	}
+
+	public float getEastLight() {
+		float l = 0.8F
+				- Math.max(Personalization.entropy, 0.0F) * 0.4F
+				- Math.min(Personalization.entropy, 0.0F) * 0.1F;
+
+		if (Personalization.directionalLighting && this.blockAccess != null) {
+			float a = this.blockAccess.getRenderCelestialAngle() + 0.25F;
+			a = MathHelper.abs(1.0F - 2.0F * (a - MathHelper.floor_float(a)));
+			l = MathHelper.lerp(l / 4.0F, 1.0F, a);
+		}
+
+		return l;
 	}
 }
--- net/minecraft/src/BlockFlowing.java
+++ net/minecraft/src/BlockFlowing.java
@@ -65,7 +65,7 @@
 				var6 = var10;
 				if(var10 < 0) {
 					var1.setBlockWithNotify(var2, var3, var4, 0);
-				} else {
+				} else if (this.blockMaterial != Material.water || !BlockSponge.isSponged(var1, var2, var3, var4)) {
 					var1.setBlockMetadataWithNotify(var2, var3, var4, var10);
 					var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
 					var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
@@ -250,7 +250,7 @@
 
 	private boolean liquidCanDisplaceBlock(World var1, int var2, int var3, int var4) {
 		Material var5 = var1.getBlockMaterial(var2, var3, var4);
-		return var5 == this.blockMaterial ? false : (var5 == Material.lava ? false : !this.blockBlocksFlow(var1, var2, var3, var4));
+		return (this.blockMaterial == Material.water && BlockSponge.isSponged(var1, var2, var3, var4)) || var5 == this.blockMaterial ? false : (var5 == Material.lava ? false : !this.blockBlocksFlow(var1, var2, var3, var4));
 	}
 
 	public void onBlockAdded(World var1, int var2, int var3, int var4) {
--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -1,13 +1,7 @@
 package net.minecraft.src;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
-import java.util.TreeSet;
+import java.io.File;
+import java.util.*;
 
 public class World implements IBlockAccess {
 	public final int field_35473_a;
@@ -84,14 +78,14 @@
 		this.weatherEffects = new ArrayList();
 		this.cloudColour = 16777215L;
 		this.skylightSubtracted = 0;
-		this.updateLCG = (new Random()).nextInt();
+		this.updateLCG = (Personalization.random()).nextInt();
 		this.DIST_HASH_MAGIC = 1013904223;
 		this.lastLightningBolt = 0;
 		this.field_27172_i = 0;
 		this.editingBlocks = false;
 		this.lockTimestamp = System.currentTimeMillis();
-		this.autosavePeriod = 40;
-		this.rand = new Random();
+		this.autosavePeriod = 100;
+		this.rand = Personalization.random();
 		this.isNewWorld = false;
 		this.worldAccesses = new ArrayList();
 		this.collidingBoundingBoxes = new ArrayList();
@@ -130,14 +124,14 @@
 		this.weatherEffects = new ArrayList();
 		this.cloudColour = 16777215L;
 		this.skylightSubtracted = 0;
-		this.updateLCG = (new Random()).nextInt();
+		this.updateLCG = (Personalization.random()).nextInt();
 		this.DIST_HASH_MAGIC = 1013904223;
 		this.lastLightningBolt = 0;
 		this.field_27172_i = 0;
 		this.editingBlocks = false;
 		this.lockTimestamp = System.currentTimeMillis();
-		this.autosavePeriod = 40;
-		this.rand = new Random();
+		this.autosavePeriod = 100;
+		this.rand = Personalization.random();
 		this.isNewWorld = false;
 		this.worldAccesses = new ArrayList();
 		this.collidingBoundingBoxes = new ArrayList();
@@ -181,13 +175,13 @@
 		this.weatherEffects = new ArrayList();
 		this.cloudColour = 16777215L;
 		this.skylightSubtracted = 0;
-		this.updateLCG = (new Random()).nextInt();
+		this.updateLCG = (Personalization.random()).nextInt();
 		this.DIST_HASH_MAGIC = 1013904223;
 		this.lastLightningBolt = 0;
 		this.field_27172_i = 0;
 		this.editingBlocks = false;
 		this.lockTimestamp = System.currentTimeMillis();
-		this.autosavePeriod = 40;
+		this.autosavePeriod = 100;
 		this.rand = new Random();
 		this.isNewWorld = false;
 		this.worldAccesses = new ArrayList();
@@ -205,8 +199,16 @@
 		this.isNewWorld = this.worldInfo == null;
 		if(var4 != null) {
 			this.worldProvider = var4;
+		} else if(this.worldInfo != null && this.worldInfo.getDimension() == -2) {
+			this.worldProvider = WorldProvider.getProviderForDimension(-2);
 		} else if(this.worldInfo != null && this.worldInfo.getDimension() == -1) {
 			this.worldProvider = WorldProvider.getProviderForDimension(-1);
+		} else if(this.worldInfo != null && this.worldInfo.getDimension() == 1) {
+			this.worldProvider = WorldProvider.getProviderForDimension(1);
+		} else if(this.worldInfo != null && this.worldInfo.getDimension() == 2) {
+			this.worldProvider = WorldProvider.getProviderForDimension(2);
+		} else if(this.worldInfo != null && this.worldInfo.getDimension() == 3) {
+			this.worldProvider = WorldProvider.getProviderForDimension(3);
 		} else {
 			this.worldProvider = WorldProvider.getProviderForDimension(0);
 		}
@@ -243,7 +245,7 @@
 		int var5 = 0;
 		byte var6 = 64;
 		int var7 = 0;
-		if(var4 != null) {
+		if(var4 != null && Personalization.gameMode != B18XGameMode.ISLES_OF_TIME) {
 			var5 = var4.x;
 			var7 = var4.z;
 		} else {
@@ -255,6 +257,15 @@
 		while(!this.worldProvider.canCoordinateBeSpawn(var5, var7)) {
 			var5 += var3.nextInt(64) - var3.nextInt(64);
 			var7 += var3.nextInt(64) - var3.nextInt(64);
+
+			if (Personalization.gameMode == B18XGameMode.ISLES_OF_TIME) {
+				if (var5 < -B18XGameMode.ISLAND_SIZE / 2 || var5 > B18XGameMode.ISLAND_SIZE / 2
+						|| var7 < -B18XGameMode.ISLAND_SIZE / 2 || var7 > B18XGameMode.ISLAND_SIZE / 2) {
+					var5 = 0;
+					var7 = 0;
+				}
+			}
+
 			++var8;
 			if(var8 == 1000) {
 				break;
@@ -354,7 +365,7 @@
 	}
 
 	public int getBlockId(int var1, int var2, int var3) {
-		return var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000 ? (var2 < 0 ? 0 : (var2 >= 128 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
+		return var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000 ? (var2 < 0 ? 0 : (this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
 	}
 
 	public boolean isAirBlock(int var1, int var2, int var3) {
@@ -362,7 +373,7 @@
 	}
 
 	public boolean blockExists(int var1, int var2, int var3) {
-		return var2 >= 0 && var2 < 128 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
+		return var2 >= 0 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
 	}
 
 	public boolean doChunksNearChunkExist(int var1, int var2, int var3, int var4) {
@@ -370,7 +381,7 @@
 	}
 
 	public boolean checkChunksExist(int var1, int var2, int var3, int var4, int var5, int var6) {
-		if(var5 >= 0 && var2 < 128) {
+		if(var5 >= 0) {
 			var1 >>= 4;
 			var2 >>= 4;
 			var3 >>= 4;
@@ -408,8 +419,6 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
-				return false;
 			} else {
 				Chunk var6 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
 				boolean var7 = var6.setBlockIDWithMetadata(var1 & 15, var2, var3 & 15, var4, var5);
@@ -425,10 +434,46 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
-				return false;
-			} else {
-				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
+			} else {
+				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
+				boolean var6 = var5.setBlockID(var1 & 15, var2, var3 & 15, var4);
+				this.func_35463_p(var1, var2, var3);
+				return var6;
+			}
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setNewBlockAndMetadata(int var1, int var2, int var3, int var4, int var5) {
+		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
+			if(var2 < 0) {
+				return false;
+			} else {
+				Chunk var6 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
+				if (var6.playerModified) {
+					return false;
+				}
+
+				boolean var7 = var6.setBlockIDWithMetadata(var1 & 15, var2, var3 & 15, var4, var5);
+				this.func_35463_p(var1, var2, var3);
+				return var7;
+			}
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setNewBlock(int var1, int var2, int var3, int var4) {
+		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
+			if(var2 < 0) {
+				return false;
+			} else {
+				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
+				if (var5.playerModified) {
+					return false;
+				}
+
 				boolean var6 = var5.setBlockID(var1 & 15, var2, var3 & 15, var4);
 				this.func_35463_p(var1, var2, var3);
 				return var6;
@@ -447,8 +492,6 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return 0;
-			} else if(var2 >= 128) {
-				return 0;
 			} else {
 				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
 				var1 &= 15;
@@ -476,8 +519,6 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
-				return false;
 			} else {
 				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
 				var1 &= 15;
@@ -528,8 +569,10 @@
 			var3 = var5;
 		}
 
-		for(var5 = var3; var5 <= var4; ++var5) {
-			this.func_35459_c(EnumSkyBlock.Sky, var1, var5, var2);
+		if(!this.worldProvider.hasNoSky) {
+			for(var5 = var3; var5 <= var4; ++var5) {
+				this.func_35459_c(EnumSkyBlock.Sky, var1, var5, var2);
+			}
 		}
 
 		this.markBlocksDirty(var1, var3, var2, var1, var4, var2);
@@ -576,10 +619,6 @@
 		if(var2 < 0) {
 			return 0;
 		} else {
-			if(var2 >= 128) {
-				var2 = 127;
-			}
-
 			return this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockLightValue(var1 & 15, var2, var3 & 15, 0);
 		}
 	}
@@ -621,10 +660,6 @@
 			if(var2 < 0) {
 				return 0;
 			} else {
-				if(var2 >= 128) {
-					var2 = 127;
-				}
-
 				Chunk var11 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
 				var1 &= 15;
 				var3 &= 15;
@@ -653,9 +688,7 @@
 			var3 = 0;
 		}
 
-		if(var3 >= 128 && var1 == EnumSkyBlock.Sky) {
-			return 15;
-		} else if(var3 >= 0 && var3 < 128 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
+		if(var3 >= 0 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
 			int var5 = var2 >> 4;
 			int var6 = var4 >> 4;
 			if(!this.chunkExists(var5, var6)) {
@@ -700,11 +733,8 @@
 			var3 = 0;
 		}
 
-		if(var3 >= 128) {
-			var3 = 127;
-		}
 
-		if(var3 >= 0 && var3 < 128 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
+		if(var3 >= 0 && var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
 			int var5 = var2 >> 4;
 			int var6 = var4 >> 4;
 			if(!this.chunkExists(var5, var6)) {
@@ -721,19 +751,24 @@
 	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
 		if(var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
 			if(var3 >= 0) {
-				if(var3 < 128) {
-					if(this.chunkExists(var2 >> 4, var4 >> 4)) {
-						Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
-						var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
-
-						for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-							((IWorldAccess)this.worldAccesses.get(var7)).markBlockAndNeighborsNeedsUpdate(var2, var3, var4);
-						}
-
+				if(this.chunkExists(var2 >> 4, var4 >> 4)) {
+					Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
+					var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
+
+					for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
+						((IWorldAccess)this.worldAccesses.get(var7)).markBlockAndNeighborsNeedsUpdate(var2, var3, var4);
 					}
+
 				}
 			}
 		}
+	}
+
+	public void func_48464_p(int var1, int var2, int var3) {
+		for(int var4 = 0; var4 < this.worldAccesses.size(); ++var4) {
+			((IWorldAccess)this.worldAccesses.get(var4)).markBlockNeedsUpdate2(var1, var2, var3);
+		}
+
 	}
 
 	public int func_35451_b(int var1, int var2, int var3, int var4) {
@@ -759,6 +794,10 @@
 		return this.worldProvider.lightBrightnessTable[this.getBlockLightValue(var1, var2, var3)];
 	}
 
+	public float getLightBrightness(int var1) {
+		return this.worldProvider.lightBrightnessTable[var1];
+	}
+
 	public boolean isDaytime() {
 		return this.skylightSubtracted < 4;
 	}
@@ -943,6 +982,13 @@
 
 	}
 
+	public void playFileRecord(File var1, int var2, int var3, int var4) {
+		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
+			((IWorldAccess)this.worldAccesses.get(var5)).playFileRecord(var1, var2, var3, var4);
+		}
+
+	}
+
 	public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12) {
 		for(int var14 = 0; var14 < this.worldAccesses.size(); ++var14) {
 			((IWorldAccess)this.worldAccesses.get(var14)).spawnParticle(var1, var2, var4, var6, var8, var10, var12);
@@ -1059,6 +1105,10 @@
 	}
 
 	public int calculateSkylightSubtracted(float var1) {
+		if (this.worldProvider.isSkyWorld && Personalization.endSky) {
+			return 15;
+		}
+
 		float var2 = this.getCelestialAngle(var1);
 		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F);
 		if(var3 < 0.0F) {
@@ -1077,8 +1127,23 @@
 	}
 
 	public float func_35464_b(float var1) {
+		if (this.worldProvider.isSkyWorld && Personalization.endSky) {
+			return 0.0F;
+		}
+
+		if (Personalization.oldSkylight) {
+			float light = this.worldProvider.lightBrightnessTable[15 - this.skylightSubtracted];
+			if (Personalization.entropy > 0.0F) {
+				light *= Math.max(1.0F - Personalization.entropy * (this.skylightSubtracted / 11.0F), 0.0F);
+			}
+			return light;
+		}
+
+		float eFactor = Personalization.whiteLight ? 0.5F : 0.2F;
+		eFactor -= Personalization.entropy * 0.3F;
+
 		float var2 = this.getCelestialAngle(var1);
-		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.2F);
+		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + eFactor);
 		if(var3 < 0.0F) {
 			var3 = 0.0F;
 		}
@@ -1090,14 +1155,21 @@
 		var3 = 1.0F - var3;
 		var3 = (float)((double)var3 * (1.0D - (double)(this.getRainStrength(var1) * 5.0F) / 16.0D));
 		var3 = (float)((double)var3 * (1.0D - (double)(this.getWeightedThunderStrength(var1) * 5.0F) / 16.0D));
-		return var3 * 0.8F + 0.2F;
+
+		eFactor = 0.2F;
+		if (Personalization.entropy > 0.0F) {
+			eFactor *= 1.0F - Personalization.entropy;
+		}
+
+		return var3 * (1.0F - eFactor) + eFactor;
 	}
 
 	public Vec3D getSkyColor(Entity var1, float var2) {
 		float var3 = this.getCelestialAngle(var2);
-		float var4 = MathHelper.cos(var3 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-		if(var4 < 0.0F) {
-			var4 = 0.0F;
+		float var4 = MathHelper.cos(var3 * (float)Math.PI * 2.0F) * 2.0F + (0.5F - Personalization.entropy * 0.3F);
+		float eFactor = Math.max(-Personalization.entropy * 0.15F, 0.0F);
+		if(var4 < eFactor) {
+			var4 = eFactor;
 		}
 
 		if(var4 > 1.0F) {
@@ -1107,6 +1179,9 @@
 		int var5 = MathHelper.floor_double(var1.posX);
 		int var6 = MathHelper.floor_double(var1.posZ);
 		float var7 = this.getWorldChunkManager().func_35554_b(var5, var6);
+		float var7h = (this.getWorldChunkManager().func_35554_b(-var5 * 2, -var6 * 2) + this.getWorldChunkManager().func_35558_c(-var5, -var6)) / 2.0F;
+		float var7ha = Math.abs(var7h);
+		if (Personalization.betaSky) var7 = (var7 - 0.5F) * 10.0F * (-var7ha * (var7ha - 1.0F) * Math.signum(var7h) * 2.0F - 1.0F) + 0.5F;
 		int var8 = this.getWorldChunkManager().getBiomeGenAt(var5, var6).getSkyColorByTemp(var7);
 		float var9 = (float)(var8 >> 16 & 255) / 255.0F;
 		float var10 = (float)(var8 >> 8 & 255) / 255.0F;
@@ -1160,9 +1235,10 @@
 
 	public Vec3D drawClouds(float var1) {
 		float var2 = this.getCelestialAngle(var1);
-		float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-		if(var3 < 0.0F) {
-			var3 = 0.0F;
+		float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + (0.5F - Personalization.entropy * 0.3F);
+		float eFactor = Math.max(-Personalization.entropy * 0.15F, 0.0F);
+		if(var3 < eFactor) {
+			var3 = eFactor;
 		}
 
 		if(var3 > 1.0F) {
@@ -1183,9 +1259,12 @@
 			var6 = var6 * var9 + var8 * (1.0F - var9);
 		}
 
-		var4 *= var3 * 0.9F + 0.1F;
-		var5 *= var3 * 0.9F + 0.1F;
-		var6 *= var3 * 0.85F + 0.15F;
+		eFactor = Math.max(Personalization.entropy, 0.0F);
+		float var3a = MathHelper.lerp(var3 * 0.9F + 0.1F, var3, eFactor);
+		float var3b = MathHelper.lerp(var3 * 0.85F + 0.15F, var3, eFactor);
+		var4 *= var3a;
+		var5 *= var3a;
+		var6 *= var3b;
 		var8 = this.getWeightedThunderStrength(var1);
 		if(var8 > 0.0F) {
 			var9 = (var4 * 0.3F + var5 * 0.59F + var6 * 0.11F) * 0.2F;
@@ -1204,7 +1283,7 @@
 	}
 
 	public int func_35461_e(int var1, int var2) {
-		return this.getChunkFromBlockCoords(var1, var2).func_35840_c(var1 & 15, var2 & 15);
+		return this.getChunkFromBlockCoords(var1, var2).getPrecipitationHeight(var1 & 15, var2 & 15);
 	}
 
 	public int getTopSolidOrLiquidBlock(int var1, int var2) {
@@ -1233,7 +1312,7 @@
 			var3 = 1.0F;
 		}
 
-		return var3 * var3 * 0.5F;
+		return var3 * var3 * (0.5F - Personalization.entropy * 0.4F);
 	}
 
 	public void scheduleBlockUpdate(int var1, int var2, int var3, int var4, int var5) {
@@ -1262,6 +1341,19 @@
 		}
 	}
 
+	public void scheduleBlockUpdateFromLoad(int var1, int var2, int var3, int var4, int var5) {
+		NextTickListEntry var6 = new NextTickListEntry(var1, var2, var3, var4);
+		if(var4 > 0) {
+			var6.setScheduledTime((long)var5 + this.worldInfo.getWorldTime());
+		}
+
+		if(!this.scheduledTickSet.contains(var6)) {
+			this.scheduledTickSet.add(var6);
+			this.scheduledTickTreeSet.add(var6);
+		}
+
+	}
+
 	public void updateEntities() {
 		int var1;
 		Entity var2;
@@ -1616,6 +1708,11 @@
 	}
 
 	public Explosion newExplosion(Entity var1, double var2, double var4, double var6, float var8, boolean var9) {
+		if (this.worldProvider instanceof WorldProviderOffices) {
+			this.playSoundEffect(var2, var4, var6, "random.breath", 1.0F, this.rand.nextFloat() * 0.2F + 0.9F);
+			return null;
+		}
+
 		Explosion var10 = new Explosion(this, var1, var2, var4, var6, var8);
 		var10.isFlaming = var9;
 		var10.doExplosionA();
@@ -1748,6 +1845,12 @@
 
 	public void saveWorldIndirectly(IProgressUpdate var1) {
 		this.saveWorld(true, var1);
+
+		try {
+			ThreadedFileIOBase.threadedIOInstance.waitForFinish();
+		} catch (InterruptedException var3) {
+			var3.printStackTrace();
+		}
 	}
 
 	public void calculateInitialSkylight() {
@@ -1772,7 +1875,7 @@
 		long var2;
 		if(this.isAllPlayersFullyAsleep()) {
 			boolean var1 = false;
-			if(this.spawnHostileMobs && this.difficultySetting >= 1) {
+			if(!Personalization.sleepingSpawnsMonsters && this.spawnHostileMobs && this.difficultySetting >= 1) {
 				var1 = SpawnerAnimals.performSleepSpawning(this, this.playerEntities);
 			}
 
@@ -1783,7 +1886,7 @@
 			}
 		}
 
-		SpawnerAnimals.performSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs && this.worldInfo.getWorldTime() % 400L == 0L);
+		SpawnerAnimals.performSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs && (Personalization.fixedAnimalSpawning || this.worldInfo.getWorldTime() % 400L == 0L));
 		this.chunkProvider.unload100OldestChunks();
 		int var4 = this.calculateSkylightSubtracted(1.0F);
 		if(var4 != this.skylightSubtracted) {
@@ -1917,7 +2020,7 @@
 			var3 = var14.chunkXPos * 16;
 			var4 = var14.chunkZPos * 16;
 			Chunk var15 = this.getChunkFromChunkCoords(var14.chunkXPos, var14.chunkZPos);
-			var15.func_35841_j();
+			var15.updateSkylight();
 			int var8;
 			int var9;
 			int var10;
@@ -1958,7 +2061,7 @@
 				var7 = var6 & 15;
 				var8 = var6 >> 8 & 15;
 				var9 = this.func_35461_e(var7 + var3, var8 + var4);
-				if(this.getWorldChunkManager().getBiomeGenAt(var7 + var3, var8 + var4).getEnableSnow() && var9 >= 0 && var9 < 128 && var15.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
+				if(this.getWorldChunkManager().getBiomeGenAt(var7 + var3, var8 + var4).getEnableSnow() && var9 >= 0 && var15.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
 					var10 = var15.getBlockID(var7, var9 - 1, var8);
 					var16 = var15.getBlockID(var7, var9, var8);
 					if(this.isRaining() && var16 == 0 && Block.snow.canPlaceBlockAt(this, var7 + var3, var9, var8 + var4) && var10 != 0 && var10 != Block.ice.blockID && Block.blocksList[var10].blockMaterial.getIsSolid()) {
@@ -1990,17 +2093,23 @@
 				}
 			}
 
-			this.func_35463_p(var3 + this.rand.nextInt(16), this.rand.nextInt(128), var4 + this.rand.nextInt(16));
+			this.func_35463_p(var3 + this.rand.nextInt(16), this.rand.nextInt(var15.getMaxHeight()), var4 + this.rand.nextInt(16));
 
-			for(var6 = 0; var6 < 80; ++var6) {
-				this.updateLCG = this.updateLCG * 3 + 1013904223;
-				var7 = this.updateLCG >> 2;
-				var8 = var7 & 15;
-				var9 = var7 >> 8 & 15;
-				var10 = var7 >> 16 & 127;
-				var16 = var15.blocks[var8 << 11 | var9 << 7 | var10] & 255;
-				if(Block.tickOnLoad[var16]) {
-					Block.blocksList[var16].updateTick(this, var8 + var3, var10, var9 + var4, this.rand);
+			ExtendedBlockStorage[] var19 = var15.getBlockStorageArray();
+			for(var6 = 0; var6 < var19.length; ++var6) {
+				ExtendedBlockStorage var20 = var19[var6];
+				if (var20 != null && var20.getNeedsRandomTick()) {
+					for (int i = 0; i < 3; ++i) {
+						this.updateLCG = this.updateLCG * 3 + 1013904223;
+						var7 = this.updateLCG >> 2;
+						var8 = var7 & 15;
+						var9 = var7 >> 8 & 15;
+						var10 = var7 >> 16 & 15;
+						var16 = var20.getExtBlockID(var8, var10, var9);
+						if(Block.tickOnLoad[var16]) {
+							Block.blocksList[var16].updateTick(this, var8 + var3, var10 + var20.getYLocation(), var9 + var4, this.rand);
+						}
+					}
 				}
 			}
 		}
@@ -2008,7 +2117,10 @@
 	}
 
 	public void func_35463_p(int var1, int var2, int var3) {
-		this.func_35459_c(EnumSkyBlock.Sky, var1, var2, var3);
+		if (!this.worldProvider.hasNoSky) {
+			this.func_35459_c(EnumSkyBlock.Sky, var1, var2, var3);
+		}
+
 		this.func_35459_c(EnumSkyBlock.Block, var1, var2, var3);
 	}
 
@@ -2255,6 +2367,34 @@
 		}
 	}
 
+	public List getPendingBlockUpdates(Chunk var1, boolean var2) {
+		ArrayList var3 = null;
+		ChunkCoordIntPair var4 = var1.getChunkCoordIntPair();
+		int var5 = var4.chunkXPos << 4;
+		int var6 = var5 + 16;
+		int var7 = var4.chunkZPos << 4;
+		int var8 = var7 + 16;
+		Iterator var9 = this.scheduledTickSet.iterator();
+
+		while(var9.hasNext()) {
+			NextTickListEntry var10 = (NextTickListEntry)var9.next();
+			if(var10.xCoord >= var5 && var10.xCoord < var6 && var10.zCoord >= var7 && var10.zCoord < var8) {
+				if(var2) {
+					this.scheduledTickTreeSet.remove(var10);
+					var9.remove();
+				}
+
+				if(var3 == null) {
+					var3 = new ArrayList();
+				}
+
+				var3.add(var10);
+			}
+		}
+
+		return var3;
+	}
+
 	public void randomDisplayUpdates(int var1, int var2, int var3) {
 		byte var4 = 16;
 		Random var5 = new Random();
@@ -2264,7 +2404,7 @@
 			int var8 = var2 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
 			int var9 = var3 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
 			int var10 = this.getBlockId(var7, var8, var9);
-			if(this.rand.nextInt(8) > var8 && var10 == 0) {
+			if(!(this.worldProvider instanceof WorldProviderOffices) && this.rand.nextInt(8) > var8 && var10 == 0) {
 				this.spawnParticle("depthsuspend", (double)((float)var7 + this.rand.nextFloat()), (double)((float)var8 + this.rand.nextFloat()), (double)((float)var9 + this.rand.nextFloat()), 0.0D, 0.0D, 0.0D);
 			}
 
@@ -2472,10 +2612,6 @@
 			var13 = 0;
 		}
 
-		if(var14 > 128) {
-			var14 = 128;
-		}
-
 		for(int var15 = var8; var15 <= var10; ++var15) {
 			int var16 = var1 - var15 * 16;
 			int var17 = var1 + var4 - var15 * 16;
@@ -2498,7 +2634,7 @@
 					var20 = 16;
 				}
 
-				var12 = this.getChunkFromChunkCoords(var15, var18).setChunkData(var7, var16, var13, var19, var17, var14, var20, var12);
+//				var12 = this.getChunkFromChunkCoords(var15, var18).setChunkData(var7, var16, var13, var19, var17, var14, var20, var12);
 				this.markBlocksDirty(var15 * 16 + var16, var13, var18 * 16 + var19, var15 * 16 + var17, var14, var18 * 16 + var20);
 			}
 		}
@@ -2724,7 +2860,7 @@
 	}
 
 	public int func_35452_b() {
-		return 128;
+		return Integer.MAX_VALUE;
 	}
 
 	public Random func_35462_u(int var1, int var2, int var3) {
@@ -2738,5 +2874,69 @@
 	}
 
 	public void scheduleLightingUpdate(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7) {
+	}
+
+	public boolean isBlockHydrated(int var1, int var2, int var3, boolean var4) {
+		BiomeGenBase var5 = this.getWorldChunkManager().getBiomeGenAt(var1, var3);
+		if(!var5.getEnableSnow()) {
+			return false;
+		} else {
+			if(var2 >= 0 && this.getSavedLightValue(EnumSkyBlock.Block, var1, var2, var3) < 10) {
+				int var7 = this.getBlockId(var1, var2, var3);
+				if((var7 == Block.waterStill.blockID || var7 == Block.waterMoving.blockID) && this.getBlockMetadata(var1, var2, var3) == 0) {
+					if(!var4) {
+						return true;
+					}
+
+					boolean var8 = true;
+					if(var8 && this.getBlockMaterial(var1 - 1, var2, var3) != Material.water) {
+						var8 = false;
+					}
+
+					if(var8 && this.getBlockMaterial(var1 + 1, var2, var3) != Material.water) {
+						var8 = false;
+					}
+
+					if(var8 && this.getBlockMaterial(var1, var2, var3 - 1) != Material.water) {
+						var8 = false;
+					}
+
+					if(var8 && this.getBlockMaterial(var1, var2, var3 + 1) != Material.water) {
+						var8 = false;
+					}
+
+					if(!var8) {
+						return true;
+					}
+				}
+			}
+
+			return false;
+		}
+	}
+
+	public boolean canSnowAt(int var1, int var2, int var3) {
+		BiomeGenBase var4 = this.getWorldChunkManager().getBiomeGenAt(var1, var3);
+		if(!var4.getEnableSnow()) {
+			return false;
+		} else {
+			if(var2 >= 0 && var2 < 256 && this.getSavedLightValue(EnumSkyBlock.Block, var1, var2, var3) < 10) {
+				int var6 = this.getBlockId(var1, var2 - 1, var3);
+				int var7 = this.getBlockId(var1, var2, var3);
+				if(var7 == 0 && Block.snow.canPlaceBlockAt(this, var1, var2, var3) && var6 != 0 && var6 != Block.ice.blockID && Block.blocksList[var6].blockMaterial.getIsSolid()) {
+					return true;
+				}
+			}
+
+			return false;
+		}
+	}
+
+	public int getMaxHeight(int var1, int var2) {
+		return this.chunkExists(var1, var2) ? this.getChunkFromChunkCoords(var1, var2).getBlockStorageArray().length << 4 : 128;
+	}
+
+	public float getRenderCelestialAngle() {
+		return this.getCelestialAngle(1.0F);
 	}
 }
--- net/minecraft/src/GenLayerVillageLandscape.java
+++ net/minecraft/src/GenLayerVillageLandscape.java
@@ -1,7 +1,19 @@
 package net.minecraft.src;
 
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
 public class GenLayerVillageLandscape extends GenLayer {
-	private BiomeGenBase[] field_35509_b = new BiomeGenBase[]{BiomeGenBase.desert, BiomeGenBase.forest, BiomeGenBase.field_35483_e, BiomeGenBase.swampland, BiomeGenBase.field_35485_c, BiomeGenBase.taiga};
+	public static List<BiomeGenBase> biomes = Arrays.asList(
+			BiomeGenBase.desert,
+			BiomeGenBase.forest,
+			BiomeGenBase.extremeHills,
+			BiomeGenBase.swampland,
+			BiomeGenBase.plains,
+			BiomeGenBase.taiga
+	);
+	public static List<BiomeGenBase> snowyBiomes = Collections.emptyList();
 
 	public GenLayerVillageLandscape(long var1, GenLayer var3) {
 		super(var1);
@@ -15,7 +27,21 @@
 		for(int var7 = 0; var7 < var4; ++var7) {
 			for(int var8 = 0; var8 < var3; ++var8) {
 				this.func_35499_a((long)(var8 + var1), (long)(var7 + var2));
-				var6[var8 + var7 * var3] = var5[var8 + var7 * var3] > 0 ? this.field_35509_b[this.func_35498_a(this.field_35509_b.length)].field_35494_y : 0;
+				int var9 = var8 + var7 * var3;
+				if (var5[var9] == BiomeGenBase.icePlains.field_35494_y && !snowyBiomes.isEmpty()) {
+					var6[var9] = snowyBiomes.get(this.func_35498_a(snowyBiomes.size())).field_35494_y;
+				} else if (var5[var9] == 0) {
+					var6[var9] = 0;
+				} else {
+						int i = this.func_35498_a(biomes.size());
+					int mul = i / 6;
+					this.func_35499_a((long)(var8 + var1), (long)(var7 + var2));
+					i = this.func_35498_a(6) + mul * 6;
+					if (i >= biomes.size()) {
+						i = this.func_35498_a(Math.min(6, biomes.size() - mul * 6)) + mul * 6;
+					}
+					var6[var8 + var7 * var3] = biomes.get(i).field_35494_y;
+				}
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/BlockPillar.java
@@ -1,0 +1,11 @@
+package net.minecraft.src;
+
+public class BlockPillar extends Block {
+	protected BlockPillar(int var1, int var2, Material var3) {
+		super(var1, var2, var3);
+	}
+
+	public int getBlockTextureFromSide(int var1) {
+		return super.getBlockTextureFromSide(var1) + (var1 < 2 ? -16 : 0);
+	}
+}
--- net/minecraft/src/BlockSnow.java
+++ net/minecraft/src/BlockSnow.java
@@ -30,7 +30,7 @@
 
 	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
 		int var5 = var1.getBlockId(var2, var3 - 1, var4);
-		return var5 != 0 && Block.blocksList[var5].isOpaqueCube() ? var1.getBlockMaterial(var2, var3 - 1, var4).getIsSolid() : false;
+		return var5 != 0 && (var5 == Block.leaves.blockID || Block.blocksList[var5].isOpaqueCube()) ? var1.getBlockMaterial(var2, var3 - 1, var4).getIsSolid() : false;
 	}
 
 	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
--- net/minecraft/src/EntityRenderer.java
+++ net/minecraft/src/EntityRenderer.java
@@ -5,6 +5,7 @@
 import java.util.List;
 import java.util.Random;
 import net.minecraft.client.Minecraft;
+import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.ARBMultitexture;
 import org.lwjgl.opengl.Display;
@@ -84,6 +85,59 @@
 		this.prevDebugCamPitch = this.debugCamPitch;
 		this.prevDebugCamFOV = this.debugCamFOV;
 		this.prevCamRoll = this.camRoll;
+
+		if(Personalization.DEBUG_MODE && this.mc.currentScreen == null) {
+			float var1 = 0.0F;
+			float var2 = 0.0F;
+			float var3 = 0.0F;
+			float var4 = 0.0F;
+			if(Keyboard.isKeyDown(Keyboard.KEY_U)) {
+				var1 -= 0.3F * this.mc.gameSettings.field_22271_G;
+			} else if(Keyboard.isKeyDown(Keyboard.KEY_O)) {
+				var1 += 0.3F * this.mc.gameSettings.field_22271_G;
+			}
+
+			if(Keyboard.isKeyDown(Keyboard.KEY_J)) {
+				var2 += 8.0F * this.mc.gameSettings.field_22271_G;
+			} else if(Keyboard.isKeyDown(Keyboard.KEY_L)) {
+				var2 -= 8.0F * this.mc.gameSettings.field_22271_G;
+			}
+
+			if(Keyboard.isKeyDown(Keyboard.KEY_I)) {
+				var3 += 6.0F * this.mc.gameSettings.field_22271_G;
+			} else if(Keyboard.isKeyDown(Keyboard.KEY_K)) {
+				var3 -= 6.0F * this.mc.gameSettings.field_22271_G;
+			}
+
+			if(Keyboard.isKeyDown(Keyboard.KEY_Y) && Keyboard.isKeyDown(Keyboard.KEY_H)) {
+				this.debugCamFOV = 0.0F;
+			} else if(Keyboard.isKeyDown(Keyboard.KEY_Y)) {
+				this.debugCamFOV -= 3.0F;
+			} else if(Keyboard.isKeyDown(Keyboard.KEY_H)) {
+				this.debugCamFOV += 3.0F;
+			}
+
+			if(Keyboard.isKeyDown(Keyboard.KEY_N) && Keyboard.isKeyDown(Keyboard.KEY_M)) {
+				this.camRoll = 0.0F;
+			} else if(Keyboard.isKeyDown(Keyboard.KEY_N)) {
+				var4 -= 8.0F * this.mc.gameSettings.field_22271_G;
+			} else if(Keyboard.isKeyDown(Keyboard.KEY_M)) {
+				var4 += 8.0F * this.mc.gameSettings.field_22271_G;
+			}
+
+			if(this.mc.gameSettings.smoothCamera) {
+				var1 = this.mouseFilterDummy1.func_22386_a(var1, 0.5F * this.mc.gameSettings.mouseSensitivity);
+				var2 = this.mouseFilterDummy2.func_22386_a(var2, 0.5F * this.mc.gameSettings.mouseSensitivity);
+				var3 = this.mouseFilterDummy3.func_22386_a(var3, 0.5F * this.mc.gameSettings.mouseSensitivity);
+				var4 = this.mouseFilterDummy4.func_22386_a(var4, 0.5F * this.mc.gameSettings.mouseSensitivity);
+			}
+
+			this.thirdPersonDistance += var1;
+			this.debugCamYaw += var2;
+			this.debugCamPitch += var3;
+			this.camRoll += var4;
+		}
+
 		if(this.mc.renderViewEntity == null) {
 			this.mc.renderViewEntity = this.mc.thePlayer;
 		}
@@ -252,17 +306,30 @@
 			} else {
 				var28 = var2.rotationYaw;
 				var13 = var2.rotationPitch;
+				float var5 = 0.0F;
 				double var14 = (double)(-MathHelper.sin(var28 / 180.0F * (float)Math.PI) * MathHelper.cos(var13 / 180.0F * (float)Math.PI)) * var27;
 				double var16 = (double)(MathHelper.cos(var28 / 180.0F * (float)Math.PI) * MathHelper.cos(var13 / 180.0F * (float)Math.PI)) * var27;
 				double var18 = (double)(-MathHelper.sin(var13 / 180.0F * (float)Math.PI)) * var27;
 
+				if (this.mc.gameSettings.frontThirdPersonView) {
+					var14 = (double)(-MathHelper.sin((var28 + 180.0F) / 180.0F * (float)Math.PI) * MathHelper.cos(-var13 / 180.0F * (float)Math.PI)) * var27;
+					var16 = (double)(MathHelper.cos((var28 + 180.0F) / 180.0F * (float)Math.PI) * MathHelper.cos(-var13 / 180.0F * (float)Math.PI)) * var27;
+					var18 = (double)(-MathHelper.sin(-var13 / 180.0F * (float)Math.PI)) * var27;
+				}
+
 				for(int var20 = 0; var20 < 8; ++var20) {
 					float var21 = (float)((var20 & 1) * 2 - 1);
 					float var22 = (float)((var20 >> 1 & 1) * 2 - 1);
 					float var23 = (float)((var20 >> 2 & 1) * 2 - 1);
-					var21 *= 0.1F;
-					var22 *= 0.1F;
-					var23 *= 0.1F;
+					if (this.mc.gameSettings.frontThirdPersonView) {
+						var21 *= -0.1F;
+						var22 *= -0.1F;
+						var23 *= -0.1F;
+					} else {
+						var21 *= 0.1F;
+						var22 *= 0.1F;
+						var23 *= 0.1F;
+					}
 					MovingObjectPosition var24 = this.mc.theWorld.rayTraceBlocks(Vec3D.createVector(var4 + (double)var21, var6 + (double)var22, var8 + (double)var23), Vec3D.createVector(var4 - var14 + (double)var21 + (double)var23, var6 - var18 + (double)var22, var8 - var16 + (double)var23));
 					if(var24 != null) {
 						double var25 = var24.hitVec.distanceTo(Vec3D.createVector(var4, var6, var8));
@@ -272,8 +339,13 @@
 					}
 				}
 
+				if (this.mc.gameSettings.frontThirdPersonView) {
+					var5 = 180.0F;
+					var27 *= -1.0D;
+				}
+
 				GL11.glRotatef(var2.rotationPitch - var13, 1.0F, 0.0F, 0.0F);
-				GL11.glRotatef(var2.rotationYaw - var28, 0.0F, 1.0F, 0.0F);
+				GL11.glRotatef(var2.rotationYaw - var28 + var5, 0.0F, 1.0F, 0.0F);
 				GL11.glTranslatef(0.0F, 0.0F, (float)(-var27));
 				GL11.glRotatef(var28 - var2.rotationYaw, 0.0F, 1.0F, 0.0F);
 				GL11.glRotatef(var13 - var2.rotationPitch, 1.0F, 0.0F, 0.0F);
@@ -296,6 +368,22 @@
 
 	private void setupCameraTransform(float var1, int var2) {
 		this.farPlaneDistance = (float)(256 >> this.mc.gameSettings.renderDistance);
+
+		if (Personalization.gameMode == B18XGameMode.ISLES_OF_TIME && this.mc.thePlayer.dimension == 0) {
+			double x = this.mc.thePlayer.lastTickPosX + (this.mc.thePlayer.posX - this.mc.thePlayer.lastTickPosX) * var1;
+			double z = this.mc.thePlayer.lastTickPosZ + (this.mc.thePlayer.posZ - this.mc.thePlayer.lastTickPosZ) * var1;
+			int bx = MathHelper.floor_double(x);
+			int bz = MathHelper.floor_double(z);
+			double iFactor1 = (float)B18XGameMode.getIsleFactor(bx, bz, 1, false);
+			double iFactor2 = (float)B18XGameMode.getIsleFactor(bx + 1, bz, 1, false);
+			double iFactor3 = (float)B18XGameMode.getIsleFactor(bx, bz + 1, 1, false);
+			double iFactor4 = (float)B18XGameMode.getIsleFactor(bx + 1, bz + 1, 1, false);
+			double iFactor12 = MathHelper.lerp(iFactor1, iFactor2, MathHelper.floorMod(x, 1.0D));
+			double iFactor34 = MathHelper.lerp(iFactor3, iFactor4, MathHelper.floorMod(x, 1.0D));
+			double iFactor = MathHelper.lerp(iFactor12, iFactor34, MathHelper.floorMod(z, 1.0D));
+			this.farPlaneDistance = MathHelper.lerp(this.farPlaneDistance, 32.0F, (float)iFactor);
+		}
+
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glLoadIdentity();
 		float var3 = 0.07F;
@@ -324,7 +412,7 @@
 		}
 
 		this.hurtCameraEffect(var1);
-		if(this.mc.gameSettings.viewBobbing) {
+		if(this.mc.gameSettings.viewBobbing && (!Personalization.alphaTextures || !this.mc.gameSettings.thirdPersonView)) {
 			this.setupViewBobbing(var1);
 		}
 
@@ -465,23 +553,37 @@
 		World var1 = this.mc.theWorld;
 		if(var1 != null) {
 			for(int var2 = 0; var2 < 256; ++var2) {
-				float var3 = var1.func_35464_b(1.0F) * 0.95F + 0.05F;
+				float eFactor = Math.max(-Personalization.entropy * 0.2F + 0.05F, 0.0F);
+				float var3 = var1.func_35464_b(1.0F) * (1.0F - eFactor) + eFactor;
+				if (Personalization.entropy > 0.0F) {
+					if (var3 > 1.0F) var3 = 1.0F;
+					var3 *= 1.0F - Personalization.entropy * 0.4F;
+				}
 				float var4 = var1.worldProvider.lightBrightnessTable[var2 / 16] * var3;
-				float var5 = var1.worldProvider.lightBrightnessTable[var2 % 16] * (this.field_35819_e * 0.1F + 1.5F);
+				float var5 = var1.worldProvider.lightBrightnessTable[var2 % 16];
 				if(var1.field_27172_i > 0) {
 					var4 = var1.worldProvider.lightBrightnessTable[var2 / 16];
 				}
 
-				float var6 = var4 * (var1.func_35464_b(1.0F) * 0.65F + 0.35F);
-				float var7 = var4 * (var1.func_35464_b(1.0F) * 0.65F + 0.35F);
-				float var10 = var5 * ((var5 * 0.6F + 0.4F) * 0.6F + 0.4F);
-				float var11 = var5 * (var5 * var5 * 0.6F + 0.4F);
+				if (Personalization.whiteLight) {
+					int a = (int)(Math.max(var4, var5) * 255.0F);
+					this.field_35811_L[var2] = 255 << 24 | a << 16 | a << 8 | a;
+					continue;
+				}
+
+				var5 *= this.field_35819_e * 0.1F + (Personalization.orangeLight ? 1.0F : 1.5F);
+
+				float var6 = Personalization.oldSkylight ? var4 : var4 * (var1.func_35464_b(1.0F) * 0.65F + 0.35F);
+				float var7 = Personalization.oldSkylight ? var4 : var4 * (var1.func_35464_b(1.0F) * 0.65F + 0.35F);
+				float var10 = Personalization.orangeLight ? (var5 * var5 * 0.8F) * 0.8F + var5 * 0.2F : var5 * ((var5 * 0.6F + 0.4F) * 0.6F + 0.4F);
+				float var11 = Personalization.orangeLight ? (var5 * var5 * var5 * 0.5F) * 0.9F + var5 * 0.1F : var5 * (var5 * var5 * 0.6F + 0.4F);
 				float var12 = var6 + var5;
 				float var13 = var7 + var10;
 				float var14 = var4 + var11;
-				var12 = var12 * 0.96F + 0.03F;
-				var13 = var13 * 0.96F + 0.03F;
-				var14 = var14 * 0.96F + 0.03F;
+				eFactor = 0.03F - Personalization.entropy * 0.03F;
+				var12 = var12 * (1.0F - eFactor) + eFactor;
+				var13 = var13 * (1.0F - eFactor) + eFactor;
+				var14 = var14 * (1.0F - eFactor) + eFactor;
 				float var15 = this.mc.gameSettings.field_35380_M;
 				if(var12 > 1.0F) {
 					var12 = 1.0F;
@@ -504,9 +606,9 @@
 				var12 = var12 * (1.0F - var15) + var16 * var15;
 				var13 = var13 * (1.0F - var15) + var17 * var15;
 				var14 = var14 * (1.0F - var15) + var18 * var15;
-				var12 = var12 * 0.96F + 0.03F;
-				var13 = var13 * 0.96F + 0.03F;
-				var14 = var14 * 0.96F + 0.03F;
+				var12 = var12 * (1.0F - eFactor) + eFactor;
+				var13 = var13 * (1.0F - eFactor) + eFactor;
+				var14 = var14 * (1.0F - eFactor) + eFactor;
 				if(var12 > 1.0F) {
 					var12 = 1.0F;
 				}
@@ -646,6 +748,7 @@
 				}
 			}
 
+			this.mc.guiStatic.drawScreen(0, 0, var1);
 		}
 	}
 
@@ -719,7 +822,7 @@
 			GL11.glShadeModel(GL11.GL_FLAT);
 			EntityPlayer var21;
 			if(this.field_35823_q == 0) {
-				RenderHelper.enableStandardItemLighting();
+				RenderHelper.enableStandardEntityLighting();
 				var5.renderEntities(var4.getPosition(var1), var19, var1);
 				this.func_35806_b((double)var1);
 				var6.func_1187_b(var4, var1);
@@ -830,7 +933,8 @@
 				int var17 = var6 + this.random.nextInt(var7) - this.random.nextInt(var7);
 				int var18 = var3.func_35461_e(var16, var17);
 				int var19 = var3.getBlockId(var16, var18 - 1, var17);
-				if(var18 <= var5 + var7 && var18 >= var5 - var7 && var3.getWorldChunkManager().getBiomeGenAt(var16, var17).canSpawnLightningBolt()) {
+				BiomeGenBase biome = var3.getWorldChunkManager().getBiomeGenAt(var16, var17);
+				if(var18 <= var5 + var7 && var18 >= var5 - var7 && biome.canSpawnLightningBolt() && !biome.getEnableSnow()) {
 					float var20 = this.random.nextFloat();
 					float var21 = this.random.nextFloat();
 					if(var19 > 0) {
@@ -902,7 +1006,6 @@
 				var16 = 10;
 			}
 
-			BiomeGenBase[] var17 = var42.getWorldChunkManager().func_4069_a(var43 - var16, var45 - var16, var16 * 2 + 1, var16 * 2 + 1);
 			boolean var18 = false;
 			byte var19 = -1;
 			float var20 = (float)this.rendererUpdateCount + var1;
@@ -918,7 +1021,7 @@
 					int var23 = (var22 - var45 + 16) * 32 + var21 - var43 + 16;
 					float var24 = this.field_35822_i[var23] * 0.5F;
 					float var25 = this.field_35820_j[var23] * 0.5F;
-					BiomeGenBase var26 = var17[var46++];
+					BiomeGenBase var26 = var42.getWorldChunkManager().getBiomeGenAt(var21, var22);
 					if(var26.canSpawnLightningBolt() || var26.getEnableSnow()) {
 						int var27 = var42.func_35461_e(var21, var22);
 						int var28 = var44 - var16;
@@ -941,7 +1044,7 @@
 							this.random.setSeed((long)(var21 * var21 * 3121 + var21 * 45238971 ^ var22 * var22 * 418711 + var22 * 13761));
 							float var32;
 							double var35;
-							if(var26.canSpawnLightningBolt()) {
+							if(var26.canSpawnLightningBolt() && !var26.getEnableSnow()) {
 								if(var19 != 0) {
 									if(var19 >= 0) {
 										var8.draw();
@@ -1042,7 +1145,7 @@
 
 			if(var11 > 0.0F) {
 				float[] var12 = var2.worldProvider.calcSunriseSunsetColors(var2.getCelestialAngle(var1), var1);
-				if(var12 != null) {
+				if(var12 != null && !Personalization.alphaTextures) {
 					var11 *= var12[3];
 					this.fogColorRed = this.fogColorRed * (1.0F - var11) + var12[0] * var11;
 					this.fogColorGreen = this.fogColorGreen * (1.0F - var11) + var12[1] * var11;
@@ -1092,7 +1195,7 @@
 		this.fogColorGreen *= var19;
 		this.fogColorBlue *= var19;
 		double var13 = (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)var1) / 32.0D;
-		if(var13 < 1.0D) {
+		if(!(this.mc.theWorld.worldProvider instanceof WorldProviderOffices) && var13 < 1.0D) {
 			if(var13 < 0.0D) {
 				var13 = 0.0D;
 			}
@@ -1172,8 +1275,12 @@
 				}
 			} else {
 				var4 = this.farPlaneDistance;
+				if (this.mc.thePlayer.dimension == 2 && this.mc.thePlayer.posY < ChunkProviderOffices.height * 7) {
+					var4 = Math.min(var4, 100);
+				}
+
 				double var10 = (double)((var3.func_35115_a(var2) & 15728640) >> 20) / 16.0D + (var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * (double)var2 + 4.0D) / 32.0D;
-				if(var10 < 1.0D) {
+				if(!(this.mc.theWorld.worldProvider instanceof WorldProviderOffices) && var10 < 1.0D) {
 					if(var10 < 0.0D) {
 						var10 = 0.0D;
 					}
@@ -1190,7 +1297,10 @@
 				}
 
 				GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_LINEAR);
-				GL11.glFogf(GL11.GL_FOG_START, var4 * 0.25F);
+				GL11.glFogf(GL11.GL_FOG_START, var4 * (
+						Personalization.thickerFog || this.mc.thePlayer.dimension == 2 ? 0.0F
+						: Personalization.thickFog && !Personalization.pe8env ? 0.25F
+						: 0.75F));
 				GL11.glFogf(GL11.GL_FOG_END, var4);
 				if(var1 < 0) {
 					GL11.glFogf(GL11.GL_FOG_START, 0.0F);
--- /dev/null
+++ net/minecraft/src/AnvilSaveHandler.java
@@ -1,0 +1,52 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.util.List;
+
+public class AnvilSaveHandler extends SaveHandler {
+	public AnvilSaveHandler(File var1, String var2, boolean var3) {
+		super(var1, var2, var3);
+	}
+
+	public IChunkLoader getChunkLoader(WorldProvider var1) {
+		File var2 = this.getSaveDirectory();
+		File var3;
+		if(var1 instanceof WorldProviderHell) {
+			var3 = new File(var2, "DIM-1");
+			var3.mkdirs();
+			return new AnvilChunkLoader(var3);
+		} else if(var1 instanceof WorldProviderSky) {
+			if (var1.endForced) {
+				return null;
+			}
+			var3 = new File(var2, "DIM1");
+			var3.mkdirs();
+			return new AnvilChunkLoader(var3);
+		} else if(var1 instanceof WorldProviderOffices) {
+			var3 = new File(var2, "DIM2");
+			var3.mkdirs();
+			return new AnvilChunkLoader(var3);
+		} else if(var1 instanceof WorldProviderCaverns) {
+			var3 = new File(var2, "DIM-2");
+			var3.mkdirs();
+			return new AnvilChunkLoader(var3);
+		} else {
+			return new AnvilChunkLoader(var2);
+		}
+	}
+
+	public void saveWorldInfoAndPlayer(WorldInfo var1, List var2) {
+		var1.setSaveVersion(19133);
+		super.saveWorldInfoAndPlayer(var1, var2);
+	}
+
+	public void func_22093_e() {
+		try {
+			ThreadedFileIOBase.threadedIOInstance.waitForFinish();
+		} catch (InterruptedException var2) {
+			var2.printStackTrace();
+		}
+
+		RegionFileCache.clearRegionFileReferences();
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenShrubland.java
@@ -1,0 +1,10 @@
+package net.minecraft.src;
+
+public class BiomeGenShrubland extends BiomeGenBase {
+	protected BiomeGenShrubland(int var1) {
+		super(var1);
+		this.decorator.trees = 0;
+		this.decorator.flowers = 2;
+		this.decorator.grass = -999;
+	}
+}
--- net/minecraft/src/EntityArrow.java
+++ net/minecraft/src/EntityArrow.java
@@ -15,6 +15,7 @@
 	private int ticksInGround;
 	private int ticksInAir = 0;
 	public boolean field_35140_d = false;
+	public boolean makeItABIGGEREXPLOSION = Personalization.explosiveArrows;
 
 	public EntityArrow(World var1) {
 		super(var1);
@@ -161,13 +162,17 @@
 
 			float var19;
 			if(var3 != null) {
-				if(var3.entityHit != null) {
+				if(var3.entityHit != null && !(var3.entityHit == this.shootingEntity)) {
 					var19 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
 					int var20 = (int)Math.ceil((double)var19 * 2.0D);
 					if(this.field_35140_d) {
 						var20 = var20 * 3 / 2 + 1;
 					}
 
+					if (this.makeItABIGGEREXPLOSION) {
+						var20 = 10;
+					}
+
 					if(var3.entityHit.attackEntityFrom(DamageSource.func_35535_a(this, this.shootingEntity), var20)) {
 						if(var3.entityHit instanceof EntityLiving) {
 							++((EntityLiving)var3.entityHit).field_35172_bP;
@@ -200,6 +205,10 @@
 					this.inGround = true;
 					this.arrowShake = 7;
 					this.field_35140_d = false;
+				}
+
+				if (this.makeItABIGGEREXPLOSION) {
+					this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, 3.0F);
 				}
 			}
 
--- net/minecraft/src/BlockSapling.java
+++ net/minecraft/src/BlockSapling.java
@@ -25,32 +25,96 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		var2 &= 3;
-		return var2 == 1 ? 63 : (var2 == 2 ? 79 : super.getBlockTextureFromSideAndMetadata(var1, var2));
+		var2 &= 7;
+		return var2 == 1 ? 63
+				: var2 == 2 ? 79
+				: var2 == 3 ? 211
+				: var2 == 4 ? 212
+				: var2 == 5 ? 213
+				: super.getBlockTextureFromSideAndMetadata(var1, var2);
 	}
 
 	public void growTree(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4) & 3;
+		int genOffX = 0;
+		int genOffZ = 0;
+		boolean isQuad = false;
+
+		int var6 = var1.getBlockMetadata(var2, var3, var4) & 7;
 		var1.setBlock(var2, var3, var4, 0);
-		Object var7 = null;
+		WorldGenerator var7 = null;
 		if(var6 == 1) {
 			var7 = new WorldGenTaiga2();
 		} else if(var6 == 2) {
-			var7 = new WorldGenForest();
+			var7 = new WorldGenTrees(5, 3, 2, 2, false);
+		} else if(var6 == 3) {
+			quadSapCheck: for (genOffX = 0; genOffX >= -1; --genOffX) {
+				for (genOffZ = 0; genOffZ >= -1; --genOffZ) {
+					if ((this.isSuitableSapling(var1, var2 + genOffX, var3, var4 + genOffZ, 3) || genOffX == 0 && genOffZ == 0)
+							&& (this.isSuitableSapling(var1, var2 + genOffX + 1, var3, var4 + genOffZ, 3) || genOffX == -1 && genOffZ == 0)
+							&& (this.isSuitableSapling(var1, var2 + genOffX, var3, var4 + genOffZ + 1, 3) || genOffX == 0 && genOffZ == -1)
+							&& (this.isSuitableSapling(var1, var2 + genOffX + 1, var3, var4 + genOffZ + 1, 3) || genOffX == -1 && genOffZ == -1)) {
+						int hugeTreeHeight = Math.max((int)(10.0F - Personalization.entropy * 10.0F) + var5.nextInt((int)(20.0F - Personalization.entropy * 10.0F)), 10);
+						var7 = new WorldGenHugeTrees(hugeTreeHeight, 3, 3);
+						var1.setBlock(var2 + genOffX, var3, var4 + genOffZ, 0);
+						var1.setBlock(var2 + genOffX + 1, var3, var4 + genOffZ, 0);
+						var1.setBlock(var2 + genOffX, var3, var4 + genOffZ + 1, 0);
+						var1.setBlock(var2 + genOffX + 1, var3, var4 + genOffZ + 1, 0);
+						isQuad = true;
+						break quadSapCheck;
+					}
+				}
+			}
+
+			if (var7 == null) {
+				int treeHeight = Math.max((int)(4.0F - Personalization.entropy * 6.0F) + var5.nextInt(7), 4);
+				var7 = new WorldGenTrees(treeHeight, 3, 2, 2, true);
+			}
+		} else if(var6 == 4) {
+			var7 = new WorldGenSavannaTree();
+		} else if(var6 == 5) {
+			quadSapCheck: for (genOffX = 0; genOffX >= -1; --genOffX) {
+				for (genOffZ = 0; genOffZ >= -1; --genOffZ) {
+					if ((this.isSuitableSapling(var1, var2 + genOffX, var3, var4 + genOffZ, 5) || genOffX == 0 && genOffZ == 0)
+							&& (this.isSuitableSapling(var1, var2 + genOffX + 1, var3, var4 + genOffZ, 5) || genOffX == -1 && genOffZ == 0)
+							&& (this.isSuitableSapling(var1, var2 + genOffX, var3, var4 + genOffZ + 1, 5) || genOffX == 0 && genOffZ == -1)
+							&& (this.isSuitableSapling(var1, var2 + genOffX + 1, var3, var4 + genOffZ + 1, 5) || genOffX == -1 && genOffZ == -1)) {
+						var7 = new WorldGenCanopyTree();
+						var1.setBlock(var2 + genOffX, var3, var4 + genOffZ, 0);
+						var1.setBlock(var2 + genOffX + 1, var3, var4 + genOffZ, 0);
+						var1.setBlock(var2 + genOffX, var3, var4 + genOffZ + 1, 0);
+						var1.setBlock(var2 + genOffX + 1, var3, var4 + genOffZ + 1, 0);
+						isQuad = true;
+						break quadSapCheck;
+					}
+				}
+			}
 		} else {
-			var7 = new WorldGenTrees();
-			if(var5.nextInt(10) == 0) {
-				var7 = new WorldGenBigTree();
+			var7 = var1.getWorldChunkManager().getBiomeGenAt(var2, var4).getGrownOakTree(var5);
+		}
+
+		if (var7 == null) {
+			var1.setBlockAndMetadata(var2, var3, var4, this.blockID, var6);
+			return;
+		}
+		var7.inPlayerModified = true;
+
+		if(!var7.generate(var1, var5, var2 + genOffX, var3, var4 + genOffZ)) {
+			var1.setBlockAndMetadata(var2, var3, var4, this.blockID, var6);
+			if (isQuad) {
+				var1.setBlockAndMetadata(var2 + genOffX, var3, var4 + genOffZ, this.blockID, var6);
+				var1.setBlockAndMetadata(var2 + genOffX + 1, var3, var4 + genOffZ, this.blockID, var6);
+				var1.setBlockAndMetadata(var2 + genOffX, var3, var4 + genOffZ + 1, this.blockID, var6);
+				var1.setBlockAndMetadata(var2 + genOffX + 1, var3, var4 + genOffZ + 1, this.blockID, var6);
 			}
 		}
 
-		if(!((WorldGenerator)var7).generate(var1, var5, var2, var3, var4)) {
-			var1.setBlockAndMetadata(var2, var3, var4, this.blockID, var6);
-		}
+	}
 
+	private boolean isSuitableSapling(World var1, int var2, int var3, int var4, int var5) {
+		return var1.getBlockId(var2, var3, var4) == this.blockID && (var1.getBlockMetadata(var2, var3, var4) & 7) == var5;
 	}
 
 	protected int damageDropped(int var1) {
-		return var1 & 3;
+		return var1 & 7;
 	}
 }
--- /dev/null
+++ net/minecraft/src/ComponentVillageHouseNotch.java
@@ -1,0 +1,103 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+public class ComponentVillageHouseNotch extends ComponentVillage {
+	private static final StructureVillageStones stones = new StructureVillageStones();
+	private int field_35096_a = -1;
+	private int width;
+	private int height;
+	private int depth;
+
+	public ComponentVillageHouseNotch(int i1, Random random2, StructureBoundingBox structureBoundingBox3, int i4, int i5, int i6, int i7) {
+		super(i1);
+		this.field_35025_h = i4;
+		this.field_35024_g = structureBoundingBox3;
+		this.width = i5;
+		this.height = i6;
+		this.depth = i7;
+	}
+
+	public void func_35004_a(StructureComponent structureComponent1, List list2, Random random3) {
+	}
+
+	public static ComponentVillageHouseNotch func_35095_a(List list0, Random random1, int i2, int i3, int i4, int i5, int i6) {
+		int width = 5 + random1.nextInt(8);
+		int height = 4 + random1.nextInt(2);
+		int depth = 7 + random1.nextInt(8);
+		StructureBoundingBox structureBoundingBox7 = StructureBoundingBox.func_35747_a(i2, i3, i4, 0, 0, 0, width, height + width / 2 + 1, depth, i5);
+		return func_35074_a(structureBoundingBox7) && StructureComponent.func_35020_a(list0, structureBoundingBox7) == null ? new ComponentVillageHouseNotch(i6, random1, structureBoundingBox7, i5, width, height, depth) : null;
+	}
+
+	public boolean func_35023_a(World world, Random rand, StructureBoundingBox bb) {
+		if(this.field_35096_a < 0) {
+			this.field_35096_a = this.func_35075_b(world, bb);
+			if(this.field_35096_a < 0) {
+				return true;
+			}
+
+			this.field_35024_g.func_35745_a(0, this.field_35096_a - this.field_35024_g.field_35750_e + (this.field_35024_g.field_35750_e - this.field_35024_g.field_35751_b) - 1, 0);
+		}
+
+		List<Integer> doorPositions = new ArrayList<>();
+
+		// Empty space
+		this.func_35011_a(world, bb, 1, 1, 2, this.width - 2, this.height, this.depth - 3, 0, 0, false);
+
+		// Floor
+		this.func_35011_a(world, bb, 0, 0, 1, this.width - 1, 0, this.depth - 2, Block.planks.blockID, Block.planks.blockID, false);
+
+		// Walls
+		this.func_35011_a(world, bb, 0, 1, 1, 0, 1, this.depth - 2, Block.cobblestoneMossy.blockID, Block.cobblestoneMossy.blockID, false);
+		this.func_35011_a(world, bb, this.width - 1, 1, 1, this.width - 1, 1, this.depth - 2, Block.cobblestoneMossy.blockID, Block.cobblestoneMossy.blockID, false);
+		this.func_35011_a(world, bb, 0, 1, 1, this.width - 1, 1, 1, Block.cobblestoneMossy.blockID, Block.cobblestoneMossy.blockID, false);
+		this.func_35011_a(world, bb, 0, 1, this.depth - 2, this.width - 1, 1, this.depth - 2, Block.cobblestoneMossy.blockID, Block.cobblestoneMossy.blockID, false);
+		this.func_35022_a(world, bb, 0, 2, 1, 0, 3, this.depth - 2, false, rand, stones);
+		this.func_35022_a(world, bb, this.width - 1, 2, 1, this.width - 1, 3, this.depth - 2, false, rand, stones);
+		this.func_35022_a(world, bb, 0, 2, 1, this.width - 1, 3, 1, false, rand, stones);
+		this.func_35022_a(world, bb, 0, 2, this.depth - 2, this.width - 1, 3, this.depth - 2, false, rand, stones);
+		this.func_35011_a(world, bb, 0, 4, 1, 0, this.height - 1, this.depth - 2, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.func_35011_a(world, bb, this.width - 1, 4, 1, this.width - 1, this.height - 1, this.depth - 2, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.func_35011_a(world, bb, 0, 4, 1, this.width - 1, this.height - 1, 1, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.func_35011_a(world, bb, 0, 4, this.depth - 2, this.width - 1, this.height - 1, this.depth - 2, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+
+		// Roof
+		for (int x = 0; x < this.width; x++) {
+			int roofHeight = Math.min(x, this.width - 1 - x);
+			int roofHeightAdd = roofHeight + this.height;
+			this.func_35011_a(world, bb, x, roofHeightAdd, 0, x, roofHeightAdd, this.depth - 1, Block.planks.blockID, Block.planks.blockID, false);
+			if (roofHeight > 0) {
+				this.func_35011_a(world, bb, x, this.height, 2, x, roofHeightAdd - 1, this.depth - 2, 0, 0, false);
+				this.func_35011_a(world, bb, x, this.height, 1, x, roofHeightAdd - 1, 1, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+				this.func_35011_a(world, bb, x, this.height, this.depth - 2, x, roofHeightAdd - 1, this.depth - 2, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+			}
+		}
+
+		// X windows
+		for (int x = 2; x < this.width - 2; x += 2) {
+			this.func_35018_a(world, Block.glass.blockID, 0, x, 2, 1, bb);
+			this.func_35018_a(world, Block.glass.blockID, 0, x, 2, this.depth - 2, bb);
+			if (this.width % 2 == 0 && x > this.width / 2) {
+				x++;
+			}
+		}
+
+		// Z windows
+		for (int z = 3; z < this.depth - 3; z += 2) {
+			doorPositions.add(z);
+			this.func_35018_a(world, Block.glass.blockID, 0, 0, 2, z, bb);
+			this.func_35018_a(world, Block.glass.blockID, 0, this.width - 1, 2, z, bb);
+			if (this.depth % 2 == 0 && z > this.depth / 2) {
+				z++;
+			}
+		}
+
+		// Door
+		int doorZ = doorPositions.get(rand.nextInt(doorPositions.size()));
+		this.func_35002_a(world, bb, rand, 0, 1, doorZ, this.func_35009_c(Block.doorWood.blockID, 0));
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldChunkManagerGradient.java
@@ -1,0 +1,136 @@
+package net.minecraft.src;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.Random;
+
+public class WorldChunkManagerGradient extends WorldChunkManager {
+	private static final NoiseGeneratorSimplexOctaves temperatureNoise = new NoiseGeneratorSimplexOctaves(new Random("noisy climate ooo".hashCode()), 4);
+	private static final NoiseGeneratorSimplexOctaves rainfallNoise = new NoiseGeneratorSimplexOctaves(new Random("Noisy climate ooh".hashCode()), 4);
+
+	private final BiomeGenBase biome;
+	private final float temperature;
+	private final float rainfall;
+	private final float temperatureRange;
+	private final float rainfallRange;
+	private final float rangeScale;
+	private final boolean stoneGradient;
+
+	public WorldChunkManagerGradient(BiomeGenBase biome, float temperature, float rainfall,
+	                                 float temperatureRange, float rainfallRange, float rangeScale) {
+		this.biome = biome;
+		this.temperature = temperature;
+		this.rainfall = rainfall;
+		this.temperatureRange = temperatureRange;
+		this.rainfallRange = rainfallRange;
+		this.rangeScale = rangeScale;
+		this.stoneGradient = biome instanceof BiomeGenCaverns;
+	}
+
+	public BiomeGenBase getBiomeGenAtChunkCoord(ChunkCoordIntPair var1) {
+		return this.biome;
+	}
+
+	public BiomeGenBase getBiomeGenAt(int var1, int var2) {
+		return this.biome;
+	}
+
+	public float getTemperature(int var1, int var2) {
+		return this.temperature + (float)(temperatureNoise.func_151601_a(var1 * this.rangeScale, var2 * this.rangeScale) / 15.0F * this.temperatureRange);
+	}
+
+	public float getRainfall(int var1, int var2) {
+		return this.rainfall + (float)(rainfallNoise.func_151601_a(var1 * this.rangeScale, var2 * this.rangeScale) / 15.0F * this.rainfallRange);
+	}
+
+	public float[] getTemperatures(float[] var1, int var2, int var3, int var4, int var5) {
+		if(var1 == null || var1.length < var4 * var5) {
+			var1 = new float[var4 * var5];
+		}
+
+		for (int z = 0; z < var5; z++) {
+			for (int x = 0; x < var4; x++) {
+				var1[x + z * var4] = this.getTemperature(x + var2, z + var3);
+			}
+		}
+
+		return var1;
+	}
+
+	public float[] getTemperaturesForGeneration(float[] var1, int var2, int var3, int var4, int var5) {
+		if(var1 == null || var1.length < var4 * var5) {
+			var1 = new float[var4 * var5];
+		}
+
+		for (int z = 0; z < var5; z++) {
+			for (int x = 0; x < var4; x++) {
+				var1[x + z * var4] = this.getTemperature((x + var2) * 4, (z + var3) * 4);
+			}
+		}
+
+		return var1;
+	}
+
+	public float[] func_35560_b(float[] var1, int var2, int var3, int var4, int var5) {
+		if(var1 == null || var1.length < var4 * var5) {
+			var1 = new float[var4 * var5];
+		}
+
+		for (int z = 0; z < var5; z++) {
+			for (int x = 0; x < var4; x++) {
+				var1[x + z * var4] = this.getRainfall(x + var2, z + var3);
+			}
+		}
+
+		return var1;
+	}
+
+	public float[] getRainfallsForGeneration(float[] var1, int var2, int var3, int var4, int var5) {
+		if(var1 == null || var1.length < var4 * var5) {
+			var1 = new float[var4 * var5];
+		}
+
+		for (int z = 0; z < var5; z++) {
+			for (int x = 0; x < var4; x++) {
+				var1[x + z * var4] = this.getRainfall((x + var2) * 4, (z + var3) * 4);
+			}
+		}
+
+		return var1;
+	}
+
+	public BiomeGenBase[] loadBlockGeneratorData(BiomeGenBase[] var1, int var2, int var3, int var4, int var5) {
+		if(var1 == null || var1.length < var4 * var5) {
+			var1 = new BiomeGenBase[var4 * var5];
+		}
+
+		Arrays.fill(var1, 0, var4 * var5, this.biome);
+		return var1;
+	}
+
+	public BiomeGenBase[] func_35555_a(BiomeGenBase[] var1, int var2, int var3, int var4, int var5, boolean var6) {
+		if(var1 == null || var1.length < var4 * var5) {
+			var1 = new BiomeGenBase[var4 * var5];
+		}
+
+		if(var6 && var4 == 16 && var5 == 16 && (var2 & 15) == 0 && (var3 & 15) == 0) {
+			BiomeGenBase[] var9 = this.field_35563_f.func_35723_d(var2, var3);
+			System.arraycopy(var9, 0, var1, 0, var4 * var5);
+			return var1;
+		} else {
+			return this.loadBlockGeneratorData(var1, var2, var3, var4, var5);
+		}
+	}
+
+	public ChunkPosition func_35556_a(int var1, int var2, int var3, List var4, Random var5) {
+		return var4.contains(this.biome) ? new ChunkPosition(var1 - var3 + var5.nextInt(var3 * 2 + 1), 0, var2 - var3 + var5.nextInt(var3 * 2 + 1)) : null;
+	}
+
+	public boolean func_35562_a(int var1, int var2, int var3, List var4) {
+		return var4.contains(this.biome);
+	}
+
+	public boolean hasStoneGradient() {
+		return this.stoneGradient;
+	}
+}
--- net/minecraft/src/WorldRenderer.java
+++ net/minecraft/src/WorldRenderer.java
@@ -99,47 +99,50 @@
 			byte var8 = 1;
 			ChunkCache var9 = new ChunkCache(this.worldObj, var1 - var8, var2 - var8, var3 - var8, var4 + var8, var5 + var8, var6 + var8);
 			RenderBlocks var10 = new RenderBlocks(var9);
+			boolean emptySection = var9.isSectionEmpty(var1 >> 4, var2 >> 4, var3 >> 4);
 
 			for(int var11 = 0; var11 < 2; ++var11) {
 				boolean var12 = false;
 				boolean var13 = false;
 				boolean var14 = false;
 
-				for(int var15 = var2; var15 < var5; ++var15) {
-					for(int var16 = var3; var16 < var6; ++var16) {
-						for(int var17 = var1; var17 < var4; ++var17) {
-							int var18 = var9.getBlockId(var17, var15, var16);
-							if(var18 > 0) {
-								if(!var14) {
-									var14 = true;
-									GL11.glNewList(this.glRenderList + var11, GL11.GL_COMPILE);
-									GL11.glPushMatrix();
-									this.setupGLTranslation();
-									float var19 = 1.000001F;
-									GL11.glTranslatef((float)(-this.sizeDepth) / 2.0F, (float)(-this.sizeHeight) / 2.0F, (float)(-this.sizeDepth) / 2.0F);
-									GL11.glScalef(var19, var19, var19);
-									GL11.glTranslatef((float)this.sizeDepth / 2.0F, (float)this.sizeHeight / 2.0F, (float)this.sizeDepth / 2.0F);
-									tessellator.startDrawingQuads();
-									tessellator.setTranslationD((double)(-this.posX), (double)(-this.posY), (double)(-this.posZ));
-								}
-
-								if(var11 == 0 && Block.isBlockContainer[var18]) {
-									TileEntity var23 = var9.getBlockTileEntity(var17, var15, var16);
-									if(TileEntityRenderer.instance.hasSpecialRenderer(var23)) {
-										this.tileEntityRenderers.add(var23);
-									}
-								}
-
-								Block var24 = Block.blocksList[var18];
-								int var20 = var24.getRenderBlockPass();
-								if(var11 == 0 && var10.func_35927_a(var17, var15, var16, var11)) {
-									var13 = true;
-								}
-
-								if(var20 != var11) {
-									var12 = true;
-								} else if(var20 == var11) {
-									var13 |= var10.renderBlockByRenderType(var24, var17, var15, var16);
+				if (!emptySection) {
+					for(int var15 = var2; var15 < var5; ++var15) {
+						for(int var16 = var3; var16 < var6; ++var16) {
+							for(int var17 = var1; var17 < var4; ++var17) {
+								int var18 = var9.getBlockId(var17, var15, var16);
+								if(var18 > 0) {
+									if(!var14) {
+										var14 = true;
+										GL11.glNewList(this.glRenderList + var11, GL11.GL_COMPILE);
+										GL11.glPushMatrix();
+										this.setupGLTranslation();
+										float var19 = 1.000001F;
+										GL11.glTranslatef((float)(-this.sizeDepth) / 2.0F, (float)(-this.sizeHeight) / 2.0F, (float)(-this.sizeDepth) / 2.0F);
+										GL11.glScalef(var19, var19, var19);
+										GL11.glTranslatef((float)this.sizeDepth / 2.0F, (float)this.sizeHeight / 2.0F, (float)this.sizeDepth / 2.0F);
+										tessellator.startDrawingQuads();
+										tessellator.setTranslationD((double)(-this.posX), (double)(-this.posY), (double)(-this.posZ));
+									}
+
+									if(var11 == 0 && Block.isBlockContainer[var18]) {
+										TileEntity var23 = var9.getBlockTileEntity(var17, var15, var16);
+										if(TileEntityRenderer.instance.hasSpecialRenderer(var23)) {
+											this.tileEntityRenderers.add(var23);
+										}
+									}
+
+									Block var24 = Block.blocksList[var18];
+									int var20 = var24.getRenderBlockPass();
+									if(var11 == 0 && var10.func_35927_a(var17, var15, var16, var11)) {
+										var13 = true;
+									}
+
+									if(var20 != var11) {
+										var12 = true;
+									} else if(var20 == var11) {
+										var13 |= var10.renderBlockByRenderType(var24, var17, var15, var16);
+									}
 								}
 							}
 						}
--- net/minecraft/src/GuiMultiplayer.java
+++ net/minecraft/src/GuiMultiplayer.java
@@ -44,7 +44,7 @@
 
 	private void func_35324_p() {
 		try {
-			NBTTagCompound var1 = CompressedStreamTools.func_35622_a(new File(this.mc.mcDataDir, "servers.dat"));
+			NBTTagCompound var1 = CompressedStreamTools.func_35622_a(new File(this.game.mcDataDir, "servers.dat"));
 			NBTTagList var2 = var1.getTagList("servers");
 			this.field_35340_f.clear();
 
@@ -67,7 +67,7 @@
 
 			NBTTagCompound var4 = new NBTTagCompound();
 			var4.setTag("servers", var1);
-			CompressedStreamTools.func_35621_a(var4, new File(this.mc.mcDataDir, "servers.dat"));
+			CompressedStreamTools.func_35621_a(var4, new File(this.game.mcDataDir, "servers.dat"));
 		} catch (Exception var3) {
 			var3.printStackTrace();
 		}
@@ -105,24 +105,24 @@
 					String var6 = var3.translateKey("selectServer.deleteButton");
 					String var7 = var3.translateKey("gui.cancel");
 					GuiYesNo var8 = new GuiYesNo(this, var4, var5, var6, var7, this.field_35341_g);
-					this.mc.displayGuiScreen(var8);
+					this.game.displayGuiScreen(var8);
 				}
 			} else if(var1.id == 1) {
 				this.func_35322_a(this.field_35341_g);
 			} else if(var1.id == 4) {
 				this.field_35351_u = true;
-				this.mc.displayGuiScreen(new GuiScreenServerList(this, this.field_35349_w = new ServerNBTStorage(StatCollector.translateToLocal("selectServer.defaultName"), "")));
+				this.game.displayGuiScreen(new GuiScreenServerList(this, this.field_35349_w = new ServerNBTStorage(StatCollector.translateToLocal("selectServer.defaultName"), "")));
 			} else if(var1.id == 3) {
 				this.field_35353_s = true;
-				this.mc.displayGuiScreen(new GuiScreenAddServer(this, this.field_35349_w = new ServerNBTStorage(StatCollector.translateToLocal("selectServer.defaultName"), "")));
+				this.game.displayGuiScreen(new GuiScreenAddServer(this, this.field_35349_w = new ServerNBTStorage(StatCollector.translateToLocal("selectServer.defaultName"), "")));
 			} else if(var1.id == 7) {
 				this.field_35352_t = true;
 				ServerNBTStorage var9 = (ServerNBTStorage)this.field_35340_f.get(this.field_35341_g);
-				this.mc.displayGuiScreen(new GuiScreenAddServer(this, this.field_35349_w = new ServerNBTStorage(var9.field_35795_a, var9.field_35793_b)));
+				this.game.displayGuiScreen(new GuiScreenAddServer(this, this.field_35349_w = new ServerNBTStorage(var9.field_35795_a, var9.field_35793_b)));
 			} else if(var1.id == 0) {
-				this.mc.displayGuiScreen(this.parentScreen);
+				this.game.displayGuiScreen(this.parentScreen);
 			} else if(var1.id == 8) {
-				this.mc.displayGuiScreen(new GuiMultiplayer(this.parentScreen));
+				this.game.displayGuiScreen(new GuiMultiplayer(this.parentScreen));
 			} else {
 				this.field_35342_d.actionPerformed(var1);
 			}
@@ -138,13 +138,13 @@
 				this.func_35323_q();
 			}
 
-			this.mc.displayGuiScreen(this);
+			this.game.displayGuiScreen(this);
 		} else if(this.field_35351_u) {
 			this.field_35351_u = false;
 			if(var1) {
 				this.func_35330_a(this.field_35349_w);
 			} else {
-				this.mc.displayGuiScreen(this);
+				this.game.displayGuiScreen(this);
 			}
 		} else if(this.field_35353_s) {
 			this.field_35353_s = false;
@@ -153,7 +153,7 @@
 				this.func_35323_q();
 			}
 
-			this.mc.displayGuiScreen(this);
+			this.game.displayGuiScreen(this);
 		} else if(this.field_35352_t) {
 			this.field_35352_t = false;
 			if(var1) {
@@ -163,7 +163,7 @@
 				this.func_35323_q();
 			}
 
-			this.mc.displayGuiScreen(this);
+			this.game.displayGuiScreen(this);
 		}
 
 	}
@@ -225,7 +225,7 @@
 			var3 = new String[]{var2};
 		}
 
-		this.mc.displayGuiScreen(new GuiConnecting(this.mc, var3[0], var3.length > 1 ? this.parseIntWithDefault(var3[1], 25565) : 25565));
+		this.game.displayGuiScreen(new GuiConnecting(this.game, var3[0], var3.length > 1 ? this.parseIntWithDefault(var3[1], 25565) : 25565));
 	}
 
 	private void func_35328_b(ServerNBTStorage var1) throws IOException {
--- net/minecraft/src/GuiSlotServer.java
+++ net/minecraft/src/GuiSlotServer.java
@@ -6,7 +6,7 @@
 	final GuiMultiplayer field_35410_a;
 
 	public GuiSlotServer(GuiMultiplayer var1) {
-		super(var1.mc, var1.width, var1.height, 32, var1.height - 64, 36);
+		super(var1.game, var1.width, var1.height, 32, var1.height - 64, 36);
 		this.field_35410_a = var1;
 	}
 
@@ -57,7 +57,7 @@
 		this.field_35410_a.drawString(this.field_35410_a.fontRenderer, var6.field_35794_c, var2 + 215 - this.field_35410_a.fontRenderer.getStringWidth(var6.field_35794_c), var3 + 12, 8421504);
 		this.field_35410_a.drawString(this.field_35410_a.fontRenderer, var6.field_35793_b, var2 + 2, var3 + 12 + 11, 3158064);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.field_35410_a.mc.renderEngine.bindTexture(this.field_35410_a.mc.renderEngine.getTexture("/gui/icons.png"));
+		this.field_35410_a.game.renderEngine.bindTexture(this.field_35410_a.game.renderEngine.getTexture("/gui/icons.png"));
 		boolean var12 = false;
 		boolean var8 = false;
 		String var9 = "";
--- net/minecraft/src/SaveHandlerMP.java
+++ net/minecraft/src/SaveHandlerMP.java
@@ -21,7 +21,11 @@
 	public void saveWorldInfo(WorldInfo var1) {
 	}
 
-	public File func_28113_a(String var1) {
+	public File getMapFileFromName(String var1) {
 		return null;
+	}
+
+	public String getSaveDirectoryName() {
+		return "none";
 	}
 }
--- net/minecraft/src/TileEntityDispenser.java
+++ net/minecraft/src/TileEntityDispenser.java
@@ -2,7 +2,7 @@
 
 import java.util.Random;
 
-public class TileEntityDispenser extends TileEntity implements IInventory {
+public class TileEntityDispenser extends TileEntityContainer {
 	private ItemStack[] dispenserContents = new ItemStack[9];
 	private Random dispenserRandom = new Random();
 
--- net/minecraft/src/SaveFormatOld.java
+++ net/minecraft/src/SaveFormatOld.java
@@ -7,21 +7,21 @@
 import java.util.List;
 
 public class SaveFormatOld implements ISaveFormat {
-	protected final File field_22180_a;
+	protected final File savesDirectory;
 
 	public SaveFormatOld(File var1) {
 		if(!var1.exists()) {
 			var1.mkdirs();
 		}
 
-		this.field_22180_a = var1;
+		this.savesDirectory = var1;
 	}
 
-	public String func_22178_a() {
+	public String getFormatName() {
 		return "Old Format";
 	}
 
-	public List func_22176_b() {
+	public List getSaveList() {
 		ArrayList var1 = new ArrayList();
 
 		for(int var2 = 0; var2 < 5; ++var2) {
@@ -39,7 +39,7 @@
 	}
 
 	public WorldInfo getWorldInfo(String var1) {
-		File var2 = new File(this.field_22180_a, var1);
+		File var2 = new File(this.savesDirectory, var1);
 		if(!var2.exists()) {
 			return null;
 		} else {
@@ -71,8 +71,8 @@
 		}
 	}
 
-	public void func_22170_a(String var1, String var2) {
-		File var3 = new File(this.field_22180_a, var1);
+	public void renameWorld(String var1, String var2) {
+		File var3 = new File(this.savesDirectory, var1);
 		if(var3.exists()) {
 			File var4 = new File(var3, "level.dat");
 			if(var4.exists()) {
@@ -89,18 +89,19 @@
 		}
 	}
 
-	public void func_22172_c(String var1) {
-		File var2 = new File(this.field_22180_a, var1);
+	public void deleteWorldDirectory(String var1) {
+		File var2 = new File(this.savesDirectory, var1);
 		if(var2.exists()) {
-			func_22179_a(var2.listFiles());
+			deleteFiles(var2.listFiles());
 			var2.delete();
 		}
 	}
 
-	protected static void func_22179_a(File[] var0) {
+	protected static void deleteFiles(File[] var0) {
 		for(int var1 = 0; var1 < var0.length; ++var1) {
 			if(var0[var1].isDirectory()) {
-				func_22179_a(var0[var1].listFiles());
+				System.out.println("Deleting " + var0[var1]);
+				deleteFiles(var0[var1].listFiles());
 			}
 
 			var0[var1].delete();
@@ -109,7 +110,7 @@
 	}
 
 	public ISaveHandler getSaveLoader(String var1, boolean var2) {
-		return new SaveHandler(this.field_22180_a, var1, var2);
+		return new SaveHandler(this.savesDirectory, var1, var2);
 	}
 
 	public boolean isOldMapFormat(String var1) {
--- /dev/null
+++ net/minecraft/src/GenLayerBlur.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+public class GenLayerBlur extends GenLayer {
+	public GenLayerBlur(GenLayer genLayer) {
+        super(0L);
+        this.field_35504_a = genLayer;
+    }
+
+	public int[] func_35500_a(int var1, int var2, int var3, int var4) {
+		int[] source = this.field_35504_a.func_35500_a(var1 - 1, var2 - 1, var3 + 2, var4 + 2);
+		int[] dest = IntCache.func_35267_a(var3 * var4);
+
+		for (int z = 0; z < var4; z++) {
+			for (int x = 0; x < var3; x++) {
+				int points = 0;
+				int sum = 0;
+				for (int zz = z - 1; zz <= z + 1; zz++) {
+					for (int xx = x - 1; xx <= x + 1; xx++) {
+						if (zz < -1 || zz > var3 || xx < -1 || xx > var4) {
+							continue;
+						}
+
+						sum += source[(zz + 1) * (var3 + 2) + (xx + 1)];
+						points++;
+					}
+				}
+
+				if (points > 0) {
+					dest[z * var3 + x] = sum / points;
+				} else {
+					dest[z * var3 + x] = source[(z + 1) * (var3 + 2) + (x + 1)];
+				}
+			}
+		}
+
+		return dest;
+	}
+}
--- net/minecraft/src/EntityCreature.java
+++ net/minecraft/src/EntityCreature.java
@@ -5,6 +5,8 @@
 	protected Entity entityToAttack;
 	protected boolean hasAttacked = false;
 	protected int field_35174_at = 0;
+	protected float sightDist = 16.0F;
+	private float prevEntityDist = 16.0F;
 
 	public EntityCreature(World var1) {
 		super(var1);
@@ -20,8 +22,9 @@
 		}
 
 		this.hasAttacked = this.isMovementCeased();
-		float var1 = 16.0F;
+		float var1 = this.sightDist;
 		if(this.entityToAttack == null) {
+			this.prevEntityDist = this.sightDist;
 			this.entityToAttack = this.findPlayerToAttack();
 			if(this.entityToAttack != null) {
 				this.pathToEntity = this.worldObj.getPathToEntity(this, this.entityToAttack, var1);
@@ -32,9 +35,17 @@
 			float var2 = this.entityToAttack.getDistanceToEntity(this);
 			if(this.canEntityBeSeen(this.entityToAttack)) {
 				this.attackEntity(this.entityToAttack, var2);
+				if (var2 > this.prevEntityDist
+						&& var2 < 12.0F
+						&& this.entityToAttack instanceof EntityPlayer
+						&& this.entityToAttack.func_35117_Q()) {
+					Personalization.betaBias -= 1.5F;
+				}
 			} else {
 				this.attackBlockedEntity(this.entityToAttack, var2);
 			}
+
+			this.prevEntityDist = var2;
 		}
 
 		if(this.hasAttacked || this.entityToAttack == null || this.pathToEntity != null && this.rand.nextInt(20) != 0) {
@@ -69,6 +80,7 @@
 				double var10 = var5.zCoord - this.posZ;
 				double var12 = var5.yCoord - (double)var21;
 				float var14 = (float)(Math.atan2(var10, var8) * 180.0D / (double)((float)Math.PI)) - 90.0F;
+//				float var14 = (float)(MathHelper.vecAngle(var5.xCoord, var5.zCoord, this.posX, this.posZ) * 180.0D / (double)((float)Math.PI)) - 90.0F;
 				float var15 = var14 - this.rotationYaw;
 
 				for(this.moveForward = this.moveSpeed; var15 < -180.0F; var15 += 360.0F) {
@@ -92,6 +104,7 @@
 					double var18 = this.entityToAttack.posZ - this.posZ;
 					float var20 = this.rotationYaw;
 					this.rotationYaw = (float)(Math.atan2(var18, var16) * 180.0D / (double)((float)Math.PI)) - 90.0F;
+//					this.rotationYaw = (float)(MathHelper.vecAngle(this.entityToAttack.posX, this.entityToAttack.posZ, this.posX, this.posZ) * 180.0D / (double)((float)Math.PI)) - 90.0F;
 					var15 = (var20 - this.rotationYaw + 90.0F) * (float)Math.PI / 180.0F;
 					this.moveStrafing = -MathHelper.sin(var15) * this.moveForward * 1.0F;
 					this.moveForward = MathHelper.cos(var15) * this.moveForward * 1.0F;
--- net/minecraft/src/GuiConnecting.java
+++ net/minecraft/src/GuiConnecting.java
@@ -35,7 +35,7 @@
 				this.clientHandler.disconnect();
 			}
 
-			this.mc.displayGuiScreen(new GuiMainMenu());
+			this.game.displayGuiScreen(new GuiMainMenu());
 		}
 
 	}
--- /dev/null
+++ net/minecraft/src/TileEntityComputer.java
@@ -1,0 +1,22 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class TileEntityComputer extends TileEntity {
+	private static final Random random = new Random();
+	public final int type;
+
+	public TileEntityComputer() {
+		if (random.nextInt(5) == 0) {
+			this.type = 0;
+		} else if (random.nextInt(1000) == 0) {
+			if (random.nextInt(10) == 0) {
+				this.type = 31;
+			} else {
+				this.type = 30;
+			}
+		} else {
+			this.type = random.nextInt(30);
+		}
+	}
+}
--- net/minecraft/src/Potion.java
+++ net/minecraft/src/Potion.java
@@ -22,6 +22,7 @@
 	public static final Potion field_35691_s = (new Potion(17)).func_35661_a("potion.hunger");
 	public static final Potion field_35690_t = (new Potion(18)).func_35661_a("potion.weakness");
 	public static final Potion field_35689_u = (new Potion(19)).func_35661_a("potion.poison");
+	public static final Potion thirst = (new Potion(20)).func_35661_a("potion.thirst");
 	public static final Potion field_35688_v = null;
 	public static final Potion field_35687_w = null;
 	public static final Potion field_35697_x = null;
@@ -44,7 +45,7 @@
 
 	public void func_35662_a(EntityLiving var1, int var2) {
 		if(this.field_35670_H == field_35681_l.field_35670_H) {
-			if(var1.health < 20) {
+			if(var1.health < var1.getMaxHealth()) {
 				var1.heal(1);
 			}
 		} else if(this.field_35670_H == field_35689_u.field_35670_H) {
@@ -52,18 +53,21 @@
 				var1.attackEntityFrom(DamageSource.field_35545_l, 1);
 			}
 		} else if(this.field_35670_H == field_35691_s.field_35670_H && var1 instanceof EntityPlayer) {
-			((EntityPlayer)var1).func_35198_d(0.025F * (float)(var2 + 1));
+			((EntityPlayer)var1).func_35198_d((Personalization.reducedExhaustion ? 0.005F : 0.025F) * (float)(var2 + 1));
 		} else if(this.field_35670_H == field_35685_h.field_35670_H) {
 			var1.heal(4 << var2);
 		} else if(this.field_35670_H == field_35686_i.field_35670_H) {
 			var1.attackEntityFrom(DamageSource.field_35545_l, 4 << var2);
+		} else if(this.field_35670_H == thirst.field_35670_H && var1 instanceof EntityPlayer) {
+			((EntityPlayer)var1).addThirst(0.025F * (float)(var2 + 1));
 		}
 
 	}
 
 	public boolean func_35660_a(int var1, int var2) {
 		if(this.field_35670_H != field_35681_l.field_35670_H && this.field_35670_H != field_35689_u.field_35670_H) {
-			return this.field_35670_H == field_35691_s.field_35670_H;
+			return this.field_35670_H == field_35691_s.field_35670_H
+					|| this.field_35670_H == thirst.field_35670_H;
 		} else {
 			int var3 = 25 >> var2;
 			return var3 > 0 ? var1 % var3 == 0 : true;
--- net/minecraft/src/BlockRedstoneOre.java
+++ net/minecraft/src/BlockRedstoneOre.java
@@ -101,4 +101,8 @@
 		}
 
 	}
+
+	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
+		return Block.stone.colorMultiplier(var1, var2, var3, var4);
+	}
 }
--- net/minecraft/src/EntityAnimal.java
+++ net/minecraft/src/EntityAnimal.java
@@ -6,7 +6,7 @@
 	}
 
 	public boolean attackEntityFrom(DamageSource var1, int var2) {
-		this.field_35174_at = 60;
+		if (Personalization.animalPanic) this.field_35174_at = 60;
 		return super.attackEntityFrom(var1, var2);
 	}
 
@@ -34,7 +34,7 @@
 	}
 
 	protected boolean canDespawn() {
-		return false;
+		return Personalization.fixedAnimalSpawning;
 	}
 
 	protected int a(EntityPlayer var1) {
--- /dev/null
+++ net/minecraft/src/EntityDragon.java
@@ -1,0 +1,533 @@
+package net.minecraft.src;
+
+import java.util.Iterator;
+import java.util.List;
+
+public class EntityDragon extends EntityDragonBase {
+	public double nextPosX;
+	public double nextPosY;
+	public double nextPosZ;
+	public double[][] field_40162_d = new double[64][3];
+	public int field_40164_e = -1;
+	public DragonPart[] field_40176_ao = new DragonPart[]{this.field_40177_ap = new DragonPart(this, "head", 6.0F, 6.0F), this.field_40171_aq = new DragonPart(this, "body", 8.0F, 8.0F), this.field_40170_ar = new DragonPart(this, "tail", 4.0F, 4.0F), this.field_40169_as = new DragonPart(this, "tail", 4.0F, 4.0F), this.field_40168_at = new DragonPart(this, "tail", 4.0F, 4.0F), this.field_40175_au = new DragonPart(this, "wing", 4.0F, 4.0F), this.field_40174_av = new DragonPart(this, "wing", 4.0F, 4.0F)};
+	public DragonPart field_40177_ap;
+	public DragonPart field_40171_aq;
+	public DragonPart field_40170_ar;
+	public DragonPart field_40169_as;
+	public DragonPart field_40168_at;
+	public DragonPart field_40175_au;
+	public DragonPart field_40174_av;
+	public float field_40173_aw = 0.0F;
+	public float field_40172_ax = 0.0F;
+	public boolean field_40163_ay = false;
+	public boolean field_40161_az = false;
+	private Entity targetPlayer;
+	public int deathTimer = 0;
+	private int cycles = 0;
+	private int cycleTimer = 300;
+	private int state = 1;
+
+	public EntityDragon(World var1) {
+		super(var1);
+		this.texture = "/mob/enderdragon/ender.png";
+		this.setSize(16.0F, 16.0F);
+		this.isImmuneToFire = true;
+		this.nextPosY = 100.0D;
+		this.ignoreFrustumCheck = true;
+	}
+
+	public int getMaxHealth() {
+		return 400;
+	}
+
+	protected void entityInit() {
+		super.entityInit();
+		this.dataWatcher.addObject(16, new Integer(this.field_40157_aB));
+	}
+
+	public double[] func_40160_a(int var1, float var2) {
+		if(this.health <= 0) {
+			var2 = 0.0F;
+		}
+
+		var2 = 1.0F - var2;
+		int var3 = this.field_40164_e - var1 * 1 & 63;
+		int var4 = this.field_40164_e - var1 * 1 - 1 & 63;
+		double[] var5 = new double[3];
+		double var6 = this.field_40162_d[var3][0];
+
+		double var8;
+		for(var8 = this.field_40162_d[var4][0] - var6; var8 < -180.0D; var8 += 360.0D) {
+		}
+
+		while(var8 >= 180.0D) {
+			var8 -= 360.0D;
+		}
+
+		var5[0] = var6 + var8 * (double)var2;
+		var6 = this.field_40162_d[var3][1];
+		var8 = this.field_40162_d[var4][1] - var6;
+		var5[1] = var6 + var8 * (double)var2;
+		var5[2] = this.field_40162_d[var3][2] + (this.field_40162_d[var4][2] - this.field_40162_d[var3][2]) * (double)var2;
+		return var5;
+	}
+
+	public void onLivingUpdate() {
+		for (EntityPlayer player : (List<EntityPlayer>)this.worldObj.playerEntities) {
+			player.boss = this;
+		}
+
+		if (this.ticksExisted == 20) {
+			this.worldObj.playSoundEffect(this.posX, this.posY, this.posZ, "mob.enderdragon.growl", this.getSoundVolume(), 1.0F);
+		}
+
+		this.field_40173_aw = this.field_40172_ax;
+		if(!this.worldObj.multiplayerWorld) {
+			this.dataWatcher.updateObject(16, Integer.valueOf(this.health));
+		}
+
+		float var1;
+		float var3;
+		float var26;
+		if(this.health <= 0) {
+			var1 = (this.rand.nextFloat() - 0.5F) * 8.0F;
+			var26 = (this.rand.nextFloat() - 0.5F) * 4.0F;
+			var3 = (this.rand.nextFloat() - 0.5F) * 8.0F;
+			this.worldObj.spawnParticle("largeexplode", this.posX + (double)var1, this.posY + 2.0D + (double)var26, this.posZ + (double)var3, 0.0D, 0.0D, 0.0D);
+		} else {
+			var1 = 0.2F / (MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ) * 10.0F + 1.0F);
+			var1 *= (float)Math.pow(2.0D, this.motionY);
+			if(this.field_40161_az) {
+				this.field_40172_ax += var1 * 0.5F;
+			} else {
+				this.field_40172_ax += var1;
+			}
+
+			while(this.rotationYaw >= 180.0F) {
+				this.rotationYaw -= 360.0F;
+			}
+
+			while(this.rotationYaw < -180.0F) {
+				this.rotationYaw += 360.0F;
+			}
+
+			if(this.field_40164_e < 0) {
+				for(int var2 = 0; var2 < this.field_40162_d.length; ++var2) {
+					this.field_40162_d[var2][0] = (double)this.rotationYaw;
+					this.field_40162_d[var2][1] = this.posY;
+				}
+			}
+
+			if(++this.field_40164_e == this.field_40162_d.length) {
+				this.field_40164_e = 0;
+			}
+
+			this.field_40162_d[this.field_40164_e][0] = (double)this.rotationYaw;
+			this.field_40162_d[this.field_40164_e][1] = this.posY;
+			double var4;
+			double var6;
+			double var8;
+			double var25;
+			float var31;
+			if(this.worldObj.multiplayerWorld) {
+				if(this.newPosRotationIncrements > 0) {
+					var25 = this.posX + (this.newPosX - this.posX) / (double)this.newPosRotationIncrements;
+					var4 = this.posY + (this.newPosY - this.posY) / (double)this.newPosRotationIncrements;
+					var6 = this.posZ + (this.newPosZ - this.posZ) / (double)this.newPosRotationIncrements;
+
+					for(var8 = this.newRotationYaw - (double)this.rotationYaw; var8 < -180.0D; var8 += 360.0D) {
+					}
+
+					while(var8 >= 180.0D) {
+						var8 -= 360.0D;
+					}
+
+					this.rotationYaw = (float)((double)this.rotationYaw + var8 / (double)this.newPosRotationIncrements);
+					this.rotationPitch = (float)((double)this.rotationPitch + (this.newRotationPitch - (double)this.rotationPitch) / (double)this.newPosRotationIncrements);
+					--this.newPosRotationIncrements;
+					this.setPosition(var25, var4, var6);
+					this.setRotation(this.rotationYaw, this.rotationPitch);
+				}
+			} else {
+				this.targetPlayer = this.worldObj.getClosestPlayerToEntity(this, -1.0D);
+				if (this.targetPlayer != null) {
+					if (this.cycleTimer > 0) {
+						this.cycleTimer--;
+					}
+
+					if (this.state == 1) {
+						if (this.cycleTimer < 60) {
+							this.moveToTarget(0.0D, 70.0D, 0.0D, 0.02D);
+						} else {
+							this.moveToTarget(0.0D, 90.0D, 0.0D, 0.1D);
+						}
+						if (this.cycles <= 0) {
+							this.cycles = this.rand.nextInt(3) + 2 + (this.getMaxHealth() - this.health) * 4 / this.getMaxHealth();
+							this.cycleTimer = 160 + this.rand.nextInt(40);
+						}
+						if (this.cycleTimer == 0) {
+							this.state = 0;
+						}
+					} else if (this.cycleTimer == 0) {
+						if (this.cycles == 0) {
+							this.state = 1;
+						} else {
+							this.moveToTarget(this.targetPlayer.posX + this.getChargeOffset(), this.targetPlayer.posY - 2.5D + this.getChargeOffset(), this.targetPlayer.posZ + this.getChargeOffset(), 0.1D);
+							this.cycles--;
+							this.cycleTimer = this.health * 60 / this.getMaxHealth() + 40;
+							if (this.cycles == 0) {
+								this.cycleTimer += 30 + this.rand.nextInt(21);
+							}
+							this.worldObj.playSoundEffect(this.posX, this.posY, this.posZ, "mob.enderdragon.charge", this.getSoundVolume(), this.cycles == 0 ? 0.75F : 1.0F);
+						}
+					}
+
+					if (this.state == 1 && this.cycleTimer >= 60 && this.cycleTimer <= 150 & this.cycleTimer % (this.health * 10 / this.getMaxHealth() + 10) == 0) {
+						Vec3D look = this.getLook(1.0F);
+						double shootX = this.posX - look.xCoord * this.width / 2.0F;
+						double shootY = this.posY;
+						double shootZ = this.posZ - look.zCoord * this.width / 2.0F;
+						double accelFactor = 2.0D + (this.getMaxHealth() - this.health) * 2.0D / (double)this.getMaxHealth();
+
+						EntityFireball var17 = new EntityFireball(
+								this.worldObj, this,
+								this.targetPlayer.posX - shootX,
+								this.targetPlayer.posY - shootY,
+								this.targetPlayer.posZ - shootZ
+						);
+						var17.posX = shootX;
+						var17.posY = shootY;
+						var17.posZ = shootZ;
+						var17.accelerationX *= accelFactor;
+						var17.accelerationY *= accelFactor;
+						var17.accelerationZ *= accelFactor;
+						this.worldObj.entityJoinedWorld(var17);
+						this.worldObj.playSoundAtEntity(this, "mob.ghast.fireball", this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+					}
+				}
+
+				this.motionX *= 0.95D;
+				this.motionY *= 0.95D;
+				this.motionZ *= 0.95D;
+
+				if (this.targetPlayer != null) {
+					double diffX = this.targetPlayer.posX - this.posX;
+					double diffZ = this.targetPlayer.posZ - this.posZ;
+
+					double var11 = 180.0D - Math.atan2(diffX, diffZ) * 180.0D / (double)((float)Math.PI);
+					double var13;
+					for(var13 = var11 - (double)this.rotationYaw; var13 < -180.0D; var13 += 360.0D) {
+					}
+					while(var13 >= 180.0D) {
+						var13 -= 360.0D;
+					}
+					if(var13 > 50.0D) {
+						var13 = 50.0D;
+					} else if(var13 < -50.0D) {
+						var13 = -50.0D;
+					}
+
+					float var18 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ) + 1.0F;
+					double var19 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ) + 1.0D;
+					if(var19 > 40.0D) {
+						var19 = 40.0D;
+					}
+					this.randomYawVelocity *= 0.8F;
+					this.randomYawVelocity = (float)((double)this.randomYawVelocity + var13 * ((double)0.7F / var19 / (double)var18));
+					this.rotationYaw += this.randomYawVelocity * 0.1F;
+				}
+
+				this.moveEntity(this.motionX, this.motionY, this.motionZ);
+			}
+
+			this.renderYawOffset = this.rotationYaw;
+			this.field_40177_ap.width = this.field_40177_ap.height = 3.0F;
+			this.field_40170_ar.width = this.field_40170_ar.height = 2.0F;
+			this.field_40169_as.width = this.field_40169_as.height = 2.0F;
+			this.field_40168_at.width = this.field_40168_at.height = 2.0F;
+			this.field_40171_aq.height = 3.0F;
+			this.field_40171_aq.width = 5.0F;
+			this.field_40175_au.height = 2.0F;
+			this.field_40175_au.width = 4.0F;
+			this.field_40174_av.height = 3.0F;
+			this.field_40174_av.width = 4.0F;
+			var26 = (float)(this.func_40160_a(5, 1.0F)[1] - this.func_40160_a(10, 1.0F)[1]) * 10.0F / 180.0F * (float)Math.PI;
+			var3 = MathHelper.cos(var26);
+			float var27 = -MathHelper.sin(var26);
+			float var5 = this.rotationYaw * (float)Math.PI / 180.0F;
+			float var28 = MathHelper.sin(var5);
+			float var7 = MathHelper.cos(var5);
+			this.field_40171_aq.onUpdate();
+			this.field_40171_aq.setLocationAndAngles(this.posX + (double)(var28 * 0.5F), this.posY, this.posZ - (double)(var7 * 0.5F), 0.0F, 0.0F);
+			this.field_40175_au.onUpdate();
+			this.field_40175_au.setLocationAndAngles(this.posX + (double)(var7 * 4.5F), this.posY + 2.0D, this.posZ + (double)(var28 * 4.5F), 0.0F, 0.0F);
+			this.field_40174_av.onUpdate();
+			this.field_40174_av.setLocationAndAngles(this.posX - (double)(var7 * 4.5F), this.posY + 2.0D, this.posZ - (double)(var28 * 4.5F), 0.0F, 0.0F);
+			if(!this.worldObj.multiplayerWorld) {
+				this.func_41007_az();
+			}
+
+			if(!this.worldObj.multiplayerWorld) {
+				this.func_41008_a(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.field_40175_au.boundingBox.expand(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
+				this.func_41008_a(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.field_40174_av.boundingBox.expand(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
+				this.func_41009_b(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.field_40177_ap.boundingBox.expand(1.0D, 1.0D, 1.0D)));
+			}
+
+			double[] var29 = this.func_40160_a(5, 1.0F);
+			double[] var9 = this.func_40160_a(0, 1.0F);
+			var31 = MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F - this.randomYawVelocity * 0.01F);
+			float var33 = MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F - this.randomYawVelocity * 0.01F);
+			this.field_40177_ap.onUpdate();
+			this.field_40177_ap.setLocationAndAngles(this.posX + (double)(var31 * 5.5F * var3), this.posY + (var9[1] - var29[1]) * 1.0D + (double)(var27 * 5.5F), this.posZ - (double)(var33 * 5.5F * var3), 0.0F, 0.0F);
+
+			for(int var30 = 0; var30 < 3; ++var30) {
+				DragonPart var32 = null;
+				if(var30 == 0) {
+					var32 = this.field_40170_ar;
+				}
+
+				if(var30 == 1) {
+					var32 = this.field_40169_as;
+				}
+
+				if(var30 == 2) {
+					var32 = this.field_40168_at;
+				}
+
+				double[] var34 = this.func_40160_a(12 + var30 * 2, 1.0F);
+				float var35 = this.rotationYaw * (float)Math.PI / 180.0F + this.func_40159_b(var34[0] - var29[0]) * (float)Math.PI / 180.0F * 1.0F;
+				float var37 = MathHelper.sin(var35);
+				float var36 = MathHelper.cos(var35);
+				float var38 = 1.5F;
+				float var40 = (float)(var30 + 1) * 2.0F;
+				var32.onUpdate();
+				var32.setLocationAndAngles(this.posX - (double)((var28 * var38 + var37 * var40) * var3), this.posY + (var34[1] - var29[1]) * 1.0D - (double)((var40 + var38) * var27) + 1.5D, this.posZ + (double)((var7 * var38 + var36 * var40) * var3), 0.0F, 0.0F);
+			}
+
+			if(!this.worldObj.multiplayerWorld) {
+				this.field_40161_az = this.func_40158_a(this.field_40177_ap.boundingBox) | this.func_40158_a(this.field_40171_aq.boundingBox);
+			}
+
+		}
+	}
+
+	private double getChargeOffset() {
+		return (this.rand.nextDouble() - 0.5D) * (this.health * 10.0D / this.getMaxHealth());
+	}
+
+	private void moveToTarget(double targetPosX, double targetPosY, double targetPosZ, double speed) {
+		this.motionX = targetPosX - this.posX;
+		this.motionY = targetPosY - this.posY;
+		this.motionZ = targetPosZ - this.posZ;
+		this.motionX *= speed;
+		this.motionY *= speed;
+		this.motionZ *= speed;
+	}
+
+	private void func_41007_az() {
+		if(this.ticksExisted % 20 == 0) {
+			Vec3D var1 = this.getLook(1.0F);
+			double var2 = 0.0D;
+			double var4 = -1.0D;
+			double var6 = 0.0D;
+		}
+
+	}
+
+	private void func_41008_a(List var1) {
+		double var2 = (this.field_40171_aq.boundingBox.minX + this.field_40171_aq.boundingBox.maxX) / 2.0D;
+		double var4 = (this.field_40171_aq.boundingBox.minZ + this.field_40171_aq.boundingBox.maxZ) / 2.0D;
+		Iterator var6 = var1.iterator();
+
+		while(var6.hasNext()) {
+			Entity var7 = (Entity)var6.next();
+			if(var7 instanceof EntityLiving) {
+				double var8 = var7.posX - var2;
+				double var10 = var7.posZ - var4;
+				double var12 = var8 * var8 + var10 * var10;
+				var7.addVelocity(var8 / var12 * 1.0D, (double)0.2F, var10 / var12 * 1.0D);
+			}
+		}
+
+	}
+
+	private void func_41009_b(List var1) {
+		for(int var2 = 0; var2 < var1.size(); ++var2) {
+			Entity var3 = (Entity)var1.get(var2);
+			if(var3 instanceof EntityLiving) {
+				var3.attackEntityFrom(DamageSource.func_35525_a(this), 8);
+			}
+		}
+
+	}
+
+	private void func_41006_aA() {
+		this.field_40163_ay = false;
+		if(this.rand.nextInt(2) == 0 && this.worldObj.playerEntities.size() > 0) {
+			this.targetPlayer = (Entity)this.worldObj.playerEntities.get(this.rand.nextInt(this.worldObj.playerEntities.size()));
+		} else {
+			boolean var1 = false;
+
+			do {
+				this.nextPosX = 0.0D;
+				this.nextPosY = (double)(70.0F + this.rand.nextFloat() * 50.0F);
+				this.nextPosZ = 0.0D;
+				this.nextPosX += (double)(this.rand.nextFloat() * 120.0F - 60.0F);
+				this.nextPosZ += (double)(this.rand.nextFloat() * 120.0F - 60.0F);
+				double var2 = this.posX - this.nextPosX;
+				double var4 = this.posY - this.nextPosY;
+				double var6 = this.posZ - this.nextPosZ;
+				var1 = var2 * var2 + var4 * var4 + var6 * var6 > 100.0D;
+			} while(!var1);
+
+			this.targetPlayer = null;
+		}
+
+	}
+
+	private float func_40159_b(double var1) {
+		while(var1 >= 180.0D) {
+			var1 -= 360.0D;
+		}
+
+		while(var1 < -180.0D) {
+			var1 += 360.0D;
+		}
+
+		return (float)var1;
+	}
+
+	private boolean func_40158_a(AxisAlignedBB var1) {
+		int var2 = MathHelper.floor_double(var1.minX);
+		int var3 = MathHelper.floor_double(var1.minY);
+		int var4 = MathHelper.floor_double(var1.minZ);
+		int var5 = MathHelper.floor_double(var1.maxX);
+		int var6 = MathHelper.floor_double(var1.maxY);
+		int var7 = MathHelper.floor_double(var1.maxZ);
+		boolean var8 = false;
+		boolean var9 = false;
+
+		for(int var10 = var2; var10 <= var5; ++var10) {
+			for(int var11 = var3; var11 <= var6; ++var11) {
+				for(int var12 = var4; var12 <= var7; ++var12) {
+					int var13 = this.worldObj.getBlockId(var10, var11, var12);
+					if(var13 != 0) {
+						if(var13 != Block.obsidian.blockID && var13 != Block.endStone.blockID && var13 != Block.bedrock.blockID) {
+							var9 = true;
+							this.worldObj.setBlockWithNotify(var10, var11, var12, 0);
+						} else {
+							var8 = true;
+						}
+					}
+				}
+			}
+		}
+
+		if(var9) {
+			double var16 = var1.minX + (var1.maxX - var1.minX) * (double)this.rand.nextFloat();
+			double var17 = var1.minY + (var1.maxY - var1.minY) * (double)this.rand.nextFloat();
+			double var14 = var1.minZ + (var1.maxZ - var1.minZ) * (double)this.rand.nextFloat();
+			this.worldObj.spawnParticle("largeexplode", var16, var17, var14, 0.0D, 0.0D, 0.0D);
+		}
+
+		return var8;
+	}
+
+	public boolean func_40156_a(DragonPart var1, DamageSource var2, int var3) {
+		if (this.state == 1) {
+			this.worldObj.playSoundAtEntity(this, "random.remixquick", 1.0F, 1.0F);
+			return false;
+		}
+
+		double damageFactor = -0.25D;
+		this.motionX *= damageFactor;
+		this.motionY *= damageFactor;
+		this.motionZ *= damageFactor;
+		this.targetPlayer = null;
+		if(var2.func_35526_e() instanceof EntityPlayer || var2 == DamageSource.field_35548_k) {
+			this.func_40155_e(var2, var3);
+		}
+
+		return true;
+	}
+
+	protected void func_40120_m_() {
+		++this.deathTimer;
+		if(this.deathTimer >= 180 && this.deathTimer <= 200) {
+			float var1 = (this.rand.nextFloat() - 0.5F) * 8.0F;
+			float var2 = (this.rand.nextFloat() - 0.5F) * 4.0F;
+			float var3 = (this.rand.nextFloat() - 0.5F) * 8.0F;
+			this.worldObj.spawnParticle("hugeexplosion", this.posX + (double)var1, this.posY + 2.0D + (double)var2, this.posZ + (double)var3, 0.0D, 0.0D, 0.0D);
+		}
+
+		this.moveEntity(0.0D, (double)0.1F, 0.0D);
+		this.renderYawOffset = this.rotationYaw += 20.0F;
+		if(this.deathTimer == 200) {
+			this.onEntityDeath();
+			this.setEntityDead();
+
+			EntityJeb jeb = new EntityJeb(this.worldObj);
+			jeb.setPosition(this.posX, this.posY, this.posZ);
+			jeb.motionY = 2.5D;
+			this.worldObj.entityJoinedWorld(jeb);
+			this.worldObj.playSoundAtEntity(this, "ambient.weather.thunder", 100.0F, 1.0F);
+		}
+
+	}
+
+	protected String getLivingSound() {
+		return "mob.enderdragon.growl";
+	}
+
+	protected String getHurtSound() {
+		return "mob.enderdragon.hit";
+	}
+
+	protected float getSoundVolume() {
+		return 100.0F;
+	}
+
+	public float getFlash(float var1) {
+		float amount = 1.0F - (this.cycleTimer - var1) / 20.0F;
+		amount = MathHelper.clamp(amount, 0.0F, 1.0F);
+		amount *= amount;
+		return amount;
+	}
+
+	private void func_41012_a(int var1, int var2) {
+	}
+
+	protected void despawnEntity() {
+	}
+
+	public Entity[] func_40048_X() {
+		return this.field_40176_ao;
+	}
+
+	public boolean canBeCollidedWith() {
+		return true;
+	}
+
+	public int func_41010_ax() {
+		return this.dataWatcher.getWatchableObjectInt(16);
+	}
+
+	public void knockBack(Entity var1, int var2, double var3, double var5) {
+	}
+
+	public void readEntityFromNBT(NBTTagCompound var1) {
+		super.readEntityFromNBT(var1);
+		this.cycles = var1.getInteger("Cycles");
+		this.cycleTimer = var1.getInteger("CycleTimer");
+	}
+
+	public void writeEntityToNBT(NBTTagCompound var1) {
+		super.writeEntityToNBT(var1);
+		var1.setInteger("Cycles", this.cycles);
+		var1.setInteger("CycleTimer", this.cycleTimer);
+	}
+
+	public boolean isInRangeToRenderDist(double var1) {
+		return true;
+	}
+}
--- net/minecraft/src/GuiIngame.java
+++ net/minecraft/src/GuiIngame.java
@@ -26,6 +26,7 @@
 	}
 
 	public void renderGameOverlay(float var1, boolean var2, int var3, int var4) {
+		if (this.mc.thePlayer.dimension == 2 && !(this.mc.currentScreen instanceof GuiRemix)) return;
 		ScaledResolution var5 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
 		int var6 = var5.getScaledWidth();
 		int var7 = var5.getScaledHeight();
@@ -81,13 +82,15 @@
 			FoodStats var15 = this.mc.thePlayer.func_35191_at();
 			var16 = var15.func_35765_a();
 			var17 = var15.func_35769_b();
+			int thirst = var15.getThirst();
 			int var19;
+			func_41039_c();
 			if(this.mc.playerController.shouldDrawHUD()) {
 				var18 = var6 / 2 - 91;
 				var19 = var6 / 2 + 91;
 				var20 = this.mc.thePlayer.func_35193_as();
 				int var23;
-				if(var20 > 0) {
+				if(Personalization.experience && var20 > 0) {
 					short var21 = 182;
 					var22 = this.mc.thePlayer.field_35211_aX * (var21 + 1) / this.mc.thePlayer.func_35193_as();
 					var23 = var7 - 32 + 3;
@@ -98,6 +101,7 @@
 				}
 
 				var47 = var7 - 39;
+				if (!Personalization.experience) var47 += 7;
 				var22 = var47 - 10;
 				var23 = this.mc.thePlayer.getPlayerArmorValue();
 				int var24 = -1;
@@ -105,22 +109,29 @@
 					var24 = this.updateCounter % 25;
 				}
 
+				int hpIcon = Personalization.hardcoreState == 1 ? 45
+						: Personalization.hardcoreState == 2 ? 54
+						: 0;
+
 				int var25;
 				int var26;
 				int var29;
 				for(var25 = 0; var25 < 10; ++var25) {
 					if(var23 > 0) {
-						var26 = var18 + var25 * 8;
+						int var22a = var22 - (this.mc.thePlayer.getMaxHealth() - 1) / 20 * 4;
+						if (!Personalization.hunger) var22a += 10;
+
+						var26 = Personalization.hunger ? var18 + var25 * 8 : var19 - var25 * 8 - 9;
 						if(var25 * 2 + 1 < var23) {
-							this.drawTexturedModalRect(var26, var22, 34, 9, 9, 9);
+							this.drawTexturedModalRect(var26, var22a, 34, 9, 9, 9);
 						}
 
 						if(var25 * 2 + 1 == var23) {
-							this.drawTexturedModalRect(var26, var22, 25, 9, 9, 9);
+							this.drawTexturedModalRect(var26, var22a, Personalization.hunger ? 25 : 43, 9, 9, 9);
 						}
 
 						if(var25 * 2 + 1 > var23) {
-							this.drawTexturedModalRect(var26, var22, 16, 9, 9, 9);
+							this.drawTexturedModalRect(var26, var22a, 16, 9, 9, 9);
 						}
 					}
 
@@ -144,74 +155,118 @@
 						var29 -= 2;
 					}
 
-					this.drawTexturedModalRect(var28, var29, 16 + var27 * 9, 0, 9, 9);
-					if(var11) {
-						if(var25 * 2 + 1 < var13) {
-							this.drawTexturedModalRect(var28, var29, var26 + 54, 0, 9, 9);
-						}
-
-						if(var25 * 2 + 1 == var13) {
-							this.drawTexturedModalRect(var28, var29, var26 + 63, 0, 9, 9);
-						}
-					}
-
-					if(var25 * 2 + 1 < var12) {
-						this.drawTexturedModalRect(var28, var29, var26 + 36, 0, 9, 9);
-					}
-
-					if(var25 * 2 + 1 == var12) {
-						this.drawTexturedModalRect(var28, var29, var26 + 45, 0, 9, 9);
+					int var25a = var25;
+					var29 -= (this.mc.thePlayer.getMaxHealth() - 1) / 20 * 4;
+					while(var25a < this.mc.thePlayer.getMaxHealth() / 2) {
+						this.drawTexturedModalRect(var28, var29, 16 + var27 * 9, hpIcon, 9, 9);
+
+						if(var11) {
+							if(var25a * 2 + 1 < var13) {
+								this.drawTexturedModalRect(var28, var29, var26 + 54, hpIcon, 9, 9);
+							}
+
+							if(var25a * 2 + 1 == var13) {
+								this.drawTexturedModalRect(var28, var29, var26 + 63, hpIcon, 9, 9);
+							}
+						}
+
+						if(var25a * 2 + 1 < var12) {
+							this.drawTexturedModalRect(var28, var29, var26 + 36, hpIcon, 9, 9);
+						}
+
+						if(var25a * 2 + 1 == var12) {
+							this.drawTexturedModalRect(var28, var29, var26 + 45, hpIcon, 9, 9);
+						}
+
+						var25a += 10;
+						var29 += 4;
 					}
 				}
 
 				int var53;
-				for(var25 = 0; var25 < 10; ++var25) {
-					var26 = var47;
-					var53 = 16;
-					byte var54 = 0;
-					if(this.mc.thePlayer.func_35160_a(Potion.field_35691_s)) {
-						var53 += 36;
-						var54 = 13;
-					}
-
-					if(this.mc.thePlayer.func_35191_at().func_35760_d() <= 0.0F && this.updateCounter % (var16 * 3 + 1) == 0) {
-						var26 = var47 + (this.rand.nextInt(3) - 1);
-					}
-
-					if(var14) {
-						var54 = 1;
-					}
-
-					var29 = var19 - var25 * 8 - 9;
-					this.drawTexturedModalRect(var29, var26, 16 + var54 * 9, 27, 9, 9);
-					if(var14) {
-						if(var25 * 2 + 1 < var17) {
-							this.drawTexturedModalRect(var29, var26, var53 + 54, 27, 9, 9);
-						}
-
-						if(var25 * 2 + 1 == var17) {
-							this.drawTexturedModalRect(var29, var26, var53 + 63, 27, 9, 9);
-						}
-					}
-
-					if(var25 * 2 + 1 < var16) {
-						this.drawTexturedModalRect(var29, var26, var53 + 36, 27, 9, 9);
-					}
-
-					if(var25 * 2 + 1 == var16) {
-						this.drawTexturedModalRect(var29, var26, var53 + 45, 27, 9, 9);
+				if (Personalization.hunger) {
+					for(var25 = 0; var25 < 10; ++var25) {
+						var26 = var47;
+						var53 = 16;
+						byte var54 = 0;
+						if(this.mc.thePlayer.func_35160_a(Potion.field_35691_s)) {
+							var53 += 36;
+							var54 = 13;
+						}
+
+						if(this.mc.thePlayer.func_35191_at().func_35760_d() <= 0.0F && this.updateCounter % (var16 * 3 + 1) == 0) {
+							var26 = var47 + (this.rand.nextInt(3) - 1);
+						}
+
+						if(var14) {
+							var54 = 1;
+						}
+
+						var29 = var19 - var25 * 8 - 9;
+						this.drawTexturedModalRect(var29, var26, 16 + var54 * 9, 27, 9, 9);
+						if(var14) {
+							if(var25 * 2 + 1 < var17) {
+								this.drawTexturedModalRect(var29, var26, var53 + 54, 27, 9, 9);
+							}
+
+							if(var25 * 2 + 1 == var17) {
+								this.drawTexturedModalRect(var29, var26, var53 + 63, 27, 9, 9);
+							}
+						}
+
+						if(var25 * 2 + 1 < var16) {
+							this.drawTexturedModalRect(var29, var26, var53 + 36, 27, 9, 9);
+						}
+
+						if(var25 * 2 + 1 == var16) {
+							this.drawTexturedModalRect(var29, var26, var53 + 45, 27, 9, 9);
+						}
+					}
+				}
+
+				if (Personalization.thirst) {
+					for (var25 = 0; var25 < 10; ++var25) {
+						var26 = var47 - 10;
+
+						if (!Personalization.hunger && var23 <= 0) {
+							var26 += 10;
+						}
+
+						var53 = 52;
+						int var54 = 16;
+						if(this.mc.thePlayer.func_35160_a(Potion.thirst)) {
+							var53 += 36;
+							var54 = 133;
+						}
+
+						var29 = var19 - var25 * 8 - 9;
+						this.drawTexturedModalRect(var29, var26, var54, 36, 9, 9);
+
+						if(var25 * 2 + 1 < thirst) {
+							this.drawTexturedModalRect(var29, var26, var53, 36, 9, 9);
+						}
+
+						if(var25 * 2 + 1 == thirst) {
+							this.drawTexturedModalRect(var29, var26, var53 + 9, 36, 9, 9);
+						}
 					}
 				}
 
 				if(this.mc.thePlayer.isInsideOfMaterial(Material.water)) {
+					var22 -= (this.mc.thePlayer.getMaxHealth() - 1) / 20 * 4;
 					var25 = (int)Math.ceil((double)(this.mc.thePlayer.air - 2) * 10.0D / 300.0D);
 					var26 = (int)Math.ceil((double)this.mc.thePlayer.air * 10.0D / 300.0D) - var25;
 
+					if (Personalization.thirst && Personalization.hunger) {
+						var22 -= 10;
+					}
+
 					for(var53 = 0; var53 < var25 + var26; ++var53) {
+						int pos = Personalization.hunger ? var19 - var53 * 8 - 9 : var18 + var53 * 8;
 						if(var53 < var25) {
-							this.drawTexturedModalRect(var19 - var53 * 8 - 9, var22, 16, 18, 9, 9);
+							this.drawTexturedModalRect(pos, var22, 16, 18, 9, 9);
 						} else {
-							this.drawTexturedModalRect(var19 - var53 * 8 - 9, var22, 25, 18, 9, 9);
+							this.drawTexturedModalRect(pos, var22, 25, 18, 9, 9);
 						}
 					}
 				}
@@ -220,7 +275,12 @@
 			GL11.glDisable(GL11.GL_BLEND);
 			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 			GL11.glPushMatrix();
-			GL11.glRotatef(120.0F, 1.0F, 0.0F, 0.0F);
+			if (Personalization.fixedItemShading) {
+				GL11.glRotatef(-30.0F, 0.0F, 1.0F, 0.0F);
+				GL11.glRotatef(165.0F, 1.0F, 0.0F, 0.0F);
+			} else {
+				GL11.glRotatef(120.0F, 1.0F, 0.0F, 0.0F);
+			}
 			RenderHelper.enableStandardItemLighting();
 			GL11.glPopMatrix();
 
@@ -249,17 +309,35 @@
 			GL11.glEnable(GL11.GL_DEPTH_TEST);
 		}
 
-		if(this.mc.playerController.func_35642_f() && this.mc.thePlayer.field_35210_aY > 0) {
+		if(Personalization.experience && (Personalization.xpLevel || Personalization.skillPoints)
+				&& this.mc.playerController.func_35642_f() && this.mc.thePlayer.getSkillPoints() > 0) {
+			boolean skillHop = Personalization.skillPoints && this.mc.thePlayer.ticksExisted % 25 >= 20;
+			var12 = skillHop ? 16777215 : 8453920;
+			String var34 = Personalization.skillPoints
+					? "Skill points: " + this.mc.thePlayer.getSkillPoints()
+					: String.valueOf(this.mc.thePlayer.field_35210_aY);
+			int var39 = (var6 - var8.getStringWidth(var34)) / 2;
+			int var40 = var7 - 31 - 4;
+			if (Personalization.skillPoints) var40 += 4;
+			if (skillHop) var40 -= 1;
+			var8.drawString(var34, var39 + 1, var40, 0);
+			var8.drawString(var34, var39 - 1, var40, 0);
+			var8.drawString(var34, var39, var40 + 1, 0);
+			var8.drawString(var34, var39, var40 - 1, 0);
+			var8.drawString(var34, var39, var40, var12);
 		}
 
 		String var45;
 		if(this.mc.gameSettings.showDebugInfo) {
+			int px = MathHelper.floor_double(this.mc.thePlayer.posX);
+			int pz = MathHelper.floor_double(this.mc.thePlayer.posZ);
+
 			GL11.glPushMatrix();
 			if(Minecraft.hasPaidCheckTime > 0L) {
 				GL11.glTranslatef(0.0F, 32.0F, 0.0F);
 			}
 
-			var8.drawStringWithShadow("Minecraft Beta 1.8.1 (" + this.mc.debug + ")", 2, 2, 16777215);
+			var8.drawStringWithShadow(Personalization.version + " (" + this.mc.debug + ")", 2, 2, 16777215);
 			var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 12, 16777215);
 			var8.drawStringWithShadow(this.mc.func_6262_n(), 2, 22, 16777215);
 			var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 32, 16777215);
@@ -277,9 +355,24 @@
 			this.drawString(var8, "z: " + this.mc.thePlayer.posZ, 2, 80, 14737632);
 			this.drawString(var8, "f: " + (MathHelper.floor_double((double)(this.mc.thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3), 2, 88, 14737632);
 			this.drawString(var8, "Seed: " + this.mc.theWorld.getRandomSeed(), 2, 104, 14737632);
+			this.drawString(var8, "Biome: " + this.mc.theWorld.getWorldChunkManager().getBiomeGenAt(px, pz).biomeName, 2, 112, 14737632);
+			if (Personalization.DEBUG_MODE) {
+				this.drawString(var8, "Betaness: " + Personalization.betaness, 2, 120, 14737632);
+				this.drawString(var8, "Weirdness: " + Personalization.weirdness, 2, 128, 14737632);
+				this.drawString(var8, "Chaos: " + Personalization.chaos, 2, 136, 14737632);
+				this.drawString(var8, "Entropy: " + Personalization.entropy, 2, 144, 14737632);
+				this.drawString(var8, "Sections: " + this.mc.theWorld.getChunkFromBlockCoords(px, pz).getBlockStorageArray().length, 2, 152, 14737632);
+			}
 			GL11.glPopMatrix();
 		} else {
-			var8.drawStringWithShadow("Minecraft Beta 1.8.1", 2, 2, 16777215);
+			if (Personalization.version.startsWith("Minecraft v0.")) {
+				GL11.glEnable(GL11.GL_BLEND);
+				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+				this.drawCenteredString(var8, Personalization.version.substring(10), var6 / 2, 2, 0xFFFFFF | (int)(0.6F * 255.0F) << 24);
+				GL11.glDisable(GL11.GL_BLEND);
+			} else {
+				var8.drawStringWithShadow(Personalization.version, 2, 2, 16777215);
+			}
 		}
 
 		if(this.recordPlayingUpFor > 0) {
@@ -470,7 +563,17 @@
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
 		GL11.glDepthMask(false);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-		GL11.glColor4f(1.0F, 1.0F, 1.0F, var1);
+		if (this.mc.thePlayer.inChargedPortal) {
+			GL11.glColor4f(1.0F, 1.0F, 0.0F, var1);
+		} else if (this.mc.thePlayer.inSkyPortal) {
+			if (Personalization.endSky) {
+				GL11.glColor4f(0.0F, 0.0F, 0.0F, var1);
+			} else {
+				GL11.glColor4f(0.0F, 0.0F, 1.0F, var1);
+			}
+		} else {
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, var1);
+		}
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
 		float var4 = (float)(Block.portal.blockIndexInTexture % 16) / 16.0F;
 		float var5 = (float)(Block.portal.blockIndexInTexture / 16) / 16.0F;
@@ -555,5 +658,28 @@
 		StringTranslate var2 = StringTranslate.getInstance();
 		String var3 = var2.translateKey(var1);
 		this.addChatMessage(var3);
+	}
+
+	private void func_41039_c() {
+		if(this.mc.thePlayer.boss != null) {
+			EntityLiving var1 = this.mc.thePlayer.boss;
+			FontRenderer var2 = this.mc.fontRenderer;
+			ScaledResolution var3 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
+			int var4 = var3.getScaledWidth();
+			short var5 = 182;
+			int var6 = var4 / 2 - var5 / 2;
+			int var7 = (int)((float)var1.health / (float)var1.getMaxHealth() * (float)(var5 + 1));
+			byte var8 = 12;
+			this.drawTexturedModalRect(var6, var8, 0, 74, var5, 5);
+			this.drawTexturedModalRect(var6, var8, 0, 74, var5, 5);
+			if(var7 > 0) {
+				this.drawTexturedModalRect(var6, var8, 0, 79, var7, 5);
+			}
+
+			String var9 = "Boss health";
+			var2.drawStringWithShadow(var9, var4 / 2 - var2.getStringWidth(var9) / 2, var8 - 10, 16711935);
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/icons.png"));
+		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/AnvilConverterData.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+public class AnvilConverterData {
+	public long lastUpdated;
+	public boolean terrainPopulated;
+	public byte[] heightmap;
+	public NibbleArrayReader blockLight;
+	public NibbleArrayReader skyLight;
+	public NibbleArrayReader data;
+	public byte[] blocks;
+	public NBTTagList entities;
+	public NBTTagList tileEntities;
+	public NBTTagList tileTicks;
+	public final int x;
+	public final int z;
+
+	public AnvilConverterData(int var1, int var2) {
+		this.x = var1;
+		this.z = var2;
+	}
+}
--- /dev/null
+++ net/minecraft/src/DragonPart.java
@@ -1,0 +1,34 @@
+package net.minecraft.src;
+
+public class DragonPart extends Entity {
+	public final EntityDragonBase field_40073_a;
+	public final String field_40072_b;
+
+	public DragonPart(EntityDragonBase var1, String var2, float var3, float var4) {
+		super(var1.worldObj);
+		this.setSize(var3, var4);
+		this.field_40073_a = var1;
+		this.field_40072_b = var2;
+	}
+
+	protected void entityInit() {
+	}
+
+	protected void readEntityFromNBT(NBTTagCompound var1) {
+	}
+
+	protected void writeEntityToNBT(NBTTagCompound var1) {
+	}
+
+	public boolean canBeCollidedWith() {
+		return true;
+	}
+
+	public boolean attackEntityFrom(DamageSource var1, int var2) {
+		return this.field_40073_a.func_40156_a(this, var1, var2);
+	}
+
+	public boolean func_41004_h(Entity var1) {
+		return this == var1 || this.field_40073_a == var1;
+	}
+}
--- net/minecraft/src/BlockJukeBox.java
+++ net/minecraft/src/BlockJukeBox.java
@@ -34,6 +34,12 @@
 			TileEntityRecordPlayer var5 = (TileEntityRecordPlayer)var1.getBlockTileEntity(var2, var3, var4);
 			if(var5 != null) {
 				int var6 = var5.record;
+				int var7 = 0;
+				if (var6 < 0) {
+					var6 = Item.recordFile.shiftedIndex;
+					var7 = -var5.record;
+				}
+
 				if(var6 != 0) {
 					var1.playAuxSFX(1005, var2, var3, var4, 0);
 					var1.playRecord((String)null, var2, var3, var4);
@@ -44,7 +50,7 @@
 					double var9 = (double)(var1.rand.nextFloat() * var8) + (double)(1.0F - var8) * 0.5D;
 					double var11 = (double)(var1.rand.nextFloat() * var8) + (double)(1.0F - var8) * 0.2D + 0.6D;
 					double var13 = (double)(var1.rand.nextFloat() * var8) + (double)(1.0F - var8) * 0.5D;
-					EntityItem var15 = new EntityItem(var1, (double)var2 + var9, (double)var3 + var11, (double)var4 + var13, new ItemStack(var6, 1, 0));
+					EntityItem var15 = new EntityItem(var1, (double)var2 + var9, (double)var3 + var11, (double)var4 + var13, new ItemStack(var6, 1, var7));
 					var15.delayBeforeCanPickup = 10;
 					var1.entityJoinedWorld(var15);
 				}
--- net/minecraft/src/WorldGenSwamp.java
+++ net/minecraft/src/WorldGenSwamp.java
@@ -4,8 +4,8 @@
 
 public class WorldGenSwamp extends WorldGenerator {
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6;
-		for(var6 = var2.nextInt(4) + 5; var1.getBlockMaterial(var3, var4 - 1, var5) == Material.water; --var4) {
+		int var6 = Math.max(var2.nextInt(4 - Math.round(Personalization.entropy * 3)) + 5 - Math.round(Personalization.entropy * 3), 4);
+		for(; var1.getBlockMaterial(var3, var4 - 1, var5) == Material.water; --var4) {
 		}
 
 		boolean var7 = true;
@@ -30,23 +30,20 @@
 					for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
 						for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
 							if(var8 >= 0) {
-								var1.getClass();
-								if(var8 < 128) {
-									var12 = var1.getBlockId(var10, var8, var11);
-									if(var12 == 0 || var12 == Block.leaves.blockID) {
-										continue;
-									}
-
-									if(var12 != Block.waterStill.blockID && var12 != Block.waterMoving.blockID) {
-										var7 = false;
-										continue;
-									}
-
-									if(var8 > var4) {
-										var7 = false;
-									}
-									continue;
-								}
+								var12 = var1.getBlockId(var10, var8, var11);
+								if(var12 == 0 || var12 == Block.leaves.blockID) {
+									continue;
+								}
+
+								if(var12 != Block.waterStill.blockID && var12 != Block.waterMoving.blockID) {
+									var7 = false;
+									continue;
+								}
+
+								if(var8 > var4) {
+									var7 = false;
+								}
+								continue;
 							}
 
 							var7 = false;
@@ -60,64 +57,61 @@
 
 				var8 = var1.getBlockId(var3, var4 - 1, var5);
 				if(var8 == Block.grass.blockID || var8 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
-						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
-
-						int var13;
-						int var16;
-						for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
-							var10 = var16 - (var4 + var6);
-							var11 = 2 - var10 / 2;
-
-							for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-								var13 = var12 - var3;
-
-								for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
-									int var15 = var14 - var5;
-									if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
-										var1.setBlock(var12, var16, var14, Block.leaves.blockID);
-									}
-								}
-							}
-						}
-
-						for(var16 = 0; var16 < var6; ++var16) {
-							var10 = var1.getBlockId(var3, var4 + var16, var5);
-							if(var10 == 0 || var10 == Block.leaves.blockID || var10 == Block.waterMoving.blockID || var10 == Block.waterStill.blockID) {
-								var1.setBlock(var3, var4 + var16, var5, Block.wood.blockID);
-							}
-						}
-
-						for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
-							var10 = var16 - (var4 + var6);
-							var11 = 2 - var10 / 2;
-
-							for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-								for(var13 = var5 - var11; var13 <= var5 + var11; ++var13) {
-									if(var1.getBlockId(var12, var16, var13) == Block.leaves.blockID) {
-										if(var2.nextInt(4) == 0 && var1.getBlockId(var12 - 1, var16, var13) == 0) {
-											this.func_35265_a(var1, var12 - 1, var16, var13, 8);
-										}
-
-										if(var2.nextInt(4) == 0 && var1.getBlockId(var12 + 1, var16, var13) == 0) {
-											this.func_35265_a(var1, var12 + 1, var16, var13, 2);
-										}
-
-										if(var2.nextInt(4) == 0 && var1.getBlockId(var12, var16, var13 - 1) == 0) {
-											this.func_35265_a(var1, var12, var16, var13 - 1, 1);
-										}
-
-										if(var2.nextInt(4) == 0 && var1.getBlockId(var12, var16, var13 + 1) == 0) {
-											this.func_35265_a(var1, var12, var16, var13 + 1, 4);
-										}
-									}
-								}
-							}
-						}
-
-						return true;
-					}
+					this.setBlock(var1, var3, var4 - 1, var5, Block.dirt.blockID);
+
+					int var13;
+					int var16;
+					for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
+						var10 = var16 - (var4 + var6);
+						var11 = 2 - var10 / 2;
+
+						for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
+							var13 = var12 - var3;
+
+							for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
+								int var15 = var14 - var5;
+								if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
+									this.setBlock(var1, var12, var16, var14, Block.leaves.blockID);
+								}
+							}
+						}
+					}
+
+					for(var16 = 0; var16 < var6; ++var16) {
+						var10 = var1.getBlockId(var3, var4 + var16, var5);
+						if(var10 == 0 || var10 == Block.leaves.blockID || var10 == Block.waterMoving.blockID || var10 == Block.waterStill.blockID) {
+							this.setBlock(var1, var3, var4 + var16, var5, Block.wood.blockID);
+						}
+					}
+
+					for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
+						var10 = var16 - (var4 + var6);
+						var11 = 2 - var10 / 2;
+
+						for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
+							for(var13 = var5 - var11; var13 <= var5 + var11; ++var13) {
+								if(var1.getBlockId(var12, var16, var13) == Block.leaves.blockID) {
+									if(var2.nextInt(4) == 0 && var1.getBlockId(var12 - 1, var16, var13) == 0) {
+										this.func_35265_a(var1, var12 - 1, var16, var13, 8);
+									}
+
+									if(var2.nextInt(4) == 0 && var1.getBlockId(var12 + 1, var16, var13) == 0) {
+										this.func_35265_a(var1, var12 + 1, var16, var13, 2);
+									}
+
+									if(var2.nextInt(4) == 0 && var1.getBlockId(var12, var16, var13 - 1) == 0) {
+										this.func_35265_a(var1, var12, var16, var13 - 1, 1);
+									}
+
+									if(var2.nextInt(4) == 0 && var1.getBlockId(var12, var16, var13 + 1) == 0) {
+										this.func_35265_a(var1, var12, var16, var13 + 1, 4);
+									}
+								}
+							}
+						}
+					}
+
+					return true;
 				}
 
 				return false;
--- net/minecraft/src/WorldGenCactus.java
+++ net/minecraft/src/WorldGenCactus.java
@@ -13,7 +13,7 @@
 
 				for(int var11 = 0; var11 < var10; ++var11) {
 					if(Block.cactus.canBlockStay(var1, var7, var8 + var11, var9)) {
-						var1.setBlock(var7, var8 + var11, var9, Block.cactus.blockID);
+						this.setBlock(var1, var7, var8 + var11, var9, Block.cactus.blockID);
 					}
 				}
 			}
--- net/minecraft/src/EntitySpider.java
+++ net/minecraft/src/EntitySpider.java
@@ -3,7 +3,7 @@
 public class EntitySpider extends EntityMob {
 	public EntitySpider(World var1) {
 		super(var1);
-		this.texture = "/mob/spider.png";
+		this.texture = Personalization.brownSpiders ? "/mob/spider-brown.png" : "/mob/spider.png";
 		this.setSize(1.4F, 0.9F);
 		this.moveSpeed = 0.8F;
 	}
@@ -18,7 +18,7 @@
 
 	protected Entity findPlayerToAttack() {
 		float var1 = this.getEntityBrightness(1.0F);
-		if(var1 < 0.5F) {
+		if(var1 < 0.5F || Personalization.brownSpiders) {
 			double var2 = 16.0D;
 			return this.worldObj.getClosestPlayerToEntity(this, var2);
 		} else {
--- net/minecraft/src/SaveOldDir.java
+++ /dev/null
@@ -1,26 +1,0 @@
-package net.minecraft.src;
-
-import java.io.File;
-import java.util.List;
-
-public class SaveOldDir extends SaveHandler {
-	public SaveOldDir(File var1, String var2, boolean var3) {
-		super(var1, var2, var3);
-	}
-
-	public IChunkLoader getChunkLoader(WorldProvider var1) {
-		File var2 = this.getSaveDirectory();
-		if(var1 instanceof WorldProviderHell) {
-			File var3 = new File(var2, "DIM-1");
-			var3.mkdirs();
-			return new McRegionChunkLoader(var3);
-		} else {
-			return new McRegionChunkLoader(var2);
-		}
-	}
-
-	public void saveWorldInfoAndPlayer(WorldInfo var1, List var2) {
-		var1.setSaveVersion(19132);
-		super.saveWorldInfoAndPlayer(var1, var2);
-	}
-}
--- net/minecraft/src/WorldGenerator.java
+++ net/minecraft/src/WorldGenerator.java
@@ -3,8 +3,26 @@
 import java.util.Random;
 
 public abstract class WorldGenerator {
+	public boolean inPlayerModified = false;
+
 	public abstract boolean generate(World var1, Random var2, int var3, int var4, int var5);
 
 	public void func_517_a(double var1, double var3, double var5) {
+	}
+
+	public void setBlock(World var1, int var2, int var3, int var4, int var5) {
+		if (this.inPlayerModified) {
+			var1.setBlock(var2, var3, var4, var5);
+		} else {
+			var1.setNewBlock(var2, var3, var4, var5);
+		}
+	}
+
+	public void setBlockAndMetadata(World var1, int var2, int var3, int var4, int var5, int var6) {
+		if (this.inPlayerModified) {
+			var1.setBlockAndMetadata(var2, var3, var4, var5, var6);
+		} else {
+			var1.setNewBlockAndMetadata(var2, var3, var4, var5, var6);
+		}
 	}
 }
--- net/minecraft/src/CraftingManager.java
+++ net/minecraft/src/CraftingManager.java
@@ -6,8 +6,8 @@
 import java.util.List;
 
 public class CraftingManager {
-	private static final CraftingManager instance = new CraftingManager();
-	private List recipes = new ArrayList();
+	private static CraftingManager instance = new CraftingManager();
+	private final List recipes = new ArrayList();
 
 	public static final CraftingManager getInstance() {
 		return instance;
@@ -21,68 +21,74 @@
 		(new RecipesCrafting()).addRecipes(this);
 		(new RecipesArmor()).addRecipes(this);
 		(new RecipesDyes()).addRecipes(this);
-		this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", Character.valueOf('#'), Item.reed});
-		this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", Character.valueOf('#'), Item.paper});
-		this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.field_35277_bw, 1), new Object[]{"#W#", "#W#", Character.valueOf('#'), Item.stick, Character.valueOf('W'), Block.planks});
-		this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond});
-		this.addRecipe(new ItemStack(Block.music, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.redstone});
-		this.addRecipe(new ItemStack(Block.bookShelf, 1), new Object[]{"###", "XXX", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.book});
-		this.addRecipe(new ItemStack(Block.blockSnow, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.snowball});
-		this.addRecipe(new ItemStack(Block.blockClay, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.clay});
-		this.addRecipe(new ItemStack(Block.brick, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.brick});
-		this.addRecipe(new ItemStack(Block.glowStone, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.lightStoneDust});
-		this.addRecipe(new ItemStack(Block.cloth, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.silk});
-		this.addRecipe(new ItemStack(Block.tnt, 1), new Object[]{"X#X", "#X#", "X#X", Character.valueOf('X'), Item.gunpowder, Character.valueOf('#'), Block.sand});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 3), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 0), new Object[]{"###", Character.valueOf('#'), Block.stone});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 1), new Object[]{"###", Character.valueOf('#'), Block.sandStone});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 2), new Object[]{"###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 4), new Object[]{"###", Character.valueOf('#'), Block.brick});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3, 5), new Object[]{"###", Character.valueOf('#'), Block.field_35285_bn});
-		this.addRecipe(new ItemStack(Block.ladder, 2), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.doorWood, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.trapdoor, 2), new Object[]{"###", "###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.doorSteel, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Item.sign, 1), new Object[]{"###", "###", " X ", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.stick});
-		this.addRecipe(new ItemStack(Item.cake, 1), new Object[]{"AAA", "BEB", "CCC", Character.valueOf('A'), Item.bucketMilk, Character.valueOf('B'), Item.sugar, Character.valueOf('C'), Item.wheat, Character.valueOf('E'), Item.egg});
-		this.addRecipe(new ItemStack(Item.sugar, 1), new Object[]{"#", Character.valueOf('#'), Item.reed});
-		this.addRecipe(new ItemStack(Block.planks, 4), new Object[]{"#", Character.valueOf('#'), Block.wood});
-		this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.torchWood, 4), new Object[]{"X", "#", Character.valueOf('X'), Item.coal, Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.torchWood, 4), new Object[]{"X", "#", Character.valueOf('X'), new ItemStack(Item.coal, 1, 1), Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.bowlEmpty, 4), new Object[]{"# #", " # ", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.rail, 16), new Object[]{"X X", "X#X", "X X", Character.valueOf('X'), Item.ingotIron, Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.railPowered, 6), new Object[]{"X X", "X#X", "XRX", Character.valueOf('X'), Item.ingotGold, Character.valueOf('R'), Item.redstone, Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Block.railDetector, 6), new Object[]{"X X", "X#X", "XRX", Character.valueOf('X'), Item.ingotIron, Character.valueOf('R'), Item.redstone, Character.valueOf('#'), Block.pressurePlateStone});
-		this.addRecipe(new ItemStack(Item.minecartEmpty, 1), new Object[]{"# #", "###", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Block.pumpkinLantern, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.pumpkin, Character.valueOf('B'), Block.torchWood});
-		this.addRecipe(new ItemStack(Item.minecartCrate, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.chest, Character.valueOf('B'), Item.minecartEmpty});
-		this.addRecipe(new ItemStack(Item.minecartPowered, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.stoneOvenIdle, Character.valueOf('B'), Item.minecartEmpty});
-		this.addRecipe(new ItemStack(Item.boat, 1), new Object[]{"# #", "###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), new Object[]{"# #", " # ", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Item.flintAndSteel, 1), new Object[]{"A ", " B", Character.valueOf('A'), Item.ingotIron, Character.valueOf('B'), Item.flint});
-		this.addRecipe(new ItemStack(Item.bread, 1), new Object[]{"###", Character.valueOf('#'), Item.wheat});
-		this.addRecipe(new ItemStack(Block.stairCompactPlanks, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.fishingRod, 1), new Object[]{"  #", " #X", "# X", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.silk});
-		this.addRecipe(new ItemStack(Block.stairCompactCobblestone, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Block.field_35280_bx, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.brick});
-		this.addRecipe(new ItemStack(Block.field_35279_by, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.field_35285_bn});
-		this.addRecipe(new ItemStack(Item.painting, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Block.cloth});
-		this.addRecipe(new ItemStack(Item.appleGold, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.blockGold, Character.valueOf('X'), Item.appleRed});
-		this.addRecipe(new ItemStack(Block.lever, 1), new Object[]{"X", "#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.stick});
-		this.addRecipe(new ItemStack(Block.torchRedstoneActive, 1), new Object[]{"X", "#", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.redstone});
-		this.addRecipe(new ItemStack(Item.redstoneRepeater, 1), new Object[]{"#X#", "III", Character.valueOf('#'), Block.torchRedstoneActive, Character.valueOf('X'), Item.redstone, Character.valueOf('I'), Block.stone});
-		this.addRecipe(new ItemStack(Item.pocketSundial, 1), new Object[]{" # ", "#X#", " # ", Character.valueOf('#'), Item.ingotGold, Character.valueOf('X'), Item.redstone});
-		this.addRecipe(new ItemStack(Item.compass, 1), new Object[]{" # ", "#X#", " # ", Character.valueOf('#'), Item.ingotIron, Character.valueOf('X'), Item.redstone});
-		this.addRecipe(new ItemStack(Item.map, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.paper, Character.valueOf('X'), Item.compass});
-		this.addRecipe(new ItemStack(Block.button, 1), new Object[]{"#", "#", Character.valueOf('#'), Block.stone});
-		this.addRecipe(new ItemStack(Block.pressurePlateStone, 1), new Object[]{"##", Character.valueOf('#'), Block.stone});
-		this.addRecipe(new ItemStack(Block.pressurePlatePlanks, 1), new Object[]{"##", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Block.dispenser, 1), new Object[]{"###", "#X#", "#R#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.bow, Character.valueOf('R'), Item.redstone});
-		this.addRecipe(new ItemStack(Block.pistonBase, 1), new Object[]{"TTT", "#X#", "#R#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.ingotIron, Character.valueOf('R'), Item.redstone, Character.valueOf('T'), Block.planks});
-		this.addRecipe(new ItemStack(Block.pistonStickyBase, 1), new Object[]{"S", "P", Character.valueOf('S'), Item.slimeBall, Character.valueOf('P'), Block.pistonBase});
-		this.addRecipe(new ItemStack(Item.bed, 1), new Object[]{"###", "XXX", Character.valueOf('#'), Block.cloth, Character.valueOf('X'), Block.planks});
+		this.addRecipe(new ItemStack(Item.paper, 3), "###", '#', Item.reed);
+		this.addRecipe(new ItemStack(Item.book, 1), "#", "#", "#", '#', Item.paper);
+		this.addRecipe(new ItemStack(Block.fence, 2), "###", "###", '#', Item.stick);
+		this.addRecipe(new ItemStack(Block.field_35277_bw, 1), "#W#", "#W#", '#', Item.stick, 'W', Block.planks);
+		this.addRecipe(new ItemStack(Block.jukebox, 1), "###", "#X#", "###", '#', Block.planks, 'X', Item.diamond);
+		this.addRecipe(new ItemStack(Block.music, 1), "###", "#X#", "###", '#', Block.planks, 'X', Item.redstone);
+		this.addRecipe(new ItemStack(Block.bookShelf, 1), "###", "XXX", "###", '#', Block.planks, 'X', Item.book);
+		this.addRecipe(new ItemStack(Block.blockSnow, 1), "##", "##", '#', Item.snowball);
+		this.addRecipe(new ItemStack(Block.blockClay, 1), "##", "##", '#', Item.clay);
+		this.addRecipe(new ItemStack(Block.brick, 1), "##", "##", '#', Item.brick);
+		this.addRecipe(new ItemStack(Block.glowStone, 1), "##", "##", '#', Item.lightStoneDust);
+		this.addRecipe(new ItemStack(Block.cloth, 1), "##", "##", '#', Item.silk);
+		this.addRecipe(new ItemStack(Block.tnt, 1), "X#X", "#X#", "X#X", 'X', Item.gunpowder, '#', Block.sand);
+		this.addRecipe(new ItemStack(Block.stairSingle, 3, 3), "###", '#', Block.cobblestone);
+		this.addRecipe(new ItemStack(Block.stairSingle, 3, 0), "###", '#', Block.stone);
+		this.addRecipe(new ItemStack(Block.stairSingle, 3, 1), "###", '#', Block.sandStone);
+		this.addRecipe(new ItemStack(Block.stairSingle, 3, 2), "###", '#', Block.planks);
+		this.addRecipe(new ItemStack(Block.stairSingle, 3, 4), "###", '#', Block.brick);
+		this.addRecipe(new ItemStack(Block.stairSingle, 3, 5), "###", '#', Block.field_35285_bn);
+		this.addRecipe(new ItemStack(Block.ladder, 2), "# #", "###", "# #", '#', Item.stick);
+		this.addRecipe(new ItemStack(Item.doorWood, 1), "##", "##", "##", '#', Block.planks);
+		this.addRecipe(new ItemStack(Block.trapdoor, 2), "###", "###", '#', Block.planks);
+		this.addRecipe(new ItemStack(Item.doorSteel, 1), "##", "##", "##", '#', Item.ingotIron);
+		this.addRecipe(new ItemStack(Item.sign, 1), "###", "###", " X ", '#', Block.planks, 'X', Item.stick);
+		this.addRecipe(new ItemStack(Item.cake, 1), "AAA", "BEB", "CCC", 'A', Item.bucketMilk, 'B', Item.sugar, 'C', Item.wheat, 'E', Item.egg);
+		this.addRecipe(new ItemStack(Item.sugar, 1), "#", '#', Item.reed);
+		this.addRecipe(new ItemStack(Block.planks, 4), "#", '#', Block.wood);
+		this.addRecipe(new ItemStack(Item.stick, 4), "#", "#", '#', Block.planks);
+		this.addRecipe(new ItemStack(Block.torchWood, 4), "X", "#", 'X', Item.coal, '#', Item.stick);
+		this.addRecipe(new ItemStack(Block.torchWood, 4), "X", "#", 'X', new ItemStack(Item.coal, 1, 1), '#', Item.stick);
+		this.addRecipe(new ItemStack(Item.bowlEmpty, 4), "# #", " # ", '#', Block.planks);
+		this.addRecipe(new ItemStack(Block.rail, 16), "X X", "X#X", "X X", 'X', Item.ingotIron, '#', Item.stick);
+		this.addRecipe(new ItemStack(Block.railPowered, 6), "X X", "X#X", "XRX", 'X', Item.ingotGold, 'R', Item.redstone, '#', Item.stick);
+		this.addRecipe(new ItemStack(Block.railDetector, 6), "X X", "X#X", "XRX", 'X', Item.ingotIron, 'R', Item.redstone, '#', Block.pressurePlateStone);
+		this.addRecipe(new ItemStack(Item.minecartEmpty, 1), "# #", "###", '#', Item.ingotIron);
+		this.addRecipe(new ItemStack(Block.pumpkinLantern, 1), "A", "B", 'A', Block.pumpkin, 'B', Block.torchWood);
+		this.addRecipe(new ItemStack(Item.minecartCrate, 1), "A", "B", 'A', Block.chest, 'B', Item.minecartEmpty);
+		this.addRecipe(new ItemStack(Item.minecartPowered, 1), "A", "B", 'A', Block.stoneOvenIdle, 'B', Item.minecartEmpty);
+		this.addRecipe(new ItemStack(Item.boat, 1), "# #", "###", '#', Block.planks);
+		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), "# #", " # ", '#', Item.ingotIron);
+		this.addRecipe(new ItemStack(Item.flintAndSteel, 1), "A ", " B", 'A', Item.ingotIron, 'B', Item.flint);
+		this.addRecipe(new ItemStack(Item.bread, 1), "###", '#', Item.wheat);
+		this.addRecipe(new ItemStack(Block.stairCompactPlanks, 4), "#  ", "## ", "###", '#', Block.planks);
+		this.addRecipe(new ItemStack(Item.fishingRod, 1), "  #", " #X", "# X", '#', Item.stick, 'X', Item.silk);
+		this.addRecipe(new ItemStack(Block.stairCompactCobblestone, 4), "#  ", "## ", "###", '#', Block.cobblestone);
+		this.addRecipe(new ItemStack(Block.field_35280_bx, 4), "#  ", "## ", "###", '#', Block.brick);
+		this.addRecipe(new ItemStack(Block.field_35279_by, 4), "#  ", "## ", "###", '#', Block.field_35285_bn);
+		this.addRecipe(new ItemStack(Item.painting, 1), "###", "#X#", "###", '#', Item.stick, 'X', Block.cloth);
+		this.addRecipe(new ItemStack(Item.appleGold, 1), "###", "#X#", "###", '#', Block.blockGold, 'X', Item.appleRed);
+		this.addRecipe(new ItemStack(Block.lever, 1), "X", "#", '#', Block.cobblestone, 'X', Item.stick);
+		this.addRecipe(new ItemStack(Block.torchRedstoneActive, 1), "X", "#", '#', Item.stick, 'X', Item.redstone);
+		this.addRecipe(new ItemStack(Item.redstoneRepeater, 1), "#X#", "III", '#', Block.torchRedstoneActive, 'X', Item.redstone, 'I', Block.stone);
+		this.addRecipe(new ItemStack(Item.pocketSundial, 1), " # ", "#X#", " # ", '#', Item.ingotGold, 'X', Item.redstone);
+		this.addRecipe(new ItemStack(Item.compass, 1), " # ", "#X#", " # ", '#', Item.ingotIron, 'X', Item.redstone);
+		this.addRecipe(new ItemStack(Item.quartzCompass, 1), " # ", "#X#", " # ", '#', Item.quartz, 'X', Item.redstone);
+		this.addRecipe(new ItemStack(Item.map, 1), "###", "#X#", "###", '#', Item.paper, 'X', Item.compass);
+		this.addRecipe(new ItemStack(Block.button, 1), "#", "#", '#', Block.stone);
+		this.addRecipe(new ItemStack(Block.pressurePlateStone, 1), "##", '#', Block.stone);
+		this.addRecipe(new ItemStack(Block.pressurePlatePlanks, 1), "##", '#', Block.planks);
+		this.addRecipe(new ItemStack(Block.dispenser, 1), "###", "#X#", "#R#", '#', Block.cobblestone, 'X', Item.bow, 'R', Item.redstone);
+		this.addRecipe(new ItemStack(Block.pistonBase, 1), "TTT", "#X#", "#R#", '#', Block.cobblestone, 'X', Item.ingotIron, 'R', Item.redstone, 'T', Block.planks);
+		this.addRecipe(new ItemStack(Block.pistonStickyBase, 1), "S", "P", 'S', Item.slimeBall, 'P', Block.pistonBase);
+		this.addRecipe(new ItemStack(Item.bed, 1), "###", "XXX", '#', Block.cloth, 'X', Block.planks);
+		this.addRecipe(new ItemStack(Block.skyPortalFrame, 1), "# #", " # ", "# #", '#', Item.quartz);
+		this.addRecipe(new ItemStack(Block.chargedPortalFrame, 1), "#X#", "X#X", "#X#", '#', Item.quartz, 'X', Item.ingotCopper);
+		this.addShapelessRecipe(new ItemStack(Item.blazePowder, 2), Item.blazeRod);
+		this.addShapelessRecipe(new ItemStack(Item.eyeOfEnder, 1), Item.field_35416_bo, Item.blazePowder);
+		this.addRecipe(new ItemStack(Item.glassBottle, 3), "# #", " # ", '#', Block.glass);
 		Collections.sort(this.recipes, new RecipeSorter(this));
 		System.out.println(this.recipes.size() + " recipes");
 	}
@@ -93,7 +99,7 @@
 		int var5 = 0;
 		int var6 = 0;
 		if(var2[var4] instanceof String[]) {
-			String[] var11 = (String[])((String[])var2[var4++]);
+			String[] var11 = (String[]) var2[var4++];
 
 			for(int var8 = 0; var8 < var11.length; ++var8) {
 				String var9 = var11[var8];
--- /dev/null
+++ net/minecraft/src/EntitySmallFireball.java
@@ -1,0 +1,66 @@
+package net.minecraft.src;
+
+public class EntitySmallFireball extends EntityFireball {
+	public EntitySmallFireball(World var1) {
+		super(var1);
+		this.setSize(5.0F / 16.0F, 5.0F / 16.0F);
+	}
+
+	public EntitySmallFireball(World var1, EntityLiving var2, double var3, double var5, double var7) {
+		super(var1, var2, var3, var5, var7);
+		this.setSize(5.0F / 16.0F, 5.0F / 16.0F);
+	}
+
+	public EntitySmallFireball(World var1, double var2, double var4, double var6, double var8, double var10, double var12) {
+		super(var1, var2, var4, var6, var8, var10, var12);
+		this.setSize(5.0F / 16.0F, 5.0F / 16.0F);
+	}
+
+	protected void onHit(MovingObjectPosition var1) {
+		if(!this.worldObj.multiplayerWorld) {
+			if(var1.entityHit != null) {
+				if(!var1.entityHit.isImmuneToFire && var1.entityHit.attackEntityFrom(DamageSource.func_35530_a(this, this.shootingEntity), 5)) {
+					var1.entityHit.dealFireDamage(5);
+				}
+			} else {
+				int var2 = var1.blockX;
+				int var3 = var1.blockY;
+				int var4 = var1.blockZ;
+				switch(var1.sideHit) {
+				case 0:
+					--var3;
+					break;
+				case 1:
+					++var3;
+					break;
+				case 2:
+					--var4;
+					break;
+				case 3:
+					++var4;
+					break;
+				case 4:
+					--var2;
+					break;
+				case 5:
+					++var2;
+				}
+
+				if(this.worldObj.isAirBlock(var2, var3, var4)) {
+					this.worldObj.setBlockWithNotify(var2, var3, var4, Block.fire.blockID);
+				}
+			}
+
+			this.setEntityDead();
+		}
+
+	}
+
+	public boolean canBeCollidedWith() {
+		return false;
+	}
+
+	public boolean attackEntityFrom(DamageSource var1, int var2) {
+		return false;
+	}
+}
--- net/minecraft/src/PlayerListEntry.java
+++ net/minecraft/src/PlayerListEntry.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import java.util.Objects;
+
 class PlayerListEntry {
 	final long field_35834_a;
 	Object field_35832_b;
@@ -26,12 +28,12 @@
 			return false;
 		} else {
 			PlayerListEntry var2 = (PlayerListEntry)var1;
-			Long var3 = Long.valueOf(this.func_35830_a());
-			Long var4 = Long.valueOf(var2.func_35830_a());
-			if(var3 == var4 || var3 != null && var3.equals(var4)) {
+			long var3 = this.func_35830_a();
+			long var4 = var2.func_35830_a();
+			if(var3 == var4) {
 				Object var5 = this.func_35829_b();
 				Object var6 = var2.func_35829_b();
-				if(var5 == var6 || var5 != null && var5.equals(var6)) {
+				if(Objects.equals(var5, var6)) {
 					return true;
 				}
 			}
--- net/minecraft/src/IBlockAccess.java
+++ net/minecraft/src/IBlockAccess.java
@@ -11,6 +11,8 @@
 
 	float getLightBrightness(int var1, int var2, int var3);
 
+	float getLightBrightness(int var1);
+
 	int getBlockMetadata(int var1, int var2, int var3);
 
 	Material getBlockMaterial(int var1, int var2, int var3);
@@ -24,4 +26,6 @@
 	WorldChunkManager getWorldChunkManager();
 
 	int func_35452_b();
+
+	float getRenderCelestialAngle();
 }
--- net/minecraft/src/TileEntity.java
+++ net/minecraft/src/TileEntity.java
@@ -125,5 +125,6 @@
 		addMapping(TileEntityMobSpawner.class, "MobSpawner");
 		addMapping(TileEntityNote.class, "Music");
 		addMapping(TileEntityPiston.class, "Piston");
+		addMapping(TileEntityComputer.class, "Computer");
 	}
 }
--- net/minecraft/src/ChunkProviderSky.java
+++ net/minecraft/src/ChunkProviderSky.java
@@ -28,7 +28,7 @@
 
 	public ChunkProviderSky(World var1, long var2) {
 		this.worldObj = var1;
-		this.random = new Random(var2);
+		this.random = Personalization.random(var2);
 		this.field_28086_k = new NoiseGeneratorOctaves(this.random, 16);
 		this.field_28085_l = new NoiseGeneratorOctaves(this.random, 16);
 		this.field_28084_m = new NoiseGeneratorOctaves(this.random, 8);
@@ -90,7 +90,7 @@
 							for(int var50 = 0; var50 < 8; ++var50) {
 								int var51 = 0;
 								if(var46 > 0.0D) {
-									var51 = Block.stone.blockID;
+									var51 = Personalization.endSky ? Block.endStone.blockID : Block.stone.blockID;
 								}
 
 								var3[var42] = (byte)var51;
@@ -173,11 +173,11 @@
 		this.random.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
 		this.worldObj.getClass();
 		byte[] var3 = new byte[16 * 128 * 16];
-		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
 		this.field_28075_v = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.field_28075_v, var1 * 16, var2 * 16, 16, 16);
 		this.generateTerrain(var1, var2, var3, this.field_28075_v);
 		this.replaceBlocksForBiome(var1, var2, var3, this.field_28075_v);
-		this.caveGen.generate(this, this.worldObj, var1, var2, var3);
+		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
+//		this.caveGen.generate(this, this.worldObj, var1, var2, var3);
 		var4.generateSkylightMap();
 		return var4;
 	}
@@ -272,6 +272,10 @@
 	}
 
 	public void populate(IChunkProvider var1, int var2, int var3) {
+		if (Personalization.endSky) {
+			return;
+		}
+
 		BlockSand.fallInstantly = true;
 		int var4 = var2 * 16;
 		int var5 = var3 * 16;
@@ -362,6 +366,15 @@
 			(new WorldGenMinable(Block.oreIron.blockID, 8)).generate(this.worldObj, this.random, var14, var15, var16);
 		}
 
+		for(var13 = 0; var13 < 20; ++var13) {
+			var14 = var4 + this.random.nextInt(16);
+			var10000 = this.random;
+			this.worldObj.getClass();
+			var15 = var10000.nextInt(128);
+			var16 = var5 + this.random.nextInt(16);
+			(new WorldGenMinable(Block.oreCopper.blockID, 8)).generate(this.worldObj, this.random, var14, var15, var16);
+		}
+
 		for(var13 = 0; var13 < 2; ++var13) {
 			var14 = var4 + this.random.nextInt(16);
 			var10000 = this.random;
@@ -416,7 +429,7 @@
 			var14 -= 20;
 		}
 
-		if(var6 == BiomeGenBase.field_35485_c) {
+		if(var6 == BiomeGenBase.plains) {
 			var14 -= 20;
 		}
 
@@ -520,6 +533,7 @@
 			(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.worldObj, this.random, var17, var20, var19);
 		}
 
+		SpawnerAnimals.func_35957_a(this.worldObj, var6, var4 + 8, var5 + 8, 16, 16, this.random);
 		BlockSand.fallInstantly = false;
 	}
 
@@ -536,6 +550,6 @@
 	}
 
 	public String makeString() {
-		return "RandomLevelSource";
+		return "SkyRandomLevelSource";
 	}
 }
--- net/minecraft/src/ItemReed.java
+++ net/minecraft/src/ItemReed.java
@@ -38,14 +38,13 @@
 			}
 		}
 
-		if(!var2.func_35190_e(var4, var5, var6)) {
-			return false;
-		} else if(var1.stackSize == 0) {
+		if(var1.stackSize == 0) {
 			return false;
 		} else {
 			if(var3.canBlockBePlacedAt(this.spawnID, var4, var5, var6, false, var7)) {
 				Block var9 = Block.blocksList[this.spawnID];
 				if(var3.setBlockWithNotify(var4, var5, var6, this.spawnID)) {
+					Personalization.betaBias += 20.0F;
 					if(var3.getBlockId(var4, var5, var6) == this.spawnID) {
 						Block.blocksList[this.spawnID].onBlockPlaced(var3, var4, var5, var6, var7);
 						Block.blocksList[this.spawnID].onBlockPlacedBy(var3, var4, var5, var6, var2);
--- /dev/null
+++ net/minecraft/src/TileEntityContainer.java
@@ -1,0 +1,30 @@
+package net.minecraft.src;
+
+public abstract class TileEntityContainer extends TileEntity implements IInventory {
+	public boolean splitStacks() {
+		if (true) return false;
+
+		boolean stacksSplit = false;
+
+		for (int i = 0; i < this.getSizeInventory(); i++) {
+			ItemStack item = this.getStackInSlot(i);
+			if (item == null) continue;
+
+			while (item.stackSize > item.getMaxStackSize()) {
+				float var8 = Personalization.rand.nextFloat() * 0.8F + 0.1F;
+				float var9 = Personalization.rand.nextFloat() * 0.8F + 0.1F;
+				float var10 = Personalization.rand.nextFloat() * 0.8F + 0.1F;
+
+				EntityItem var12 = new EntityItem(this.worldObj, (float)this.xCoord + var8, (float)this.yCoord + var9, (float)this.zCoord + var10, item.splitStack(1));
+				float var13 = 0.05F;
+				var12.motionX = (double)((float)Personalization.rand.nextGaussian() * var13);
+				var12.motionY = (double)((float)Personalization.rand.nextGaussian() * var13 + 0.2F);
+				var12.motionZ = (double)((float)Personalization.rand.nextGaussian() * var13);
+				this.worldObj.entityJoinedWorld(var12);
+				stacksSplit = true;
+			}
+		}
+
+		return stacksSplit;
+	}
+}
--- net/minecraft/src/BlockChest.java
+++ net/minecraft/src/BlockChest.java
@@ -11,11 +11,11 @@
 	}
 
 	public boolean isOpaqueCube() {
-		return false;
+		return Personalization.fullBlockChests;
 	}
 
 	public int getRenderType() {
-		return 22;
+		return Personalization.fullBlockChests ? 0 : 22;
 	}
 
 	public void onBlockAdded(World var1, int var2, int var3, int var4) {
@@ -301,6 +301,11 @@
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
 		TileEntityChest var5 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
 		if(var5 != null) {
+			if (var5.splitStacks()) {
+				var1.playSoundEffect(var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, "random.explode", 4.0F, (1.0F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.2F) * 0.7F);
+				var1.spawnParticle("hugeexplosion", var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, 0.0D, 0.0D, 0.0D);
+			}
+
 			for(int var6 = 0; var6 < var5.getSizeInventory(); ++var6) {
 				ItemStack var7 = var5.getStackInSlot(var6);
 				if(var7 != null) {
@@ -330,7 +335,7 @@
 	}
 
 	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		Object var6 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
+		IInventory var6 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
 		if(var6 == null) {
 			return true;
 		} else if(var1.isBlockNormalCube(var2, var3 + 1, var4)) {
@@ -345,25 +350,30 @@
 			return true;
 		} else {
 			if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2 - 1, var3, var4), (IInventory)var6);
+				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2 - 1, var3, var4), var6);
 			}
 
 			if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2 + 1, var3, var4));
+				var6 = new InventoryLargeChest("Large chest", var6, (TileEntityChest)var1.getBlockTileEntity(var2 + 1, var3, var4));
 			}
 
 			if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 - 1), (IInventory)var6);
+				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 - 1), var6);
 			}
 
 			if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 + 1));
+				var6 = new InventoryLargeChest("Large chest", var6, (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 + 1));
 			}
 
 			if(var1.multiplayerWorld) {
 				return true;
 			} else {
-				var5.displayGUIChest((IInventory)var6);
+				if (var6.splitStacks()) {
+					var1.playSoundEffect(var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, "random.explode", 4.0F, (1.0F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.2F) * 0.7F);
+					var1.spawnParticle("hugeexplosion", var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, 0.0D, 0.0D, 0.0D);
+				}
+
+				var5.displayGUIChest(var6);
 				return true;
 			}
 		}
--- /dev/null
+++ net/minecraft/src/BiomeGenOffices.java
@@ -1,0 +1,18 @@
+package net.minecraft.src;
+
+public class BiomeGenOffices extends BiomeGenBase {
+	public BiomeGenOffices(int var1) {
+		super(var1);
+		this.spawnableCreatureList.clear();
+		this.spawnableMonsterList.clear();
+		this.spawnableWaterCreatureList.clear();
+		this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 10, 4, 4));
+	}
+
+	public int getSkyColorByTemp(float var1) {
+		return 0xFFFFFF;
+	}
+
+	public void updateSpawnEntry(SpawnListEntry entry) {
+	}
+}
--- /dev/null
+++ net/minecraft/src/IThreadedFileIO.java
@@ -1,0 +1,5 @@
+package net.minecraft.src;
+
+public interface IThreadedFileIO {
+	boolean writeNextIO();
+}
--- net/minecraft/src/BlockOreStorage.java
+++ net/minecraft/src/BlockOreStorage.java
@@ -7,6 +7,8 @@
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return this.blockIndexInTexture;
+		return var1 == 1 || !Personalization.alphaTextures ? this.blockIndexInTexture
+				: var1 == 0 ? this.blockIndexInTexture + 160
+				: this.blockIndexInTexture + 144;
 	}
 }
--- net/minecraft/src/BiomeGenTaiga.java
+++ net/minecraft/src/BiomeGenTaiga.java
@@ -6,11 +6,20 @@
 	public BiomeGenTaiga(int var1) {
 		super(var1);
 		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 8, 4, 4));
-		this.field_35488_u.field_35911_r = 10;
-		this.field_35488_u.field_35909_t = 1;
+		this.decorator.trees = 10;
+		this.decorator.grass = 1;
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return (WorldGenerator)(var1.nextInt(3) == 0 ? new WorldGenTaiga1() : new WorldGenTaiga2());
+		return Personalization.oakOnly ? super.getRandomWorldGenForTrees(var1)
+				: var1.nextInt(3) == 0 ? new WorldGenTaiga1() : new WorldGenTaiga2();
+	}
+
+	public float getMinHeight(int x, int z) {
+		return super.getMinHeight(x, z) + (doHills(x, z) ? 0.1F : 0.0F);
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) + (doHills(x, z) ? 0.4F : 0.0F);
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldProviderOffices.java
@@ -1,0 +1,40 @@
+package net.minecraft.src;
+
+public class WorldProviderOffices extends WorldProvider {
+	protected void registerWorldChunkManager() {
+		this.worldChunkMgr = new WorldChunkManagerHell(BiomeGenBase.offices, 0.5F, 0.5F);
+		this.hasNoSky = true;
+		this.worldType = 2;
+	}
+
+	public IChunkProvider getChunkProvider() {
+		return new ChunkProviderOffices(this.worldObj, this.worldObj.getRandomSeed());
+	}
+
+	public float calculateCelestialAngle(long var1, float var3) {
+		return 0.0F;
+	}
+
+	public float[] calcSunriseSunsetColors(float var1, float var2) {
+		return null;
+	}
+
+	protected void generateLightBrightnessTable() {
+		for(int var2 = 0; var2 <= 15; ++var2) {
+			this.lightBrightnessTable[var2] = 1.0F;
+		}
+
+	}
+
+	public Vec3D func_4096_a(float var1, float var2) {
+		return Vec3D.createVector(1.0D, 1.0D, 1.0D);
+	}
+
+	public boolean canRespawnHere() {
+		return false;
+	}
+
+	public float getCloudHeight() {
+		return Float.NEGATIVE_INFINITY;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenOldSwamp.java
@@ -1,0 +1,10 @@
+package net.minecraft.src;
+
+public class BiomeGenOldSwamp extends BiomeGenBase {
+	protected BiomeGenOldSwamp(int var1) {
+		super(var1);
+		this.decorator.trees = -999;
+		this.decorator.flowers = 2;
+		this.decorator.grass = -999;
+	}
+}
--- /dev/null
+++ net/minecraft/src/AnvilSaveConverterFileFilter.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.io.FilenameFilter;
+
+class AnvilSaveConverterFileFilter implements FilenameFilter {
+	final AnvilSaveConverter parent;
+
+	AnvilSaveConverterFileFilter(AnvilSaveConverter var1) {
+		this.parent = var1;
+	}
+
+	public boolean accept(File var1, String var2) {
+		return var2.endsWith(".mcr");
+	}
+}
--- /dev/null
+++ net/minecraft/src/ChunkProviderOffices.java
@@ -1,0 +1,480 @@
+package net.minecraft.src;
+
+import com.github.sjcasey21.wavefunctioncollapse.OverlappingModel;
+
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.*;
+import java.util.List;
+import java.util.concurrent.*;
+
+public class ChunkProviderOffices implements IChunkProvider {
+	public static final int height = 5;
+	private static final OverlappingModel[] wfcModels = new OverlappingModel[height];
+
+	static {
+		BufferedImage image;
+		try {
+			InputStream imageStream = WorldProviderOffices.class.getResourceAsStream("/wfc/offices.png");
+			if (imageStream == null) {
+				throw new IOException("Could not find \"/wfc/offices.png\"");
+			}
+
+			image = ImageIO.read(imageStream);
+		} catch (IOException e) {
+			throw new RuntimeException("Failed to setup wave function collapse!");
+		}
+
+		for (int i = 0; i < height; i++) {
+			wfcModels[i] = new OverlappingModel(image, 3, 85, 85, true, false, 1, 0);
+			wfcModels[i].init();
+		}
+	}
+
+	private final World worldObj;
+	private final Random rand;
+	private final byte[] blocks = new byte[16 * 128 * 16];
+	private final byte[] metadata = new byte[16 * 128 * 16];
+	private final RoomColumn[] columnNeighbors = new RoomColumn[4];
+	private final BufferedImage[] mapLayout = new BufferedImage[height];
+
+	private final byte wallBottomType = (byte)Block.field_35285_bn.blockID;
+	private final byte wallType = (byte)Block.quartzPillar.blockID;
+	private final byte floorType = (byte)Block.lightPlanks.blockID;
+	private final byte ceilingType = (byte)Block.quartzPillar.blockID;
+
+	private enum RoomColumn {
+		WALL(0x000000) {
+			public void placeColumn(ChunkProviderOffices chunkProvider, byte[] blocks, byte[] metadata, int i, int x, int y, int z) {
+				for (int yy = 0; yy < 7; yy++) {
+					blocks[i++] = yy > 1 ? chunkProvider.wallType : chunkProvider.wallBottomType;
+				}
+			}
+		},
+		FLOOR(0xFFFFFF) {
+			public void placeColumn(ChunkProviderOffices chunkProvider, byte[] blocks, byte[] metadata, int i, int x, int y, int z) {
+				int j = i;
+				for (int yy = 0; yy < 7; yy++) {
+					blocks[j++] = yy > 0 && yy <= 5 ? 0
+							: yy > 5 ? chunkProvider.ceilingType
+							: chunkProvider.floorType;
+				}
+
+				if (getRng(x, y, z, 2, 10) == 0) {
+					LAMP.placeColumn(chunkProvider, blocks, metadata, i, x, y, z);
+				}
+
+				int addChance = getRng(x, y, z, 2, 2);
+				if (addChance == 0) {
+					CARPET.placeColumn(chunkProvider, blocks, metadata, i, x, y, z);
+				}
+
+				WALL_SHELVES.placeColumn(chunkProvider, blocks, metadata, i, x, y, z);
+			}
+		},
+		DESK(0xFF0000) {
+			public void placeColumn(ChunkProviderOffices chunkProvider, byte[] blocks, byte[] metadata, int i, int x, int y, int z) {
+				FLOOR.placeColumn(chunkProvider, blocks, metadata, i, x, y, z);
+
+				int rot = getRng(x, y, z, 2);
+				int z3 = Math.floorMod(z, 3);
+				int x3 = rotX3(Math.floorMod(x, 3), z3, rot);
+				z3 = rotZ3(Math.floorMod(x, 3), z3, rot);
+
+				i++;
+				for (int yy = 1; yy < 4; yy++) {
+					blocks[i] = 0;
+					if (yy == 1) {
+						if (x3 == 2 && z3 == 1) {
+							blocks[i] = (byte)Block.stairsLightPlanks.blockID;
+							metadata[i] = (byte)rot;
+						} else if (z3 != 1 && x3 < 2) {
+							blocks[i] = (byte)Block.fence.blockID;
+						}
+					} else if (yy == 2 && x3 < 2) {
+						if (x3 == 0 && z3 == 1) {
+							blocks[i] = (byte)Block.computer.blockID;
+							metadata[i] = (byte)(5 - rot);
+						} else {
+							blocks[i] = (byte)Block.table.blockID;
+						}
+					}
+					i++;
+				}
+			}
+		},
+		BOOKSHELVES(0x00FFFF) {
+			public void placeColumn(ChunkProviderOffices chunkProvider, byte[] blocks, byte[] metadata, int i, int x, int y, int z) {
+				FLOOR.placeColumn(chunkProvider, blocks, metadata, i, x, y, z);
+
+				int x3 = Math.floorMod(x, 3);
+				int z3 = Math.floorMod(z, 3);
+
+				i++;
+				for (int yy = 0; yy < 3; yy++) {
+					if (yy == 0) {
+						blocks[i] = (byte)Block.bookShelf.blockID;
+					} else {
+						if (x3 == 1 && z3 == 1) {
+							blocks[i] = (byte)Block.bookShelf.blockID;
+						} else if (x3 == 1 || z3 == 1) {
+							blocks[i] = (byte)Block.glass.blockID;
+						}
+					}
+					i++;
+				}
+			}
+		},
+		HALLWAY(0x00FF00) {
+			public void placeColumn(ChunkProviderOffices chunkProvider, byte[] blocks, byte[] metadata, int i, int x, int y, int z) {
+				int j = i;
+				for (int yy = 0; yy < 7; yy++) {
+					blocks[j++] = yy > 0 && yy <= 3 ? 0
+							: yy > 3 ? chunkProvider.ceilingType
+							: chunkProvider.floorType;
+				}
+
+				WALL_SHELVES.placeColumn(chunkProvider, blocks, metadata, i, x, y, z);
+			}
+		},
+		STAIRCASE(0xFF00FF) {
+			public void placeColumn(ChunkProviderOffices chunkProvider, byte[] blocks, byte[] metadata, int i, int x, int y, int z) {
+				FLOOR.placeColumn(chunkProvider, blocks, metadata, i, x, y, z);
+
+				i++;
+				int x3 = Math.floorMod(x, 3);
+				int z3 = Math.floorMod(z, 3);
+
+				for (int yy = 0; yy < 7; yy++) {
+					blocks[i] = 0;
+					if (x3 == 1 && z3 == 1) {
+						blocks[i] = (byte)Block.wood.blockID;
+					} else if (x3 == 1 || z3 == 1) {
+						if ((yy == 0 || yy == 4) && x3 == 0) {
+							blocks[i] = (byte)Block.stairCompactPlanks.blockID;
+							metadata[i] = 3;
+						} else if ((yy == 1 || yy == 5) && z3 == 0) {
+							blocks[i] = (byte)Block.stairCompactPlanks.blockID;
+							metadata[i] = 0;
+						} else if ((yy == 2 || yy == 6) && x3 == 2) {
+							blocks[i] = (byte)Block.stairCompactPlanks.blockID;
+							metadata[i] = 2;
+						} else if (yy == 3 && z3 == 2) {
+							blocks[i] = (byte)Block.stairCompactPlanks.blockID;
+							metadata[i] = 1;
+						}
+					} else {
+						int cutoff = yy;
+						if (x3 == 2) {
+							cutoff -= 1 + z3 / 2;
+						} else if (z3 == 2) {
+							cutoff -= 3;
+						}
+
+						if (cutoff % 4 == 0) {
+							blocks[i] = (byte)Block.planks.blockID;
+						}
+					}
+					i++;
+				}
+			}
+		},
+		PORTAL(0xFF7F00) {
+			public void placeColumn(ChunkProviderOffices chunkProvider, byte[] blocks, byte[] metadata, int i, int x, int y, int z) {
+				FLOOR.placeColumn(chunkProvider, blocks, metadata, i, x, y, z);
+
+				int x3 = Math.floorMod(x, 3);
+				int z3 = Math.floorMod(z, 3);
+
+				i++;
+				metadata[i] = 0;
+				if (x3 == 1 && z3 == 1) {
+					blocks[i] = (byte)Block.portal.blockID;
+					metadata[i] = 2;
+				} else {
+					blocks[i] = (byte)Block.chargedPortalFrame.blockID;
+					metadata[i] = 1;
+				}
+
+				blocks[++i] = 0;
+				blocks[++i] = 0;
+			}
+		},
+		LAMP {
+			public void placeColumn(ChunkProviderOffices chunkProvider, byte[] blocks, byte[] metadata, int i, int x, int y, int z) {
+				int x3 = Math.floorMod(x, 3);
+				int z3 = Math.floorMod(z, 3);
+
+				if (x3 == 1 && z3 == 1) {
+					blocks[i + 5] = (byte)Block.lamp.blockID;
+				}
+			}
+		},
+		CARPET {
+			public void placeColumn(ChunkProviderOffices chunkProvider, byte[] blocks, byte[] metadata, int i, int x, int y, int z) {
+				int x3 = Math.floorMod(x, 3);
+				int z3 = Math.floorMod(z, 3);
+				blocks[i] = (byte)Block.cloth.blockID;
+				metadata[i] = (byte)(x3 > 0 && z3 > 0 ? 0 : 14);
+			}
+		},
+		WALL_SHELVES {
+			private final boolean[] doWall = new boolean[4];
+
+			public void placeColumn(ChunkProviderOffices chunkProvider, byte[] blocks, byte[] metadata, int i, int x, int y, int z) {
+				for (int j = 0; j < 4; j++) {
+					this.doWall[j] = chunkProvider.columnNeighbors[j] == RoomColumn.WALL;
+				}
+
+				int rot = getRng(x, y, z, 2, 8);
+				if (this.doWall[rot]) {
+					int x3 = Math.floorMod(x, 3);
+					int z3 = Math.floorMod(z, 3);
+					x3 = rotX3(x3, z3, rot);
+
+					if (x3 == 2) {
+						i++;
+						for (int yy = 0; yy < 3; yy++) {
+							blocks[i++] = (byte)Block.bookShelf.blockID;
+						}
+					}
+				}
+			}
+		},
+		CEILING {
+			public void placeColumn(ChunkProviderOffices chunkProvider, byte[] blocks, byte[] metadata, int i, int x, int y, int z) {
+				int j = i;
+				for (int yy = 0; yy < 7; yy++) {
+					blocks[j++] = yy > 5 ? chunkProvider.ceilingType : 0;
+				}
+
+				if (getRng(x, y, z, 2, 10) == 0) {
+					LAMP.placeColumn(chunkProvider, blocks, metadata, i, x, y, z);
+				}
+			}
+		};
+
+		private static final Map<Integer, RoomColumn> colorToColumn = new HashMap<>();
+		public final int color;
+
+		static {
+			for (RoomColumn column : values()) {
+				if (column.color >= 0) {
+					colorToColumn.put(column.color, column);
+				}
+			}
+		}
+
+		RoomColumn() {
+			this(-1);
+		}
+
+		RoomColumn(int color) {
+			this.color = color;
+		}
+
+		private static int getRng(int x, int y, int z, int bits) {
+			return getRng(x, y, z, bits, 0);
+		}
+
+		private static int getRng(int x, int y, int z, int bits, int offset) {
+			long rng = (x / 3 * 31L + z / 3) * 31L + y / 3;
+			rng = (rng * 31L + rng) * 31L + rng;
+			rng ^= rng << 13;
+			rng ^= rng >>> 17;
+			rng ^= rng << 5;
+			return (int)((rng >> (offset + 8)) & ((1 << bits) - 1));
+		}
+
+		private static int rotX3(int x3, int z3, int rot) {
+			if ((rot & 2) > 0) {
+				x3 = z3;
+			}
+
+			if ((rot & 1) > 0) {
+				x3 = 2 - x3;
+			}
+
+			return x3;
+		}
+
+		private static int rotZ3(int x3, int z3, int rot) {
+			if ((rot & 2) > 0) {
+				z3 = x3;
+			}
+
+			return z3;
+		}
+
+		public abstract void placeColumn(ChunkProviderOffices chunkProvider, byte[] blocks, byte[] metadata, int i, int x, int y, int z);
+
+		public static RoomColumn fromColor(int color) {
+			RoomColumn column = colorToColumn.get(color & 0xFFFFFF);
+			if (column == null) {
+				column = RoomColumn.WALL;
+			}
+			return column;
+		}
+	}
+
+	public ChunkProviderOffices(World var1, long var2) {
+		this.worldObj = var1;
+		this.rand = Personalization.random(var2);
+	}
+
+	public boolean chunkExists(int var1, int var2) {
+		return true;
+	}
+
+	private void generateTerrain(byte[] blocks, byte[] metadata, int cx, int cz) {
+		while (!this.genMapLayout());
+		RoomColumn column = RoomColumn.WALL;
+
+		for (int y = 0; y < height; y++) {
+			int prevImgX = -1;
+			int prevImgY = -1;
+
+			for (int x = 0; x < 16; x++) {
+				for (int z = 0; z < 16; z++) {
+					int xx = cx * 16 + x + 127;
+					int zz = cz * 16 + z + 127;
+					int imgX = xx / 3;
+					int imgY = zz / 3;
+
+					if (imgX != prevImgX || imgY != prevImgY) {
+						BufferedImage img = this.mapLayout[y];
+						prevImgX = imgX;
+						prevImgY = imgY;
+						column = this.getRoomColumn(img, imgX, imgY);
+						columnNeighbors[0] = this.getRoomColumn(img, imgX + 1, imgY);
+						columnNeighbors[1] = this.getRoomColumn(img, imgX - 1, imgY);
+						columnNeighbors[2] = this.getRoomColumn(img, imgX, imgY + 1);
+						columnNeighbors[3] = this.getRoomColumn(img, imgX, imgY - 1);
+
+						if (y > 0 && this.getRoomColumn(this.mapLayout[y - 1], imgX, imgY) == RoomColumn.STAIRCASE) {
+							column = RoomColumn.CEILING;
+						}
+					}
+
+					int i = x << 11 | z << 7 | y * 7;
+					column.placeColumn(this, blocks, metadata, i, xx, y * 7, zz);
+				}
+			}
+		}
+	}
+
+	private RoomColumn getRoomColumn(BufferedImage img, int imgX, int imgY) {
+		if (imgX >= 0 && imgX < img.getWidth() && imgY >= 0 && imgY < img.getHeight()) {
+			return RoomColumn.fromColor(img.getRGB(imgX, imgY));
+		}
+		return RoomColumn.WALL;
+	}
+
+	private boolean genMapLayout() {
+		List<Callable<Object>> tasks = null;
+		for (int i = 0; i < height; i++) {
+			if (this.mapLayout[i] == null) {
+				if (tasks == null) {
+					tasks = new ArrayList<>();
+				}
+
+				final int fi = i;
+				final long seed = rand.nextLong();
+				tasks.add(Executors.callable(() -> genMapFloor(fi, seed)));
+			}
+		}
+
+		if (tasks == null || tasks.isEmpty()){
+			return true;
+		}
+
+		ExecutorService executor = Executors.newFixedThreadPool(tasks.size());
+		try {
+			executor.invokeAll(tasks);
+		} catch (InterruptedException e) {
+			throw new RuntimeException(e);
+		}
+
+		executor.shutdown();
+		return false;
+	}
+
+	private void genMapFloor(int i, long seed) {
+		boolean run;
+		do {
+			run = wfcModels[i].run(seed, 0);
+			seed ^= seed << 13;
+			seed ^= seed >>> 17;
+			seed ^= seed << 5;
+			System.out.println("WFC #" + i + ": " + (run ? "Success" : "Failure"));
+		} while (!run);
+
+		BufferedImage img = wfcModels[i].graphics();
+
+		if (i == 0) {
+			for (int x = 41; x <= 43; x++) {
+				for (int y = 41; y <= 43; y++) {
+					if ((img.getRGB(x, y) & 0xFFFFFF) == 0) {
+						img.setRGB(x, y, 0xFFFFFF);
+					}
+				}
+			}
+		}
+
+		for (int j = 0; j < 5; j++) {
+			int x = rand.nextInt(85);
+			int y = rand.nextInt(85);
+			img.setRGB(x, y, 0xFF7F00);
+		}
+
+		for (int x = 0; x < 85; x++) {
+			for (int y = 0; y < 85; y++) {
+				RoomColumn room = RoomColumn.fromColor(img.getRGB(x, y));
+				if (room == RoomColumn.FLOOR) {
+					if (rand.nextInt(30) == 0) {
+						img.setRGB(x, y, RoomColumn.BOOKSHELVES.color);
+					}
+				}
+			}
+		}
+
+		this.mapLayout[i] = img;
+	}
+
+	public Chunk provideChunk(int var1, int var2) {
+		Arrays.fill(this.blocks, (byte)0);
+		Arrays.fill(this.metadata, (byte)0);
+		this.generateTerrain(this.blocks, this.metadata, var1, var2);
+		return new Chunk(this.worldObj, this.blocks, this.metadata, var1, var2);
+	}
+
+	public Chunk loadChunk(int var1, int var2) {
+		return this.provideChunk(var1, var2);
+	}
+
+	public void populate(IChunkProvider var1, int var2, int var3) {
+		if (var2 == 0 && var3 == 0) {
+			EntityOfficeNotch notch = new EntityOfficeNotch(this.worldObj);
+			notch.setPosition(0.5D, height * 7 + 2.0D, 0.5D);
+			this.worldObj.entityJoinedWorld(notch);
+		}
+	}
+
+	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+		return true;
+	}
+
+	public boolean unload100OldestChunks() {
+		return false;
+	}
+
+	public boolean canSave() {
+		return true;
+	}
+
+	public String makeString() {
+		return "OfficesRandomLevelSource";
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenCanopyTree.java
@@ -1,0 +1,176 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenCanopyTree extends WorldGenerator {
+    public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+        int var6 = Math.max(var2.nextInt(3 - Math.round(Personalization.entropy * 2)) + var2.nextInt(2) + 6 - Math.round(Personalization.entropy * 3), 5);
+        boolean var7 = true;
+
+        if (var4 >= 1) {
+            int var10;
+            int var11;
+
+            for (int var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
+                byte var9 = 1;
+
+                if (var8 == var4) {
+                    var9 = 0;
+                }
+
+                if (var8 >= var4 + 1 + var6 - 2) {
+                    var9 = 2;
+                }
+
+                for (var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
+                    for (var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
+                        if (var8 >= 0) {
+                            Block var12 = Block.blocksList[var1.getBlockId(var10, var8, var11)];
+
+                            if (!this.func_150523_a(var12)) {
+                                var7 = false;
+                            }
+                        } else {
+                            var7 = false;
+                        }
+                    }
+                }
+            }
+
+            if (!var7) {
+                return false;
+            } else {
+                int var20 = var1.getBlockId(var3, var4 - 1, var5);
+
+                if ((var20 == Block.grass.blockID || var20 == Block.dirt.blockID)) {
+                    this.setBlock(var1, var3, var4 - 1, var5, Block.dirt.blockID);
+                    this.setBlock(var1, var3 + 1, var4 - 1, var5, Block.dirt.blockID);
+                    this.setBlock(var1, var3 + 1, var4 - 1, var5 + 1, Block.dirt.blockID);
+                    this.setBlock(var1, var3, var4 - 1, var5 + 1, Block.dirt.blockID);
+                    int var21 = var2.nextInt(4);
+                    var10 = var6 - var2.nextInt(4);
+                    var11 = 2 - var2.nextInt(3);
+                    int var22 = var3;
+                    int var13 = var5;
+                    int var14 = 0;
+                    int var15;
+                    int var16;
+
+                    for (var15 = 0; var15 < var6; ++var15) {
+                        var16 = var4 + var15;
+
+                        if (var15 >= var10 && var11 > 0) {
+                            var22 += PistonBlockTextures.offsetsXForSide[var21];
+                            var13 += PistonBlockTextures.offsetsZForSide[var21];
+                            --var11;
+                        }
+
+                        Material var17 = var1.getBlockMaterial(var22, var16, var13);
+
+                        if (var17 == Material.air
+                                || var17 == Material.leaves) {
+                            this.setBlockAndMetadata(var1, var22, var16, var13, Block.wood.blockID, 5);
+                            this.setBlockAndMetadata(var1, var22 + 1, var16, var13, Block.wood.blockID, 5);
+                            this.setBlockAndMetadata(var1, var22, var16, var13 + 1, Block.wood.blockID, 5);
+                            this.setBlockAndMetadata(var1, var22 + 1, var16, var13 + 1, Block.wood.blockID, 5);
+                            var14 = var16;
+                        }
+                    }
+
+                    for (var15 = -2; var15 <= 0; ++var15) {
+                        for (var16 = -2; var16 <= 0; ++var16) {
+                            byte var23 = -1;
+                            this.func_150526_a(var1, var22 + var15, var14 + var23, var13 + var16);
+                            this.func_150526_a(
+                                    var1, 1 + var22 - var15, var14 + var23, var13 + var16);
+                            this.func_150526_a(
+                                    var1, var22 + var15, var14 + var23, 1 + var13 - var16);
+                            this.func_150526_a(
+                                    var1, 1 + var22 - var15, var14 + var23, 1 + var13 - var16);
+
+                            if ((var15 > -2 || var16 > -1) && (var15 != -1 || var16 != -2)) {
+                                byte var24 = 1;
+                                this.func_150526_a(
+                                        var1, var22 + var15, var14 + var24, var13 + var16);
+                                this.func_150526_a(
+                                        var1, 1 + var22 - var15, var14 + var24, var13 + var16);
+                                this.func_150526_a(
+                                        var1, var22 + var15, var14 + var24, 1 + var13 - var16);
+                                this.func_150526_a(
+                                        var1, 1 + var22 - var15, var14 + var24, 1 + var13 - var16);
+                            }
+                        }
+                    }
+
+                    if (var2.nextBoolean()) {
+                        this.func_150526_a(var1, var22, var14 + 2, var13);
+                        this.func_150526_a(var1, var22 + 1, var14 + 2, var13);
+                        this.func_150526_a(var1, var22 + 1, var14 + 2, var13 + 1);
+                        this.func_150526_a(var1, var22, var14 + 2, var13 + 1);
+                    }
+
+                    for (var15 = -3; var15 <= 4; ++var15) {
+                        for (var16 = -3; var16 <= 4; ++var16) {
+                            if ((var15 != -3 || var16 != -3) && (var15 != -3 || var16 != 4)
+                                    && (var15 != 4 || var16 != -3) && (var15 != 4 || var16 != 4)
+                                    && (Math.abs(var15) < 3 || Math.abs(var16) < 3)) {
+                                this.func_150526_a(var1, var22 + var15, var14, var13 + var16);
+                            }
+                        }
+                    }
+
+                    for (var15 = -1; var15 <= 2; ++var15) {
+                        for (var16 = -1; var16 <= 2; ++var16) {
+                            if ((var15 < 0 || var15 > 1 || var16 < 0 || var16 > 1)
+                                    && var2.nextInt(3) <= 0) {
+                                int var25 = var2.nextInt(3) + 2;
+                                int var18;
+
+                                for (var18 = 0; var18 < var25; ++var18) {
+                                    this.setBlockAndMetadata(var1, var3 + var15, var14 - var18 - 1,
+                                            var5 + var16, Block.wood.blockID, 5);
+                                }
+
+                                int var19;
+
+                                for (var18 = -1; var18 <= 1; ++var18) {
+                                    for (var19 = -1; var19 <= 1; ++var19) {
+                                        this.func_150526_a(var1, var22 + var15 + var18, var14 - 0,
+                                                var13 + var16 + var19);
+                                    }
+                                }
+
+                                for (var18 = -2; var18 <= 2; ++var18) {
+                                    for (var19 = -2; var19 <= 2; ++var19) {
+                                        if (Math.abs(var18) != 2 || Math.abs(var19) != 2) {
+                                            this.func_150526_a(var1, var22 + var15 + var18,
+                                                    var14 - 1, var13 + var16 + var19);
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+
+                    return true;
+                } else {
+                    return false;
+                }
+            }
+        } else {
+            return false;
+        }
+    }
+
+    private void func_150526_a(World var1, int var2, int var3, int var4) {
+        if (var1.isAirBlock(var2, var3, var4)) {
+            this.setBlockAndMetadata(var1, var2, var3, var4, Block.leaves.blockID, 5);
+        }
+    }
+
+    protected boolean func_150523_a(Block var1) {
+        return var1 == null || var1.blockMaterial == Material.leaves
+                || var1 == Block.grass || var1 == Block.dirt || var1 == Block.wood
+                || var1 == Block.sapling || var1 == Block.field_35278_bv;
+    }
+}
--- net/minecraft/src/Chunk.java
+++ net/minecraft/src/Chunk.java
@@ -7,65 +7,92 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
+import java.util.function.Function;
 
 public class Chunk {
 	public static boolean isLit;
-	public byte[] blocks;
-	public int[] field_35845_c;
-	public boolean[] field_35844_d;
+	private ExtendedBlockStorage[] storageArrays;
+	private byte[] blockBiomeArray;
+	public int[] precipitationHeightMap;
+	public boolean[] updateSkylightColumns;
 	public boolean isChunkLoaded;
 	public World worldObj;
-	public NibbleArray data;
-	public NibbleArray skylightMap;
-	public NibbleArray blocklightMap;
-	public byte[] heightMap;
-	public int lowestBlockHeight;
+	public int[] heightMap;
 	public final int xPosition;
 	public final int zPosition;
+	private boolean isGapLightingUpdated;
 	public Map chunkTileEntityMap;
-	public List[] entities;
+	public List[] entityLists;
 	public boolean isTerrainPopulated;
 	public boolean isModified;
 	public boolean neverSave;
+	public boolean playerModified;
 	public boolean hasEntities;
 	public long lastSaveTime;
+	public boolean field_50120_o;
+	public int updateHash = Personalization.getUpdateHash();
+	private int queuedLightChecks;
 	boolean field_35846_u;
 
 	public Chunk(World var1, int var2, int var3) {
-		this.field_35845_c = new int[256];
-		this.field_35844_d = new boolean[256];
+		this.storageArrays = new ExtendedBlockStorage[4];
+		this.blockBiomeArray = new byte[256];
+		this.precipitationHeightMap = new int[256];
+		this.updateSkylightColumns = new boolean[256];
+		this.isGapLightingUpdated = false;
 		this.chunkTileEntityMap = new HashMap();
 		this.isTerrainPopulated = false;
 		this.isModified = false;
 		this.hasEntities = false;
 		this.lastSaveTime = 0L;
+		this.field_50120_o = false;
+		this.queuedLightChecks = 4096;
 		this.field_35846_u = false;
-		var1.getClass();
-		this.entities = new List[128 / 16];
+		this.entityLists = new List[4];
 		this.worldObj = var1;
 		this.xPosition = var2;
 		this.zPosition = var3;
-		this.heightMap = new byte[256];
+		this.heightMap = new int[256];
 
-		for(int var4 = 0; var4 < this.entities.length; ++var4) {
-			this.entities[var4] = new ArrayList();
+		for(int var4 = 0; var4 < this.entityLists.length; ++var4) {
+			this.entityLists[var4] = new ArrayList();
 		}
 
-		Arrays.fill(this.field_35845_c, -999);
+		Arrays.fill(this.precipitationHeightMap, -999);
+		Arrays.fill(this.blockBiomeArray, (byte)-1);
 	}
 
 	public Chunk(World var1, byte[] var2, int var3, int var4) {
+		this(var1, var2, null, var3, var4);
+	}
+
+	public Chunk(World var1, byte[] var2, byte[] var2a, int var3, int var4) {
 		this(var1, var3, var4);
-		this.blocks = var2;
-		int var10003 = var2.length;
-		var1.getClass();
-		this.data = new NibbleArray(var10003, 7);
-		var10003 = var2.length;
-		var1.getClass();
-		this.skylightMap = new NibbleArray(var10003, 7);
-		var10003 = var2.length;
-		var1.getClass();
-		this.blocklightMap = new NibbleArray(var10003, 7);
+		int var5 = var2.length / 256;
+		int height = var2.length >> 8;
+
+		for(int var6 = 0; var6 < 16; ++var6) {
+			for(int var7 = 0; var7 < 16; ++var7) {
+				for(int var8 = 0; var8 < var5; ++var8) {
+					int offset = var6 * 16 * height + var7 * height + var8;
+					byte var9 = var2[offset];
+					if(var9 != 0) {
+						byte var9a = var2a != null ? var2a[offset] : 0;
+						int var10 = var8 >> 4;
+						if(var10 >= this.storageArrays.length) {
+							this.resizeStorage(var10 + 1);
+						}
+						if(this.storageArrays[var10] == null) {
+							this.storageArrays[var10] = new ExtendedBlockStorage(var10 << 4);
+						}
+
+						this.storageArrays[var10].setExtBlockID(var6, var8 & 15, var7, var9);
+						this.storageArrays[var10].setExtBlockMetadata(var6, var8 & 15, var7, var9a);
+					}
+				}
+			}
+		}
+
 	}
 
 	public boolean isAtLocation(int var1, int var2) {
@@ -73,79 +100,81 @@
 	}
 
 	public int getHeightValue(int var1, int var2) {
-		return this.heightMap[var2 << 4 | var1] & 255;
-	}
-
-	public void func_1014_a() {
+		return this.heightMap[var2 << 4 | var1];
+	}
+
+	public int getTopFilledSegment() {
+		for(int var1 = this.storageArrays.length - 1; var1 >= 0; --var1) {
+			if(this.storageArrays[var1] != null) {
+				return this.storageArrays[var1].getYLocation();
+			}
+		}
+
+		return 0;
+	}
+
+	public ExtendedBlockStorage[] getBlockStorageArray() {
+		return this.storageArrays;
 	}
 
 	public void generateHeightMap() {
-		this.worldObj.getClass();
-		int var1 = 128 - 1;
+		int var1 = this.getTopFilledSegment();
 
 		for(int var2 = 0; var2 < 16; ++var2) {
 			for(int var3 = 0; var3 < 16; ++var3) {
-				this.worldObj.getClass();
-				int var4 = 128 - 1;
-				this.worldObj.getClass();
-				int var10000 = var2 << 11;
-				this.worldObj.getClass();
-
-				for(int var5 = var10000 | var3 << 7; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1] & 255] == 0; --var4) {
-				}
-
-				this.heightMap[var3 << 4 | var2] = (byte)var4;
-				if(var4 < var1) {
-					var1 = var4;
+				this.precipitationHeightMap[var2 + (var3 << 4)] = -999;
+
+				for(int var4 = var1 + 16 - 1; var4 > 0; --var4) {
+					int var5 = this.getBlockID(var2, var4 - 1, var3);
+					if(Block.lightOpacity[var5] != 0) {
+						this.heightMap[var3 << 4 | var2] = var4;
+						break;
+					}
 				}
 			}
 		}
 
-		this.lowestBlockHeight = var1;
 		this.isModified = true;
 	}
 
 	public void generateSkylightMap() {
-		this.worldObj.getClass();
-		int var1 = 128 - 1;
+		int var1 = this.getTopFilledSegment();
 
 		int var2;
 		int var3;
 		for(var2 = 0; var2 < 16; ++var2) {
 			for(var3 = 0; var3 < 16; ++var3) {
-				this.worldObj.getClass();
-				int var4 = 128 - 1;
-				this.worldObj.getClass();
-				int var10000 = var2 << 11;
-				this.worldObj.getClass();
-
-				int var5;
-				for(var5 = var10000 | var3 << 7; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1] & 255] == 0; --var4) {
-				}
-
-				this.heightMap[var3 << 4 | var2] = (byte)var4;
-				if(var4 < var1) {
-					var1 = var4;
+				this.precipitationHeightMap[var2 + (var3 << 4)] = -999;
+
+				int var4;
+				for(var4 = var1 + 16 - 1; var4 > 0; --var4) {
+					if(this.getBlockLightOpacity(var2, var4 - 1, var3) != 0) {
+						this.heightMap[var3 << 4 | var2] = var4;
+						break;
+					}
 				}
 
 				if(!this.worldObj.worldProvider.hasNoSky) {
-					int var6 = 15;
-					this.worldObj.getClass();
-					int var7 = 128 - 1;
+					var4 = 15;
+					int var5 = var1 + 16 - 1;
 
 					do {
-						var6 -= Block.lightOpacity[this.blocks[var5 + var7] & 255];
-						if(var6 > 0) {
-							this.skylightMap.setNibble(var2, var7, var3, var6);
+						var4 -= this.getBlockLightOpacity(var2, var5, var3);
+						if(var4 > 0) {
+							ExtendedBlockStorage var6 = this.storageArrays[var5 >> 4];
+							if(var6 != null) {
+								var6.setExtSkylightValue(var2, var5 & 15, var3, var4);
+								this.worldObj.func_48464_p((this.xPosition << 4) + var2, var5, (this.zPosition << 4) + var3);
+							}
 						}
 
-						--var7;
-					} while(var7 > 0 && var6 > 0);
+						--var5;
+					} while(var5 > 0 && var4 > 0);
 				}
 			}
 		}
 
-		this.lowestBlockHeight = var1;
+		this.isModified = true;
 
 		for(var2 = 0; var2 < 16; ++var2) {
 			for(var3 = 0; var3 < 16; ++var3) {
@@ -153,25 +182,22 @@
 			}
 		}
 
-		this.isModified = true;
 	}
 
 	public void func_4143_d() {
 	}
 
 	private void propagateSkylightOcclusion(int var1, int var2) {
-		this.field_35844_d[var1 + var2 * 16] = true;
+		this.updateSkylightColumns[var1 + var2 * 16] = true;
+		this.isGapLightingUpdated = true;
 	}
 
-	private void func_35839_k() {
-		World var10000 = this.worldObj;
-		int var10001 = this.xPosition * 16 + 8;
-		this.worldObj.getClass();
-		if(var10000.doChunksNearChunkExist(var10001, 128 / 2, this.zPosition * 16 + 8, 16)) {
+	private void updateSkylight_do() {
+		if(this.worldObj.doChunksNearChunkExist(this.xPosition * 16 + 8, 0, this.zPosition * 16 + 8, 16)) {
 			for(int var1 = 0; var1 < 16; ++var1) {
 				for(int var2 = 0; var2 < 16; ++var2) {
-					if(this.field_35844_d[var1 + var2 * 16]) {
-						this.field_35844_d[var1 + var2 * 16] = false;
+					if(this.updateSkylightColumns[var1 + var2 * 16]) {
+						this.updateSkylightColumns[var1 + var2 * 16] = false;
 						int var3 = this.getHeightValue(var1, var2);
 						int var4 = this.xPosition * 16 + var1;
 						int var5 = this.zPosition * 16 + var2;
@@ -191,9 +217,7 @@
 							var6 = var9;
 						}
 
-						this.field_35846_u = true;
 						this.checkSkylightNeighborHeight(var4, var5, var6);
-						this.field_35846_u = true;
 						this.checkSkylightNeighborHeight(var4 - 1, var5, var3);
 						this.checkSkylightNeighborHeight(var4 + 1, var5, var3);
 						this.checkSkylightNeighborHeight(var4, var5 - 1, var3);
@@ -201,6 +225,8 @@
 					}
 				}
 			}
+
+			this.isGapLightingUpdated = false;
 		}
 
 	}
@@ -208,304 +234,292 @@
 	private void checkSkylightNeighborHeight(int var1, int var2, int var3) {
 		int var4 = this.worldObj.getHeightValue(var1, var2);
 		if(var4 > var3) {
-			this.func_35842_d(var1, var2, var3, var4 + 1);
+			this.updateSkylightNeighborHeight(var1, var2, var3, var4 + 1);
 		} else if(var4 < var3) {
-			this.func_35842_d(var1, var2, var4, var3 + 1);
+			this.updateSkylightNeighborHeight(var1, var2, var4, var3 + 1);
 		}
 
 	}
 
-	private void func_35842_d(int var1, int var2, int var3, int var4) {
-		if(var4 > var3) {
-			World var10000 = this.worldObj;
-			this.worldObj.getClass();
-			if(var10000.doChunksNearChunkExist(var1, 128 / 2, var2, 16)) {
-				for(int var5 = var3; var5 < var4; ++var5) {
-					this.worldObj.func_35459_c(EnumSkyBlock.Sky, var1, var5, var2);
-				}
-
-				this.isModified = true;
+	private void updateSkylightNeighborHeight(int var1, int var2, int var3, int var4) {
+		if(var4 > var3 && this.worldObj.doChunksNearChunkExist(var1, 0, var2, 16)) {
+			for(int var5 = var3; var5 < var4; ++var5) {
+				this.worldObj.func_35459_c(EnumSkyBlock.Sky, var1, var5, var2);
 			}
+
+			this.isModified = true;
 		}
 
 	}
 
 	private void relightBlock(int var1, int var2, int var3) {
-		int var4 = this.heightMap[var3 << 4 | var1] & 255;
+		int var4 = this.heightMap[var3 << 4 | var1];
 		int var5 = var4;
 		if(var2 > var4) {
 			var5 = var2;
 		}
 
-		this.worldObj.getClass();
-		int var10000 = var1 << 11;
-		this.worldObj.getClass();
-
-		for(int var6 = var10000 | var3 << 7; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1] & 255] == 0; --var5) {
+		while(var5 > 0 && this.getBlockLightOpacity(var1, var5 - 1, var3) == 0) {
+			--var5;
 		}
 
 		if(var5 != var4) {
 			this.worldObj.markBlocksDirtyVertical(var1, var3, var5, var4);
-			this.heightMap[var3 << 4 | var1] = (byte)var5;
-			int var7;
+			this.heightMap[var3 << 4 | var1] = var5;
+			int var6 = this.xPosition * 16 + var1;
+			int var7 = this.zPosition * 16 + var3;
 			int var8;
-			int var9;
-			if(var5 < this.lowestBlockHeight) {
-				this.lowestBlockHeight = var5;
-			} else {
-				this.worldObj.getClass();
-				var7 = 128 - 1;
-
-				for(var8 = 0; var8 < 16; ++var8) {
-					for(var9 = 0; var9 < 16; ++var9) {
-						if((this.heightMap[var9 << 4 | var8] & 255) < var7) {
-							var7 = this.heightMap[var9 << 4 | var8] & 255;
-						}
-					}
-				}
-
-				this.lowestBlockHeight = var7;
-			}
-
-			var7 = this.xPosition * 16 + var1;
-			var8 = this.zPosition * 16 + var3;
-			if(var5 < var4) {
-				for(var9 = var5; var9 < var4; ++var9) {
-					this.skylightMap.setNibble(var1, var9, var3, 15);
-				}
-			} else {
-				for(var9 = var4; var9 < var5; ++var9) {
-					this.skylightMap.setNibble(var1, var9, var3, 0);
-				}
-			}
-
-			for(var9 = 15; var5 > 0 && var9 > 0; this.skylightMap.setNibble(var1, var5, var3, var9)) {
-				--var5;
-				int var11 = Block.lightOpacity[this.getBlockID(var1, var5, var3)];
-				if(var11 == 0) {
-					var11 = 1;
-				}
-
-				var9 -= var11;
-				if(var9 < 0) {
-					var9 = 0;
-				}
-			}
-
-			byte var15 = this.heightMap[var3 << 4 | var1];
-			int var12 = var4;
-			int var13 = var15;
-			if(var15 < var4) {
-				var12 = var15;
+			int var12;
+			if(!this.worldObj.worldProvider.hasNoSky) {
+				ExtendedBlockStorage var9;
+				if(var5 < var4) {
+					for(var8 = var5; var8 < var4; ++var8) {
+						var9 = this.storageArrays[var8 >> 4];
+						if(var9 != null) {
+							var9.setExtSkylightValue(var1, var8 & 15, var3, 15);
+							this.worldObj.func_48464_p((this.xPosition << 4) + var1, var8, (this.zPosition << 4) + var3);
+						}
+					}
+				} else {
+					for(var8 = var4; var8 < var5; ++var8) {
+						var9 = this.storageArrays[var8 >> 4];
+						if(var9 != null) {
+							var9.setExtSkylightValue(var1, var8 & 15, var3, 0);
+							this.worldObj.func_48464_p((this.xPosition << 4) + var1, var8, (this.zPosition << 4) + var3);
+						}
+					}
+				}
+
+				var8 = 15;
+
+				while(var5 > 0 && var8 > 0) {
+					--var5;
+					var12 = this.getBlockLightOpacity(var1, var5, var3);
+					if(var12 == 0) {
+						var12 = 1;
+					}
+
+					var8 -= var12;
+					if(var8 < 0) {
+						var8 = 0;
+					}
+
+					ExtendedBlockStorage var10 = this.storageArrays[var5 >> 4];
+					if(var10 != null) {
+						var10.setExtSkylightValue(var1, var5 & 15, var3, var8);
+					}
+				}
+			}
+
+			var8 = this.heightMap[var3 << 4 | var1];
+			var12 = var4;
+			int var13 = var8;
+			if(var8 < var4) {
+				var12 = var8;
 				var13 = var4;
 			}
 
-			this.func_35842_d(var7 - 1, var8, var12, var13);
-			this.func_35842_d(var7 + 1, var8, var12, var13);
-			this.func_35842_d(var7, var8 - 1, var12, var13);
-			this.func_35842_d(var7, var8 + 1, var12, var13);
-			this.func_35842_d(var7, var8, var12, var13);
+			if(!this.worldObj.worldProvider.hasNoSky) {
+				this.updateSkylightNeighborHeight(var6 - 1, var7, var12, var13);
+				this.updateSkylightNeighborHeight(var6 + 1, var7, var12, var13);
+				this.updateSkylightNeighborHeight(var6, var7 - 1, var12, var13);
+				this.updateSkylightNeighborHeight(var6, var7 + 1, var12, var13);
+				this.updateSkylightNeighborHeight(var6, var7, var12, var13);
+			}
+
 			this.isModified = true;
 		}
+	}
+
+	public int getBlockLightOpacity(int var1, int var2, int var3) {
+		return Block.lightOpacity[this.getBlockID(var1, var2, var3)];
 	}
 
 	public int getBlockID(int var1, int var2, int var3) {
-		byte[] var10000 = this.blocks;
-		this.worldObj.getClass();
-		int var10001 = var1 << 11;
-		this.worldObj.getClass();
-		return var10000[var10001 | var3 << 7 | var2] & 255;
-	}
-
-	public boolean setBlockIDWithMetadata(int var1, int var2, int var3, int var4, int var5) {
-		byte var6 = (byte)var4;
-		int var7 = var3 << 4 | var1;
-		if(var2 >= this.field_35845_c[var7] - 1) {
-			this.field_35845_c[var7] = -999;
+		if(var2 >> 4 >= this.storageArrays.length) {
+			return 0;
+		} else {
+			ExtendedBlockStorage var4 = this.storageArrays[var2 >> 4];
+			return var4 != null ? var4.getExtBlockID(var1, var2 & 15, var3) : 0;
 		}
+	}
 
-		int var8 = this.heightMap[var3 << 4 | var1] & 255;
-		byte[] var10000 = this.blocks;
-		this.worldObj.getClass();
-		int var10001 = var1 << 11;
-		this.worldObj.getClass();
-		int var9 = var10000[var10001 | var3 << 7 | var2] & 255;
-		if(var9 == var4 && this.data.getNibble(var1, var2, var3) == var5) {
-			return false;
+	public int getBlockMetadata(int var1, int var2, int var3) {
+		if(var2 >> 4 >= this.storageArrays.length) {
+			return 0;
 		} else {
-			int var10 = this.xPosition * 16 + var1;
-			int var11 = this.zPosition * 16 + var3;
-			var10000 = this.blocks;
-			this.worldObj.getClass();
-			var10001 = var1 << 11;
-			this.worldObj.getClass();
-			var10000[var10001 | var3 << 7 | var2] = (byte)(var6 & 255);
-			if(var9 != 0 && !this.worldObj.multiplayerWorld) {
-				Block.blocksList[var9].onBlockRemoval(this.worldObj, var10, var2, var11);
-			}
-
-			this.data.setNibble(var1, var2, var3, var5);
-			if(!this.worldObj.worldProvider.hasNoSky) {
-				if(Block.lightOpacity[var6 & 255] != 0) {
-					if(var2 >= var8) {
-						this.relightBlock(var1, var2 + 1, var3);
-					}
-				} else if(var2 == var8 - 1) {
-					this.relightBlock(var1, var2, var3);
-				}
-
-				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var10, var2, var11, var10, var2, var11);
-			}
-
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var10, var2, var11, var10, var2, var11);
-			this.propagateSkylightOcclusion(var1, var3);
-			this.data.setNibble(var1, var2, var3, var5);
-			TileEntity var12;
-			if(var4 != 0) {
-				if(!this.worldObj.multiplayerWorld) {
-					Block.blocksList[var4].onBlockAdded(this.worldObj, var10, var2, var11);
-				}
-
-				if(Block.blocksList[var4] instanceof BlockContainer) {
-					var12 = this.getChunkBlockTileEntity(var1, var2, var3);
-					if(var12 == null) {
-						var12 = ((BlockContainer)Block.blocksList[var4]).getBlockEntity();
-						this.worldObj.setBlockTileEntity(var1, var2, var3, var12);
-					}
-
-					if(var12 != null) {
-						var12.func_35144_b();
-					}
-				}
-			} else if(var9 > 0 && Block.blocksList[var9] instanceof BlockContainer) {
-				var12 = this.getChunkBlockTileEntity(var1, var2, var3);
-				if(var12 != null) {
-					var12.func_35144_b();
-				}
-			}
-
-			this.isModified = true;
-			return true;
+			ExtendedBlockStorage var4 = this.storageArrays[var2 >> 4];
+			return var4 != null ? var4.getExtBlockMetadata(var1, var2 & 15, var3) : 0;
 		}
 	}
 
 	public boolean setBlockID(int var1, int var2, int var3, int var4) {
-		byte var5 = (byte)var4;
+		return this.setBlockIDWithMetadata(var1, var2, var3, var4, 0);
+	}
+
+	public boolean setBlockIDWithMetadata(int var1, int var2, int var3, int var4, int var5) {
+		if ((var2 + 4) >> 4 >= this.storageArrays.length) {
+			this.resizeStorage(((var2 + 4) >> 4) + 1);
+		}
+
 		int var6 = var3 << 4 | var1;
-		if(var2 >= this.field_35845_c[var6] - 1) {
-			this.field_35845_c[var6] = -999;
+		if(var2 >= this.precipitationHeightMap[var6] - 1) {
+			this.precipitationHeightMap[var6] = -999;
 		}
 
-		int var7 = this.heightMap[var6] & 255;
-		byte[] var10000 = this.blocks;
-		this.worldObj.getClass();
-		int var10001 = var1 << 11;
-		this.worldObj.getClass();
-		int var8 = var10000[var10001 | var3 << 7 | var2] & 255;
-		if(var8 == var4) {
+		int var7 = this.heightMap[var6];
+		int var8 = this.getBlockID(var1, var2, var3);
+		if(var8 == var4 && this.getBlockMetadata(var1, var2, var3) == var5) {
 			return false;
 		} else {
-			int var9 = this.xPosition * 16 + var1;
-			int var10 = this.zPosition * 16 + var3;
-			var10000 = this.blocks;
-			this.worldObj.getClass();
-			var10001 = var1 << 11;
-			this.worldObj.getClass();
-			var10000[var10001 | var3 << 7 | var2] = (byte)(var5 & 255);
+			ExtendedBlockStorage var9 = this.storageArrays[var2 >> 4];
+			boolean var10 = false;
+			if(var9 == null) {
+				if(var4 == 0) {
+					return false;
+				}
+
+				var9 = this.storageArrays[var2 >> 4] = new ExtendedBlockStorage(var2 >> 4 << 4);
+				var10 = var2 >= var7;
+			}
+
+			var9.setExtBlockID(var1, var2 & 15, var3, var4);
+			int var11 = this.xPosition * 16 + var1;
+			int var12 = this.zPosition * 16 + var3;
 			if(var8 != 0) {
-				Block.blocksList[var8].onBlockRemoval(this.worldObj, var9, var2, var10);
-			}
-
-			this.data.setNibble(var1, var2, var3, 0);
-			if(Block.lightOpacity[var5 & 255] != 0) {
-				if(var2 >= var7) {
-					this.relightBlock(var1, var2 + 1, var3);
-				}
-			} else if(var2 == var7 - 1) {
-				this.relightBlock(var1, var2, var3);
-			}
-
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var9, var2, var10, var9, var2, var10);
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var9, var2, var10, var9, var2, var10);
-			this.propagateSkylightOcclusion(var1, var3);
-			TileEntity var11;
-			if(var4 != 0) {
 				if(!this.worldObj.multiplayerWorld) {
-					Block.blocksList[var4].onBlockAdded(this.worldObj, var9, var2, var10);
-				}
-
-				if(var4 > 0 && Block.blocksList[var4] instanceof BlockContainer) {
-					var11 = this.getChunkBlockTileEntity(var1, var2, var3);
-					if(var11 == null) {
-						var11 = ((BlockContainer)Block.blocksList[var4]).getBlockEntity();
-						this.worldObj.setBlockTileEntity(var1, var2, var3, var11);
-					}
-
-					if(var11 != null) {
-						var11.func_35144_b();
-					}
-				}
-			} else if(var8 > 0 && Block.blocksList[var8] instanceof BlockContainer) {
-				var11 = this.getChunkBlockTileEntity(var1, var2, var3);
-				if(var11 != null) {
-					var11.func_35144_b();
-				}
-			}
-
-			this.isModified = true;
-			return true;
-		}
-	}
-
-	public int getBlockMetadata(int var1, int var2, int var3) {
-		return this.data.getNibble(var1, var2, var3);
-	}
-
-	public void setBlockMetadata(int var1, int var2, int var3, int var4) {
-		this.isModified = true;
-		this.data.setNibble(var1, var2, var3, var4);
-		int var5 = this.getBlockID(var1, var2, var3);
-		if(var5 > 0 && Block.blocksList[var5] instanceof BlockContainer) {
-			TileEntity var6 = this.getChunkBlockTileEntity(var1, var2, var3);
-			if(var6 != null) {
-				var6.func_35144_b();
-				var6.field_35145_n = var4;
-			}
-		}
-
+					Block.blocksList[var8].onBlockRemoval(this.worldObj, var11, var2, var12);
+				} else if(Block.blocksList[var8] instanceof BlockContainer && var8 != var4) {
+					this.worldObj.removeBlockTileEntity(var11, var2, var12);
+				}
+			}
+
+			if(var9.getExtBlockID(var1, var2 & 15, var3) != var4) {
+				return false;
+			} else {
+				var9.setExtBlockMetadata(var1, var2 & 15, var3, var5);
+				if(var10) {
+					this.generateSkylightMap();
+				} else {
+					if(Block.lightOpacity[var4 & 4095] > 0) {
+						if(var2 >= var7) {
+							this.relightBlock(var1, var2 + 1, var3);
+						}
+					} else if(var2 == var7 - 1) {
+						this.relightBlock(var1, var2, var3);
+					}
+
+					this.propagateSkylightOcclusion(var1, var3);
+				}
+
+				TileEntity var13;
+				if(var4 != 0) {
+					if(!this.worldObj.multiplayerWorld) {
+						Block.blocksList[var4].onBlockAdded(this.worldObj, var11, var2, var12);
+					}
+
+					if(Block.blocksList[var4] instanceof BlockContainer) {
+						var13 = this.getChunkBlockTileEntity(var1, var2, var3);
+						if(var13 == null) {
+							var13 = ((BlockContainer)Block.blocksList[var4]).getBlockEntity();
+							this.worldObj.setBlockTileEntity(var11, var2, var12, var13);
+						}
+
+						if(var13 != null) {
+							var13.func_35144_b();
+						}
+					}
+				} else if(var8 > 0 && Block.blocksList[var8] instanceof BlockContainer) {
+					var13 = this.getChunkBlockTileEntity(var1, var2, var3);
+					if(var13 != null) {
+						var13.func_35144_b();
+					}
+				}
+
+				this.isModified = true;
+				return true;
+			}
+		}
+	}
+
+	public boolean setBlockMetadata(int var1, int var2, int var3, int var4) {
+		ExtendedBlockStorage var5 = this.storageArrays[var2 >> 4];
+		if(var5 == null) {
+			return false;
+		} else {
+			int var6 = var5.getExtBlockMetadata(var1, var2 & 15, var3);
+			if(var6 == var4) {
+				return false;
+			} else {
+				this.isModified = true;
+				var5.setExtBlockMetadata(var1, var2 & 15, var3, var4);
+				int var7 = var5.getExtBlockID(var1, var2 & 15, var3);
+				if(var7 > 0 && Block.blocksList[var7] instanceof BlockContainer) {
+					TileEntity var8 = this.getChunkBlockTileEntity(var1, var2, var3);
+					if(var8 != null) {
+						var8.func_35144_b();
+						var8.field_35145_n = var4;
+					}
+				}
+
+				return true;
+			}
+		}
 	}
 
 	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
-		return var1 == EnumSkyBlock.Sky ? this.skylightMap.getNibble(var2, var3, var4) : (var1 == EnumSkyBlock.Block ? this.blocklightMap.getNibble(var2, var3, var4) : 0);
+		if (var3 >> 4 >= this.storageArrays.length) {
+			return var1.field_1722_c;
+		}
+
+		ExtendedBlockStorage var5 = this.storageArrays[var3 >> 4];
+		return var5 == null ? var1.field_1722_c : (var1 == EnumSkyBlock.Sky ? var5.getExtSkylightValue(var2, var3 & 15, var4) : (var1 == EnumSkyBlock.Block ? var5.getExtBlocklightValue(var2, var3 & 15, var4) : var1.field_1722_c));
 	}
 
 	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
+		if (var3 >> 4 >= this.storageArrays.length) {
+			this.resizeStorage((var3 >> 4) + 1);
+		}
+
+		ExtendedBlockStorage var6 = this.storageArrays[var3 >> 4];
+		if(var6 == null) {
+			var6 = this.storageArrays[var3 >> 4] = new ExtendedBlockStorage(var3 >> 4 << 4);
+			this.generateSkylightMap();
+		}
+
 		this.isModified = true;
 		if(var1 == EnumSkyBlock.Sky) {
-			this.skylightMap.setNibble(var2, var3, var4, var5);
+			if(!this.worldObj.worldProvider.hasNoSky) {
+				var6.setExtSkylightValue(var2, var3 & 15, var4, var5);
+			}
 		} else {
 			if(var1 != EnumSkyBlock.Block) {
 				return;
 			}
 
-			this.blocklightMap.setNibble(var2, var3, var4, var5);
+			var6.setExtBlocklightValue(var2, var3 & 15, var4, var5);
 		}
 
 	}
 
 	public int getBlockLightValue(int var1, int var2, int var3, int var4) {
-		int var5 = this.skylightMap.getNibble(var1, var2, var3);
-		if(var5 > 0) {
+		if (var2 >> 4 >= this.storageArrays.length || this.storageArrays[var2 >> 4] == null) {
+			return !this.worldObj.worldProvider.hasNoSky && var4 < EnumSkyBlock.Sky.field_1722_c ? EnumSkyBlock.Sky.field_1722_c - var4 : 0;
+		}
+
+		ExtendedBlockStorage var5 = this.storageArrays[var2 >> 4];
+		int var6 = this.worldObj.worldProvider.hasNoSky ? 0 : var5.getExtSkylightValue(var1, var2 & 15, var3);
+		if(var6 > 0) {
 			isLit = true;
 		}
 
-		var5 -= var4;
-		int var6 = this.blocklightMap.getNibble(var1, var2, var3);
-		if(var6 > var5) {
-			var5 = var6;
+		var6 -= var4;
+		int var7 = var5.getExtBlocklightValue(var1, var2 & 15, var3);
+		if(var7 > var6) {
+			var6 = var7;
 		}
 
-		return var5;
+		return var6;
 	}
 
 	public void addEntity(Entity var1) {
@@ -522,15 +536,15 @@
 			var4 = 0;
 		}
 
-		if(var4 >= this.entities.length) {
-			var4 = this.entities.length - 1;
+		if(var4 >= this.entityLists.length) {
+			var4 = this.entityLists.length - 1;
 		}
 
 		var1.addedToChunk = true;
 		var1.chunkCoordX = this.xPosition;
 		var1.chunkCoordY = var4;
 		var1.chunkCoordZ = this.zPosition;
-		this.entities[var4].add(var1);
+		this.entityLists[var4].add(var1);
 	}
 
 	public void removeEntity(Entity var1) {
@@ -542,15 +556,15 @@
 			var2 = 0;
 		}
 
-		if(var2 >= this.entities.length) {
-			var2 = this.entities.length - 1;
+		if(var2 >= this.entityLists.length) {
+			var2 = this.entityLists.length - 1;
 		}
 
-		this.entities[var2].remove(var1);
+		this.entityLists[var2].remove(var1);
 	}
 
 	public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-		return var2 >= (this.heightMap[var3 << 4 | var1] & 255);
+		return var2 >= this.heightMap[var3 << 4 | var1];
 	}
 
 	public TileEntity getChunkBlockTileEntity(int var1, int var2, int var3) {
@@ -558,7 +572,7 @@
 		TileEntity var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
 		if(var5 == null) {
 			int var6 = this.getBlockID(var1, var2, var3);
-			if(!Block.isBlockContainer[var6]) {
+			if(var6 <= 0 || !Block.isBlockContainer[var6]) {
 				return null;
 			}
 
@@ -598,8 +612,6 @@
 		if(this.getBlockID(var1, var2, var3) != 0 && Block.blocksList[this.getBlockID(var1, var2, var3)] instanceof BlockContainer) {
 			var4.validate();
 			this.chunkTileEntityMap.put(var5, var4);
-		} else {
-			System.out.println("Attempted to place a tile entity where there was no entity tile!");
 		}
 	}
 
@@ -618,8 +630,8 @@
 		this.isChunkLoaded = true;
 		this.worldObj.addTileEntity(this.chunkTileEntityMap.values());
 
-		for(int var1 = 0; var1 < this.entities.length; ++var1) {
-			this.worldObj.addLoadedEntities(this.entities[var1]);
+		for(int var1 = 0; var1 < this.entityLists.length; ++var1) {
+			this.worldObj.addLoadedEntities(this.entityLists[var1]);
 		}
 
 	}
@@ -633,8 +645,8 @@
 			this.worldObj.func_35455_a(var2);
 		}
 
-		for(int var3 = 0; var3 < this.entities.length; ++var3) {
-			this.worldObj.unloadEntities(this.entities[var3]);
+		for(int var3 = 0; var3 < this.entityLists.length; ++var3) {
+			this.worldObj.unloadEntities(this.entityLists[var3]);
 		}
 
 	}
@@ -650,17 +662,26 @@
 			var4 = 0;
 		}
 
-		if(var5 >= this.entities.length) {
-			var5 = this.entities.length - 1;
+		if(var5 >= this.entityLists.length) {
+			var5 = this.entityLists.length - 1;
 		}
 
 		for(int var6 = var4; var6 <= var5; ++var6) {
-			List var7 = this.entities[var6];
+			List var7 = this.entityLists[var6];
 
 			for(int var8 = 0; var8 < var7.size(); ++var8) {
 				Entity var9 = (Entity)var7.get(var8);
 				if(var9 != var1 && var9.boundingBox.intersectsWith(var2)) {
 					var3.add(var9);
+					Entity[] var10 = var9.func_40048_X();
+					if(var10 != null) {
+						for(int var11 = 0; var11 < var10.length; ++var11) {
+							var9 = var10[var11];
+							if(var9 != var1 && var9.boundingBox.intersectsWith(var2)) {
+								var3.add(var9);
+							}
+						}
+					}
 				}
 			}
 		}
@@ -672,14 +693,18 @@
 		int var5 = MathHelper.floor_double((var2.maxY + 2.0D) / 16.0D);
 		if(var4 < 0) {
 			var4 = 0;
+		} else if(var4 >= this.entityLists.length) {
+			var4 = this.entityLists.length - 1;
 		}
 
-		if(var5 >= this.entities.length) {
-			var5 = this.entities.length - 1;
+		if(var5 >= this.entityLists.length) {
+			var5 = this.entityLists.length - 1;
+		} else if(var5 < 0) {
+			var5 = 0;
 		}
 
 		for(int var6 = var4; var6 <= var5; ++var6) {
-			List var7 = this.entities[var6];
+			List var7 = this.entityLists[var6];
 
 			for(int var8 = 0; var8 < var7.size(); ++var8) {
 				Entity var9 = (Entity)var7.get(var8);
@@ -694,98 +719,39 @@
 	public boolean needsSaving(boolean var1) {
 		if(this.neverSave) {
 			return false;
-		} else {
-			if(var1) {
-				if(this.hasEntities && this.worldObj.getWorldTime() != this.lastSaveTime) {
-					return true;
-				}
-			} else if(this.hasEntities && this.worldObj.getWorldTime() >= this.lastSaveTime + 600L) {
+		} else if(var1) {
+			if(this.hasEntities && this.worldObj.getWorldTime() != this.lastSaveTime) {
 				return true;
 			}
-
-			return this.isModified;
-		}
-	}
-
-	public int setChunkData(byte[] var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8) {
-		int var9;
-		int var10;
-		int var11;
-		int var12;
-		int var10000;
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				this.worldObj.getClass();
-				var10000 = var9 << 11;
-				this.worldObj.getClass();
-				var11 = var10000 | var10 << 7 | var3;
-				var12 = var6 - var3;
-				System.arraycopy(var1, var8, this.blocks, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		this.generateHeightMap();
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				this.worldObj.getClass();
-				var10000 = var9 << 11;
-				this.worldObj.getClass();
-				var11 = (var10000 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.data.data, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				this.worldObj.getClass();
-				var10000 = var9 << 11;
-				this.worldObj.getClass();
-				var11 = (var10000 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.blocklightMap.data, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				this.worldObj.getClass();
-				var10000 = var9 << 11;
-				this.worldObj.getClass();
-				var11 = (var10000 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.skylightMap.data, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		Iterator var13 = this.chunkTileEntityMap.values().iterator();
-
-		while(var13.hasNext()) {
-			TileEntity var14 = (TileEntity)var13.next();
-			var14.func_35144_b();
-		}
-
-		return var8;
-	}
-
-	public Random func_997_a(long var1) {
+		} else if(this.hasEntities && this.worldObj.getWorldTime() >= this.lastSaveTime + 600L) {
+			return true;
+		}
+
+		return this.isModified;
+	}
+
+	public Random getRandomWithSeed(long var1) {
 		return new Random(this.worldObj.getRandomSeed() + (long)(this.xPosition * this.xPosition * 4987142) + (long)(this.xPosition * 5947611) + (long)(this.zPosition * this.zPosition) * 4392871L + (long)(this.zPosition * 389711) ^ var1);
 	}
 
-	public boolean func_21167_h() {
+	public boolean isEmpty() {
 		return false;
 	}
 
-	public void func_25124_i() {
-		ChunkBlockMap.func_26002_a(this.blocks);
+	public void removeUnknownBlocks() {
+		ExtendedBlockStorage[] var1 = this.storageArrays;
+		int var2 = var1.length;
+
+		for(int var3 = 0; var3 < var2; ++var3) {
+			ExtendedBlockStorage var4 = var1[var3];
+			if(var4 != null) {
+				var4.func_48711_e();
+			}
+		}
+
 	}
 
-	public void func_35843_a(IChunkProvider var1, IChunkProvider var2, int var3, int var4) {
+	public void populateChunk(IChunkProvider var1, IChunkProvider var2, int var3, int var4) {
 		if(!this.isTerrainPopulated && var1.chunkExists(var3 + 1, var4 + 1) && var1.chunkExists(var3, var4 + 1) && var1.chunkExists(var3 + 1, var4)) {
 			var1.populate(var2, var3, var4);
 		}
@@ -804,12 +770,11 @@
 
 	}
 
-	public int func_35840_c(int var1, int var2) {
+	public int getPrecipitationHeight(int var1, int var2) {
 		int var3 = var1 | var2 << 4;
-		int var4 = this.field_35845_c[var3];
+		int var4 = this.precipitationHeightMap[var3];
 		if(var4 == -999) {
-			this.worldObj.getClass();
-			int var5 = 128 - 1;
+			int var5 = this.getTopFilledSegment() + 15;
 			var4 = -1;
 
 			while(true) {
@@ -823,7 +788,7 @@
 					}
 				}
 
-				this.field_35845_c[var3] = var4;
+				this.precipitationHeightMap[var3] = var4;
 				break;
 			}
 		}
@@ -831,7 +796,163 @@
 		return var4;
 	}
 
-	public void func_35841_j() {
-		this.func_35839_k();
+	public void updateSkylight() {
+		if(this.isGapLightingUpdated && !this.worldObj.worldProvider.hasNoSky) {
+			this.updateSkylight_do();
+		}
+
+	}
+
+	public ChunkCoordIntPair getChunkCoordIntPair() {
+		return new ChunkCoordIntPair(this.xPosition, this.zPosition);
+	}
+
+	public boolean getAreLevelsEmpty(int var1, int var2) {
+		if(var1 < 0) {
+			var1 = 0;
+		}
+
+		for(int var3 = var1; var3 <= var2; var3 += 16) {
+			ExtendedBlockStorage var4 = this.storageArrays[var3 >> 4];
+			if(var4 != null && !var4.getIsEmpty()) {
+				return false;
+			}
+		}
+
+		return true;
+	}
+
+	public void setStorageArrays(ExtendedBlockStorage[] var1) {
+		this.storageArrays = var1;
+		int height = var1.length;
+		while (height > 0 && (var1[height - 1] == null || var1[height - 1].getIsEmpty())) {
+			height--;
+		}
+		this.resizeStorage(height);
+	}
+
+	public void func_48494_a(byte[] var1, int var2, int var3, boolean var4) {
+		int var5 = 0;
+
+		int var6;
+		for(var6 = 0; var6 < this.storageArrays.length; ++var6) {
+			if((var2 & 1 << var6) != 0) {
+				if(this.storageArrays[var6] == null) {
+					this.storageArrays[var6] = new ExtendedBlockStorage(var6 << 4);
+				}
+
+				byte[] var7 = this.storageArrays[var6].func_48692_g();
+				System.arraycopy(var1, var5, var7, 0, var7.length);
+				var5 += var7.length;
+			} else if(var4 && this.storageArrays[var6] != null) {
+				this.storageArrays[var6] = null;
+			}
+		}
+
+		NibbleArray var8;
+		for(var6 = 0; var6 < this.storageArrays.length; ++var6) {
+			if((var2 & 1 << var6) != 0 && this.storageArrays[var6] != null) {
+				var8 = this.storageArrays[var6].func_48697_j();
+				System.arraycopy(var1, var5, var8.data, 0, var8.data.length);
+				var5 += var8.data.length;
+			}
+		}
+
+		for(var6 = 0; var6 < this.storageArrays.length; ++var6) {
+			if((var2 & 1 << var6) != 0 && this.storageArrays[var6] != null) {
+				var8 = this.storageArrays[var6].getBlocklightArray();
+				System.arraycopy(var1, var5, var8.data, 0, var8.data.length);
+				var5 += var8.data.length;
+			}
+		}
+
+		for(var6 = 0; var6 < this.storageArrays.length; ++var6) {
+			if((var2 & 1 << var6) != 0 && this.storageArrays[var6] != null) {
+				var8 = this.storageArrays[var6].getSkylightArray();
+				System.arraycopy(var1, var5, var8.data, 0, var8.data.length);
+				var5 += var8.data.length;
+			}
+		}
+
+		for(var6 = 0; var6 < this.storageArrays.length; ++var6) {
+			if((var3 & 1 << var6) != 0) {
+				if(this.storageArrays[var6] == null) {
+					var5 += 2048;
+				} else {
+					var8 = this.storageArrays[var6].getBlockMSBArray();
+					if(var8 == null) {
+						var8 = this.storageArrays[var6].createBlockMSBArray();
+					}
+
+					System.arraycopy(var1, var5, var8.data, 0, var8.data.length);
+					var5 += var8.data.length;
+				}
+			} else if(var4 && this.storageArrays[var6] != null && this.storageArrays[var6].getBlockMSBArray() != null) {
+				this.storageArrays[var6].func_48715_h();
+			}
+		}
+
+		if(var4) {
+			System.arraycopy(var1, var5, this.blockBiomeArray, 0, this.blockBiomeArray.length);
+			int var10000 = var5 + this.blockBiomeArray.length;
+		}
+
+		for(var6 = 0; var6 < this.storageArrays.length; ++var6) {
+			if(this.storageArrays[var6] != null && (var2 & 1 << var6) != 0) {
+				this.storageArrays[var6].func_48708_d();
+			}
+		}
+
+		this.generateHeightMap();
+		Iterator var10 = this.chunkTileEntityMap.values().iterator();
+
+		while(var10.hasNext()) {
+			TileEntity var9 = (TileEntity)var10.next();
+			var9.func_35144_b();
+		}
+
+	}
+
+	public BiomeGenBase func_48490_a(int var1, int var2, WorldChunkManager var3) {
+		int var4 = this.blockBiomeArray[var2 << 4 | var1] & 255;
+		if(var4 == 255) {
+			BiomeGenBase var5 = var3.getBiomeGenAt((this.xPosition << 4) + var1, (this.zPosition << 4) + var2);
+			var4 = var5.field_35494_y;
+			this.blockBiomeArray[var2 << 4 | var1] = (byte)(var4 & 255);
+		}
+
+		return BiomeGenBase.field_35486_a[var4] == null ? BiomeGenBase.plains : BiomeGenBase.field_35486_a[var4];
+	}
+
+	public byte[] getBiomeArray() {
+		return this.blockBiomeArray;
+	}
+
+	public void setBiomeArray(byte[] var1) {
+		this.blockBiomeArray = var1;
+	}
+
+	public int getMaxHeight() {
+		return this.storageArrays.length << 4;
+	}
+
+	public void resizeStorage(int size) {
+		if (size != this.storageArrays.length) {
+			ExtendedBlockStorage[] newStorageArrays = new ExtendedBlockStorage[size];
+			System.arraycopy(this.storageArrays, 0, newStorageArrays, 0, Math.min(this.storageArrays.length, size));
+			this.storageArrays = newStorageArrays;
+		}
+
+		if (size != this.entityLists.length) {
+			List[] newEntityLists = new List[size];
+			System.arraycopy(this.entityLists, 0, newEntityLists, 0, Math.min(this.entityLists.length, size));
+			this.entityLists = newEntityLists;
+
+			for (int i = 0; i < this.entityLists.length; i++) {
+				if (this.entityLists[i] == null) {
+					this.entityLists[i] = new ArrayList();
+				}
+			}
+		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/GuiControlPanel.java
@@ -1,0 +1,30 @@
+package net.minecraft.src;
+
+public abstract class GuiControlPanel extends GuiScreen {
+	private int animationCounter;
+
+	public void updateScreen() {
+		if (this.animationCounter++ % 2 == 0) {
+			this.game.renderEngine.updateDynamicTextures();
+		}
+	}
+
+	public void drawControlPanelBackground() {
+		int terrain = this.game.renderEngine.getTexture("/terrain.png");
+		this.game.renderEngine.bindTexture(terrain);
+
+		double minX = 14.0D / 16.0D;
+		double maxX = 15.0D / 16.0D;
+		double minY = 0.0D / 16.0D;
+		double maxY = 1.0D / 16.0D;
+
+		Tessellator t = Tessellator.instance;
+		t.startDrawingQuads();
+		t.setColorOpaque_I(0x2F2F5F);
+		t.addVertexWithUV(0.0D, this.height, 0.0D, minX, maxY);
+		t.addVertexWithUV(this.width, this.height, 0.0D, maxX, maxY);
+		t.addVertexWithUV(this.width, 0.0D, 0.0D, maxX, minY);
+		t.addVertexWithUV(0.0D, 0.0D, 0.0D, minX, minY);
+		t.draw();
+	}
+}
--- /dev/null
+++ net/minecraft/src/AnvilSaveConverter.java
@@ -1,0 +1,189 @@
+package net.minecraft.src;
+
+import java.io.DataInput;
+import java.io.DataInputStream;
+import java.io.DataOutput;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class AnvilSaveConverter extends SaveFormatOld {
+	public AnvilSaveConverter(File var1) {
+		super(var1);
+	}
+
+	public String getFormatName() {
+		return "Anvil";
+	}
+
+	public List getSaveList() {
+		ArrayList var1 = new ArrayList();
+		File[] var2 = this.savesDirectory.listFiles();
+		File[] var3 = var2;
+		int var4 = var2.length;
+
+		for(int var5 = 0; var5 < var4; ++var5) {
+			File var6 = var3[var5];
+			if(var6.isDirectory()) {
+				String var7 = var6.getName();
+				WorldInfo var8 = this.getWorldInfo(var7);
+				if(var8 != null && (var8.getSaveVersion() == 19132 || var8.getSaveVersion() == 19133)) {
+					boolean var9 = var8.getSaveVersion() != this.func_48431_c();
+					String var10 = var8.getWorldName();
+					if(var10 == null || MathHelper.stringNullOrLengthZero(var10)) {
+						var10 = var7;
+					}
+
+					long var11 = 0L;
+					var1.add(new SaveFormatComparator(var7, var10, var8.getLastTimePlayed(), var11, var8.func_35918_q(), var9));
+				}
+			}
+		}
+
+		return var1;
+	}
+
+	protected int func_48431_c() {
+		return 19133;
+	}
+
+	public void flushCache() {
+		RegionFileCache.clearRegionFileReferences();
+	}
+
+	public ISaveHandler getSaveLoader(String var1, boolean var2) {
+		return new AnvilSaveHandler(this.savesDirectory, var1, var2);
+	}
+
+	public boolean isOldMapFormat(String var1) {
+		WorldInfo var2 = this.getWorldInfo(var1);
+		return var2 != null && var2.getSaveVersion() != this.func_48431_c();
+	}
+
+	public boolean convertMapFormat(String var1, IProgressUpdate var2) {
+		var2.setLoadingProgress(0);
+		ArrayList var3 = new ArrayList();
+		ArrayList var4 = new ArrayList();
+		ArrayList var5 = new ArrayList();
+		File var6 = new File(this.savesDirectory, var1);
+		File var7 = new File(var6, "DIM-1");
+		File var8 = new File(var6, "DIM1");
+		System.out.println("Scanning folders...");
+		this.func_48432_a(var6, var3);
+		if(var7.exists()) {
+			this.func_48432_a(var7, var4);
+		}
+
+		if(var8.exists()) {
+			this.func_48432_a(var8, var5);
+		}
+
+		int var9 = var3.size() + var4.size() + var5.size();
+		System.out.println("Total conversion count is " + var9);
+		WorldInfo var10 = this.getWorldInfo(var1);
+		Object var11 = new WorldChunkManager(var10.getRandomSeed());
+
+		this.func_48428_a(new File(var6, "region"), var3, (WorldChunkManager)var11, 0, var9, var2);
+		this.func_48428_a(new File(var7, "region"), var4, new WorldChunkManagerHell(BiomeGenBase.hell, 1.0F, 0.0F), var3.size(), var9, var2);
+		this.func_48428_a(new File(var8, "region"), var5, new WorldChunkManagerHell(BiomeGenBase.sky, 0.5F, 0.0F), var3.size() + var4.size(), var9, var2);
+		var10.setSaveVersion(19133);
+
+		this.func_48429_d(var1);
+		ISaveHandler var12 = this.getSaveLoader(var1, false);
+		var12.saveWorldInfo(var10);
+		return true;
+	}
+
+	private void func_48429_d(String var1) {
+		File var2 = new File(this.savesDirectory, var1);
+		if(!var2.exists()) {
+			System.out.println("Warning: Unable to create level.dat_mcr backup");
+		} else {
+			File var3 = new File(var2, "level.dat");
+			if(!var3.exists()) {
+				System.out.println("Warning: Unable to create level.dat_mcr backup");
+			} else {
+				File var4 = new File(var2, "level.dat_mcr");
+				if(!var3.renameTo(var4)) {
+					System.out.println("Warning: Unable to create level.dat_mcr backup");
+				}
+
+			}
+		}
+	}
+
+	private void func_48428_a(File var1, ArrayList var2, WorldChunkManager var3, int var4, int var5, IProgressUpdate var6) {
+		Iterator var7 = var2.iterator();
+
+		while(var7.hasNext()) {
+			File var8 = (File)var7.next();
+			this.func_48430_a(var1, var8, var3, var4, var5, var6);
+			++var4;
+			int var9 = (int)Math.round(100.0D * (double)var4 / (double)var5);
+			var6.setLoadingProgress(var9);
+		}
+
+	}
+
+	private void func_48430_a(File var1, File var2, WorldChunkManager var3, int var4, int var5, IProgressUpdate var6) {
+		try {
+			String var7 = var2.getName();
+			RegionFile var8 = new RegionFile(var2);
+			RegionFile var9 = new RegionFile(new File(var1, var7.substring(0, var7.length() - ".mcr".length()) + ".mca"));
+
+			for(int var10 = 0; var10 < 32; ++var10) {
+				int var11;
+				for(var11 = 0; var11 < 32; ++var11) {
+					if(var8.isChunkSaved(var10, var11) && !var9.isChunkSaved(var10, var11)) {
+						DataInputStream var12 = var8.getChunkDataInputStream(var10, var11);
+						if(var12 == null) {
+							System.out.println("Failed to fetch input stream");
+						} else {
+							NBTTagCompound var13 = CompressedStreamTools.func_1141_a((DataInput)var12);
+							var12.close();
+							NBTTagCompound var14 = var13.getCompoundTag("Level");
+							AnvilConverterData var15 = ChunkLoader.load(var14);
+							NBTTagCompound var16 = new NBTTagCompound();
+							NBTTagCompound var17 = new NBTTagCompound();
+							var16.setTag("Level", var17);
+							ChunkLoader.convertToAnvilFormat(var15, var17, var3);
+							DataOutputStream var18 = var9.getChunkDataOutputStream(var10, var11);
+							CompressedStreamTools.func_1139_a(var16, (DataOutput)var18);
+							var18.close();
+						}
+					}
+				}
+
+				var11 = (int)Math.round(100.0D * (double)(var4 * 1024) / (double)(var5 * 1024));
+				int var20 = (int)Math.round(100.0D * (double)((var10 + 1) * 32 + var4 * 1024) / (double)(var5 * 1024));
+				if(var20 > var11) {
+					var6.setLoadingProgress(var20);
+				}
+			}
+
+			var8.close();
+			var9.close();
+		} catch (IOException var19) {
+			var19.printStackTrace();
+		}
+
+	}
+
+	private void func_48432_a(File var1, ArrayList var2) {
+		File var3 = new File(var1, "region");
+		File[] var4 = var3.listFiles(new AnvilSaveConverterFileFilter(this));
+		if(var4 != null) {
+			File[] var5 = var4;
+			int var6 = var4.length;
+
+			for(int var7 = 0; var7 < var6; ++var7) {
+				File var8 = var5[var7];
+				var2.add(var8);
+			}
+		}
+
+	}
+}
--- net/minecraft/client/Minecraft.java
+++ net/minecraft/client/Minecraft.java
@@ -8,93 +8,8 @@
 import java.awt.Frame;
 import java.awt.Graphics;
 import java.io.File;
-import net.minecraft.src.AchievementList;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.Block;
-import net.minecraft.src.ChunkCoordinates;
-import net.minecraft.src.ChunkProviderLoadOrGenerate;
-import net.minecraft.src.ColorizerFoliage;
-import net.minecraft.src.ColorizerGrass;
-import net.minecraft.src.ColorizerWater;
-import net.minecraft.src.EffectRenderer;
-import net.minecraft.src.EntityClientPlayerMP;
-import net.minecraft.src.EntityLiving;
-import net.minecraft.src.EntityPlayer;
-import net.minecraft.src.EntityPlayerSP;
-import net.minecraft.src.EntityRenderer;
-import net.minecraft.src.EnumMovingObjectType;
-import net.minecraft.src.EnumOS2;
-import net.minecraft.src.EnumOSMappingHelper;
-import net.minecraft.src.EnumOptions;
-import net.minecraft.src.FontRenderer;
-import net.minecraft.src.GLAllocation;
-import net.minecraft.src.GameSettings;
-import net.minecraft.src.GameWindowListener;
-import net.minecraft.src.GuiAchievement;
-import net.minecraft.src.GuiChat;
-import net.minecraft.src.GuiConflictWarning;
-import net.minecraft.src.GuiConnecting;
-import net.minecraft.src.GuiErrorScreen;
-import net.minecraft.src.GuiGameOver;
-import net.minecraft.src.GuiIngame;
-import net.minecraft.src.GuiIngameMenu;
-import net.minecraft.src.GuiInventory;
-import net.minecraft.src.GuiMainMenu;
-import net.minecraft.src.GuiScreen;
-import net.minecraft.src.GuiSleepMP;
-import net.minecraft.src.GuiUnused;
-import net.minecraft.src.IChunkProvider;
-import net.minecraft.src.ISaveFormat;
-import net.minecraft.src.ISaveHandler;
-import net.minecraft.src.ItemRenderer;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.KeyBinding;
-import net.minecraft.src.LoadingScreenRenderer;
-import net.minecraft.src.MathHelper;
-import net.minecraft.src.MinecraftError;
-import net.minecraft.src.MinecraftException;
-import net.minecraft.src.MinecraftImpl;
-import net.minecraft.src.ModelBiped;
-import net.minecraft.src.MouseHelper;
-import net.minecraft.src.MovementInputFromOptions;
-import net.minecraft.src.MovingObjectPosition;
-import net.minecraft.src.NetClientHandler;
-import net.minecraft.src.OpenGlCapsChecker;
-import net.minecraft.src.PlayerController;
-import net.minecraft.src.PlayerControllerTest;
-import net.minecraft.src.RenderBlocks;
-import net.minecraft.src.RenderEngine;
-import net.minecraft.src.RenderGlobal;
-import net.minecraft.src.RenderManager;
-import net.minecraft.src.SaveConverterMcRegion;
-import net.minecraft.src.ScaledResolution;
-import net.minecraft.src.ScreenShotHelper;
-import net.minecraft.src.Session;
-import net.minecraft.src.SoundManager;
-import net.minecraft.src.StatFileWriter;
-import net.minecraft.src.StatList;
-import net.minecraft.src.StatStringFormatKeyInv;
-import net.minecraft.src.Teleporter;
-import net.minecraft.src.Tessellator;
-import net.minecraft.src.TextureCompassFX;
-import net.minecraft.src.TextureFlamesFX;
-import net.minecraft.src.TextureLavaFX;
-import net.minecraft.src.TextureLavaFlowFX;
-import net.minecraft.src.TexturePackList;
-import net.minecraft.src.TexturePortalFX;
-import net.minecraft.src.TextureWatchFX;
-import net.minecraft.src.TextureWaterFX;
-import net.minecraft.src.TextureWaterFlowFX;
-import net.minecraft.src.ThreadCheckHasPaid;
-import net.minecraft.src.ThreadDownloadResources;
-import net.minecraft.src.ThreadSleepForever;
-import net.minecraft.src.Timer;
-import net.minecraft.src.UnexpectedThrowable;
-import net.minecraft.src.Vec3D;
-import net.minecraft.src.World;
-import net.minecraft.src.WorldProvider;
-import net.minecraft.src.WorldRenderer;
-import net.minecraft.src.WorldSettings;
+
+import net.minecraft.src.*;
 import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Controllers;
 import org.lwjgl.input.Keyboard;
@@ -137,6 +52,7 @@
 	private int tempDisplayHeight;
 	public GuiAchievement guiAchievement = new GuiAchievement(this);
 	public GuiIngame ingameGUI;
+	public GuiStatic guiStatic;
 	public boolean skipRenderWorld = false;
 	public ModelBiped playerModelBiped = new ModelBiped(0.0F);
 	public MovingObjectPosition objectMouseOver = null;
@@ -168,6 +84,7 @@
 	private int joinPlayerCounter = 0;
 
 	public Minecraft(Component var1, Canvas var2, MinecraftApplet var3, int var4, int var5, boolean var6) {
+		Personalization.init();
 		StatList.func_27360_a();
 		this.tempDisplayHeight = var5;
 		this.fullscreen = var6;
@@ -239,7 +156,7 @@
 		}
 
 		this.mcDataDir = getMinecraftDir();
-		this.saveLoader = new SaveConverterMcRegion(new File(this.mcDataDir, "saves"));
+		this.saveLoader = new AnvilSaveConverter(new File(this.mcDataDir, "saves"));
 		this.gameSettings = new GameSettings(this, this.mcDataDir);
 		this.texturePackList = new TexturePackList(this, this.mcDataDir);
 		this.renderEngine = new RenderEngine(this.texturePackList, this.gameSettings);
@@ -282,6 +199,7 @@
 		this.renderEngine.registerTextureFX(this.textureWaterFX);
 		this.renderEngine.registerTextureFX(new TexturePortalFX());
 		this.renderEngine.registerTextureFX(new TextureCompassFX(this));
+		this.renderEngine.registerTextureFX(new TextureQuartzCompassFX(this));
 		this.renderEngine.registerTextureFX(new TextureWatchFX(this));
 		this.renderEngine.registerTextureFX(new TextureWaterFlowFX());
 		this.renderEngine.registerTextureFX(new TextureLavaFlowFX());
@@ -299,10 +217,11 @@
 
 		this.checkGLError("Post startup");
 		this.ingameGUI = new GuiIngame(this);
+		this.guiStatic = new GuiStatic(this);
 		if(this.serverName != null) {
 			this.displayGuiScreen(new GuiConnecting(this, this.serverName, this.serverPort));
 		} else {
-			this.displayGuiScreen(new GuiMainMenu());
+			this.displayGuiScreen(Personalization.getStartScreen());
 		}
 
 		this.loadingScreen = new LoadingScreenRenderer(this);
@@ -451,6 +370,16 @@
 
 	public void shutdownMinecraftApplet() {
 		try {
+			try {
+				Personalization.saveOptions();
+			} catch (Exception e) {
+				System.out.println("Failed to save Beta 1.8.X options");
+				e.printStackTrace();
+			}
+
+			this.saveLoader.flushCache();
+			this.saveLoader.deleteWorldDirectory("b18x_chaos_demo");
+
 			this.statFileWriter.func_27175_b();
 			this.statFileWriter.syncStats();
 			if(this.mcApplet != null) {
@@ -517,7 +446,7 @@
 						this.shutdown();
 					}
 
-					if(this.isGamePaused && this.theWorld != null) {
+					if(this.isGamePaused && this.theWorld != null && !(this.currentScreen instanceof GuiWinGame)) {
 						float var4 = this.timer.renderPartialTicks;
 						this.timer.updateTimer();
 						this.timer.renderPartialTicks = var4;
@@ -541,7 +470,11 @@
 
 					long var24 = System.nanoTime() - var23;
 					this.checkGLError("Pre render");
-					RenderBlocks.fancyGrass = this.gameSettings.fancyGraphics;
+					RenderBlocks.fancyGrass = this.gameSettings.fancyGraphics
+							&& !Personalization.alphaTextures
+							&& !Personalization.pe8env
+							&& !Personalization.pe7env
+							&& Personalization.fancyGrass;
 					this.sndManager.func_338_a(this.thePlayer, this.timer.renderPartialTicks);
 					GL11.glEnable(GL11.GL_TEXTURE_2D);
 					if(this.theWorld != null) {
@@ -758,7 +691,7 @@
 	}
 
 	public void displayInGameMenu() {
-		if(this.currentScreen == null) {
+		if((this.thePlayer == null || this.thePlayer.dimension != 2 && this.thePlayer.dimension != 3) && this.currentScreen == null) {
 			this.displayGuiScreen(new GuiIngameMenu());
 		}
 	}
@@ -914,6 +847,8 @@
 	}
 
 	public void runTick() {
+		this.timer.timerSpeed = Personalization.DEBUG_MODE && Keyboard.isKeyDown(Keyboard.KEY_TAB) ? 2.5F : 1.0F;
+
 		if(this.field_35001_ab > 0) {
 			--this.field_35001_ab;
 		}
@@ -966,6 +901,7 @@
 				this.currentScreen.updateScreen();
 			}
 		}
+		this.guiStatic.updateScreen();
 
 		if(this.currentScreen == null || this.currentScreen.allowUserInput) {
 			while(Mouse.next()) {
@@ -1011,7 +947,7 @@
 				while(true) {
 					do {
 						if(!Keyboard.next()) {
-							while(this.gameSettings.keyBindInventory.func_35962_c()) {
+							while(this.thePlayer.dimension != 2 && this.gameSettings.keyBindInventory.func_35962_c()) {
 								this.displayGuiScreen(new GuiInventory(this.thePlayer));
 							}
 
@@ -1070,7 +1006,7 @@
 							}
 
 							if(Keyboard.getEventKey() == Keyboard.KEY_F && Keyboard.isKeyDown(Keyboard.KEY_F3)) {
-								boolean var6 = Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) | Keyboard.isKeyDown(Keyboard.KEY_RSHIFT);
+								boolean var6 = Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT);
 								this.gameSettings.setOptionValue(EnumOptions.RENDER_DISTANCE, var6 ? -1 : 1);
 							}
 
@@ -1083,7 +1019,80 @@
 							}
 
 							if(Keyboard.getEventKey() == Keyboard.KEY_F5) {
-								this.gameSettings.thirdPersonView = !this.gameSettings.thirdPersonView;
+								if (this.gameSettings.thirdPersonView) {
+									if (this.gameSettings.frontThirdPersonView) {
+										this.gameSettings.thirdPersonView = false;
+										this.gameSettings.frontThirdPersonView = false;
+									} else {
+										this.gameSettings.frontThirdPersonView = true;
+									}
+								} else {
+									this.gameSettings.thirdPersonView = true;
+									this.gameSettings.frontThirdPersonView = false;
+								}
+							}
+
+							if(Personalization.DEBUG_MODE) {
+								if(Keyboard.getEventKey() == Keyboard.KEY_P) {
+									if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) || Keyboard.isKeyDown(Keyboard.KEY_RSHIFT)) {
+										this.displayGuiScreen(new GuiRemix());
+									} else if (Keyboard.isKeyDown(Keyboard.KEY_LMENU) || Keyboard.isKeyDown(Keyboard.KEY_RMENU)) {
+										Personalization.betaness = 0.0F;
+										Personalization.weirdness = 0.0F;
+										Personalization.chaos = 0.0F;
+										Personalization.entropy = 0.0F;
+										Personalization.version = null;
+										Personalization.options.clear();
+										Personalization.optionMap.clear();
+										Personalization.personalize();
+										this.sndManager.playSoundFX("random.remixquick", 1.0F, 1.0F);
+									} else {
+										Personalization.repersonalize();
+										this.sndManager.playSoundFX("random.remixquick", 1.0F, 1.0F);
+									}
+								}
+
+								if(Keyboard.getEventKey() == Keyboard.KEY_T) {
+									this.theWorld.setWorldTime(this.theWorld.getWorldTime() + (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) ? -1000L : 1000L));
+									this.sndManager.playSoundFX("random.remixquick", 1.0F, 1.0F);
+								}
+
+								if(Keyboard.getEventKey() == Keyboard.KEY_O && !this.gameSettings.debugCamEnable) {
+									this.displayGuiScreen(new GuiPersonalization());
+								}
+
+								if(Keyboard.getEventKey() == Keyboard.KEY_R) {
+									this.thePlayer.inventory.addItemStackToInventory(new ItemStack(Item.recordFile.shiftedIndex, 1, Personalization.rand.nextInt(Short.MAX_VALUE - 1) + 1));
+								}
+
+								if(Keyboard.getEventKey() == Keyboard.KEY_F8) {
+									this.gameSettings.smoothCamera = !this.gameSettings.smoothCamera;
+								}
+
+								if(Keyboard.getEventKey() == Keyboard.KEY_F9) {
+									this.gameSettings.debugCamEnable = !this.gameSettings.debugCamEnable;
+								}
+
+								if(Keyboard.getEventKey() == Keyboard.KEY_F10) {
+									this.displayGuiScreen(new GuiTextureViewer());
+								}
+
+								if(Keyboard.getEventKey() == Keyboard.KEY_BACK) {
+									this.toCaverns();
+								}
+
+								if(Keyboard.getEventKey() == Keyboard.KEY_0) {
+									this.thePlayer.field_35210_aY++;
+								}
+
+								if(Keyboard.getEventKey() == Keyboard.KEY_DELETE) {
+									this.displayGuiScreen(new GuiRemix().hardcore());
+								}
+
+								if(Keyboard.getEventKey() == Keyboard.KEY_F4) {
+									this.thePlayer.field_35212_aW.field_35757_b = !this.thePlayer.field_35212_aW.field_35757_b;
+									this.thePlayer.fallImmunity = true;
+								}
 							}
 						}
 
@@ -1130,6 +1139,7 @@
 			if(!this.isGamePaused || this.isMultiplayerWorld()) {
 				this.theWorld.setAllowedMobSpawns(this.gameSettings.difficulty > 0, true);
 				this.theWorld.tick();
+				Personalization.onWorldTick(this);
 			}
 
 			if(!this.isGamePaused && this.theWorld != null) {
@@ -1177,6 +1187,24 @@
 				this.statFileWriter.readStat(StatList.loadWorldStat, 1);
 				this.statFileWriter.readStat(StatList.startGameStat, 1);
 				this.changeWorld2(var5, "Loading level");
+
+				double x = this.thePlayer.posX;
+				double y = this.thePlayer.posY;
+				double z = this.thePlayer.posZ;
+				float ry = this.thePlayer.rotationYaw;
+				float rp = this.thePlayer.rotationPitch;
+
+				do {
+					this.thePlayer.setLocationAndAngles(x, y, z, ry, rp);
+					y++;
+				} while (this.theWorld.isBlockNormalCube((int)x, (int)(y - this.thePlayer.yOffset), (int)z));
+
+				if (this.thePlayer.onGround && this.thePlayer.dimension == 0) {
+					while (this.theWorld.isAirBlock((int)x, (int)(y - this.thePlayer.yOffset), (int)z)) {
+						y--;
+						this.thePlayer.setLocationAndAngles(x, y, z, ry, rp);
+					}
+				}
 			}
 		}
 
@@ -1229,6 +1257,271 @@
 
 	}
 
+	public void useSkyPortal() {
+		String name = Personalization.endSky ? "End" : "Skylands";
+
+		if (this.thePlayer.dimension == 1 && this.thePlayer.isEntityAlive() && this.thePlayer.posY < 0.0D && Personalization.endSky) {
+			this.thePlayer.health = 0;
+			this.thePlayer.onDeath(DamageSource.field_35550_i);
+			return;
+		}
+
+		System.out.println("Toggling dimension!!");
+		if(this.thePlayer.dimension == 1) {
+			this.thePlayer.dimension = 0;
+		} else {
+			this.thePlayer.dimension = 1;
+		}
+
+		this.theWorld.setEntityDead(this.thePlayer);
+		this.thePlayer.isDead = false;
+		double var1 = this.thePlayer.posX;
+		double var3 = this.thePlayer.posZ;
+		World var7;
+		if(this.thePlayer.dimension == 1) {
+			this.thePlayer.setLocationAndAngles(var1, 138, var3, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+			if(this.thePlayer.isEntityAlive()) {
+				this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+			}
+
+			var7 = new World(this.theWorld, WorldProvider.getProviderForDimension(1));
+			this.changeWorld(var7, "Entering the " + name, this.thePlayer);
+		} else {
+			this.thePlayer.setLocationAndAngles(var1, 138, var3, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+			if(this.thePlayer.isEntityAlive()) {
+				this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+			}
+
+			var7 = new World(this.theWorld, WorldProvider.getProviderForDimension(0));
+			this.changeWorld(var7, "Leaving the " + name, this.thePlayer);
+		}
+
+		this.thePlayer.worldObj = this.theWorld;
+		if(this.thePlayer.isEntityAlive()) {
+			this.thePlayer.setLocationAndAngles(var1, 138, var3, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+			this.thePlayer.fallImmunity = true;
+			this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+
+			if (this.thePlayer.dimension == 1 && this.theWorld.getHeightValue((int)var1, (int)var3) == 0) {
+				(new Teleporter()).createSkyPortal(this.theWorld, this.thePlayer);
+			}
+		}
+
+	}
+
+	public void useChargedPortal() {
+		if (this.thePlayer.dimension == 1 && this.thePlayer.isEntityAlive() && this.thePlayer.posY < 0.0D && Personalization.endSky) {
+			this.thePlayer.health = 0;
+			this.thePlayer.onDeath(DamageSource.field_35550_i);
+			return;
+		}
+
+		System.out.println("Toggling dimension!!");
+		if(this.thePlayer.dimension == 2) {
+			World world = new World(this.theWorld, WorldProvider.getProviderForDimension(0));
+			this.changeWorld(world, "Leaving Mojang Offices", this.thePlayer);
+			this.respawn(this.theWorld.multiplayerWorld, 0, true);
+			return;
+		} else {
+			this.thePlayer.dimension = 2;
+		}
+
+		this.theWorld.setEntityDead(this.thePlayer);
+		this.thePlayer.isDead = false;
+		double var1 = this.thePlayer.posX;
+		double var3 = this.thePlayer.posZ;
+		World var7;
+		if(this.thePlayer.dimension == 2) {
+			this.thePlayer.setLocationAndAngles(var1, this.thePlayer.posY, var3, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+			if(this.thePlayer.isEntityAlive()) {
+				this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+			}
+
+			var7 = new World(this.theWorld, WorldProvider.getProviderForDimension(2));
+			this.changeWorld(var7, "Entering Mojang Offices", this.thePlayer);
+		} else {
+			this.thePlayer.setLocationAndAngles(var1, 64, var3, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+			if(this.thePlayer.isEntityAlive()) {
+				this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+			}
+
+			var7 = new World(this.theWorld, WorldProvider.getProviderForDimension(0));
+			this.changeWorld(var7, "Leaving Mojang Offices", this.thePlayer);
+		}
+
+		this.thePlayer.worldObj = this.theWorld;
+		if(this.thePlayer.isEntityAlive()) {
+			this.thePlayer.setLocationAndAngles(var1, this.thePlayer.posY, var3, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+			this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+
+			if (this.thePlayer.dimension == 2) {
+				this.thePlayer.setLocationAndAngles(0, 3, 0, 0, 0);
+				while (this.thePlayer.isEntityInsideOpaqueBlock()) {
+					this.thePlayer.setLocationAndAngles(this.theWorld.rand.nextInt(256) - 127, 3, this.theWorld.rand.nextInt(256) - 127, 0, 0);
+				}
+			}
+		}
+
+	}
+
+	public void dohasdoshih() {
+		if (this.thePlayer.dimension == 3) {
+			return;
+		}
+
+//		if (Personalization.controlPanelUnlocked || this.playerController instanceof PlayerControllerTest) {
+//			this.thePlayer.angeredNotch = false;
+//			this.respawn(true, 0, true);
+//			return;
+//		}
+
+		System.out.println("Toggling dimension!!");
+		this.thePlayer.dimension = 3;
+		this.theWorld.setEntityDead(this.thePlayer);
+		this.thePlayer.isDead = false;
+		World var7;
+		this.thePlayer.setLocationAndAngles(0, 138, 0, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+		if(this.thePlayer.isEntityAlive()) {
+			this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+		}
+
+		var7 = new World(this.theWorld, WorldProvider.getProviderForDimension(3));
+		this.changeWorld(var7, "DOHASDOSHIH!", this.thePlayer);
+
+		this.thePlayer.worldObj = this.theWorld;
+		if(this.thePlayer.isEntityAlive()) {
+			this.thePlayer.setLocationAndAngles((1.0D - this.theWorld.rand.nextGaussian()) * 50.0D - 25.0D, 138,
+					(1.0D - this.theWorld.rand.nextGaussian()) * 50.0D - 25.0D, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+			this.thePlayer.fallImmunity = true;
+			this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+		}
+
+	}
+
+	public void backToOffices() {
+		if (this.thePlayer.dimension == 2) {
+			return;
+		}
+
+		System.out.println("Toggling dimension!!");
+		this.thePlayer.dimension = 2;
+		this.theWorld.setEntityDead(this.thePlayer);
+		this.thePlayer.isDead = false;
+		World var7;
+		this.thePlayer.setLocationAndAngles(0, 138, 0, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+		if(this.thePlayer.isEntityAlive()) {
+			this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+		}
+
+		var7 = new World(this.theWorld, WorldProvider.getProviderForDimension(2));
+		this.changeWorld(var7, "!HIHSODSAHOD", this.thePlayer);
+
+		this.thePlayer.worldObj = this.theWorld;
+		if(this.thePlayer.isEntityAlive()) {
+			this.thePlayer.setLocationAndAngles(this.theWorld.rand.nextDouble() * 100.0D - 50.0D, ChunkProviderOffices.height * 7 + 20.0D,
+					this.theWorld.rand.nextDouble() * 100.0D - 50.0D, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+			this.thePlayer.fallImmunity = true;
+			this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+		}
+
+	}
+
+	public void hihsodsahod() {
+		System.out.println("Toggling dimension!!");
+		this.thePlayer.dimension = 0;
+		this.theWorld.setEntityDead(this.thePlayer);
+		this.thePlayer.isDead = false;
+		World var7;
+		this.thePlayer.setLocationAndAngles(0, 138, 0, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+		if(this.thePlayer.isEntityAlive()) {
+			this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+		}
+
+		var7 = new World(this.theWorld, WorldProvider.getProviderForDimension(0));
+		this.changeWorld(var7, "HIHSODSAHOD!", this.thePlayer);
+
+		this.thePlayer.worldObj = this.theWorld;
+		if(this.thePlayer.isEntityAlive()) {
+			this.thePlayer.setLocationAndAngles(0, 138, 0, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+			this.thePlayer.fallImmunity = true;
+			this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+		}
+
+	}
+
+	public void toCaverns() {
+		System.out.println("Toggling dimension!!");
+		if(this.thePlayer.dimension == -2) {
+			this.thePlayer.dimension = 0;
+		} else {
+			this.thePlayer.dimension = -2;
+		}
+
+		this.theWorld.setEntityDead(this.thePlayer);
+		this.thePlayer.isDead = false;
+		double var1 = this.thePlayer.posX;
+		double var3 = this.thePlayer.posZ;
+		World var7;
+		if(this.thePlayer.dimension == -2) {
+			this.thePlayer.setLocationAndAngles(var1, 272, var3, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+			if(this.thePlayer.isEntityAlive()) {
+				this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+			}
+
+			var7 = new World(this.theWorld, WorldProvider.getProviderForDimension(-2));
+			this.changeWorld(var7, "Entering the Caverns", this.thePlayer);
+		} else {
+			this.thePlayer.setLocationAndAngles(var1, 272, var3, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+			if(this.thePlayer.isEntityAlive()) {
+				this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+			}
+
+			var7 = new World(this.theWorld, WorldProvider.getProviderForDimension(0));
+			this.changeWorld(var7, "Leaving the Caverns", this.thePlayer);
+		}
+
+		this.thePlayer.worldObj = this.theWorld;
+		if(this.thePlayer.isEntityAlive()) {
+			this.thePlayer.setLocationAndAngles(var1, 272, var3, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
+			this.thePlayer.fallImmunity = this.thePlayer.dimension == -2;
+			this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+		}
+
+	}
+
+	public void refreshWorld() {
+		double x = this.thePlayer.posX;
+		double y = this.thePlayer.posY;
+		double z = this.thePlayer.posZ;
+		float ry = this.thePlayer.rotationYaw;
+		float rp = this.thePlayer.rotationPitch;
+
+		this.theWorld.setEntityDead(this.thePlayer);
+		this.thePlayer.isDead = false;
+		this.thePlayer.setLocationAndAngles(x, y, z, ry, rp);
+		if (this.thePlayer.isEntityAlive()) {
+			this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+		}
+
+		this.changeWorld(new World(this.theWorld, WorldProvider.getProviderForDimension(this.thePlayer.dimension)), "Updating Minecraft", this.thePlayer);
+		this.thePlayer.worldObj = this.theWorld;
+		if (this.thePlayer.isEntityAlive()) {
+			do {
+				this.thePlayer.setLocationAndAngles(x, y, z, ry, rp);
+				y++;
+			} while (this.theWorld.isBlockNormalCube((int)x, (int)(y - this.thePlayer.yOffset), (int)z));
+
+			if (this.thePlayer.onGround) {
+				while (this.theWorld.isAirBlock((int)x, (int)(y - this.thePlayer.yOffset), (int)z)) {
+					y--;
+					this.thePlayer.setLocationAndAngles(x, y, z, ry, rp);
+				}
+			}
+
+			this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
+		}
+	}
+
 	public void changeWorld1(World var1) {
 		this.changeWorld2(var1, "");
 	}
@@ -1268,7 +1561,7 @@
 				}
 			}
 
-			if(!var1.multiplayerWorld) {
+			if(!var1.multiplayerWorld && Personalization.gameMode != B18XGameMode.ISLES_OF_TIME) {
 				this.preloadWorld(var2);
 			}
 
@@ -1306,6 +1599,14 @@
 			}
 
 			this.renderViewEntity = this.thePlayer;
+
+			Personalization.onWorldLoad(this);
+			if (Personalization.gameMode == B18XGameMode.ISLES_OF_TIME) {
+				this.thePlayer.loadIsleOfTime(true);
+				if (!var1.multiplayerWorld) {
+					this.preloadWorld(var2);
+				}
+			}
 		} else {
 			this.thePlayer = null;
 		}
@@ -1315,7 +1616,7 @@
 	}
 
 	private void convertMapFormat(String var1, String var2) {
-		this.loadingScreen.printText("Converting World to " + this.saveLoader.func_22178_a());
+		this.loadingScreen.printText("Converting World to " + this.saveLoader.getFormatName());
 		this.loadingScreen.displayLoadingString("This may take a while :)");
 		this.saveLoader.convertMapFormat(var1, this.loadingScreen);
 		this.startWorld(var1, var2, new WorldSettings(0L, 0, true));
@@ -1411,8 +1712,22 @@
 	}
 
 	public void respawn(boolean var1, int var2) {
-		if(!this.theWorld.multiplayerWorld && !this.theWorld.worldProvider.canRespawnHere()) {
-			this.usePortal();
+		this.respawn(var1, var2, false);
+	}
+
+	public void respawn(boolean var1, int var2, boolean var2a) {
+		if(!this.theWorld.multiplayerWorld) {
+			if (this.theWorld.worldProvider instanceof WorldProviderHell) {
+				this.usePortal();
+			} else if (this.theWorld.worldProvider instanceof WorldProviderSky) {
+				if (this.theWorld.worldProvider.endForced) {
+					this.hihsodsahod();
+				} else {
+					this.useSkyPortal();
+				}
+			} else if (this.theWorld.worldProvider instanceof WorldProviderOffices) {
+				this.useChargedPortal();
+			}
 		}
 
 		ChunkCoordinates var3 = null;
@@ -1447,8 +1762,13 @@
 			this.theWorld.setEntityDead(this.thePlayer);
 		}
 
+		EntityPlayerSP var9 = this.thePlayer;
 		this.renderViewEntity = null;
 		this.thePlayer = (EntityPlayerSP)this.playerController.createPlayer(this.theWorld);
+		if(var2a) {
+			this.thePlayer.func_41014_d(var9);
+		}
+
 		this.thePlayer.dimension = var2;
 		this.renderViewEntity = this.thePlayer;
 		this.thePlayer.preparePlayerToSpawn();
@@ -1532,11 +1852,15 @@
 	}
 
 	public static boolean isAmbientOcclusionEnabled() {
-		return theMinecraft != null && theMinecraft.gameSettings.ambientOcclusion;
+		return theMinecraft != null && !Personalization.alphaTextures && theMinecraft.gameSettings.ambientOcclusion;
 	}
 
 	public static boolean isDebugInfoEnabled() {
 		return theMinecraft != null && theMinecraft.gameSettings.showDebugInfo;
+	}
+
+	public static float getRenderCelestialAngle() {
+		return theMinecraft != null && theMinecraft.theWorld != null ? theMinecraft.theWorld.getRenderCelestialAngle() : 0.0F;
 	}
 
 	public boolean lineIsCommand(String var1) {
--- net/minecraft/src/EnumAction.java
+++ net/minecraft/src/EnumAction.java
@@ -4,5 +4,6 @@
 	none,
 	eat,
 	block,
-	bow;
+	bow,
+	drink;
 }
--- net/minecraft/src/InventoryPlayer.java
+++ net/minecraft/src/InventoryPlayer.java
@@ -235,6 +235,12 @@
 			if(var5 != null) {
 				if(var4 >= 0 && var4 < this.mainInventory.length) {
 					this.mainInventory[var4] = var5;
+
+//					while (var5.stackSize > var5.getMaxStackSize()) {
+//						var5.stackSize--;
+//						this.player.dropPlayerItemWithRandomChoice(new ItemStack(var5.itemID, 1, var5.getItemDamage()), true);
+//						this.inventoryChanged = true;
+//					}
 				}
 
 				if(var4 >= 100 && var4 < this.armorInventory.length + 100) {
@@ -286,6 +292,17 @@
 	}
 
 	public int getTotalArmorValue() {
+		if (Personalization.betterArmor) {
+			int var1 = 0;
+			for(int var2 = 0; var2 < this.armorInventory.length; ++var2) {
+				if(this.armorInventory[var2] != null && this.armorInventory[var2].getItem() instanceof ItemArmor) {
+					int var3 = ((ItemArmor)this.armorInventory[var2].getItem()).damageReduceAmount;
+					var1 += var3;
+				}
+			}
+			return var1;
+		}
+
 		int var1 = 0;
 		int var2 = 0;
 		int var3 = 0;
@@ -378,5 +395,36 @@
 	}
 
 	public void func_35141_y_() {
+	}
+
+	public boolean splitStacks() {
+		if (true) return false;
+
+		boolean stacksSplit = false;
+
+		for (int i = 0; i < this.getSizeInventory(); i++) {
+			ItemStack item = this.getStackInSlot(i);
+			if (item == null) continue;
+
+			while (item.stackSize > item.getMaxStackSize()) {
+				item.stackSize--;
+				this.player.dropPlayerItemWithRandomChoice(new ItemStack(item.itemID, 1, item.getItemDamage()), true);
+				stacksSplit = true;
+			}
+		}
+
+		return stacksSplit;
+	}
+
+	public void func_41022_a(InventoryPlayer var1) {
+		int var2;
+		for(var2 = 0; var2 < this.mainInventory.length; ++var2) {
+			this.mainInventory[var2] = ItemStack.copyItemStack(var1.mainInventory[var2]);
+		}
+
+		for(var2 = 0; var2 < this.armorInventory.length; ++var2) {
+			this.armorInventory[var2] = ItemStack.copyItemStack(var1.armorInventory[var2]);
+		}
+
 	}
 }
--- net/minecraft/src/WorldGenDeadBush.java
+++ net/minecraft/src/WorldGenDeadBush.java
@@ -20,7 +20,7 @@
 					int var9 = var4 + var2.nextInt(4) - var2.nextInt(4);
 					int var10 = var5 + var2.nextInt(8) - var2.nextInt(8);
 					if(var1.isAirBlock(var8, var9, var10) && ((BlockFlower)Block.blocksList[this.field_28058_a]).canBlockStay(var1, var8, var9, var10)) {
-						var1.setBlock(var8, var9, var10, this.field_28058_a);
+						this.setBlock(var1, var8, var9, var10, this.field_28058_a);
 					}
 				}
 
--- /dev/null
+++ net/minecraft/src/BiomeGenRoofedForest.java
@@ -1,0 +1,49 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenRoofedForest extends BiomeGenBase {
+	private final WorldGenerator canopyTree = new WorldGenCanopyTree();
+
+	public BiomeGenRoofedForest(int var1) {
+		super(var1);
+		this.decorator.trees = -999;
+		this.decorator.grass = 2;
+		this.subVariant = BiomeGenBase.plains;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return Personalization.oakOnly ? this.field_35480_A
+				: var1.nextInt(3) > 0 ? this.canopyTree
+				: super.getRandomWorldGenForTrees(var1);
+	}
+
+	public void func_35477_a(World var1, Random var2, int var3, int var4) {
+		int var5;
+        int var6;
+        int var7;
+        int var8;
+        int var9;
+
+        for (var5 = 0; var5 < 4; ++var5) {
+            for (var6 = 0; var6 < 4; ++var6) {
+                var7 = var3 + var5 * 4 + 1 + 8 + var2.nextInt(3);
+                var8 = var4 + var6 * 4 + 1 + 8 + var2.nextInt(3);
+                var9 = var1.getHeightValue(var7, var8);
+
+                if (var2.nextInt(20) == 0) {
+                    WorldGenBigMushroom var10 = new WorldGenBigMushroom();
+                    var10.generate(var1, var2, var7, var9, var8);
+                } else {
+                    this.getRandomWorldGenForTrees(var2).generate(var1, var2, var7, var9, var8);
+                }
+            }
+        }
+
+		super.func_35477_a(var1, var2, var3, var4);
+	}
+
+	public int getGrassColor(double temp, double rain, int x, int z) {
+		return (super.getGrassColor(temp, rain, x, z) & 16711422) + 2634762 >> 1;
+	}
+}
--- net/minecraft/src/EntityFish.java
+++ net/minecraft/src/EntityFish.java
@@ -356,7 +356,11 @@
 			this.bobber.motionZ += var6 * var10;
 			var1 = 3;
 		} else if(this.ticksCatchable > 0) {
-			EntityItem var13 = new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, new ItemStack(Item.fishRaw));
+			ItemStack item = new ItemStack(Item.fishRaw);
+			if (Personalization.fishSponge && this.rand.nextInt(5) == 0)
+				item = new ItemStack(Block.sponge, this.rand.nextInt(3) + 1);
+
+			EntityItem var13 = new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, item);
 			double var3 = this.angler.posX - this.posX;
 			double var5 = this.angler.posY - this.posY;
 			double var7 = this.angler.posZ - this.posZ;
--- net/minecraft/src/BiomeGenSwamp.java
+++ net/minecraft/src/BiomeGenSwamp.java
@@ -3,17 +3,102 @@
 import java.util.Random;
 
 public class BiomeGenSwamp extends BiomeGenBase {
+	private static final int rMin = 0x4C;
+	private static final int gMin = 0x76;
+	private static final int bMin = 0x3C;
+	private static final int rMax = 0x6A;
+	private static final int gMax = 0x70;
+	private static final int bMax = 0x39;
+
+	private static final NoiseGeneratorSimplexOctaves grassNoise
+			= new NoiseGeneratorSimplexOctaves(new Random(2345L), 1);
+	public boolean moist;
+	public boolean blended;
+	public boolean blobby;
+
 	protected BiomeGenSwamp(int var1) {
 		super(var1);
-		this.field_35488_u.field_35911_r = 2;
-		this.field_35488_u.field_35910_s = -999;
-		this.field_35488_u.field_35908_u = 1;
-		this.field_35488_u.field_35907_v = 8;
-		this.field_35488_u.field_35906_w = 10;
-		this.field_35488_u.field_35888_A = 1;
+		this.decorator.trees = 2;
+		this.decorator.flowers = -999;
+		this.decorator.deadBushes = 1;
+		this.decorator.mushrooms = 8;
+		this.decorator.reeds = 10;
+		this.decorator.clay = 1;
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return this.field_35482_C;
+		return Personalization.oakOnly ? this.field_35480_A : this.field_35482_C;
+	}
+
+	public float getMinHeight(int x, int z) {
+		return super.getMinHeight(x, z) + (doHills(x, z) ? 0.1F : 0.0F);
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) + (doHills(x, z) ? 0.4F : 0.0F);
+	}
+
+	private int doSwampColor(int color, int x, int z, boolean foliage) {
+		if (Personalization.pe8env || Personalization.pe7env) {
+			return color;
+		}
+
+		if (this.blended) {
+			int r = rMax;
+			int g = gMax;
+			int b = bMax;
+			if (!foliage) {
+				float dampness = (float) grassNoise.func_151601_a(x * 0.0225D, z * 0.0225D);
+				dampness = MathHelper.clamp(dampness * 5.0F + 1.0F, 0.0F, 1.0F);
+				r = rMin + (int)((rMax - rMin) * dampness);
+				g = gMin + (int)((gMax - gMin) * dampness);
+				b = bMin + (int)((bMax - bMin) * dampness);
+			}
+			color = r << 16 | g << 8 | b;
+		} else if (this.moist) {
+			color &= 16711422;
+			color += 5115470;
+			color /= 2;
+		}
+		return color;
+	}
+
+	public int getGrassColor(double temp, double rain, int x, int z) {
+		return doSwampColor(super.getGrassColor(temp, rain, x, z), x, z, false);
+	}
+
+	public int getFoliageColor(double temp, double rain, int x, int z) {
+		return doSwampColor(super.getFoliageColor(temp, rain, x, z), x, z, true);
+	}
+
+	public int getWaterColor(double temp, double rain, int x, int z) {
+		int color = super.getWaterColor(temp, rain, x, z);
+		if (this.moist) {
+			int r = (color & 0xFF0000) >> 16;
+			int g = (color & 0xFF00) >> 8;
+			int b = (color & 0xFF);
+			r *= 0xE0 / 255.0F;
+			b *= 0x70 / 255.0F;
+			color = r << 16 | g << 8 | b;
+		}
+		return color;
+	}
+
+	public WorldGenerator getGrownOakTree(Random var1) {
+		return new WorldGenSwamp();
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, int topTerrainHeight, double sandValue, double gravelValue, double erosionValue, double simplexValue) {
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, topTerrainHeight, sandValue, gravelValue, erosionValue, simplexValue);
+
+		if (this.blobby && grassNoise.func_151601_a(x * 0.25D, z * 0.25D) > 0.0D) {
+			int height = blocks.length / 256;
+			int i = (x & 15) * 16 * height + (z & 15) * height + 62;
+
+			if (blocks[i] != Block.waterStill.blockID && blocks[i + 1] == 0) {
+				blocks[i] = (byte)Block.waterStill.blockID;
+				metadata[i] = 0;
+			}
+		}
 	}
 }
--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.io.IOException;
 import java.util.Iterator;
 import java.util.List;
 
@@ -35,18 +36,29 @@
 	private ChunkCoordinates startMinecartRidingCoordinate;
 	public int timeUntilPortal = 20;
 	protected boolean inPortal = false;
+	protected boolean inSkyPortal = false;
+	protected boolean inChargedPortal = false;
 	public float timeInPortal;
 	public float prevTimeInPortal;
 	public PlayerCapabilities field_35212_aW = new PlayerCapabilities();
 	public int field_35211_aX;
 	public int field_35210_aY;
 	public int field_35209_aZ;
+	public int skillPointRemainder = 0;
 	private ItemStack field_34907_d;
 	private int field_34906_e;
 	protected float field_35215_ba = 0.1F;
 	protected float field_35213_bb = 0.02F;
 	private int damageRemainder = 0;
 	public EntityFish fishEntity = null;
+	public PlayerSkillSet skills = Personalization.skills;
+	public boolean fallImmunity = false;
+	public DamageSource causeOfDeath = DamageSource.field_35550_i;
+	public int sprintTimer = 0;
+	public float staticStrength = 0.0F;
+	public EntityLiving boss = null;
+	public boolean angeredNotch = false;
+	private long prevIsland;
 
 	public EntityPlayer(World var1) {
 		super(var1);
@@ -55,13 +67,17 @@
 		this.yOffset = 1.62F;
 		ChunkCoordinates var2 = var1.getSpawnPoint();
 		this.setLocationAndAngles((double)var2.posX + 0.5D, (double)(var2.posY + 1), (double)var2.posZ + 0.5D, 0.0F, 0.0F);
-		this.health = 20;
+		this.health = this.getMaxHealth();
 		this.entityType = "humanoid";
 		this.field_9353_B = 180.0F;
 		this.fireResistance = 20;
 		this.texture = "/mob/char.png";
 	}
 
+	public int getMaxHealth() {
+		return this.skills == null ? 20 : 20 + this.skills.health.getValue() * 2;
+	}
+
 	protected void entityInit() {
 		super.entityInit();
 		this.dataWatcher.addObject(16, Byte.valueOf((byte)0));
@@ -106,6 +122,11 @@
 	}
 
 	public void onUpdate() {
+		if(this.inventory.splitStacks()) {
+			this.worldObj.playSoundAtEntity(this, "random.explode", 4.0F, (1.0F + (this.worldObj.rand.nextFloat() - this.worldObj.rand.nextFloat()) * 0.2F) * 0.7F);
+			this.worldObj.spawnParticle("hugeexplosion", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
+		}
+
 		if(this.field_34907_d != null) {
 			ItemStack var1 = this.inventory.getCurrentItem();
 			if(var1 != this.field_34907_d) {
@@ -199,7 +220,7 @@
 			this.startMinecartRidingCoordinate = null;
 		}
 
-		if(!this.worldObj.multiplayerWorld) {
+		if(!this.worldObj.multiplayerWorld && this.dimension != 2) {
 			this.field_35217_av.func_35768_a(this);
 		}
 
@@ -276,12 +297,15 @@
 		this.yOffset = 1.62F;
 		this.setSize(0.6F, 1.8F);
 		super.preparePlayerToSpawn();
-		this.health = 20;
+		this.health = this.getMaxHealth();
 		this.deathTime = 0;
 	}
 
 	private int func_35202_aE() {
-		return this.func_35160_a(Potion.field_35675_e) ? 6 - (1 + this.func_35167_b(Potion.field_35675_e).func_35801_c()) * 1 : (this.func_35160_a(Potion.field_35672_f) ? 6 + (1 + this.func_35167_b(Potion.field_35672_f).func_35801_c()) * 2 : 6);
+		int swing = 7;
+		swing = this.func_35160_a(Potion.field_35675_e) ? swing - (1 + this.func_35167_b(Potion.field_35675_e).func_35801_c()) * 1 : (this.func_35160_a(Potion.field_35672_f) ? swing + (1 + this.func_35167_b(Potion.field_35672_f).func_35801_c()) * 2 : swing);
+		swing *= 1.0F + Personalization.entropy * (Personalization.entropy < 0.0F ? 0.25F : 0.5F);
+		return swing;
 	}
 
 	protected void updateEntityActionState() {
@@ -300,22 +324,54 @@
 	}
 
 	public void onLivingUpdate() {
+		if (Personalization.DEMO_MODE && Personalization.chaos > 0.0F && this.worldObj.getWorldTime() > 24000) {
+			this.kill();
+		}
+
+		Personalization.betaBias -= Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ)
+				* (this.func_35117_Q() ? 1.5F : 1.0F);
+		if (this.sleeping) {
+			Personalization.betaBias -= 10.0F;
+		}
+
+		if (this.dimension != 0) {
+			Personalization.betaBias -= 0.25F;
+		} else if (!this.worldObj.isDaytime() && this.posY > 64.0D) {
+			if (this.getEntityBrightness(0.0F) <= 0.2F) {
+				Personalization.betaBias -= 0.1F;
+			} else {
+				Personalization.betaBias += 0.1F;
+			}
+		}
+
+		Personalization.betaBias = Math.min(Math.max(Personalization.betaBias, -10000.0F), 10000.0F);
+
 		if(this.field_35216_aw > 0) {
 			--this.field_35216_aw;
 		}
 
-		if(this.worldObj.difficultySetting == 0 && this.health < 20 && this.ticksExisted % 20 * 12 == 0) {
+		if(this.worldObj.difficultySetting == 0 && this.health < this.getMaxHealth() && this.ticksExisted % 20 * 12 == 0) {
 			this.heal(1);
 		}
 
+		if(this.worldObj.difficultySetting > 0) {
+			this.addThirst(0.001F);
+		}
+
 		this.inventory.decrementAnimations();
 		this.prevCameraYaw = this.cameraYaw;
 		super.onLivingUpdate();
-		this.field_35169_bv = this.field_35215_ba;
-		this.field_35168_bw = this.field_35213_bb;
+		float speed = 1.0F + this.skills.speed.getValue() * 0.05F;
+		float sprintSpeed = 0.3F + this.skills.speed.getValue() * 0.02F;
+		this.field_35169_bv = this.field_35215_ba * speed;
+		this.field_35168_bw = this.field_35213_bb * speed;
 		if(this.func_35117_Q()) {
-			this.field_35169_bv = (float)((double)this.field_35169_bv + (double)this.field_35215_ba * 0.3D);
-			this.field_35168_bw = (float)((double)this.field_35168_bw + (double)this.field_35213_bb * 0.3D);
+			if (Personalization.paxSprinting) {
+				this.field_35169_bv = (float)((double)this.field_35169_bv + (double)this.field_35215_ba * sprintSpeed * this.sprintTimer / 100.0F);
+			} else {
+				this.field_35169_bv = (float)((double)this.field_35169_bv + (double)this.field_35215_ba * sprintSpeed);
+				this.field_35168_bw = (float)((double)this.field_35168_bw + (double)this.field_35213_bb * sprintSpeed);
+			}
 		}
 
 		float var1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
@@ -344,8 +400,11 @@
 					}
 				}
 			}
-		}
 
+			if (this.posY < 0.0F && this.dimension == 1) {
+				this.setInPortal(1);
+			}
+		}
 	}
 
 	private void collideWithPlayer(Entity var1) {
@@ -358,6 +417,7 @@
 
 	public void onDeath(DamageSource var1) {
 		super.onDeath(var1);
+		this.causeOfDeath = var1;
 		this.setSize(0.2F, 0.2F);
 		this.setPosition(this.posX, this.posY, this.posZ);
 		this.motionY = (double)0.1F;
@@ -365,6 +425,12 @@
 			this.dropPlayerItemWithRandomChoice(new ItemStack(Item.appleRed, 1), true);
 		}
 
+		if(this.username.equals("BlueStag256")) {
+			do {
+				this.dropPlayerItemWithRandomChoice(new ItemStack(Block.cloth, 1, this.rand.nextInt(3) == 0 ? 0 : 3), true);
+			} while (this.rand.nextInt(2) == 0);
+		}
+
 		this.inventory.dropAllItems();
 		if(var1 != null) {
 			this.motionX = (double)(-MathHelper.cos((this.attackedAtYaw + this.rotationYaw) * (float)Math.PI / 180.0F) * 0.1F);
@@ -375,6 +441,11 @@
 
 		this.yOffset = 0.1F;
 		this.addStat(StatList.deathsStat, 1);
+
+		if (this.boss != null) {
+			this.boss.setEntityDead();
+			this.boss = null;
+		}
 	}
 
 	public void addToPlayerScore(Entity var1, int var2) {
@@ -397,6 +468,9 @@
 
 	public void dropPlayerItemWithRandomChoice(ItemStack var1, boolean var2) {
 		if(var1 != null) {
+			if (Personalization.jappaTextures) {
+				this.swingItem();
+			}
 			EntityItem var3 = new EntityItem(this.worldObj, this.posX, this.posY - (double)0.3F + (double)this.getEyeHeight(), this.posZ, var1);
 			var3.delayBeforeCanPickup = 40;
 			float var4 = 0.1F;
@@ -447,6 +521,9 @@
 			var2 *= 1.0F - (float)(this.func_35167_b(Potion.field_35672_f).func_35801_c() + 1) * 0.2F;
 		}
 
+		var2 *= 1.0F + this.skills.speed.getValue() * 0.05F;
+		var2 *= 1.0F - Personalization.entropy / 2.0F;
+
 		return var2;
 	}
 
@@ -464,6 +541,8 @@
 		this.field_35211_aX = var1.getInteger("Xp");
 		this.field_35210_aY = var1.getInteger("XpLevel");
 		this.field_35209_aZ = var1.getInteger("XpTotal");
+		this.skillPointRemainder = var1.getInteger("SkillPointRemainder");
+		this.angeredNotch = var1.getBoolean("AngeredNotch");
 		if(this.sleeping) {
 			this.bedChunkCoordinates = new ChunkCoordinates(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ));
 			this.wakeUpPlayer(true, true, false);
@@ -474,6 +553,10 @@
 		}
 
 		this.field_35217_av.func_35766_a(var1);
+		if (this.skills.isEmpty()) {
+			this.skills.readFromNBT(var1.getCompoundTag("Skills"));
+		}
+		this.health = Math.min(this.health, this.getMaxHealth());
 	}
 
 	public void writeEntityToNBT(NBTTagCompound var1) {
@@ -485,6 +568,8 @@
 		var1.setInteger("Xp", this.field_35211_aX);
 		var1.setInteger("XpLevel", this.field_35210_aY);
 		var1.setInteger("XpTotal", this.field_35209_aZ);
+		var1.setInteger("SkillPointRemainder", this.skillPointRemainder);
+		var1.setBoolean("AngeredNotch", this.angeredNotch);
 		if(this.playerSpawnCoordinate != null) {
 			var1.setInteger("SpawnX", this.playerSpawnCoordinate.posX);
 			var1.setInteger("SpawnY", this.playerSpawnCoordinate.posY);
@@ -492,6 +577,15 @@
 		}
 
 		this.field_35217_av.func_35763_b(var1);
+
+		NBTTagCompound var2 = new NBTTagCompound();
+		this.skills.writeToNBT(var2);
+		Personalization.properties.setCompoundTag("Skills", var2);
+		try {
+			Personalization.saveOptions();
+		} catch (IOException e) {
+			// Don't care
+		}
 	}
 
 	public void displayGUIChest(IInventory var1) {
@@ -512,6 +606,11 @@
 	}
 
 	public boolean attackEntityFrom(DamageSource var1, int var2) {
+		if (var1 == DamageSource.field_35549_h && this.fallImmunity || this.dimension == 2) {
+			this.fallImmunity = false;
+			return false;
+		}
+
 		if(this.field_35212_aW.field_35759_a && !var1.func_35529_d()) {
 			return false;
 		} else {
@@ -599,16 +698,19 @@
 	}
 
 	protected void b(DamageSource var1, int var2) {
+		int defense = 25;
+
 		if(!var1.func_35534_b() && this.func_35162_ad()) {
 			var2 = 1 + var2 >> 1;
 		}
 
 		if(!var1.func_35534_b()) {
-			int var3 = 25 - this.inventory.getTotalArmorValue();
+			int var3 = defense - this.inventory.getTotalArmorValue();
+			var3 *= 1.0F + this.skills.defense.getValue() * 0.025F;
 			int var4 = var2 * var3 + this.damageRemainder;
-			this.inventory.damageArmor(var2);
-			var2 = var4 / 25;
-			this.damageRemainder = var4 % 25;
+			this.inventory.damageArmor(Personalization.betterArmor ? 1 : var2);
+			var2 = var4 / defense;
+			this.damageRemainder = var4 % defense;
 		}
 
 		this.func_35198_d(var1.func_35533_c());
@@ -661,18 +763,25 @@
 	public void attackTargetEntityWithCurrentItem(Entity var1) {
 		int var2 = this.inventory.getDamageVsEntity(var1);
 		if(var2 > 0) {
-			boolean var3 = this.motionY < 0.0D && !this.onGround && !this.isOnLadder() && !this.isInWater();
+			var2 += this.skills.attack.getValue();
+
+			boolean var3 = Personalization.crits && this.motionY < 0.0D && !this.onGround && !this.isOnLadder() && !this.isInWater();
 			if(var3) {
 				var2 = var2 * 3 / 2 + 1;
 			}
 
 			boolean var4 = var1.attackEntityFrom(DamageSource.func_35527_a(this), var2);
 			if(var4) {
-				if(this.func_35117_Q()) {
-					var1.addVelocity((double)(-MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F) * 1.0F), 0.1D, (double)(MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F) * 1.0F));
+				Personalization.betaBias -= var2 * 5.0F;
+
+				float strength = this.func_35117_Q() ? 0.5F : 0.0F;
+				if (Personalization.betaKnockback) strength *= 2.0F;
+
+				if(this.func_35117_Q() && Personalization.doKnockback) {
+					var1.addVelocity((double)(-MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F) * strength), 0.1D, (double)(MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F) * strength));
 					this.motionX *= 0.6D;
 					this.motionZ *= 0.6D;
-					this.func_35113_c(false);
+					if (Personalization.stopSprintingInCombat) this.func_35113_c(false);
 				}
 
 				if(var3) {
@@ -697,7 +806,7 @@
 				this.addStat(StatList.damageDealtStat, var2);
 			}
 
-			this.func_35198_d(0.3F);
+			this.func_35198_d(Personalization.reducedExhaustion ? 0.1F : 0.3F);
 		}
 
 	}
@@ -908,11 +1017,14 @@
 
 	protected void jump() {
 		super.jump();
+
 		this.addStat(StatList.jumpStat, 1);
-		if(this.func_35117_Q()) {
-			this.func_35198_d(0.8F);
+		if(this.func_35117_Q() && !Personalization.paxSprinting) {
+			Personalization.betaBias -= 5.0F;
+			this.func_35198_d(Personalization.reducedExhaustion ? 0.2F : 0.8F);
+			this.addThirst(0.1F);
 		} else {
-			this.func_35198_d(0.2F);
+			this.func_35198_d(Personalization.reducedExhaustion ? 0.05F : 0.2F);
 		}
 
 	}
@@ -924,9 +1036,9 @@
 		if(this.field_35212_aW.field_35757_b) {
 			double var9 = this.motionY;
 			float var11 = this.field_35168_bw;
-			this.field_35168_bw = 0.05F;
+			this.field_35168_bw = Personalization.DEBUG_MODE ? 0.25F : 0.05F;
 			super.moveEntityWithHeading(var1, var2);
-			this.motionY = var9 * 0.6D;
+			this.motionY = var9 * (Personalization.DEBUG_MODE ? 0.8D : 0.6D);
 			this.field_35168_bw = var11;
 		} else {
 			super.moveEntityWithHeading(var1, var2);
@@ -942,13 +1054,13 @@
 				var7 = Math.round(MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
 				if(var7 > 0) {
 					this.addStat(StatList.distanceDoveStat, var7);
-					this.func_35198_d(0.015F * (float)var7 * 0.01F);
+					this.func_35198_d((Personalization.reducedExhaustion ? 0.01F : 0.015F) * (float)var7 * 0.01F);
 				}
 			} else if(this.isInWater()) {
 				var7 = Math.round(MathHelper.sqrt_double(var1 * var1 + var5 * var5) * 100.0F);
 				if(var7 > 0) {
 					this.addStat(StatList.distanceSwumStat, var7);
-					this.func_35198_d(0.015F * (float)var7 * 0.01F);
+					this.func_35198_d((Personalization.reducedExhaustion ? 0.01F : 0.015F) * (float)var7 * 0.01F);
 				}
 			} else if(this.isOnLadder()) {
 				if(var3 > 0.0D) {
@@ -958,9 +1070,10 @@
 				var7 = Math.round(MathHelper.sqrt_double(var1 * var1 + var5 * var5) * 100.0F);
 				if(var7 > 0) {
 					this.addStat(StatList.distanceWalkedStat, var7);
-					if(this.func_35117_Q()) {
+					if(this.func_35117_Q() && !Personalization.paxSprinting) {
 						this.func_35198_d(10.0F * 0.01F * (float)var7 * 0.01F);
-					} else {
+						this.addThirst(0.0025F * var7);
+					} else if (!Personalization.reducedExhaustion) {
 						this.func_35198_d(0.01F * (float)var7 * 0.01F);
 					}
 				}
@@ -995,16 +1108,6 @@
 
 	}
 
-	protected void fall(float var1) {
-		if(!this.field_35212_aW.field_35758_c) {
-			if(var1 >= 2.0F) {
-				this.addStat(StatList.distanceFallenStat, (int)Math.round((double)var1 * 100.0D));
-			}
-
-			super.fall(var1);
-		}
-	}
-
 	public void onKillEntity(EntityLiving var1) {
 		if(var1 instanceof EntityMob) {
 			this.triggerAchievement(AchievementList.killEnemy);
@@ -1034,11 +1137,13 @@
 		return var2;
 	}
 
-	public void setInPortal() {
+	public void setInPortal(int meta) {
 		if(this.timeUntilPortal > 0) {
 			this.timeUntilPortal = 10;
 		} else {
 			this.inPortal = true;
+			this.inSkyPortal = meta == 1;
+			this.inChargedPortal = meta == 2;
 		}
 	}
 
@@ -1062,11 +1167,18 @@
 	}
 
 	public void func_35198_d(float var1) {
-		if(!this.field_35212_aW.field_35759_a) {
-			if(!this.worldObj.multiplayerWorld) {
-				this.field_35217_av.func_35762_a(var1);
-			}
-
+		if (Personalization.hunger && !this.field_35212_aW.field_35759_a && !this.worldObj.multiplayerWorld) {
+			var1 *= 1.0F - this.skills.stamina.getValue() * 0.075F;
+
+			this.field_35217_av.func_35762_a(var1);
+		}
+	}
+
+	public void addThirst(float var1) {
+		if (Personalization.thirst && !this.field_35212_aW.field_35759_a && !this.worldObj.multiplayerWorld) {
+			var1 *= 1.0F - this.skills.stamina.getValue() * 0.075F;
+
+			this.field_35217_av.addThirst(var1);
 		}
 	}
 
@@ -1078,8 +1190,12 @@
 		return (var1 || this.field_35217_av.func_35770_c()) && !this.field_35212_aW.field_35759_a;
 	}
 
+	public boolean isThirsty() {
+		return this.field_35217_av.getThirst() < 20;
+	}
+
 	public boolean func_35194_au() {
-		return this.health > 0 && this.health < 20;
+		return this.health > 0 && this.health < this.getMaxHealth();
 	}
 
 	public void func_35199_b(ItemStack var1, int var2) {
@@ -1094,6 +1210,9 @@
 	}
 
 	public boolean func_35190_e(int var1, int var2, int var3) {
+		if (this.dimension == 2 && (var2 % 7 == 0 || var2 % 7 == 6 || var1 < -129 || var1 > 127 || var3 < -129 || var3 > 127)) {
+			return false;
+		}
 		return true;
 	}
 
@@ -1103,5 +1222,104 @@
 
 	protected boolean func_35163_av() {
 		return true;
+	}
+
+	public int getSkillPoints() {
+		return this.field_35210_aY * 3 + this.skillPointRemainder;
+	}
+
+	public boolean paySkillPoints(int amount) {
+		int points = getSkillPoints();
+		if (points < amount) return false;
+		points -= amount;
+
+		int oldRequirement = this.func_35193_as();
+		int newLevel = points / 3;
+		int diff = this.field_35210_aY - newLevel;
+
+		while (diff > 0) {
+			this.field_35210_aY--;
+			this.field_35209_aZ -= this.func_35193_as();
+			diff--;
+		}
+		this.skillPointRemainder = points % 3;
+
+		this.field_35211_aX = (int)((float)this.field_35211_aX / oldRequirement * this.func_35193_as());
+		return true;
+	}
+
+	protected int getXpSpamGroup(int var1) {
+		return EntityXPOrb.func_35121_b(var1);
+	}
+
+	protected int getXpSpammed(EntityPlayer var1) {
+		return this.field_35209_aZ;
+	}
+
+	protected void kill() {
+		if (this.posY > 0.0D || this.dimension != 1) {
+			super.kill();
+		}
+	}
+
+	public void func_41014_d(EntityPlayer var1) {
+		this.inventory.func_41022_a(var1.inventory);
+		this.health = var1.health;
+		this.field_35217_av = var1.field_35217_av;
+		this.field_35211_aX = var1.field_35211_aX;
+		this.field_35210_aY = var1.field_35210_aY;
+		this.field_35209_aZ = var1.field_35209_aZ;
+		this.score = var1.score;
+		this.skillPointRemainder = var1.skillPointRemainder;
+		this.skills = var1.skills;
+	}
+
+	public void loadIsleOfTime(boolean force) {
+		if (Personalization.gameMode != B18XGameMode.ISLES_OF_TIME || this.dimension != 0) {
+			return;
+		}
+
+		int islandSize = B18XGameMode.ISLAND_SIZE;
+		int x = MathHelper.floor_double(this.posX);
+		int z = MathHelper.floor_double(this.posZ);
+
+		if (MathHelper.floorMod((x + islandSize / 2.0D) / islandSize, 2) > 1.0D) {
+			z += islandSize / 2;
+		}
+		x = Math.floorDiv(x + islandSize / 2, islandSize);
+		z = Math.floorDiv(z + islandSize / 2, islandSize);
+		long islandPos = ChunkCoordIntPair.chunkXZ2Int(x, z);
+
+		if (this.prevIsland != islandPos || force) {
+			this.prevIsland = islandPos;
+			WorldInfo worldInfo = this.worldObj.getWorldInfo();
+
+			NBTTagCompound preset = worldInfo.getIsleOfTime(islandPos);
+			if (preset != null) {
+				if (!Personalization.setPresetNBT(preset)) {
+					return;
+				}
+			} else {
+				Personalization.betaness = Personalization.rand.nextFloat() * 6.0F - 3.0F;
+				Personalization.weirdness = Personalization.rand.nextFloat() * 2.0F - 1.0F;
+				Personalization.chaos = 0.0F;
+				Personalization.options.clear();
+				Personalization.optionMap.clear();
+				Personalization.version = null;
+				Personalization.preset = null;
+				Personalization.personalize();
+
+				preset = Personalization.getPresetNBT();
+				worldInfo.setIsleOfTime(islandPos, preset);
+			}
+
+			if (this.ridingEntity != null) {
+				this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posZ)).playerModified = true;
+			}
+			this.onIslandChange();
+		}
+	}
+
+	protected void onIslandChange() {
 	}
 }
--- net/minecraft/src/RenderGlobal.java
+++ net/minecraft/src/RenderGlobal.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.io.File;
 import java.nio.IntBuffer;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -10,6 +11,7 @@
 import org.lwjgl.opengl.ARBOcclusionQuery;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL15;
+import org.lwjgl.opengl.GL30;
 
 public class RenderGlobal implements IWorldAccess {
 	public List tileEntities = new ArrayList();
@@ -56,6 +58,7 @@
 	double prevSortZ = -9999.0D;
 	public float damagePartialTime;
 	int frustrumCheckOffset = 0;
+	private float lastUpdateAngle;
 
 	public RenderGlobal(Minecraft var1, RenderEngine var2) {
 		this.mc = var1;
@@ -184,6 +187,7 @@
 
 	public void loadRenderers() {
 		if(this.worldObj != null) {
+			this.lastUpdateAngle = this.worldObj.getCelestialAngle(1.0F);
 			Block.leaves.setGraphicsLevel(this.mc.gameSettings.fancyGraphics);
 			this.renderDistance = this.mc.gameSettings.renderDistance;
 			int var1;
@@ -197,10 +201,8 @@
 			if(var1 > 400) {
 				var1 = 400;
 			}
-
+			this.renderChunksTall = var1 / 16 + 1;
 			this.renderChunksWide = var1 / 16 + 1;
-			this.worldObj.getClass();
-			this.renderChunksTall = 128 / 16;
 			this.renderChunksDeep = var1 / 16 + 1;
 			this.worldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
 			this.sortedWorldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
@@ -291,12 +293,6 @@
 						var8 = 0;
 					}
 
-					this.worldObj.getClass();
-					if(var8 >= 128) {
-						this.worldObj.getClass();
-						var8 = 128 - 1;
-					}
-
 					if(this.worldObj.blockExists(MathHelper.floor_double(var7.posX), var8, MathHelper.floor_double(var7.posZ))) {
 						++this.countEntitiesRendered;
 						RenderManager.instance.renderEntity(var7, var3);
@@ -304,7 +300,7 @@
 				}
 			}
 
-			RenderHelper.enableStandardItemLighting();
+		RenderHelper.enableStandardEntityLighting();
 
 			for(var6 = 0; var6 < this.tileEntities.size(); ++var6) {
 				TileEntityRenderer.instance.renderTileEntity((TileEntity)this.tileEntities.get(var6), var3);
@@ -371,6 +367,14 @@
 
 				for(int var12 = 0; var12 < this.renderChunksTall; ++var12) {
 					int var13 = var12 * 16;
+					int var13a = var13 + var5 - var2;
+					if (var13a < 0) {
+						var13a -= var4 - 1;
+					}
+
+					var13a /= var4;
+					var13 -= var13a * var4;
+
 					if(var13 < this.minBlockY) {
 						this.minBlockY = var13;
 					}
@@ -392,6 +396,13 @@
 	}
 
 	public int sortAndRender(EntityLiving var1, int var2, double var3) {
+		float celestialAngle = this.worldObj.getCelestialAngle(1.0F);
+		if (Personalization.directionalLighting && MathHelper.abs(this.lastUpdateAngle - celestialAngle) > 0.01F) {
+			this.updateAllRenderers();
+			this.lastUpdateAngle = celestialAngle;
+			System.out.println("Refresh angle!");
+		}
+
 		for(int var5 = 0; var5 < 10; ++var5) {
 			this.worldRenderersCheckIndex = (this.worldRenderersCheckIndex + 1) % this.worldRenderers.length;
 			WorldRenderer var6 = this.worldRenderers[this.worldRenderersCheckIndex];
@@ -642,7 +653,7 @@
 			float var10;
 			float var11;
 			float var12;
-			if(var17 != null) {
+			if(var17 != null && !Personalization.alphaTextures) {
 				GL11.glDisable(GL11.GL_TEXTURE_2D);
 				GL11.glShadeModel(GL11.GL_SMOOTH);
 				GL11.glPushMatrix();
@@ -686,27 +697,31 @@
 			var8 = 0.0F;
 			var9 = 0.0F;
 			var10 = 0.0F;
-			GL11.glColor4f(1.0F, 1.0F, 1.0F, var7);
 			GL11.glTranslatef(var8, var9, var10);
 			GL11.glRotatef(0.0F, 0.0F, 0.0F, 1.0F);
 			GL11.glRotatef(this.worldObj.getCelestialAngle(var1) * 360.0F, 1.0F, 0.0F, 0.0F);
-			var11 = 30.0F;
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/sun.png"));
-			var16.startDrawingQuads();
-			var16.addVertexWithUV((double)(-var11), 100.0D, (double)(-var11), 0.0D, 0.0D);
-			var16.addVertexWithUV((double)var11, 100.0D, (double)(-var11), 1.0D, 0.0D);
-			var16.addVertexWithUV((double)var11, 100.0D, (double)var11, 1.0D, 1.0D);
-			var16.addVertexWithUV((double)(-var11), 100.0D, (double)var11, 0.0D, 1.0D);
-			var16.draw();
-			var11 = 20.0F;
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/moon.png"));
-			var16.startDrawingQuads();
-			var16.addVertexWithUV((double)(-var11), -100.0D, (double)var11, 1.0D, 1.0D);
-			var16.addVertexWithUV((double)var11, -100.0D, (double)var11, 0.0D, 1.0D);
-			var16.addVertexWithUV((double)var11, -100.0D, (double)(-var11), 0.0D, 0.0D);
-			var16.addVertexWithUV((double)(-var11), -100.0D, (double)(-var11), 1.0D, 0.0D);
-			var16.draw();
+			if (!this.worldObj.worldProvider.endForced && (!this.worldObj.worldProvider.isSkyWorld || !Personalization.endSky)) {
+				var11 = 30.0F - Personalization.entropy * 10.0F;
+				GL11.glColor4f(1.0F, 1.0F, 1.0F, var7 * Math.min(1.0F - Personalization.entropy * 0.75F, 1.0F));
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/sun.png"));
+				var16.startDrawingQuads();
+				var16.addVertexWithUV((double)(-var11), 100.0D, (double)(-var11), 0.0D, 0.0D);
+				var16.addVertexWithUV((double)var11, 100.0D, (double)(-var11), 1.0D, 0.0D);
+				var16.addVertexWithUV((double)var11, 100.0D, (double)var11, 1.0D, 1.0D);
+				var16.addVertexWithUV((double)(-var11), 100.0D, (double)var11, 0.0D, 1.0D);
+				var16.draw();
+				var11 = 20.0F - Personalization.entropy * 6.5F;
+				GL11.glColor4f(1.0F, 1.0F, 1.0F, var7 * Math.min(1.0F - Personalization.entropy * 0.9F, 1.0F));
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/moon.png"));
+				var16.startDrawingQuads();
+				var16.addVertexWithUV((double)(-var11), -100.0D, (double)var11, 1.0D, 1.0D);
+				var16.addVertexWithUV((double)var11, -100.0D, (double)var11, 0.0D, 1.0D);
+				var16.addVertexWithUV((double)var11, -100.0D, (double)(-var11), 0.0D, 0.0D);
+				var16.addVertexWithUV((double)(-var11), -100.0D, (double)(-var11), 1.0D, 0.0D);
+				var16.draw();
+			}
 			GL11.glDisable(GL11.GL_TEXTURE_2D);
+			GL11.glColor4f(1.0F, 1.0F, 1.0F, var7);
 			var12 = this.worldObj.getStarBrightness(var1) * var7;
 			if(var12 > 0.0F) {
 				GL11.glColor4f(var12, var12, var12, var12);
@@ -720,14 +735,14 @@
 			GL11.glPopMatrix();
 			GL11.glDisable(GL11.GL_TEXTURE_2D);
 			GL11.glColor3f(0.0F, 0.0F, 0.0F);
-			double var18 = this.mc.thePlayer.getPosition(var1).yCoord - 64.0D;
-			if(var18 < 0.0D) {
+			double var18 = this.mc.thePlayer.getPosition(var1).yCoord - 63.0D;
+			if((var18 < 0.0D && this.mc.theWorld.worldProvider.worldType < 1) || (this.mc.theWorld.worldProvider.isSkyWorld && Personalization.endSky || this.worldObj.worldProvider.endForced)) {
 				GL11.glPushMatrix();
 				GL11.glTranslatef(0.0F, 12.0F, 0.0F);
 				GL11.glCallList(this.glSkyList2);
 				GL11.glPopMatrix();
 				var9 = 1.0F;
-				var10 = -((float)(var18 + 64.0D));
+				var10 = -((float)(var18 + 63.0D));
 				var11 = -var9;
 				var16.startDrawingQuads();
 				var16.setColorRGBA_I(0, 255);
@@ -760,10 +775,12 @@
 				GL11.glColor3f(var3, var4, var5);
 			}
 
-			GL11.glPushMatrix();
-			GL11.glTranslatef(0.0F, -((float)(var18 - 16.0D)), 0.0F);
-			GL11.glCallList(this.glSkyList2);
-			GL11.glPopMatrix();
+			if (this.mc.theWorld.worldProvider.worldType < 1) {
+				GL11.glPushMatrix();
+				GL11.glTranslatef(0.0F, -((float)(var18 - 16.0D)), 0.0F);
+				GL11.glCallList(this.glSkyList2);
+				GL11.glPopMatrix();
+			}
 			GL11.glEnable(GL11.GL_TEXTURE_2D);
 			GL11.glDepthMask(true);
 		}
@@ -798,6 +815,11 @@
 
 				var10 = 0.5F / 1024.0F;
 				double var24 = (double)((float)this.cloudOffsetX + var1) + (this.worldObj.field_35467_J + (this.worldObj.field_35468_K - this.worldObj.field_35467_J) * (double)var1) * 24000.0D;
+				if (Personalization.entropy < 0.0F) {
+					var24 *= -Personalization.entropy + 1.0F;
+				} else {
+					var24 *= 1.0F - Personalization.entropy / 2.0F;
+				}
 				double var13 = this.mc.renderViewEntity.prevPosX + (this.mc.renderViewEntity.posX - this.mc.renderViewEntity.prevPosX) * (double)var1 + var24 * (double)0.03F;
 				double var15 = this.mc.renderViewEntity.prevPosZ + (this.mc.renderViewEntity.posZ - this.mc.renderViewEntity.prevPosZ) * (double)var1;
 				int var17 = MathHelper.floor_double(var13 / 2048.0D);
@@ -838,6 +860,11 @@
 		float var4 = 12.0F;
 		float var5 = 4.0F;
 		double var6 = (double)((float)this.cloudOffsetX + var1) + (this.worldObj.field_35467_J + (this.worldObj.field_35468_K - this.worldObj.field_35467_J) * (double)var1) * 24000.0D;
+		if (Personalization.entropy < 0.0F) {
+			var6 *= -Personalization.entropy + 1.0F;
+		} else {
+			var6 *= 1.0F - Personalization.entropy * 0.8F;
+		}
 		double var8 = (this.mc.renderViewEntity.prevPosX + (this.mc.renderViewEntity.posX - this.mc.renderViewEntity.prevPosX) * (double)var1 + var6 * (double)0.03F) / (double)var4;
 		double var10 = (this.mc.renderViewEntity.prevPosZ + (this.mc.renderViewEntity.posZ - this.mc.renderViewEntity.prevPosZ) * (double)var1) / (double)var4 + (double)0.33F;
 		float var12 = this.worldObj.worldProvider.getCloudHeight() - var2 + 0.33F;
@@ -914,7 +941,11 @@
 						var3.addVertexWithUV((double)(var32 + 0.0F), (double)(var12 + var5 - var26), (double)(var33 + 0.0F), (double)((var30 + 0.0F) * var21 + var19), (double)((var31 + 0.0F) * var21 + var20));
 					}
 
-					var3.setColorRGBA_F(var16 * 0.9F, var17 * 0.9F, var18 * 0.9F, 0.8F);
+					if (Personalization.pe8env || Personalization.pe7env) {
+						var3.setColorRGBA_F(var16, var17, var18, 0.8F);
+					} else {
+						var3.setColorRGBA_F(var16 * 0.9F, var17 * 0.9F, var18 * 0.9F, 0.8F);
+					}
 					int var34;
 					if(var28 > -1) {
 						var3.setNormal(-1.0F, 0.0F, 0.0F);
@@ -938,7 +969,11 @@
 						}
 					}
 
-					var3.setColorRGBA_F(var16 * 0.8F, var17 * 0.8F, var18 * 0.8F, 0.8F);
+					if (Personalization.pe8env || Personalization.pe7env) {
+						var3.setColorRGBA_F(var16 * 0.7F, var17 * 0.7F, var18 * 0.7F, 0.8F);
+					} else {
+						var3.setColorRGBA_F(var16 * 0.8F, var17 * 0.8F, var18 * 0.8F, 0.8F);
+					}
 					if(var29 > -1) {
 						var3.setNormal(0.0F, 0.0F, -1.0F);
 
@@ -950,6 +985,9 @@
 						}
 					}
 
+					if (Personalization.pe8env || Personalization.pe7env) {
+						var3.setColorRGBA_F(var16, var17, var18, 0.8F);
+					}
 					if(var29 <= 1) {
 						var3.setNormal(0.0F, 0.0F, 1.0F);
 
@@ -1194,26 +1232,46 @@
 	}
 
 	public void drawSelectionBox(EntityPlayer var1, MovingObjectPosition var2, int var3, ItemStack var4, float var5) {
-		if(var3 == 0 && var2.typeOfHit == EnumMovingObjectType.TILE) {
+		if(var3 == 0 && var2.typeOfHit == EnumMovingObjectType.TILE && var1.func_35190_e(var2.blockX, var2.blockY, var2.blockZ) && var1.dimension != 2) {
+			if (Personalization.pe8env) GL11.glPushMatrix();
 			GL11.glEnable(GL11.GL_BLEND);
-			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-			GL11.glColor4f(0.0F, 0.0F, 0.0F, 0.4F);
+			if (Personalization.pe8env) {
+				GL11.glBlendFunc(GL11.GL_DST_COLOR, GL11.GL_ONE);
+				GL11.glColor4f(0.4F, 0.4F, 0.4F, 1.0F);
+				GL11.glScalef(0.99F, 0.99F, 0.99F);
+			} else {
+				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+				GL11.glColor4f(0.0F, 0.0F, 0.0F, 0.4F);
+			}
+
 			GL11.glLineWidth(2.0F);
 			GL11.glDisable(GL11.GL_TEXTURE_2D);
 			GL11.glDepthMask(false);
 			float var6 = 0.002F;
 			int var7 = this.worldObj.getBlockId(var2.blockX, var2.blockY, var2.blockZ);
 			if(var7 > 0) {
-				Block.blocksList[var7].setBlockBoundsBasedOnState(this.worldObj, var2.blockX, var2.blockY, var2.blockZ);
+				if (!Personalization.pe8env) Block.blocksList[var7].setBlockBoundsBasedOnState(this.worldObj, var2.blockX, var2.blockY, var2.blockZ);
 				double var8 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var5;
 				double var10 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var5;
 				double var12 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var5;
-				this.drawOutlinedBoundingBox(Block.blocksList[var7].getSelectedBoundingBoxFromPool(this.worldObj, var2.blockX, var2.blockY, var2.blockZ).expand((double)var6, (double)var6, (double)var6).getOffsetBoundingBox(-var8, -var10, -var12));
+
+				if (Personalization.pe8env) {
+					Tessellator t = Tessellator.instance;
+					t.startDrawingQuads();
+					t.setTranslationD(-var8, -var10, -var12);
+					t.disableColor();
+					this.globalRenderBlocks.renderBlockByRenderType(Block.blocksList[var7], var2.blockX, var2.blockY, var2.blockZ);
+					t.draw();
+					t.setTranslationD(0.0D, 0.0D, 0.0D);
+				} else {
+					this.drawOutlinedBoundingBox(Block.blocksList[var7].getSelectedBoundingBoxFromPool(this.worldObj, var2.blockX, var2.blockY, var2.blockZ).expand((double)var6, (double)var6, (double)var6).getOffsetBoundingBox(-var8, -var10, -var12));
+				}
 			}
 
 			GL11.glDepthMask(true);
 			GL11.glEnable(GL11.GL_TEXTURE_2D);
 			GL11.glDisable(GL11.GL_BLEND);
+			if (Personalization.pe8env) GL11.glPopMatrix();
 		}
 
 	}
@@ -1246,6 +1304,10 @@
 		var2.draw();
 	}
 
+	public void markBlockNeedsUpdate2(int var1, int var2, int var3) {
+		this.markBlocksForUpdate(var1 - 1, var2 - 1, var3 - 1, var1 + 1, var2 + 1, var3 + 1);
+	}
+
 	public void markBlocksForUpdate(int var1, int var2, int var3, int var4, int var5, int var6) {
 		int var7 = MathHelper.bucketInt(var1, 16);
 		int var8 = MathHelper.bucketInt(var2, 16);
@@ -1310,6 +1372,13 @@
 		this.mc.sndManager.playStreaming(var1, (float)var2, (float)var3, (float)var4, 1.0F, 1.0F);
 	}
 
+	public void playFileRecord(File var1, int var2, int var3, int var4) {
+		if (var1 == null) return;
+
+		this.mc.ingameGUI.setRecordPlayingMessage(this.mc.session.username + " - " + var1.getName());
+		this.mc.sndManager.playStreamingFile(var1, (float)var2, (float)var3, (float)var4, 1.0F, 1.0F);
+	}
+
 	public void playSound(String var1, double var2, double var4, double var6, float var8, float var9) {
 		float var10 = 16.0F;
 		if(var8 > 1.0F) {
@@ -1415,6 +1484,16 @@
 
 	}
 
+	public void updateAllRenderers() {
+		for(int var1 = 0; var1 < this.worldRenderers.length; ++var1) {
+			if(!this.worldRenderers[var1].needsUpdate) {
+				this.worldRenderersToUpdate.add(this.worldRenderers[var1]);
+				this.worldRenderers[var1].markDirty();
+			}
+		}
+
+	}
+
 	public void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity var4) {
 	}
 
@@ -1452,6 +1531,8 @@
 				this.worldObj.playRecord((String)null, var3, var4, var5);
 			}
 			break;
+		case 1006:
+			this.worldObj.playFileRecord(this.worldObj.getWorldInfo().getFileRecord(var6), var3, var4, var5);
 		case 2000:
 			int var8 = var6 % 3 - 1;
 			int var9 = var6 / 3 % 3 - 1;
--- net/minecraft/src/ChunkProviderClient.java
+++ net/minecraft/src/ChunkProviderClient.java
@@ -12,7 +12,7 @@
 
 	public ChunkProviderClient(World var1) {
 		var1.getClass();
-		this.blankChunk = new EmptyChunk(var1, new byte[256 * 128], 0, 0);
+		this.blankChunk = new EmptyChunk(var1, 0, 0);
 		this.worldObj = var1;
 	}
 
@@ -22,7 +22,7 @@
 
 	public void func_539_c(int var1, int var2) {
 		Chunk var3 = this.provideChunk(var1, var2);
-		if(!var3.func_21167_h()) {
+		if(!var3.isEmpty()) {
 			var3.onChunkUnload();
 		}
 
@@ -32,9 +32,7 @@
 
 	public Chunk loadChunk(int var1, int var2) {
 		this.worldObj.getClass();
-		byte[] var3 = new byte[256 * 128];
-		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
-		Arrays.fill(var4.skylightMap.data, (byte)-1);
+		Chunk var4 = new Chunk(this.worldObj, var1, var2);
 		this.chunkMapping.func_35577_a(ChunkCoordIntPair.chunkXZ2Int(var1, var2), var4);
 		var4.isChunkLoaded = true;
 		return var4;
--- net/minecraft/src/FurnaceRecipes.java
+++ net/minecraft/src/FurnaceRecipes.java
@@ -14,6 +14,7 @@
 	private FurnaceRecipes() {
 		this.addSmelting(Block.oreIron.blockID, new ItemStack(Item.ingotIron));
 		this.addSmelting(Block.oreGold.blockID, new ItemStack(Item.ingotGold));
+		this.addSmelting(Block.oreCopper.blockID, new ItemStack(Item.ingotCopper));
 		this.addSmelting(Block.oreDiamond.blockID, new ItemStack(Item.diamond));
 		this.addSmelting(Block.sand.blockID, new ItemStack(Block.glass));
 		this.addSmelting(Item.porkRaw.shiftedIndex, new ItemStack(Item.porkCooked));
--- net/minecraft/src/SaveConverterMcRegion.java
+++ /dev/null
@@ -1,174 +1,0 @@
-package net.minecraft.src;
-
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.zip.GZIPInputStream;
-
-public class SaveConverterMcRegion extends SaveFormatOld {
-	public SaveConverterMcRegion(File var1) {
-		super(var1);
-	}
-
-	public String func_22178_a() {
-		return "Scaevolus\' McRegion";
-	}
-
-	public List func_22176_b() {
-		ArrayList var1 = new ArrayList();
-		File[] var2 = this.field_22180_a.listFiles();
-		File[] var3 = var2;
-		int var4 = var2.length;
-
-		for(int var5 = 0; var5 < var4; ++var5) {
-			File var6 = var3[var5];
-			if(var6.isDirectory()) {
-				String var7 = var6.getName();
-				WorldInfo var8 = this.getWorldInfo(var7);
-				if(var8 != null) {
-					boolean var9 = var8.getSaveVersion() != 19132;
-					String var10 = var8.getWorldName();
-					if(var10 == null || MathHelper.stringNullOrLengthZero(var10)) {
-						var10 = var7;
-					}
-
-					var1.add(new SaveFormatComparator(var7, var10, var8.getLastTimePlayed(), var8.getSizeOnDisk(), var8.func_35918_q(), var9));
-				}
-			}
-		}
-
-		return var1;
-	}
-
-	public void flushCache() {
-		RegionFileCache.clearRegionFileReferences();
-	}
-
-	public ISaveHandler getSaveLoader(String var1, boolean var2) {
-		return new SaveOldDir(this.field_22180_a, var1, var2);
-	}
-
-	public boolean isOldMapFormat(String var1) {
-		WorldInfo var2 = this.getWorldInfo(var1);
-		return var2 != null && var2.getSaveVersion() == 0;
-	}
-
-	public boolean convertMapFormat(String var1, IProgressUpdate var2) {
-		var2.setLoadingProgress(0);
-		ArrayList var3 = new ArrayList();
-		ArrayList var4 = new ArrayList();
-		ArrayList var5 = new ArrayList();
-		ArrayList var6 = new ArrayList();
-		File var7 = new File(this.field_22180_a, var1);
-		File var8 = new File(var7, "DIM-1");
-		System.out.println("Scanning folders...");
-		this.func_22183_a(var7, var3, var4);
-		if(var8.exists()) {
-			this.func_22183_a(var8, var5, var6);
-		}
-
-		int var9 = var3.size() + var5.size() + var4.size() + var6.size();
-		System.out.println("Total conversion count is " + var9);
-		this.func_22181_a(var7, var3, 0, var9, var2);
-		this.func_22181_a(var8, var5, var3.size(), var9, var2);
-		WorldInfo var10 = this.getWorldInfo(var1);
-		var10.setSaveVersion(19132);
-		ISaveHandler var11 = this.getSaveLoader(var1, false);
-		var11.saveWorldInfo(var10);
-		this.func_22182_a(var4, var3.size() + var5.size(), var9, var2);
-		if(var8.exists()) {
-			this.func_22182_a(var6, var3.size() + var5.size() + var4.size(), var9, var2);
-		}
-
-		return true;
-	}
-
-	private void func_22183_a(File var1, ArrayList var2, ArrayList var3) {
-		ChunkFolderPattern var4 = new ChunkFolderPattern((Empty2)null);
-		ChunkFilePattern var5 = new ChunkFilePattern((Empty2)null);
-		File[] var6 = var1.listFiles(var4);
-		File[] var7 = var6;
-		int var8 = var6.length;
-
-		for(int var9 = 0; var9 < var8; ++var9) {
-			File var10 = var7[var9];
-			var3.add(var10);
-			File[] var11 = var10.listFiles(var4);
-			File[] var12 = var11;
-			int var13 = var11.length;
-
-			for(int var14 = 0; var14 < var13; ++var14) {
-				File var15 = var12[var14];
-				File[] var16 = var15.listFiles(var5);
-				File[] var17 = var16;
-				int var18 = var16.length;
-
-				for(int var19 = 0; var19 < var18; ++var19) {
-					File var20 = var17[var19];
-					var2.add(new ChunkFile(var20));
-				}
-			}
-		}
-
-	}
-
-	private void func_22181_a(File var1, ArrayList var2, int var3, int var4, IProgressUpdate var5) {
-		Collections.sort(var2);
-		byte[] var6 = new byte[4096];
-		Iterator var7 = var2.iterator();
-
-		while(var7.hasNext()) {
-			ChunkFile var8 = (ChunkFile)var7.next();
-			int var9 = var8.getXChunk();
-			int var10 = var8.getYChunk();
-			RegionFile var11 = RegionFileCache.createOrLoadRegionFile(var1, var9, var10);
-			if(!var11.isChunkSaved(var9 & 31, var10 & 31)) {
-				try {
-					DataInputStream var12 = new DataInputStream(new GZIPInputStream(new FileInputStream(var8.getChunkFile())));
-					DataOutputStream var13 = var11.getChunkDataOutputStream(var9 & 31, var10 & 31);
-					boolean var14 = false;
-
-					while(true) {
-						int var17 = var12.read(var6);
-						if(var17 == -1) {
-							var13.close();
-							var12.close();
-							break;
-						}
-
-						var13.write(var6, 0, var17);
-					}
-				} catch (IOException var15) {
-					var15.printStackTrace();
-				}
-			}
-
-			++var3;
-			int var16 = (int)Math.round(100.0D * (double)var3 / (double)var4);
-			var5.setLoadingProgress(var16);
-		}
-
-		RegionFileCache.clearRegionFileReferences();
-	}
-
-	private void func_22182_a(ArrayList var1, int var2, int var3, IProgressUpdate var4) {
-		Iterator var5 = var1.iterator();
-
-		while(var5.hasNext()) {
-			File var6 = (File)var5.next();
-			File[] var7 = var6.listFiles();
-			func_22179_a(var7);
-			var6.delete();
-			++var2;
-			int var8 = (int)Math.round(100.0D * (double)var2 / (double)var3);
-			var4.setLoadingProgress(var8);
-		}
-
-	}
-}
--- net/minecraft/src/BiomeGenHell.java
+++ net/minecraft/src/BiomeGenHell.java
@@ -8,5 +8,14 @@
 		this.spawnableWaterCreatureList.clear();
 		this.spawnableMonsterList.add(new SpawnListEntry(EntityGhast.class, 10, 4, 4));
 		this.spawnableMonsterList.add(new SpawnListEntry(EntityPigZombie.class, 10, 4, 4));
+		this.spawnableMonsterList.add(new SpawnListEntry(EntityBlaze.class, 2, 4, 4));
+	}
+
+	public void updateSpawnEntry(SpawnListEntry entry) {
+		super.updateSpawnEntry(entry);
+
+		if (entry.entityClass == EntityBlaze.class) {
+			entry.field_35590_d = Personalization.spawnBlazes ? 2 : 0;
+		}
 	}
 }
--- net/minecraft/src/IChunkProvider.java
+++ net/minecraft/src/IChunkProvider.java
@@ -16,4 +16,7 @@
 	boolean canSave();
 
 	String makeString();
+
+	default void prepareForRefresh() {
+	}
 }
--- /dev/null
+++ net/minecraft/src/GuiModifyValues.java
@@ -1,0 +1,118 @@
+package net.minecraft.src;
+
+public class GuiModifyValues extends GuiControlPanel {
+	private final GuiScreen parentScreen;
+	private GuiTextField textboxBetaness;
+	private GuiTextField textboxWeirdness;
+	private GuiTextField textboxChaos;
+	private GuiTextField textboxEntropy;
+
+	public GuiModifyValues(GuiScreen parentScreen) {
+		this.parentScreen = parentScreen;
+	}
+
+	public void updateScreen() {
+		super.updateScreen();
+		this.textboxBetaness.updateCursorCounter();
+		this.textboxWeirdness.updateCursorCounter();
+		this.textboxChaos.updateCursorCounter();
+		this.textboxEntropy.updateCursorCounter();
+	}
+
+	public void initGui() {
+		this.controlList.add(new GuiButton(0, this.width / 2 - 50, this.height / 2 + 80, 100, 20, "OK"));
+
+		this.textboxBetaness = new GuiTextField(this, this.fontRenderer, this.width / 2 - 105, this.height / 2 - 30,
+				100, 20, String.valueOf(Personalization.betaness));
+		this.textboxWeirdness = new GuiTextField(this, this.fontRenderer, this.width / 2 - 105, this.height / 2 + 10,
+				100, 20, String.valueOf(Personalization.weirdness));
+		this.textboxChaos = new GuiTextField(this, this.fontRenderer, this.width / 2 + 5, this.height / 2 - 30,
+				100, 20, String.valueOf(Personalization.chaos));
+		this.textboxEntropy = new GuiTextField(this, this.fontRenderer, this.width / 2 + 5, this.height / 2 + 10,
+				100, 20, String.valueOf(Personalization.entropy));
+
+		this.controlList.add(new GuiButton(1, this.width / 2 - 105, this.height / 2 + 50, 100, 20, textBool(Personalization.chaosEffects)));
+		this.controlList.add(new GuiButton(2, this.width / 2 + 5, this.height / 2 + 50, 100, 20, Personalization.gameMode.toString()));
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		switch (var1.id) {
+			case 0:
+				try {
+					Personalization.betaness = Float.parseFloat(this.textboxBetaness.getText());
+				} catch (NumberFormatException ignored) {
+				}
+
+				try {
+					Personalization.weirdness = Float.parseFloat(this.textboxWeirdness.getText());
+				} catch (NumberFormatException ignored) {
+				}
+
+				try {
+					Personalization.chaos = Float.parseFloat(this.textboxChaos.getText());
+				} catch (NumberFormatException ignored) {
+				}
+
+				try {
+					Personalization.entropy = Float.parseFloat(this.textboxEntropy.getText());
+				} catch (NumberFormatException ignored) {
+				}
+
+				if (Personalization.preset == null || Personalization.preset.isEmpty()) {
+					Personalization.version = null;
+				}
+				Personalization.options.clear();
+				Personalization.optionMap.clear();
+				Personalization.personalize();
+				this.game.displayGuiScreen(this.parentScreen);
+				break;
+
+			case 1:
+				Personalization.chaosEffects = !Personalization.chaosEffects;
+				var1.displayString = textBool(Personalization.chaosEffects);
+				break;
+
+			case 2:
+				Personalization.gameMode = Personalization.gameMode.getNext();
+				var1.displayString = Personalization.gameMode.toString();
+				break;
+		}
+	}
+
+	protected void keyTyped(char var1, int var2) {
+		this.textboxBetaness.textboxKeyTyped(var1, var2);
+		this.textboxWeirdness.textboxKeyTyped(var1, var2);
+		this.textboxChaos.textboxKeyTyped(var1, var2);
+		this.textboxEntropy.textboxKeyTyped(var1, var2);
+	}
+
+	protected void mouseClicked(int var1, int var2, int var3) {
+		super.mouseClicked(var1, var2, var3);
+		this.textboxBetaness.mouseClicked(var1, var2, var3);
+		this.textboxWeirdness.mouseClicked(var1, var2, var3);
+		this.textboxChaos.mouseClicked(var1, var2, var3);
+		this.textboxEntropy.mouseClicked(var1, var2, var3);
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawControlPanelBackground();
+
+		this.drawString(this.fontRenderer, "Betaness", this.width / 2 - 100, this.height / 2 - 44, 0x55FF55);
+		this.drawString(this.fontRenderer, "Weirdness", this.width / 2 - 100, this.height / 2 - 4, 0x5555FF);
+		this.drawString(this.fontRenderer, "Chaos", this.width / 2 + 10, this.height / 2 - 44, 0xFF5555);
+		this.drawString(this.fontRenderer, "Entropy", this.width / 2 + 10, this.height / 2 - 4, 0xFFFF55);
+		this.drawString(this.fontRenderer, "Adjust Chaos", this.width / 2 - 100, this.height / 2 + 36, 0xAAAAAA);
+		this.drawString(this.fontRenderer, "Gamemode", this.width / 2 + 10, this.height / 2 + 36, 0xAAAAAA);
+
+		this.textboxBetaness.drawTextBox();
+		this.textboxWeirdness.drawTextBox();
+		this.textboxChaos.drawTextBox();
+		this.textboxEntropy.drawTextBox();
+
+		super.drawScreen(var1, var2, var3);
+	}
+
+	private static String textBool(boolean value) {
+		return value ? "ON" : "OFF";
+	}
+}
--- /dev/null
+++ net/minecraft/src/ThreadedFileIOBase.java
@@ -1,0 +1,72 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+public class ThreadedFileIOBase implements Runnable {
+	public static final ThreadedFileIOBase threadedIOInstance = new ThreadedFileIOBase();
+	private List threadedIOQueue = Collections.synchronizedList(new ArrayList());
+	private volatile long writeQueuedCounter = 0L;
+	private volatile long savedIOCounter = 0L;
+	private volatile boolean isThreadWaiting = false;
+
+	private ThreadedFileIOBase() {
+		Thread var1 = new Thread(this, "File IO Thread");
+		var1.setPriority(1);
+		var1.start();
+	}
+
+	public void run() {
+		while(true) {
+			this.processQueue();
+		}
+	}
+
+	private void processQueue() {
+		for(int var1 = 0; var1 < this.threadedIOQueue.size(); ++var1) {
+			IThreadedFileIO var2 = (IThreadedFileIO)this.threadedIOQueue.get(var1);
+			boolean var3 = var2.writeNextIO();
+			if(!var3) {
+				this.threadedIOQueue.remove(var1--);
+				++this.savedIOCounter;
+			}
+
+			try {
+				if(!this.isThreadWaiting) {
+					Thread.sleep(10L);
+				} else {
+					Thread.sleep(0L);
+				}
+			} catch (InterruptedException var6) {
+				var6.printStackTrace();
+			}
+		}
+
+		if(this.threadedIOQueue.isEmpty()) {
+			try {
+				Thread.sleep(25L);
+			} catch (InterruptedException var5) {
+				var5.printStackTrace();
+			}
+		}
+
+	}
+
+	public void queueIO(IThreadedFileIO var1) {
+		if(!this.threadedIOQueue.contains(var1)) {
+			++this.writeQueuedCounter;
+			this.threadedIOQueue.add(var1);
+		}
+	}
+
+	public void waitForFinish() throws InterruptedException {
+		this.isThreadWaiting = true;
+
+		while(this.writeQueuedCounter != this.savedIOCounter) {
+			Thread.sleep(10L);
+		}
+
+		this.isThreadWaiting = false;
+	}
+}
--- net/minecraft/src/GuiAchievements.java
+++ net/minecraft/src/GuiAchievements.java
@@ -38,17 +38,17 @@
 
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.id == 1) {
-			this.mc.displayGuiScreen((GuiScreen)null);
-			this.mc.setIngameFocus();
+			this.game.displayGuiScreen((GuiScreen)null);
+			this.game.setIngameFocus();
 		}
 
 		super.actionPerformed(var1);
 	}
 
 	protected void keyTyped(char var1, int var2) {
-		if(var2 == this.mc.gameSettings.keyBindInventory.keyCode) {
-			this.mc.displayGuiScreen((GuiScreen)null);
-			this.mc.setIngameFocus();
+		if(var2 == this.game.gameSettings.keyBindInventory.keyCode) {
+			this.game.displayGuiScreen((GuiScreen)null);
+			this.game.setIngameFocus();
 		} else {
 			super.keyTyped(var1, var2);
 		}
@@ -143,8 +143,8 @@
 			var5 = guiMapRight - 1;
 		}
 
-		int var6 = this.mc.renderEngine.getTexture("/terrain.png");
-		int var7 = this.mc.renderEngine.getTexture("/achievement/bg.png");
+		int var6 = this.game.renderEngine.getTexture("/terrain.png");
+		int var7 = this.game.renderEngine.getTexture("/achievement/bg.png");
 		int var8 = (this.width - this.achievementsPaneWidth) / 2;
 		int var9 = (this.height - this.achievementsPaneHeight) / 2;
 		int var10 = var8 + 16;
@@ -157,7 +157,7 @@
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 		GL11.glEnable(GL11.GL_COLOR_MATERIAL);
-		this.mc.renderEngine.bindTexture(var6);
+		this.game.renderEngine.bindTexture(var6);
 		int var12 = var4 + 288 >> 4;
 		int var13 = var5 + 288 >> 4;
 		int var14 = (var4 + 288) % 16;
@@ -257,7 +257,7 @@
 					GL11.glColor4f(var35, var35, var35, 1.0F);
 				}
 
-				this.mc.renderEngine.bindTexture(var7);
+				this.game.renderEngine.bindTexture(var7);
 				var33 = var10 + var16;
 				var34 = var11 + var17;
 				if(var30.getSpecial()) {
@@ -274,7 +274,7 @@
 
 				GL11.glEnable(GL11.GL_LIGHTING);
 				GL11.glEnable(GL11.GL_CULL_FACE);
-				var29.renderItemIntoGUI(this.mc.fontRenderer, this.mc.renderEngine, var30.theItemStack, var33 + 3, var34 + 3);
+				var29.renderItemIntoGUI(this.game.fontRenderer, this.game.renderEngine, var30.theItemStack, var33 + 3, var34 + 3);
 				GL11.glDisable(GL11.GL_LIGHTING);
 				if(!this.statFileWriter.canUnlockAchievement(var30)) {
 					var29.field_27004_a = true;
@@ -290,7 +290,7 @@
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(var7);
+		this.game.renderEngine.bindTexture(var7);
 		this.drawTexturedModalRect(var8, var9, 0, 0, this.achievementsPaneWidth, this.achievementsPaneHeight);
 		GL11.glPopMatrix();
 		this.zLevel = 0.0F;
@@ -325,10 +325,6 @@
 
 			this.fontRenderer.drawStringWithShadow(var31, var17, var33, this.statFileWriter.canUnlockAchievement(var27) ? (var27.getSpecial() ? -128 : -1) : (var27.getSpecial() ? -8355776 : -8355712));
 		}
-
-		GL11.glEnable(GL11.GL_DEPTH_TEST);
-		GL11.glEnable(GL11.GL_LIGHTING);
-		RenderHelper.disableStandardItemLighting();
 	}
 
 	public boolean doesGuiPauseGame() {
--- net/minecraft/src/McRegionChunkLoader.java
+++ /dev/null
@@ -1,69 +1,0 @@
-package net.minecraft.src;
-
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.IOException;
-
-public class McRegionChunkLoader implements IChunkLoader {
-	private final File worldDir;
-
-	public McRegionChunkLoader(File var1) {
-		this.worldDir = var1;
-	}
-
-	public Chunk loadChunk(World var1, int var2, int var3) throws IOException {
-		DataInputStream var4 = RegionFileCache.getChunkInputStream(this.worldDir, var2, var3);
-		if(var4 != null) {
-			NBTTagCompound var5 = CompressedStreamTools.func_1141_a(var4);
-			if(!var5.hasKey("Level")) {
-				System.out.println("Chunk file at " + var2 + "," + var3 + " is missing level data, skipping");
-				return null;
-			} else if(!var5.getCompoundTag("Level").hasKey("Blocks")) {
-				System.out.println("Chunk file at " + var2 + "," + var3 + " is missing block data, skipping");
-				return null;
-			} else {
-				Chunk var6 = ChunkLoader.loadChunkIntoWorldFromCompound(var1, var5.getCompoundTag("Level"));
-				if(!var6.isAtLocation(var2, var3)) {
-					System.out.println("Chunk file at " + var2 + "," + var3 + " is in the wrong location; relocating. (Expected " + var2 + ", " + var3 + ", got " + var6.xPosition + ", " + var6.zPosition + ")");
-					var5.setInteger("xPos", var2);
-					var5.setInteger("zPos", var3);
-					var6 = ChunkLoader.loadChunkIntoWorldFromCompound(var1, var5.getCompoundTag("Level"));
-				}
-
-				var6.func_25124_i();
-				return var6;
-			}
-		} else {
-			return null;
-		}
-	}
-
-	public void saveChunk(World var1, Chunk var2) throws IOException {
-		var1.checkSessionLock();
-
-		try {
-			DataOutputStream var3 = RegionFileCache.getChunkOutputStream(this.worldDir, var2.xPosition, var2.zPosition);
-			NBTTagCompound var4 = new NBTTagCompound();
-			NBTTagCompound var5 = new NBTTagCompound();
-			var4.setTag("Level", var5);
-			ChunkLoader.storeChunkInCompound(var2, var1, var5);
-			CompressedStreamTools.func_1139_a(var4, var3);
-			var3.close();
-			WorldInfo var6 = var1.getWorldInfo();
-			var6.setSizeOnDisk(var6.getSizeOnDisk() + (long)RegionFileCache.getSizeDelta(this.worldDir, var2.xPosition, var2.zPosition));
-		} catch (Exception var7) {
-			var7.printStackTrace();
-		}
-
-	}
-
-	public void saveExtraChunkData(World var1, Chunk var2) throws IOException {
-	}
-
-	public void func_814_a() {
-	}
-
-	public void saveExtraData() {
-	}
-}
--- /dev/null
+++ net/minecraft/src/GenLayerPreviewer.java
@@ -1,0 +1,492 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+import javax.imageio.ImageIO;
+import java.awt.*;
+import java.awt.datatransfer.DataFlavor;
+import java.awt.datatransfer.Transferable;
+import java.awt.datatransfer.UnsupportedFlavorException;
+import java.awt.font.GlyphVector;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.util.*;
+import java.util.List;
+import java.util.function.Function;
+import java.util.regex.Pattern;
+import java.util.stream.Stream;
+
+public class GenLayerPreviewer {
+    // GenLayerPreviewer created by BlueStaggo 2023
+
+	// Note: For GenLayerPreviewer to work properly, add "public final long seed"
+	// to GenLayer's fields and "this.seed = var1" to GenLayer's constructor.
+
+	// Format options:
+	// - MARKDOWN: Markdown table in text
+	// - WIKI: Markdown table with images from golden-age-wiki
+	// - ARRAY: Java array
+	// - HEATMAP: Image for values between 0 and 65536 (copied to clipboard)
+	// - HEATMAP_ANNOTATED: Heatmap with numbers on the squares
+	// - IMAGE: Image using biome colors (copied to clipboard)
+	// - IMAGE_SEQUENCE: Sequence of images with information for each GenLayer
+	//                   saved as a GIF if FFmpeg is installed (images saved to .minecraft/genlayertester)
+	private static final Random random = new Random();
+	private static final PrintMode format = PrintMode.IMAGE_SEQUENCE;
+	private static final long seed = random.nextLong(); // Set seed here
+
+	// To use a Minecraft font, drop the font file into %JAVA_HOME%/jre/lib/fonts.
+	// Otherwise, system fonts can be used instead.
+	private static final Font font = new Font("Minecraft", Font.PLAIN, 10);
+	private static final Font bigFont = new Font("Minecraft", Font.PLAIN, 20);
+	private static final Font titleFont = new Font("Minecraft", Font.PLAIN, 40);
+
+	private static final float[] heatmapColor = { 0.0F, 1.0F, 0.0F };
+	private static final File imageSequenceLocation = new File(Minecraft.getMinecraftDir(), "genlayertester");
+	private static final String gifScript = "ffmpeg -framerate 0.5 -i \"genLayer%d.png\" -sws_dither none -vf tpad=start_mode=clone:start_duration=1:stop_mode=clone:stop_duration=3 genLayers.gif";
+
+	// GenLayer input array
+	private static final int[] input = {
+		1,1,1,1,12,12,12,12,
+		1,1,1,1,12,12,12,12,
+		1,1,1,1,12,12,12,12,
+		1,1,1,1,16,16,16,16,
+		1,1,1,16,0,10,10,10,
+		16,16,16,16,0,15,15,15,
+		15,15,0,0,15,14,14,14,
+		14,14,15,0,15,14,14,14,
+	};
+	private static final GenLayer inputGenLayer = new GenLayerArray(input);
+	private static final List<GenLayer> genLayers = new ArrayList<>();
+	private static final HashMap<Integer, Integer> randCol = new HashMap<>();
+
+	public static void main(String[] args) {
+		setupGrassColor();
+		Personalization.betaness = random.nextFloat() * 6.0F - 3.0F;
+		Personalization.weirdness = random.nextFloat() * 2.0F - 1.0F;
+		Personalization.personalize();
+
+		final int x = -432;
+		final int y = -432;
+		final int width = 864;
+		final int height = 864;
+//		addGenLayer(g -> new LayerIsland(1L));
+//		addGenLayer(g -> new GenLayerZoomFuzzy(2000L, g));
+//		addGenLayer(g -> new GenLayerIsland(1L, g));
+//		addGenLayer(g -> new GenLayerRemoveTooMuchOcean(1L, g));
+//		addGenLayer(g -> new GenLayerZoom(1000L, g));
+//		addGenLayer(g -> new GenLayerZoom(1001L, g));
+//		addGenLayer(g -> new GenLayerZoom(1000L, g));
+//		addGenLayer(g -> new GenLayerZoom(1001L, g));
+//		addGenLayer(g -> new GenLayerZoom(1002L, g));
+//		addGenLayer(g -> new GenLayerZoom(1003L, g));
+//		addGenLayer(g -> new GenLayerSmooth(1000L, g));
+//		addGenLayer(g -> new GenLayerIslesOfTime(g, 4));
+
+		addGenLayers(GenLayer.func_35497_a(seed)[0]);
+		initWorldGenSeed();
+		if (format.isSequenced()) {
+			format.sequencedPrint(genLayers, x, y, width, height);
+		} else if (getLastGenLayer() != null) {
+			int[] array = getLastGenLayer().func_35500_a(x, y, width, height);
+			format.print(array, width, height);
+		}
+	}
+
+	// Nothing to see down here move along now
+
+	private static GenLayer getLastGenLayer() {
+		return genLayers.size() == 0 ? null : genLayers.get(genLayers.size() - 1);
+	}
+
+	private static GenLayer addGenLayer(Function<GenLayer, GenLayer> getGenLayer) {
+		GenLayer genLayer = getGenLayer.apply(getLastGenLayer());
+		genLayers.add(genLayer);
+		return genLayer;
+	}
+
+	private static void addGenLayers(GenLayer genLayer) {
+		while (genLayer != null) {
+			genLayers.add(0, genLayer);
+			genLayer = genLayer.field_35504_a;
+		}
+	}
+
+	private static void initWorldGenSeed() {
+		GenLayer genLayer = getLastGenLayer();
+		if (genLayer != null) {
+			genLayer.func_35496_b(seed);
+		}
+	}
+
+	private static int getBiomeColor(int i) {
+		if (i >= 0 && i < 256 && BiomeGenBase.field_35486_a[i] != null) {
+			BiomeGenBase biome = BiomeGenBase.field_35486_a[i];
+			return biome.color;
+		}
+
+		if (!randCol.containsKey(i)) {
+			randCol.put(i, random.nextInt(0xFFFFFF));
+		}
+
+		return randCol.get(i);
+	}
+
+	private static void printMarkdown(int[] array, int width, int height) {
+		for (int x = 0; x < width; x++) {
+			System.out.print("|  ");
+		}
+		System.out.println("|");
+
+		for (int x = 0; x < width; x++) {
+			System.out.print("|--");
+		}
+		System.out.println("|");
+
+		for (int z = 0; z < height; z++) {
+			for (int x = 0; x < width; x++) {
+				int i = array[x + z * width];
+				System.out.printf("|%-2d", i);
+			}
+			System.out.println("|");
+		}
+	}
+
+	private static void printWiki(int[] array, int width, int height) {
+		for (int x = 0; x < width; x++) {
+			System.out.print("|  ");
+		}
+		System.out.println("|");
+
+		for (int x = 0; x < width; x++) {
+			System.out.print("|--");
+		}
+		System.out.println("|");
+
+		for (int z = 0; z < height; z++) {
+			for (int x = 0; x < width; x++) {
+				int i = array[x + z * width];
+				System.out.print("|![" + i + "](/assets/biome/" + i + ".png)");
+			}
+			System.out.println("|");
+		}
+	}
+
+	private static void printArray(int[] array, int width, int height) {
+		System.out.println("{");
+		int i = 0;
+		for (int z = 0; z < height; z++) {
+			System.out.print("\t");
+			for (int x = 0; x < width; x++) {
+				System.out.print(array[i++]);
+				if (i < width * height) {
+					System.out.print(",");
+				}
+			}
+			System.out.println();
+		}
+		System.out.println("}");
+	}
+
+	private static void printHeatmap(int[] array, int width, int height) {
+		BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
+
+		int[] color = new int[3];
+		for (int x = 0; x < width; x++) {
+			for (int z = 0; z < height; z++) {
+				for (int i = 0; i < color.length; i++) {
+					color[i] = lerpi(255, (int)(heatmapColor[i] * 255.0F), Math.min(Math.max(array[x + z * height] / 65536.0F, 0.0F), 1.0F));
+				}
+
+				img.setRGB(x, z, color[0] << 16 | color[1] << 8 | color[2]);
+			}
+		}
+
+		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new ImageTransferable(img), null);
+	}
+
+	private static void printAnnotatedHeatmap(int[] array, int width, int height) {
+		final int scale = 48;
+		BufferedImage img = new BufferedImage(width * scale, height * scale, BufferedImage.TYPE_INT_RGB);
+		Graphics2D gfx = img.createGraphics();
+
+		gfx.setStroke(new BasicStroke(2.0F));
+		gfx.setFont(font);
+
+		float[] color = new float[3];
+		for (int x = 0; x < width; x++) {
+			for (int z = 0; z < height; z++) {
+				for (int i = 0; i < color.length; i++) {
+					color[i] = lerp(1.0F, heatmapColor[i], Math.min(Math.max(array[x + z * height] / 65536.0F, 0.0F), 1.0F));
+				}
+
+				gfx.setColor(new Color(color[0], color[1], color[2]));
+				gfx.fillRect(x * scale, z * scale, scale, scale);
+
+				String text = String.valueOf(array[x + z * width]);
+				GlyphVector glyphVector = gfx.getFont().createGlyphVector(gfx.getFontRenderContext(), text);
+				Shape textShape = glyphVector.getOutline();
+
+				gfx.translate(x * scale + 2, z * scale + 9);
+				gfx.setColor(Color.BLACK);
+				gfx.draw(textShape);
+				gfx.setColor(Color.WHITE);
+				gfx.fill(textShape);
+				gfx.translate(-(x * scale + 2), -(z * scale + 9));
+			}
+		}
+
+		gfx.dispose();
+		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new ImageTransferable(img), null);
+	}
+
+	private static void printImage(int[] array, int width, int height) {
+		BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
+
+		for (int x = 0; x < width; x++) {
+			for (int z = 0; z < height; z++) {
+				int i = array[x + z * width];
+				int color = getBiomeColor(i);
+
+				img.setRGB(x, z, color);
+			}
+		}
+
+		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new ImageTransferable(img), null);
+	}
+
+	private static void printImageSequence(List<GenLayer> genLayers, int x, int z, int width, int height) {
+		imageSequenceLocation.mkdirs();
+
+		for (File file : Objects.requireNonNull(imageSequenceLocation.listFiles())) {
+			if (!file.isDirectory()) {
+				file.delete();
+			}
+		}
+
+		for (int n = 0; n < genLayers.size(); n++) {
+			GenLayer genLayer = genLayers.get(n);
+			String name = genLayer.getClass().getSimpleName();
+			System.out.println((n + 1) + " / " + genLayers.size() + ": " + name);
+			int[] array = genLayer.func_35500_a(x, z, width, height);
+
+			BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
+			Graphics2D gfx = img.createGraphics();
+
+			for (int xx = 0; xx < width; xx++) {
+				for (int zz = 0; zz < height; zz++) {
+					int i = array[xx + zz * width];
+					int color = getBiomeColor(i);
+
+					img.setRGB(xx, zz, color);
+				}
+			}
+
+
+			gfx.setStroke(new BasicStroke(2.0F));
+			gfx.setFont(titleFont);
+			gfx.translate(10, 40);
+
+			GlyphVector glyphVector = gfx.getFont().createGlyphVector(gfx.getFontRenderContext(), name);
+			Shape textShape = glyphVector.getOutline();
+
+			gfx.setColor(Color.BLACK);
+			gfx.draw(textShape);
+			gfx.setColor(Color.WHITE);
+			gfx.fill(textShape);
+
+			gfx.setFont(bigFont);
+			gfx.translate(0, 10);
+
+			String[] lines = {
+					"World Seed: " + seed,
+					"Seed: " + 0,
+					"X: " + x,
+					"Z: " + z
+			};
+
+			for (String line : lines) {
+				gfx.translate(0, 20);
+				glyphVector = gfx.getFont().createGlyphVector(gfx.getFontRenderContext(), line);
+				textShape = glyphVector.getOutline();
+
+				gfx.setColor(Color.BLACK);
+				gfx.draw(textShape);
+				gfx.setColor(new Color(0x55FFFF));
+				gfx.fill(textShape);
+			}
+
+			gfx.dispose();
+
+			try {
+				File imgFile = new File(imageSequenceLocation, "genLayer" + n + ".png");
+				imgFile.mkdirs();
+				imgFile.delete();
+				ImageIO.write(img, "png", imgFile);
+			} catch (IOException e) {
+				System.out.println("Failed to save image!");
+				e.printStackTrace();
+			}
+		}
+
+		boolean hasFFmpeg = Stream.of(System.getenv("PATH").split(Pattern.quote(File.pathSeparator)))
+		        .map(Paths::get)
+		        .anyMatch(path -> Files.exists(path.resolve("ffmpeg")) || Files.exists(path.resolve("ffmpeg.exe")));
+
+		if (hasFFmpeg) {
+			System.out.println("Creating GIF with FFmpeg...");
+			System.out.println(gifScript);
+
+			ProcessBuilder processBuilder = new ProcessBuilder();
+			processBuilder.inheritIO();
+			processBuilder.directory(imageSequenceLocation);
+			processBuilder.command(gifScript.split(" "));
+
+			try {
+				Process process = processBuilder.start();
+				process.waitFor();
+			} catch (IOException | InterruptedException e) {
+				System.out.println("Failed to create GIF!");
+				e.printStackTrace();
+			}
+		} else {
+			System.out.println("FFmpeg not found, GIF not created.");
+		}
+
+		try {
+			Desktop.getDesktop().open(imageSequenceLocation);
+
+			File gif = new File(imageSequenceLocation, "genLayers.gif");
+			if (gif.exists()) {
+				Desktop.getDesktop().open(gif);
+			}
+		} catch (IOException e) {
+			System.out.println("Failed to open output directory.");
+			e.printStackTrace();
+		}
+	}
+
+	private static int lerpi(int a, int b, float t) {
+		return (int)(a + (b - a) * t);
+	}
+
+	private static float lerp(float a, float b, float t) {
+		return a + (b - a) * t;
+	}
+
+	private static void setupGrassColor() {
+		try (InputStream stream = GenLayerPreviewer.class.getResourceAsStream("/misc/grasscolor.png")) {
+			if (stream == null) {
+				System.err.println("Failed to setup grass color!");
+				return;
+			}
+
+			BufferedImage img = ImageIO.read(stream);
+			int width = img.getWidth();
+			int height = img.getHeight();
+			int[] rgb = new int[width * height];
+			img.getRGB(0, 0, width, height, rgb, 0, width);
+			ColorizerGrass.func_28181_a(rgb);
+		} catch (IOException e) {
+			System.err.println("Failed to setup grass color!");
+		}
+	}
+
+	private enum PrintMode {
+		MARKDOWN,
+		WIKI,
+		ARRAY,
+		HEATMAP,
+		HEATMAP_ANNOTATED,
+		IMAGE,
+		IMAGE_SEQUENCE;
+
+		static {
+			MARKDOWN.setFunction(GenLayerPreviewer::printMarkdown);
+			WIKI.setFunction(GenLayerPreviewer::printWiki);
+			ARRAY.setFunction(GenLayerPreviewer::printArray);
+			HEATMAP.setFunction(GenLayerPreviewer::printHeatmap);
+			HEATMAP_ANNOTATED.setFunction(GenLayerPreviewer::printAnnotatedHeatmap);
+			IMAGE.setFunction(GenLayerPreviewer::printImage);
+			IMAGE_SEQUENCE.setSequencedFunction(GenLayerPreviewer::printImageSequence);
+		}
+
+		private GenLayerPrintFunction function;
+		private GenLayerSequencePrintFunction sequencedFunction;
+		private boolean sequenced;
+
+		private void setFunction(GenLayerPrintFunction function) {
+			this.function = function;
+			sequencedFunction = (genLayers, x, z, width, height) -> function.print(genLayers.get(genLayers.size() - 1).func_35500_a(x, z, width, height), width, height);
+		}
+
+		private void setSequencedFunction(GenLayerSequencePrintFunction function) {
+			this.function = (array, width, height) -> function.print(Collections.singletonList(new GenLayerArray(array)), 0, 0, width, height);
+			sequencedFunction = function;
+			sequenced = true;
+		}
+
+		public void print(int[] array, int width, int height) {
+			function.print(array, width, height);
+		}
+
+		public void sequencedPrint(List<GenLayer> genLayers, int x, int z, int width, int height) {
+			sequencedFunction.print(genLayers, x, z, width, height);
+		}
+
+		public boolean isSequenced() {
+			return sequenced;
+		}
+	}
+
+	@FunctionalInterface
+	private interface GenLayerPrintFunction {
+		void print(int[] array, int width, int height);
+	}
+
+	@FunctionalInterface
+	private interface GenLayerSequencePrintFunction {
+		void print(List<GenLayer> genLayers, int x, int z, int width, int height);
+	}
+
+	private static class GenLayerArray extends GenLayer {
+		private final int[] array;
+
+		public GenLayerArray(int[] array) {
+			super(0);
+			this.array = array;
+		}
+
+		@Override
+		public int[] func_35500_a(int var1, int var2, int var3, int var4) {
+			return array;
+		}
+	}
+
+	private static class ImageTransferable implements Transferable {
+	    private final BufferedImage image;
+
+	    public ImageTransferable(BufferedImage image) {
+	        this.image = image;
+	    }
+
+	    public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException {
+	        if (flavor.equals(DataFlavor.imageFlavor)) {
+		        return image;
+	        }
+            throw new UnsupportedFlavorException(flavor);
+	    }
+
+	    public DataFlavor[] getTransferDataFlavors() {
+	        return new DataFlavor[]{DataFlavor.imageFlavor};
+	    }
+
+	    public boolean isDataFlavorSupported(DataFlavor flavor) {
+	        return flavor.equals(DataFlavor.imageFlavor);
+	    }
+	}
+}
--- net/minecraft/src/GuiEditSign.java
+++ net/minecraft/src/GuiEditSign.java
@@ -22,8 +22,8 @@
 
 	public void onGuiClosed() {
 		Keyboard.enableRepeatEvents(false);
-		if(this.mc.theWorld.multiplayerWorld) {
-			this.mc.getSendQueue().addToSendQueue(new Packet130UpdateSign(this.entitySign.xCoord, this.entitySign.yCoord, this.entitySign.zCoord, this.entitySign.signText));
+		if(this.game.theWorld.multiplayerWorld) {
+			this.game.getSendQueue().addToSendQueue(new Packet130UpdateSign(this.entitySign.xCoord, this.entitySign.yCoord, this.entitySign.zCoord, this.entitySign.signText));
 		}
 
 	}
@@ -36,7 +36,7 @@
 		if(var1.enabled) {
 			if(var1.id == 0) {
 				this.entitySign.onInventoryChanged();
-				this.mc.displayGuiScreen((GuiScreen)null);
+				this.game.displayGuiScreen((GuiScreen)null);
 			}
 
 		}
--- net/minecraft/src/WorldGenPumpkin.java
+++ net/minecraft/src/WorldGenPumpkin.java
@@ -9,7 +9,7 @@
 			int var8 = var4 + var2.nextInt(4) - var2.nextInt(4);
 			int var9 = var5 + var2.nextInt(8) - var2.nextInt(8);
 			if(var1.isAirBlock(var7, var8, var9) && var1.getBlockId(var7, var8 - 1, var9) == Block.grass.blockID && Block.pumpkin.canPlaceBlockAt(var1, var7, var8, var9)) {
-				var1.setBlockAndMetadata(var7, var8, var9, Block.pumpkin.blockID, var2.nextInt(4));
+				this.setBlockAndMetadata(var1, var7, var8, var9, Block.pumpkin.blockID, var2.nextInt(4));
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/WorldProviderCaverns.java
@@ -1,0 +1,43 @@
+package net.minecraft.src;
+
+public class WorldProviderCaverns extends WorldProvider {
+	public void registerWorldChunkManager() {
+		this.worldChunkMgr = new WorldChunkManagerGradient(BiomeGenBase.caverns, 0.4F, 0.4F, 0.25F, 0.25F, 0.1F);
+		this.worldType = -2;
+	}
+
+	public Vec3D func_4096_a(float var1, float var2) {
+		return Vec3D.createVector(1.0D, 1.0D, 1.0D);
+	}
+
+	protected void generateLightBrightnessTable() {
+		float var1 = 0.05F;
+
+		for(int var2 = 0; var2 <= 15; ++var2) {
+			float var3 = 1.0F - (float)var2 / 15.0F;
+			this.lightBrightnessTable[var2] = (1.0F - var3) / (var3 * 3.0F + 1.0F) * (1.0F - var1) + var1;
+		}
+
+	}
+
+	public IChunkProvider getChunkProvider() {
+		return new ChunkProviderCaverns(this.worldObj, this.worldObj.getRandomSeed());
+	}
+
+	public boolean canCoordinateBeSpawn(int var1, int var2) {
+		int var3 = this.worldObj.getFirstUncoveredBlock(var1, var2);
+		return var3 == Block.bedrock.blockID ? false : (var3 == 0 ? false : Block.opaqueCubeLookup[var3]);
+	}
+
+	public float calculateCelestialAngle(long var1, float var3) {
+		return 0.9F;
+	}
+
+	public boolean canRespawnHere() {
+		return false;
+	}
+
+	public float getCloudHeight() {
+		return 256.0F + 64.0F;
+	}
+}
--- net/minecraft/src/TileEntityRenderer.java
+++ net/minecraft/src/TileEntityRenderer.java
@@ -28,6 +28,7 @@
 		this.specialRendererMap.put(TileEntityMobSpawner.class, new TileEntityMobSpawnerRenderer());
 		this.specialRendererMap.put(TileEntityPiston.class, new TileEntityRendererPiston());
 		this.specialRendererMap.put(TileEntityChest.class, new TileEntityChestRenderer());
+		this.specialRendererMap.put(TileEntityComputer.class, new TileEntityComputerRenderer());
 		Iterator var1 = this.specialRendererMap.values().iterator();
 
 		while(var1.hasNext()) {
--- net/minecraft/src/BiomeGenBase.java
+++ net/minecraft/src/BiomeGenBase.java
@@ -7,26 +7,52 @@
 
 public abstract class BiomeGenBase {
 	public static final BiomeGenBase[] field_35486_a = new BiomeGenBase[256];
-	public static final BiomeGenBase field_35484_b = (new BiomeGenOcean(0)).setColor(112).setBiomeName("Ocean").func_35479_b(-1.0F, 0.5F);
-	public static final BiomeGenBase field_35485_c = (new BiomeGenPlains(1)).setColor(9286496).setBiomeName("Plains").func_35478_a(0.8F, 0.4F);
-	public static final BiomeGenBase desert = (new BiomeGenDesert(2)).setColor(16421912).setBiomeName("Desert").setDisableRain().func_35478_a(2.0F, 0.0F).func_35479_b(0.1F, 0.2F);
-	public static final BiomeGenBase field_35483_e = (new BiomeGenHills(3)).setColor(6316128).setBiomeName("Extreme Hills").func_35479_b(0.2F, 1.8F).func_35478_a(0.2F, 0.3F);
-	public static final BiomeGenBase forest = (new BiomeGenForest(4)).setColor(353825).setBiomeName("Forest").func_4124_a(5159473).func_35478_a(0.7F, 0.8F);
-	public static final BiomeGenBase taiga = (new BiomeGenTaiga(5)).setColor(747097).setBiomeName("Taiga").func_4124_a(5159473).func_35478_a(0.3F, 0.8F).func_35479_b(0.1F, 0.4F);
-	public static final BiomeGenBase swampland = (new BiomeGenSwamp(6)).setColor(522674).setBiomeName("Swampland").func_4124_a(9154376).func_35479_b(-0.2F, 0.1F).func_35478_a(0.8F, 0.9F);
-	public static final BiomeGenBase field_35487_i = (new BiomeGenRiver(7)).setColor(255).setBiomeName("River").func_35479_b(-0.5F, 0.0F);
+
+	public static final BiomeGenBase ocean = (new BiomeGenOcean(0)).setColor(112).setBiomeName("Ocean").setMinMaxHeight(-1.0F, 0.5F);
+	public static final BiomeGenBase plains = (new BiomeGenPlains(1)).setColor(9286496).setBiomeName("Plains").setTemperatureRainfall(0.8F, 0.4F);
+	public static final BiomeGenBase desert = (new BiomeGenDesert(2)).setColor(16421912).setBiomeName("Desert").setDisableRain().setTemperatureRainfall(2.0F, 0.0F).setMinMaxHeight(0.1F, 0.2F);
+	public static final BiomeGenBase extremeHills = (new BiomeGenHills(3)).setColor(6316128).setBiomeName("Extreme Hills").setMinMaxHeight(0.2F, 1.8F).setTemperatureRainfall(0.2F, 0.3F);
+	public static final BiomeGenBase forest = (new BiomeGenForest(4)).setColor(353825).setBiomeName("Forest").setTemperatureRainfall(0.7F, 0.8F);
+	public static final BiomeGenBase taiga = (new BiomeGenTaiga(5)).setColor(747097).setBiomeName("Taiga").setTemperatureRainfall(0.3F, 0.8F).setMinMaxHeight(0.1F, 0.4F);
+	public static final BiomeGenBase swampland = (new BiomeGenSwamp(6)).setColor(522674).setBiomeName("Swampland").setMinMaxHeight(-0.2F, 0.1F).setTemperatureRainfall(0.8F, 0.9F);
+	public static final BiomeGenBase river = (new BiomeGenRiver(7)).setColor(255).setBiomeName("River").setMinMaxHeight(-0.5F, 0.0F);
 	public static final BiomeGenBase hell = (new BiomeGenHell(8)).setColor(16711680).setBiomeName("Hell").setDisableRain();
 	public static final BiomeGenBase sky = (new BiomeGenSky(9)).setColor(8421631).setBiomeName("Sky").setDisableRain();
+	public static final BiomeGenBase frozenRiver = (new BiomeGenRiver(10)).setColor(255).setBiomeName("Frozen River").setTemperatureRainfall(0.0F, 0.5F).setMinMaxHeight(-0.5F, 0.0F).setEnableSnow();
+	public static final BiomeGenBase oldSwampland = (new BiomeGenOldSwamp(11)).setColor(0x07e058).setBiomeName("Swampland", "Old Swampland").setMinMaxHeight(-0.2F, 0.1F).setTemperatureRainfall(0.5F, 0.9F);
+	public static final BiomeGenBase icePlains = (new BiomeGenSnow(12)).setColor(0xFFFFFF).setBiomeName("Ice Plains").setTemperatureRainfall(0.0F, 0.5F).setEnableSnow();
+	public static final BiomeGenBase oldHills = (new BiomeGenOldHills(13)).setColor(0x986f29).setBiomeName("Extreme Hills", "Old Hills").setMinMaxHeight(0.2F, 1.8F).setTemperatureRainfall(0.8F, 0.2F);
+	public static final BiomeGenBase rainforest = (new BiomeGenRainforest(14)).setColor(588342).setBiomeName("Rainforest").setMinMaxHeight(0.0F, 1.8F).setTemperatureRainfall(1.0F, 1.0F);
+	public static final BiomeGenBase seasonalForest = (new BiomeGenSeasonalForest(15)).setColor(10215459).setBiomeName("Forest", "Seasonal Forest").setMinMaxHeight(1.0F, 0.3F).setTemperatureRainfall(1.0F, 0.7F);
+	public static final BiomeGenBase shrubland = (new BiomeGenShrubland(16)).setColor(10595616).setBiomeName("Shrubland").setTemperatureRainfall(1.0F, 0.5F);
+	public static final BiomeGenBase jungle = (new BiomeGenJungle(17)).setColor(5470985).setBiomeName("Jungle").setTemperatureRainfall(1.2F, 0.9F).setMinMaxHeight(0.2F, 0.4F);
+	public static final BiomeGenBase snowyTaiga = (new BiomeGenTaiga(19)).setColor(3233098).setBiomeName("Taiga", "Snowy Taiga").setTemperatureRainfall(0.05F, 0.8F).setMinMaxHeight(0.1F, 0.4F).setEnableSnow();
+	public static final BiomeGenBase savanna = (new BiomeGenSavanna(20)).setColor(12431967).setBiomeName("Savanna").setTemperatureRainfall(1.2F, 0.0F).setMinMaxHeight(0.1F, 0.1F).setDisableRain();
+	public static final BiomeGenBase roofedForest = (new BiomeGenRoofedForest(21)).setColor(4215066).setBiomeName("Roofed Forest").setTemperatureRainfall(0.7F, 0.8F).setMinMaxHeight(0.1F, 0.4F);
+	public static final BiomeGenBase offices = (new BiomeGenOffices(22)).setColor(0xFFFFFF).setBiomeName("Offices");
+	public static final BiomeGenBase end = (new BiomeGenEnd(23)).setColor(0).setBiomeName("Sky", "The End").setDisableRain();
+	public static final BiomeGenBase alpha = (new BiomeGenAlpha(24)).setColor(0x7FFF3F).setBiomeName("None", "Alpha").setTemperatureRainfall(1.0F, 0.5F);
+	public static final BiomeGenBase birchForest = (new BiomeGenBirchForest(25)).setColor(3175492).setBiomeName("Birch Forest").setTemperatureRainfall(0.6F, 0.6F);
+	public static final BiomeGenBase megaTaiga = (new BiomeGenMegaTaiga(26)).setColor(5858897).setBiomeName("Mega Taiga").setTemperatureRainfall(0.3F, 0.8F).setMinMaxHeight(0.1F, 0.4F);
+	public static final BiomeGenBase snowyMegaTaiga = (new BiomeGenMegaTaiga(27)).setColor(0x637c7b).setBiomeName("Snowy Mega Taiga").setTemperatureRainfall(0.05F, 0.8F).setMinMaxHeight(0.1F, 0.4F).setEnableSnow();
+	public static final BiomeGenBase caverns = (new BiomeGenCaverns(28)).setColor(0x3F3F3F).setBiomeName("Caverns").setMinMaxHeight(-1.0F, 0.5F);
+
 	public String biomeName;
+	public String debugBiomeName;
 	public int color;
 	public byte topBlock = (byte)Block.grass.blockID;
 	public byte fillerBlock = (byte)Block.dirt.blockID;
+	public byte topMeta = 0;
+	public byte fillerMeta = 0;
 	public int field_6502_q = 5169201;
 	public float field_35492_q = 0.1F;
 	public float field_35491_r = 0.3F;
 	public float field_35490_s = 0.5F;
 	public float field_35489_t = 0.5F;
-	public BiomeDecorator field_35488_u;
+	public BiomeGenBase subVariant;
+	public int subChance = 3;
+	public int subLevel = 0;
+	public BiomeDecorator decorator;
 	protected List spawnableMonsterList = new ArrayList();
 	protected List spawnableCreatureList = new ArrayList();
 	protected List spawnableWaterCreatureList = new ArrayList();
@@ -35,13 +61,14 @@
 	public final int field_35494_y;
 	protected WorldGenTrees field_35493_z = new WorldGenTrees();
 	protected WorldGenBigTree field_35480_A = new WorldGenBigTree();
-	protected WorldGenForest field_35481_B = new WorldGenForest();
+	protected WorldGenTrees field_35481_B = new WorldGenTrees(5, 3, 2, 2, false);
 	protected WorldGenSwamp field_35482_C = new WorldGenSwamp();
+	private static NoiseGeneratorSimplexOctaves heightNoise = new NoiseGeneratorSimplexOctaves(new Random(), 4);
 
 	protected BiomeGenBase(int var1) {
 		this.field_35494_y = var1;
 		field_35486_a[var1] = this;
-		this.field_35488_u = this.func_35475_a();
+		this.decorator = this.func_35475_a();
 		this.spawnableCreatureList.add(new SpawnListEntry(EntitySheep.class, 12, 4, 4));
 		this.spawnableCreatureList.add(new SpawnListEntry(EntityPig.class, 10, 4, 4));
 		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
@@ -55,17 +82,33 @@
 		this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
 	}
 
+	public static void setupNoise(Random random) {
+		heightNoise = new NoiseGeneratorSimplexOctaves(random, 4);
+	}
+
+	protected static double getHeightNoiseValue(double x, double z) {
+		return heightNoise.func_151601_a(x, z);
+	}
+
+	protected static boolean doHills(int x, int z) {
+		return Personalization.hills && getHeightNoiseValue(x * 0.08D, z * 0.08D) > 3.0D;
+	}
+
+	protected static boolean doMutation(int x, int z) {
+		return Personalization.hills && getHeightNoiseValue(x * -0.04D, z * -0.04D) < -4.0D;
+	}
+
 	protected BiomeDecorator func_35475_a() {
 		return new BiomeDecorator(this);
 	}
 
-	private BiomeGenBase func_35478_a(float var1, float var2) {
+	public BiomeGenBase setTemperatureRainfall(float var1, float var2) {
 		this.field_35490_s = var1;
 		this.field_35489_t = var2;
 		return this;
 	}
 
-	private BiomeGenBase func_35479_b(float var1, float var2) {
+	public BiomeGenBase setMinMaxHeight(float var1, float var2) {
 		this.field_35492_q = var1;
 		this.field_35491_r = var2;
 		return this;
@@ -77,11 +120,21 @@
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return (WorldGenerator)(var1.nextInt(10) == 0 ? this.field_35480_A : this.field_35493_z);
+		return (WorldGenerator)(var1.nextInt(10 + Math.round(Personalization.entropy * 5.0F)) == 0 || Personalization.terrain415 ? this.field_35480_A : this.field_35493_z);
+	}
+
+	public WorldGenerator getRandomWorldGenForGrass(Random var1) {
+		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
 	}
 
 	protected BiomeGenBase setBiomeName(String var1) {
+		this.biomeName = this.debugBiomeName = var1;
+		return this;
+	}
+
+	protected BiomeGenBase setBiomeName(String var1, String var2) {
 		this.biomeName = var1;
+		this.debugBiomeName = var2;
 		return this;
 	}
 
@@ -96,6 +149,14 @@
 	}
 
 	public int getSkyColorByTemp(float var1) {
+		if (Personalization.alphaTextures) {
+			return 8961023;
+		} else if (Personalization.pe7env) {
+			return 0x2454bf;
+		} else if (Personalization.pe8env) {
+			return 0x7bb6ff;
+		}
+
 		var1 /= 3.0F;
 		if(var1 < -1.0F) {
 			var1 = -1.0F;
@@ -105,19 +166,29 @@
 			var1 = 1.0F;
 		}
 
-		return Color.getHSBColor(224.0F / 360.0F - var1 * 0.05F, 0.5F + var1 * 0.1F, 1.0F).getRGB();
+		return Color.getHSBColor(224.0F / 360.0F - var1 * 0.05F, 0.5F + var1 * 0.1F - Personalization.entropy * 0.1F, 1.0F).getRGB();
 	}
 
 	public List getSpawnableList(EnumCreatureType var1) {
 		return var1 == EnumCreatureType.monster ? this.spawnableMonsterList : (var1 == EnumCreatureType.creature ? this.spawnableCreatureList : (var1 == EnumCreatureType.waterCreature ? this.spawnableWaterCreatureList : null));
 	}
 
+	public BiomeGenBase setEnableSnow() {
+		this.enableSnow = true;
+		return this;
+	}
+
+	public BiomeGenBase setDisableSnow() {
+		this.enableSnow = false;
+		return this;
+	}
+
 	public boolean getEnableSnow() {
 		return this.enableSnow;
 	}
 
 	public boolean canSpawnLightningBolt() {
-		return this.enableSnow ? false : this.enableRain;
+		return this.enableSnow || this.enableRain;
 	}
 
 	public float getBiome() {
@@ -133,6 +204,141 @@
 	}
 
 	public void func_35477_a(World var1, Random var2, int var3, int var4) {
-		this.field_35488_u.func_35881_a(var1, var2, var3, var4);
+		this.decorator.func_35881_a(var1, var2, var3, var4);
+	}
+
+	public final void updateSpawnLists() {
+		for (SpawnListEntry entry : (List<SpawnListEntry>)this.spawnableMonsterList) {
+			this.updateSpawnEntry(entry);
+		}
+	}
+
+	public void updateSpawnEntry(SpawnListEntry entry) {
+		if (entry.entityClass == EntityEnderman.class) {
+			entry.field_35590_d = Personalization.commonEndermen ? 10 : 2;
+		}
+	}
+
+	public int getGrassColor(double temp, double rain, int x, int z) {
+		return ColorizerGrass.getGrassColor(temp, rain);
+	}
+
+	public int getFoliageColor(double temp, double rain, int x, int z) {
+		return ColorizerFoliage.getFoliageColor(temp, rain);
+	}
+
+	public int getWaterColor(double temp, double rain, int x, int z) {
+		return Personalization.coloredWater ? ColorizerWater.getWaterColor(temp, rain) : 0xFFFFFF;
+	}
+
+	public WorldGenerator getGrownOakTree(Random var1) {
+		return (Personalization.terrain415 || var1.nextInt(10) == 0) ? new WorldGenBigTree() : new WorldGenTrees();
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, int topTerrainHeight, double sandValue, double gravelValue, double erosionValue, double simplexValue) {
+		this.buildDefaultSurface(world, random, blocks, metadata, x, z, topTerrainHeight, sandValue, gravelValue, erosionValue, simplexValue);
+	}
+
+	public final void buildDefaultSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, int topTerrainHeight, double sandValue, double gravelValue, double erosionValue,  double simplexValue) {
+		int height = blocks.length / 256;
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+
+		int top = this.topBlock;
+		int filler = this.fillerBlock;
+		int topm = this.topMeta;
+		int fillerm = this.fillerMeta;
+		int sandStoneHeight = -1;
+
+		boolean sandBeach = Personalization.betaBeaches && sandValue + random.nextDouble() * 0.2D > 0.0D;
+		boolean gravelBeach = Personalization.betaBeaches && gravelValue + random.nextDouble() * 0.2D > 0.0D;
+		int erosion = (int)(erosionValue / 3.0D + 3.0D + random.nextDouble() * 0.25D);
+
+		for (int y = topTerrainHeight; y >= 0; --y) {
+			int index = chunkX * height * 16 + chunkZ * height + y;
+
+			if (y <= random.nextInt(5)) {
+				blocks[index] = (byte)Block.bedrock.blockID;
+			} else {
+				byte block = blocks[index];
+
+				if (block > 0) {
+					if (block == Block.stone.blockID) {
+						if (sandStoneHeight == -1) {
+							if (erosion <= 0) {
+								top = 0;
+								filler = Block.stone.blockID;
+								topm = 0;
+								fillerm = 0;
+							} else if (y >= 63 - 4 && y <= 63 + 1) {
+								top = this.topBlock;
+								filler = this.fillerBlock;
+								topm = this.topMeta;
+								fillerm = this.fillerMeta;
+
+								if (gravelBeach) {
+									top = 0;
+									filler = (byte)Block.gravel.blockID;
+									topm = 0;
+									fillerm = 0;
+								}
+
+								if (sandBeach) {
+									top = (byte)Block.sand.blockID;
+									filler = (byte)Block.sand.blockID;
+									topm = 0;
+									fillerm = 0;
+								}
+							}
+
+							if (y < 63 && top == 0) {
+								top = Block.waterStill.blockID;
+								topm = 0;
+							}
+
+							sandStoneHeight = erosion;
+
+							if (y >= 63 - 1) {
+								blocks[index] = (byte)top;
+								metadata[index] = (byte)topm;
+							} else if (y < 63 - 7 - erosion && Personalization.noiseCaves) {
+								top = 0;
+								filler = (byte)Block.stone.blockID;
+								fillerMeta = (byte)0;
+								if (blocks[index + 1] == Block.waterStill.blockID) {
+									blocks[index] = (byte)Block.dirt.blockID;
+								} else {
+									blocks[index] = (byte)filler;
+									metadata[index] = fillerMeta;
+								}
+							} else {
+								blocks[index] = (byte)filler;
+								metadata[index] = (byte)fillerm;
+							}
+						} else if (sandStoneHeight > 0) {
+							--sandStoneHeight;
+							blocks[index] = (byte)filler;
+							metadata[index] = (byte)fillerm;
+
+							if (sandStoneHeight == 0 && filler == Block.sand.blockID) {
+								sandStoneHeight = random.nextInt(4) + Math.max(0, y - 63);
+								filler = Block.sandStone.blockID;
+								fillerm = 0;
+							}
+						}
+					}
+				} else {
+					sandStoneHeight = -1;
+				}
+			}
+		}
+	}
+
+	public float getMinHeight(int x, int z) {
+		return this.field_35492_q;
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return this.field_35491_r;
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenMegaPineTree.java
@@ -1,0 +1,206 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenMegaPineTree extends WorldGenerator {
+    private boolean heightMod;
+	private int minHeight;
+	private int heightVariation;
+
+    public WorldGenMegaPineTree(boolean var2) {
+        this(var2, 15, 15);
+    }
+
+    public WorldGenMegaPineTree(boolean var2, int var3, int var4) {
+        this.heightMod = var2;
+		this.minHeight = var3;
+        this.heightVariation = var4;
+    }
+
+    public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int var6 = Math.max(var2.nextInt(this.heightVariation - Math.round(Personalization.entropy * (this.heightVariation * 2 / 3))) + this.minHeight - Math.round(Personalization.entropy * (this.minHeight / 1.5F)), this.minHeight * 2 / 3);
+
+        if (!this.func_150537_a(var1, var2, var3, var4, var5, var6)) {
+            return false;
+        } else {
+            this.func_150541_c(var1, var3, var5, var4 + var6, 0, var2);
+
+            for (int var7 = 0; var7 < var6; ++var7) {
+                Material var8 = var1.getBlockMaterial(var3, var4 + var7, var5);
+
+                if (var8 == Material.air || var8 == Material.leaves) {
+                    this.setBlockAndMetadata(var1, var3, var4 + var7, var5, Block.wood.blockID, 1);
+                }
+
+                if (var7 < var6 - 1) {
+                    var8 = var1.getBlockMaterial(var3 + 1, var4 + var7, var5);
+
+                    if (var8 == Material.air || var8 == Material.leaves) {
+                        this.setBlockAndMetadata(var1, var3 + 1, var4 + var7, var5, Block.wood.blockID, 1);
+                    }
+
+                    var8 = var1.getBlockMaterial(var3 + 1, var4 + var7, var5 + 1);
+
+                    if (var8 == Material.air || var8 == Material.leaves) {
+                        this.setBlockAndMetadata(var1, var3 + 1, var4 + var7, var5 + 1, Block.wood.blockID, 1);
+                    }
+
+                    var8 = var1.getBlockMaterial(var3, var4 + var7, var5 + 1);
+
+                    if (var8 == Material.air || var8 == Material.leaves) {
+                        this.setBlockAndMetadata(var1, var3, var4 + var7, var5 + 1, Block.wood.blockID, 1);
+                    }
+                }
+            }
+
+            return true;
+        }
+    }
+
+    private void func_150541_c(World var1, int var2, int var3, int var4, int var5, Random var6) {
+        int var7 = var6.nextInt(5);
+
+        if (this.heightMod) {
+            var7 += this.heightVariation;
+        } else {
+            var7 += 3;
+        }
+
+        int var8 = 0;
+
+        for (int var9 = var4 - var7; var9 <= var4; ++var9) {
+            int var10 = var4 - var9;
+            int var11 = var5 + MathHelper.floor_float((float) var10 / (float) var7 * 3.5F);
+            this.func_150535_a(var1, var2, var9, var3,
+                    var11 + (var10 > 0 && var11 == var8 && (var9 & 1) == 0 ? 1 : 0), var6);
+            var8 = var11;
+        }
+    }
+
+    public void func_150524_b(World var1, Random var2, int var3, int var4, int var5) {
+        this.func_150539_c(var1, var2, var3 - 1, var4, var5 - 1);
+        this.func_150539_c(var1, var2, var3 + 2, var4, var5 - 1);
+        this.func_150539_c(var1, var2, var3 - 1, var4, var5 + 2);
+        this.func_150539_c(var1, var2, var3 + 2, var4, var5 + 2);
+
+        for (int var6 = 0; var6 < 5; ++var6) {
+            int var7 = var2.nextInt(64);
+            int var8 = var7 % 8;
+            int var9 = var7 / 8;
+
+            if (var8 == 0 || var8 == 7 || var9 == 0 || var9 == 7) {
+                this.func_150539_c(var1, var2, var3 - 3 + var8, var4, var5 - 3 + var9);
+            }
+        }
+    }
+
+    private void func_150539_c(World var1, Random var2, int var3, int var4, int var5) {
+        for (int var6 = -2; var6 <= 2; ++var6) {
+            for (int var7 = -2; var7 <= 2; ++var7) {
+                if (Math.abs(var6) != 2 || Math.abs(var7) != 2) {
+                    this.func_150540_a(var1, var3 + var6, var4, var5 + var7);
+                }
+            }
+        }
+    }
+
+    private void func_150540_a(World var1, int var2, int var3, int var4) {
+        for (int var5 = var3 + 2; var5 >= var3 - 3; --var5) {
+            int var6 = var1.getBlockId(var2, var5, var4);
+
+            if (var6 == Block.grass.blockID || var6 == Block.dirt.blockID) {
+                this.setBlockAndMetadata(var1, var2, var5, var4, Block.dirt.blockID, 0);
+				break;
+            }
+
+            if (var6 != 0 && var5 < var3) {
+                break;
+            }
+        }
+    }
+
+	protected boolean func_150523_a(Block var1) {
+        return var1 == null || var1.blockMaterial == Material.leaves
+                || var1 == Block.grass || var1 == Block.dirt || var1 == Block.wood
+                || var1 == Block.sapling || var1 == Block.field_35278_bv;
+    }
+
+	private boolean func_150536_b(World var1, Random var2, int var3, int var4, int var5, int var6) {
+        boolean var7 = true;
+
+        if (var4 >= 1) {
+            for (int var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
+                byte var9 = 2;
+
+                if (var8 == var4) {
+                    var9 = 1;
+                }
+
+                if (var8 >= var4 + 1 + var6 - 2) {
+                    var9 = 2;
+                }
+
+                for (int var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
+                    for (int var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
+                        if (var8 >= 0) {
+                            int var12 = var1.getBlockId(var10, var8, var11);
+
+                            if (!this.func_150523_a(Block.blocksList[var12])) {
+                                var7 = false;
+                            }
+                        } else {
+                            var7 = false;
+                        }
+                    }
+                }
+            }
+
+            return var7;
+        } else {
+            return false;
+        }
+    }
+
+	private boolean func_150532_c(World var1, Random var2, int var3, int var4, int var5) {
+        int var6 = var1.getBlockId(var3, var4 - 1, var5);
+
+        if ((var6 == Block.grass.blockID || var6 == Block.dirt.blockID) && var4 >= 2) {
+            var1.setBlockAndMetadata(var3, var4 - 1, var5, Block.dirt.blockID, 0);
+            var1.setBlockAndMetadata(var3 + 1, var4 - 1, var5, Block.dirt.blockID, 0);
+            var1.setBlockAndMetadata(var3, var4 - 1, var5 + 1, Block.dirt.blockID, 0);
+            var1.setBlockAndMetadata(var3 + 1, var4 - 1, var5 + 1, Block.dirt.blockID, 0);
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+	protected boolean func_150537_a(World var1, Random var2, int var3, int var4, int var5, int var6) {
+        return this.func_150536_b(var1, var2, var3, var4, var5, var6)
+                && this.func_150532_c(var1, var2, var3, var4, var5);
+    }
+
+	protected void func_150535_a(World var1, int var2, int var3, int var4, int var5, Random var6) {
+        int var7 = var5 * var5;
+
+        for (int var8 = var2 - var5; var8 <= var2 + var5 + 1; ++var8) {
+            int var9 = var8 - var2;
+
+            for (int var10 = var4 - var5; var10 <= var4 + var5 + 1; ++var10) {
+                int var11 = var10 - var4;
+                int var12 = var9 - 1;
+                int var13 = var11 - 1;
+
+                if (var9 * var9 + var11 * var11 <= var7 || var12 * var12 + var13 * var13 <= var7
+                        || var9 * var9 + var13 * var13 <= var7
+                        || var12 * var12 + var11 * var11 <= var7) {
+                    Material var14 = var1.getBlockMaterial(var8, var3, var10);
+
+                    if (var14 == Material.air || var14 == Material.leaves) {
+                        this.setBlockAndMetadata(var1, var8, var3, var10, Block.leaves.blockID, 1);
+                    }
+                }
+            }
+        }
+    }
+}
--- /dev/null
+++ net/minecraft/src/GenLayerBiomeMix.java
@@ -1,0 +1,27 @@
+package net.minecraft.src;
+
+public class GenLayerBiomeMix extends GenLayer {
+	protected GenLayer field_35504_b;
+
+	public GenLayerBiomeMix(long var1, GenLayer var2, GenLayer var3) {
+		super(var1);
+		this.field_35504_a = var2;
+		this.field_35504_b = var3;
+	}
+
+	public int[] func_35500_a(int var1, int var2, int var3, int var4) {
+		int[] var5 = this.field_35504_a.func_35500_a(var1, var2, var3, var4);
+		int[] var6 = this.field_35504_b.func_35500_a(var1, var2, var3, var4);
+		int[] var7 = IntCache.func_35267_a(var3 * var4);
+
+		for (int var8 = 0; var8 < var4; ++var8) {
+			for (int var9 = 0; var9 < var3; ++var9) {
+				this.func_35499_a(var9 + var1, var8 + var2);
+				int i = var9 + var8 * var3;
+				var7[i] = this.func_35498_a(10) == 0 && var5[i] > 0 ? var6[i] : var5[i];
+			}
+		}
+
+		return var7;
+	}
+}
--- net/minecraft/src/ChunkProviderLoadOrGenerate.java
+++ net/minecraft/src/ChunkProviderLoadOrGenerate.java
@@ -63,7 +63,7 @@
 						var6 = this.blankChunk;
 					} else {
 						var6 = this.chunkProvider.provideChunk(var1, var2);
-						var6.func_25124_i();
+						var6.updateSkylight();
 					}
 				}
 
@@ -73,7 +73,7 @@
 					this.chunks[var5].onChunkLoad();
 				}
 
-				this.chunks[var5].func_35843_a(this, this, var1, var2);
+				this.chunks[var5].populateChunk(this, this, var1, var2);
 			}
 
 			this.lastQueriedChunkXPos = var1;
--- net/minecraft/src/BlockFire.java
+++ net/minecraft/src/BlockFire.java
@@ -178,7 +178,10 @@
 	}
 
 	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockId(var2, var3 - 1, var4) != Block.obsidian.blockID || !Block.portal.tryToCreatePortal(var1, var2, var3, var4)) {
+		if((var1.getBlockId(var2, var3 - 1, var4) != Block.obsidian.blockID
+				|| !Block.portal.tryToCreatePortal(var1, var2, var3, var4))
+				&& !Block.portal.tryToCreateSkyPortal(var1, var2, var3, var4, Block.skyPortalFrame.blockID, 1)
+				&& !Block.portal.tryToCreateSkyPortal(var1, var2, var3, var4, Block.chargedPortalFrame.blockID, 2)) {
 			if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && !this.func_263_h(var1, var2, var3, var4)) {
 				var1.setBlockWithNotify(var2, var3, var4, 0);
 			} else {
--- /dev/null
+++ net/minecraft/src/WorldGenShrub.java
@@ -1,0 +1,48 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenShrub extends WorldGenerator {
+	private int field_48197_a;
+	private int field_48196_b;
+
+	public WorldGenShrub(int var1, int var2) {
+		this.field_48196_b = var1;
+		this.field_48197_a = var2;
+	}
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		boolean var6 = false;
+
+		while(true) {
+			int var15 = var1.getBlockId(var3, var4, var5);
+			if(var15 != 0 && var15 != Block.leaves.blockID || var4 <= 0) {
+				int var7 = var1.getBlockId(var3, var4, var5);
+				if(var7 == Block.dirt.blockID || var7 == Block.grass.blockID) {
+					++var4;
+					this.setBlockAndMetadata(var1, var3, var4, var5, Block.wood.blockID, this.field_48196_b);
+
+					for(int var8 = var4; var8 <= var4 + 2; ++var8) {
+						int var9 = var8 - var4;
+						int var10 = 2 - var9;
+
+						for(int var11 = var3 - var10; var11 <= var3 + var10; ++var11) {
+							int var12 = var11 - var3;
+
+							for(int var13 = var5 - var10; var13 <= var5 + var10; ++var13) {
+								int var14 = var13 - var5;
+								if((Math.abs(var12) != var10 || Math.abs(var14) != var10 || var2.nextInt(2) != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var11, var8, var13)]) {
+									this.setBlockAndMetadata(var1, var11, var8, var13, Block.leaves.blockID, this.field_48197_a);
+								}
+							}
+						}
+					}
+				}
+
+				return true;
+			}
+
+			--var4;
+		}
+	}
+}
--- net/minecraft/src/ItemArmor.java
+++ net/minecraft/src/ItemArmor.java
@@ -1,20 +1,20 @@
 package net.minecraft.src;
 
 public class ItemArmor extends Item {
-	private static final int[] damageReduceAmountArray = new int[]{3, 8, 6, 3};
-	private static final int[] maxDamageArray = new int[]{11, 16, 15, 13};
-	public final int armorLevel;
+	static final int[] damageReduceAmountArray = new int[]{3, 8, 6, 3};
+	static final int[] maxDamageArray = new int[]{11, 16, 15, 13};
 	public final int armorType;
-	public final int damageReduceAmount;
 	public final int renderIndex;
+	public int damageReduceAmount;
+	public EnumArmorMaterial material;
 
-	public ItemArmor(int var1, int var2, int var3, int var4) {
+	public ItemArmor(int var1, EnumArmorMaterial var2, int var3, int var4) {
 		super(var1);
-		this.armorLevel = var2;
+		this.material = var2;
 		this.armorType = var4;
 		this.renderIndex = var3;
-		this.damageReduceAmount = damageReduceAmountArray[var4];
-		this.setMaxDamage(maxDamageArray[var4] * 3 << var2);
+		this.damageReduceAmount = var2.getDamageReductionAmount(var4);
+		this.setMaxDamage(var2.getDurability(var4));
 		this.maxStackSize = 1;
 	}
 }
--- /dev/null
+++ net/minecraft/src/EntityJeb.java
@@ -1,0 +1,162 @@
+package net.minecraft.src;
+
+import java.util.List;
+
+public class EntityJeb extends EntityCreature {
+	private static final ItemStack heldBow = new ItemStack(Item.bow);
+	private static final ItemStack heldSword = new ItemStack(Item.swordDiamond);
+
+	private boolean useBow = false;
+	private int deathTimer = 0;
+
+	public EntityJeb(World var1) {
+		super(var1);
+		this.ignoreFrustumCheck = true;
+		this.sightDist = 64.0F;
+	}
+
+	public int getMaxHealth() {
+		return 200;
+	}
+
+	protected Entity findPlayerToAttack() {
+		return this.worldObj.getClosestPlayerToEntity(this, -1.0F);
+	}
+
+	public boolean attackEntityFrom(DamageSource var1, int var2) {
+		if (var1 instanceof EntityDamageSourceIndirect && this.useBow) {
+			this.worldObj.playSoundAtEntity(this, "random.remixquick", this.getSoundVolume(), 1.0F);
+			return false;
+		}
+
+		return var1 != DamageSource.field_35549_h && super.attackEntityFrom(var1, var2);
+	}
+
+	protected void attackEntity(Entity var1, float var2) {
+		if(this.attackTime <= 0 && var1.boundingBox.maxY > this.boundingBox.minY && var1.boundingBox.minY < this.boundingBox.maxY) {
+			this.attackTime = 20 + this.health * 20 / this.getMaxHealth();
+			if (var2 < 3.5F) {
+				var1.attackEntityFrom(DamageSource.func_35525_a(this), 20);
+			} else if (this.useBow) {
+				double var3 = var1.posX - this.posX;
+				double var5 = var1.posZ - this.posZ;
+				EntityArrow var7 = new EntityArrow(this.worldObj, this, 1.0F);
+				double var8 = var1.posY + (double)var1.getEyeHeight() - (double)0.7F - var7.posY;
+				float var10 = MathHelper.sqrt_double(var3 * var3 + var5 * var5) * 0.2F;
+				this.worldObj.playSoundAtEntity(this, "random.bow", 1.0F, 1.0F / (this.rand.nextFloat() * 0.4F + 0.8F));
+				this.worldObj.entityJoinedWorld(var7);
+				var7.setArrowHeading(var3, var8 + var10, var5, 1.5F, Personalization.sprinting ? 4.0F : 10.0F);
+			}
+		}
+
+	}
+
+	public void onLivingUpdate() {
+		for (EntityPlayer player : (List<EntityPlayer>)this.worldObj.playerEntities) {
+			player.boss = this;
+		}
+
+		if (this.posY < 0.0D) {
+			this.setPosition(0.0D, 100.0D, 0.0D);
+			this.attackEntityFrom(DamageSource.func_35527_a((EntityPlayer)this.entityToAttack), 50);
+			this.worldObj.playSoundAtEntity(this, "ambient.weather.thunder", 100.0F, 1.0F);
+		}
+
+		float baseSpeedFactor = (this.getMaxHealth() - this.health) / (float)this.getMaxHealth();
+		float sprintSpeedFactor = 1.0F + baseSpeedFactor * 0.25F;
+		float bowSpeedFactor = 1.0F + baseSpeedFactor;
+
+		this.field_35169_bv = this.useBow ? 0.05F * bowSpeedFactor
+				: (Personalization.sprinting ? 0.2F : 0.13F) * sprintSpeedFactor;
+		this.field_35168_bw = this.useBow ? 0.01F * bowSpeedFactor
+				: (Personalization.sprinting ? 0.04F : 0.026F) * sprintSpeedFactor;
+
+		EntityPlayer meleeTarget = this.worldObj.getClosestPlayer(this.posX, this.posY, this.posZ, 8.0D);
+		this.useBow = meleeTarget == null;
+		meleeTarget = this.worldObj.getClosestPlayer(this.posX, this.posY, this.posZ, 24.0D);
+		this.useBow &= meleeTarget != null;
+		super.onLivingUpdate();
+	}
+
+	protected void updateEntityActionState() {
+		super.updateEntityActionState();
+		if (this.entityToAttack != null) {
+			this.isJumping |= !this.useBow && Personalization.sprinting;
+		}
+	}
+
+	public String getEntityTexture() {
+		return "/mob/jeb.png";
+	}
+
+	protected boolean canDespawn() {
+		return false;
+	}
+
+	public boolean isInRangeToRenderDist(double var1) {
+		return true;
+	}
+
+	public boolean func_35117_Q() {
+		return Personalization.sprinting;
+	}
+
+	@Override
+	public void knockBack(Entity var1, int var2, double var3, double var5) {
+		this.field_35118_ao = true;
+		float var7 = MathHelper.sqrt_double(var3 * var3 + var5 * var5);
+		float var8 = Personalization.sprinting ? 1.0F : 2.0F;
+		this.motionX /= 2.0D;
+		this.motionY /= 2.0D;
+		this.motionZ /= 2.0D;
+		this.motionX -= var3 / (double)var7 * (double)var8;
+		this.motionY += (double)0.4F;
+		this.motionZ -= var5 / (double)var7 * (double)var8;
+		if(this.motionY > (double)0.4F) {
+			this.motionY = (double)0.4F;
+		}
+	}
+
+	protected void func_40120_m_() {
+		this.noClip = false;
+		++this.deathTimer;
+		if(this.deathTimer == 175) {
+			for (EntityPlayer player : (List<EntityPlayer>)this.worldObj.playerEntities) {
+				this.worldObj.playSoundAtEntity(player, "mob.biggerexplosion", 100.0F, 1.0F);
+			}
+		}
+
+		if(this.deathTimer >= 180 && this.deathTimer <= 200 || this.rand.nextInt(20) == 0) {
+			float var1 = (this.rand.nextFloat() - 0.5F) * 2.0F;
+			float var2 = (this.rand.nextFloat() - 0.5F) * 2.0F;
+			float var3 = (this.rand.nextFloat() - 0.5F) * 2.0F;
+			this.worldObj.spawnParticle("hugeexplosion", this.posX + (double)var1, this.posY + (double)var2, this.posZ + (double)var3, 0.0D, 0.0D, 0.0D);
+		}
+
+		this.moveEntity(0.0D, (double)0.1F, 0.0D);
+		this.renderYawOffset = this.rotationYaw += 20.0F;
+		if(this.deathTimer == 200) {
+			this.onEntityDeath();
+			this.setEntityDead();
+
+			EntityNotch notch = new EntityNotch(this.worldObj);
+			notch.setPosition(this.posX, this.posY, this.posZ);
+			notch.motionY = 2.5D;
+			this.worldObj.entityJoinedWorld(notch);
+			this.worldObj.playSoundAtEntity(this, "ambient.weather.thunder", 100.0F, 1.0F);
+			this.worldObj.playSoundAtEntity(this, "random.explode", 100.0F, 1.0F);
+
+			for (int i = 0; i < 10; i++) {
+				double xOff = this.rand.nextDouble() * 4.0D - 2.0D;
+				double yOff = this.rand.nextDouble() * 4.0D - 2.0D;
+				double zOff = this.rand.nextDouble() * 4.0D - 2.0D;
+				this.worldObj.spawnParticle("hugeexplode", this.posX + xOff, this.posY + yOff, this.posZ + zOff, 0.0D, 0.0D, 0.0D);
+			}
+		}
+
+	}
+
+	public ItemStack getHeldItem() {
+		return this.useBow ? heldBow : heldSword;
+	}
+}
--- net/minecraft/src/WorldGenBigTree.java
+++ net/minecraft/src/WorldGenBigTree.java
@@ -16,7 +16,7 @@
 	double field_872_k = 1.0D;
 	int trunkSize = 1;
 	int heightLimitLimit = 12;
-	int leafDistanceLimit = 4;
+	int leafDistanceLimit = 5;
 	int[][] leafNodes;
 
 	void generateLeafNodeList() {
@@ -116,7 +116,7 @@
 						if(var14 != 0 && var14 != 18) {
 							++var13;
 						} else {
-							this.worldObj.setBlock(var11[0], var11[1], var11[2], var6);
+							this.worldObj.setNewBlock(var11[0], var11[1], var11[2], var6);
 							++var13;
 						}
 					}
@@ -191,7 +191,7 @@
 				var14[var6] = MathHelper.floor_double((double)(var1[var6] + var15) + 0.5D);
 				var14[var7] = MathHelper.floor_double((double)var1[var7] + (double)var15 * var10 + 0.5D);
 				var14[var8] = MathHelper.floor_double((double)var1[var8] + (double)var15 * var12 + 0.5D);
-				this.worldObj.setBlock(var14[0], var14[1], var14[2], var3);
+				this.worldObj.setNewBlock(var14[0], var14[1], var14[2], var3);
 			}
 
 		}
@@ -331,9 +331,8 @@
 		this.basePos[0] = var3;
 		this.basePos[1] = var4;
 		this.basePos[2] = var5;
-		if(this.heightLimit == 0) {
-			this.heightLimit = 5 + this.rand.nextInt(this.heightLimitLimit);
-		}
+		int eFactor = (int)(5.0F - Personalization.entropy * 4.0F);
+		this.heightLimit = Math.max(eFactor + this.rand.nextInt(this.heightLimitLimit), 5);
 
 		if(!this.validTreeLocation()) {
 			return false;
--- net/minecraft/src/WorldGenLakes.java
+++ net/minecraft/src/WorldGenLakes.java
@@ -68,7 +68,7 @@
 			for(var32 = 0; var32 < 16; ++var32) {
 				for(var10 = 0; var10 < 8; ++var10) {
 					if(var6[(var8 * 16 + var32) * 8 + var10]) {
-						var1.setBlock(var3 + var8, var4 + var10, var5 + var32, var10 >= 4 ? 0 : this.blockIndex);
+						this.setBlock(var1, var3 + var8, var4 + var10, var5 + var32, var10 >= 4 ? 0 : this.blockIndex);
 					}
 				}
 			}
@@ -78,7 +78,7 @@
 			for(var32 = 0; var32 < 16; ++var32) {
 				for(var10 = 4; var10 < 8; ++var10) {
 					if(var6[(var8 * 16 + var32) * 8 + var10] && var1.getBlockId(var3 + var8, var4 + var10 - 1, var5 + var32) == Block.dirt.blockID && var1.getSavedLightValue(EnumSkyBlock.Sky, var3 + var8, var4 + var10, var5 + var32) > 0) {
-						var1.setBlock(var3 + var8, var4 + var10 - 1, var5 + var32, Block.grass.blockID);
+						this.setBlock(var1, var3 + var8, var4 + var10 - 1, var5 + var32, Block.grass.blockID);
 					}
 				}
 			}
@@ -90,7 +90,7 @@
 					for(var10 = 0; var10 < 8; ++var10) {
 						var33 = !var6[(var8 * 16 + var32) * 8 + var10] && (var8 < 15 && var6[((var8 + 1) * 16 + var32) * 8 + var10] || var8 > 0 && var6[((var8 - 1) * 16 + var32) * 8 + var10] || var32 < 15 && var6[(var8 * 16 + var32 + 1) * 8 + var10] || var32 > 0 && var6[(var8 * 16 + (var32 - 1)) * 8 + var10] || var10 < 7 && var6[(var8 * 16 + var32) * 8 + var10 + 1] || var10 > 0 && var6[(var8 * 16 + var32) * 8 + (var10 - 1)]);
 						if(var33 && (var10 < 4 || var2.nextInt(2) != 0) && var1.getBlockMaterial(var3 + var8, var4 + var10, var5 + var32).isSolid()) {
-							var1.setBlock(var3 + var8, var4 + var10, var5 + var32, Block.stone.blockID);
+							this.setBlock(var1, var3 + var8, var4 + var10, var5 + var32, Block.stone.blockID);
 						}
 					}
 				}
--- /dev/null
+++ net/minecraft/src/BiomeGenMegaTaiga.java
@@ -1,0 +1,60 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenMegaTaiga extends BiomeGenBase {
+	private WorldGenMegaPineTree pineA = new WorldGenMegaPineTree(false);
+	private WorldGenMegaPineTree pineB = new WorldGenMegaPineTree(true);
+	private WorldGenBigTree oak = new WorldGenBigTree();
+
+	public boolean dirtGround = true;
+
+	protected BiomeGenMegaTaiga(int var1) {
+		super(var1);
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 8, 4, 4));
+		this.decorator.trees = 10;
+		this.decorator.grass = 7;
+		this.decorator.deadBushes = 1;
+		this.decorator.mushrooms = 3;
+		this.oak.heightLimitLimit = 25;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return Personalization.oakOnly ? this.oak
+				: var1.nextInt(3) == 0 ? (var1.nextInt(13) != 0 ? this.pineA : this.pineB)
+				: BiomeGenBase.taiga.getRandomWorldGenForTrees(var1);
+	}
+
+	public WorldGenerator getGrownOakTree(Random var1) {
+		return this.oak;
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, int topTerrainHeight, double sandValue, double gravelValue, double erosionValue, double simplexValue) {
+		this.topBlock = (byte)Block.grass.blockID;
+		this.topMeta = 0;
+
+		if (this.dirtGround) {
+			if (simplexValue > 1.75D) {
+				this.topBlock = (byte)Block.dirt.blockID;
+				this.topMeta = 1;
+			} else if (simplexValue > -0.95D) {
+				this.topBlock = (byte)Block.dirt.blockID;
+				this.topMeta = 2;
+			}
+		}
+
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, topTerrainHeight, sandValue, gravelValue, erosionValue, simplexValue);
+	}
+
+	public WorldGenerator getRandomWorldGenForGrass(Random var1) {
+		return new WorldGenTallGrass(Block.tallGrass.blockID, var1.nextInt(5) > 0 ? 2 : 1);
+	}
+
+	public float getMinHeight(int x, int z) {
+		return super.getMinHeight(x, z) + (doHills(x, z) ? 0.1F : 0.0F);
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) + (doHills(x, z) ? 0.4F : 0.0F);
+	}
+}
--- net/minecraft/src/WorldGenClay.java
+++ net/minecraft/src/WorldGenClay.java
@@ -25,7 +25,7 @@
 						for(int var12 = var4 - var7; var12 <= var4 + var7; ++var12) {
 							int var13 = var1.getBlockId(var8, var12, var9);
 							if(var13 == Block.dirt.blockID || var13 == Block.blockClay.blockID) {
-								var1.setBlock(var8, var12, var9, this.clayBlockId);
+								this.setBlock(var1, var8, var12, var9, this.clayBlockId);
 							}
 						}
 					}
--- net/minecraft/src/GuiCreateWorld.java
+++ net/minecraft/src/GuiCreateWorld.java
@@ -63,7 +63,7 @@
 			this.folderName = "World";
 		}
 
-		this.folderName = generateUnusedFolderName(this.mc.getSaveLoader(), this.folderName);
+		this.folderName = generateUnusedFolderName(this.game.getSaveLoader(), this.folderName);
 	}
 
 	private void func_35363_g() {
@@ -96,9 +96,9 @@
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.enabled) {
 			if(var1.id == 1) {
-				this.mc.displayGuiScreen(this.parentGuiScreen);
+				this.game.displayGuiScreen(this.parentGuiScreen);
 			} else if(var1.id == 0) {
-				this.mc.displayGuiScreen((GuiScreen)null);
+				this.game.displayGuiScreen((GuiScreen)null);
 				if(this.createClicked) {
 					return;
 				}
@@ -120,13 +120,13 @@
 				byte var9 = 0;
 				if(this.field_35364_f.equals("creative")) {
 					var9 = 1;
-					this.mc.playerController = new PlayerControllerTest(this.mc);
+					this.game.playerController = new PlayerControllerTest(this.game);
 				} else {
-					this.mc.playerController = new PlayerControllerSP(this.mc);
+					this.game.playerController = new PlayerControllerSP(this.game);
 				}
 
-				this.mc.startWorld(this.folderName, this.textboxWorldName.getText(), new WorldSettings(var2, var9, this.field_35365_g));
-				this.mc.displayGuiScreen((GuiScreen)null);
+				this.game.startWorld(this.folderName, this.textboxWorldName.getText(), new WorldSettings(var2, var9, this.field_35365_g));
+				this.game.displayGuiScreen((GuiScreen)null);
 			} else if(var1.id == 3) {
 				this.field_35368_i = !this.field_35368_i;
 				this.field_35366_j.enabled2 = !this.field_35368_i;
--- net/minecraft/src/Gui.java
+++ net/minecraft/src/Gui.java
@@ -87,6 +87,35 @@
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 	}
 
+	protected void drawGradientRectHorizontal(int var1, int var2, int var3, int var4, int var5, int var6) {
+		float var7 = (float)(var5 >> 24 & 255) / 255.0F;
+		float var8 = (float)(var5 >> 16 & 255) / 255.0F;
+		float var9 = (float)(var5 >> 8 & 255) / 255.0F;
+		float var10 = (float)(var5 & 255) / 255.0F;
+		float var11 = (float)(var6 >> 24 & 255) / 255.0F;
+		float var12 = (float)(var6 >> 16 & 255) / 255.0F;
+		float var13 = (float)(var6 >> 8 & 255) / 255.0F;
+		float var14 = (float)(var6 & 255) / 255.0F;
+		GL11.glDisable(GL11.GL_TEXTURE_2D);
+		GL11.glEnable(GL11.GL_BLEND);
+		GL11.glDisable(GL11.GL_ALPHA_TEST);
+		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+		GL11.glShadeModel(GL11.GL_SMOOTH);
+		Tessellator var15 = Tessellator.instance;
+		var15.startDrawingQuads();
+		var15.setColorRGBA_F(var8, var9, var10, var7);
+		var15.addVertex((double)var1, (double)var2, this.zLevel);
+		var15.addVertex((double)var1, (double)var4, this.zLevel);
+		var15.setColorRGBA_F(var12, var13, var14, var11);
+		var15.addVertex((double)var3, (double)var4, this.zLevel);
+		var15.addVertex((double)var3, (double)var2, this.zLevel);
+		var15.draw();
+		GL11.glShadeModel(GL11.GL_FLAT);
+		GL11.glDisable(GL11.GL_BLEND);
+		GL11.glEnable(GL11.GL_ALPHA_TEST);
+		GL11.glEnable(GL11.GL_TEXTURE_2D);
+	}
+
 	public void drawCenteredString(FontRenderer var1, String var2, int var3, int var4, int var5) {
 		var1.drawStringWithShadow(var2, var3 - var1.getStringWidth(var2) / 2, var4, var5);
 	}
--- /dev/null
+++ net/minecraft/src/GenLayerRemoveTooMuchOcean.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+public class GenLayerRemoveTooMuchOcean extends GenLayer {
+	public GenLayerRemoveTooMuchOcean(long var1, GenLayer var3) {
+		super(var1);
+		this.field_35504_a = var3;
+	}
+
+	public int[] func_35500_a(int var1, int var2, int var3, int var4) {
+		int var5 = var1 - 1;
+        int var6 = var2 - 1;
+        int var7 = var3 + 2;
+        int var8 = var4 + 2;
+        int[] var9 = this.field_35504_a.func_35500_a(var5, var6, var7, var8);
+        int[] var10 = IntCache.func_35267_a(var3 * var4);
+
+        for (int var11 = 0; var11 < var4; ++var11) {
+            for (int var12 = 0; var12 < var3; ++var12) {
+                int var13 = var9[var12 + 1 + (var11 + 1 - 1) * (var3 + 2)];
+                int var14 = var9[var12 + 1 + 1 + (var11 + 1) * (var3 + 2)];
+                int var15 = var9[var12 + 1 - 1 + (var11 + 1) * (var3 + 2)];
+                int var16 = var9[var12 + 1 + (var11 + 1 + 1) * (var3 + 2)];
+                int var17 = var9[var12 + 1 + (var11 + 1) * var7];
+                var10[var12 + var11 * var3] = var17;
+                this.func_35499_a((long) (var12 + var1), (long) (var11 + var2));
+
+                if (var17 == 0 && var13 == 0 && var14 == 0 && var15 == 0 && var16 == 0
+                        && this.func_35498_a(2) == 0) {
+                    var10[var12 + var11 * var3] = 1;
+                }
+            }
+        }
+
+        return var10;
+	}
+}
--- net/minecraft/src/WorldGenForest.java
+++ net/minecraft/src/WorldGenForest.java
@@ -7,81 +7,71 @@
 		int var6 = var2.nextInt(3) + 5;
 		boolean var7 = true;
 		if(var4 >= 1) {
-			int var10000 = var4 + var6 + 1;
-			var1.getClass();
-			if(var10000 <= 128) {
-				int var8;
-				int var10;
-				int var11;
-				int var12;
-				for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
-					byte var9 = 1;
-					if(var8 == var4) {
-						var9 = 0;
-					}
-
-					if(var8 >= var4 + 1 + var6 - 2) {
-						var9 = 2;
-					}
-
-					for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
-						for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-							if(var8 >= 0) {
-								var1.getClass();
-								if(var8 < 128) {
-									var12 = var1.getBlockId(var10, var8, var11);
-									if(var12 != 0 && var12 != Block.leaves.blockID) {
-										var7 = false;
-									}
-									continue;
-								}
-							}
-
-							var7 = false;
-						}
-					}
-				}
-
-				if(!var7) {
-					return false;
-				}
-
-				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if(var8 == Block.grass.blockID || var8 == Block.dirt.blockID) {
-					var1.getClass();
-					if(var4 < 128 - var6 - 1) {
-						var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
-
-						int var16;
-						for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
-							var10 = var16 - (var4 + var6);
-							var11 = 1 - var10 / 2;
-
-							for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-								int var13 = var12 - var3;
-
-								for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
-									int var15 = var14 - var5;
-									if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
-										var1.setBlockAndMetadata(var12, var16, var14, Block.leaves.blockID, 2);
-									}
-								}
-							}
-						}
-
-						for(var16 = 0; var16 < var6; ++var16) {
-							var10 = var1.getBlockId(var3, var4 + var16, var5);
-							if(var10 == 0 || var10 == Block.leaves.blockID) {
-								var1.setBlockAndMetadata(var3, var4 + var16, var5, Block.wood.blockID, 2);
-							}
-						}
-
-						return true;
-					}
-				}
-
+			int var8;
+			int var10;
+			int var11;
+			int var12;
+			for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
+				byte var9 = 1;
+				if(var8 == var4) {
+					var9 = 0;
+				}
+
+				if(var8 >= var4 + 1 + var6 - 2) {
+					var9 = 2;
+				}
+
+				for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
+					for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
+						if(var8 >= 0) {
+							var12 = var1.getBlockId(var10, var8, var11);
+							if(var12 != 0 && var12 != Block.leaves.blockID) {
+								var7 = false;
+							}
+							continue;
+						}
+
+						var7 = false;
+					}
+				}
+			}
+
+			if(!var7) {
 				return false;
 			}
+
+			var8 = var1.getBlockId(var3, var4 - 1, var5);
+			if(var8 == Block.grass.blockID || var8 == Block.dirt.blockID) {
+				this.setBlock(var1, var3, var4 - 1, var5, Block.dirt.blockID);
+
+				int var16;
+				for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
+					var10 = var16 - (var4 + var6);
+					var11 = 1 - var10 / 2;
+
+					for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
+						int var13 = var12 - var3;
+
+						for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
+							int var15 = var14 - var5;
+							if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
+								this.setBlockAndMetadata(var1, var12, var16, var14, Block.leaves.blockID, 2);
+							}
+						}
+					}
+				}
+
+				for(var16 = 0; var16 < var6; ++var16) {
+					var10 = var1.getBlockId(var3, var4 + var16, var5);
+					if(var10 == 0 || var10 == Block.leaves.blockID) {
+						this.setBlockAndMetadata(var1, var3, var4 + var16, var5, Block.wood.blockID, 2);
+					}
+				}
+
+				return true;
+			}
+
+			return false;
 		}
 
 		return false;
--- /dev/null
+++ net/minecraft/src/GuiSkills.java
@@ -1,0 +1,105 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class GuiSkills extends GuiScreen {
+	private final GuiScreen parentScreen;
+	private PlayerSkillSet skills;
+	private int updateCounter;
+
+	public GuiSkills(GuiScreen parentScreen) {
+		this.parentScreen = parentScreen;
+	}
+
+	public void initGui() {
+		int offX = (this.width - 176) / 2;
+		int offY = (this.height - 166) / 2;
+
+		this.skills = this.game.thePlayer.skills;
+		int i = 0;
+		for (PlayerSkill skill : this.skills.skillList) {
+			GuiButton button = new GuiButton(i, offX + 152, offY + i * 18 + 8, 16, 16, "+");
+			button.enabled = !skill.isMaxedOut();
+			this.controlList.add(button);
+			i++;
+		}
+
+		this.controlList.add(new GuiButton(100, offX + 148, offY + 138, 20, 20, "-"));
+	}
+
+	public void updateScreen() {
+		this.updateCounter++;
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawDefaultBackground();
+
+		int bgTex = this.game.renderEngine.getTexture("/gui/skills.png");
+		this.game.renderEngine.bindTexture(bgTex);
+
+		int offX = (this.width - 176) / 2;
+		int offY = (this.height - 166) / 2;
+		this.drawTexturedModalRect(offX, offY, 0, 0, 176, 166);
+
+		boolean skillHop = Personalization.skillPoints && this.updateCounter % 25 >= 20;
+		int pointsColor = skillHop ? 16777215 : 8453920;
+		String var34 = "Skill points: " + this.game.thePlayer.getSkillPoints();
+		int pointsX = offX + 8;
+		int pointsY = offY - 12;
+		if (skillHop) pointsY--;
+		this.fontRenderer.drawString(var34, pointsX + 1, pointsY, 0);
+		this.fontRenderer.drawString(var34, pointsX - 1, pointsY, 0);
+		this.fontRenderer.drawString(var34, pointsX, pointsY + 1, 0);
+		this.fontRenderer.drawString(var34, pointsX, pointsY - 1, 0);
+		this.fontRenderer.drawString(var34, pointsX, pointsY, pointsColor);
+		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+
+		int i = 0;
+		for (PlayerSkill skill : this.skills.skillList) {
+			this.game.renderEngine.bindTexture(bgTex);
+			this.drawTexturedModalRect(offX + 8, offY + i * 18 + 8, 0, 166, 160, 16);
+			this.drawString(this.fontRenderer, skill.getName() + ": Lvl " + skill.getValue(), offX + 12, offY + i * 18 + 12, 16777215);
+			i++;
+		}
+
+		super.drawScreen(var1, var2, var3);
+
+		if (var1 >= offX + 152 && var1 < offX + 168 && var2 >= offY + 8) {
+			i = (var2 - offY - 8) / 18;
+			if ((var2 - offY - 8) % 18 < 16 && i < this.skills.skillList.size()) {
+				PlayerSkill skill = this.skills.skillList.get(i);
+				int requirement = skill.getLevelUpRequirement();
+
+				String text = skill.isMaxedOut() ? "Maximum level" : "Requirement: " + requirement + " points";
+				int ttX = var1 + 12;
+				int ttY = var2 - 12;
+				int ttW = this.fontRenderer.getStringWidth(text);
+				this.drawGradientRect(ttX - 3, ttY - 3, ttX + ttW + 3, ttY + 8 + 3, -1073741824, -1073741824);
+				this.fontRenderer.drawStringWithShadow(text, ttX, ttY, -1);
+			}
+		}
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		if (var1.id == 100) {
+			this.game.displayGuiScreen(this.parentScreen);
+			return;
+		}
+
+		PlayerSkill skill = this.skills.skillList.get(var1.id);
+		if (this.game.thePlayer.paySkillPoints(skill.getLevelUpRequirement())) {
+			skill.addValue(1);
+
+			switch (skill.getId()) {
+				case "Health":
+					this.game.thePlayer.health += 2;
+			}
+
+			var1.enabled = !skill.isMaxedOut();
+		}
+	}
+
+	public boolean doesGuiPauseGame() {
+		return false;
+	}
+}
--- net/minecraft/src/GuiSlot.java
+++ net/minecraft/src/GuiSlot.java
@@ -118,6 +118,19 @@
 		}
 	}
 
+	public int getHoveredSlot(int var2) {
+		if(var2 >= this.top && var2 <= this.bottom) {
+			int var10 = var2 - this.top - this.field_27261_r + (int)this.amountScrolled - 4;
+			int var11 = var10 / this.slotHeight;
+
+			if (var11 >= 0 && var11 < this.getSize()) {
+				return var11;
+			}
+		}
+
+		return -1;
+	}
+
 	public void drawScreen(int var1, int var2, float var3) {
 		this.field_35409_k = var1;
 		this.field_35408_l = var2;
@@ -192,13 +205,15 @@
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/background.png"));
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		float var17 = 32.0F;
-		var16.startDrawingQuads();
-		var16.setColorOpaque_I(2105376);
-		var16.addVertexWithUV((double)this.left, (double)this.bottom, 0.0D, (double)((float)this.left / var17), (double)((float)(this.bottom + (int)this.amountScrolled) / var17));
-		var16.addVertexWithUV((double)this.right, (double)this.bottom, 0.0D, (double)((float)this.right / var17), (double)((float)(this.bottom + (int)this.amountScrolled) / var17));
-		var16.addVertexWithUV((double)this.right, (double)this.top, 0.0D, (double)((float)this.right / var17), (double)((float)(this.top + (int)this.amountScrolled) / var17));
-		var16.addVertexWithUV((double)this.left, (double)this.top, 0.0D, (double)((float)this.left / var17), (double)((float)(this.top + (int)this.amountScrolled) / var17));
-		var16.draw();
+		if (!this.overrideBackground()) {
+			var16.startDrawingQuads();
+			var16.setColorOpaque_I(2105376);
+			var16.addVertexWithUV((double)this.left, (double)this.bottom, 0.0D, (double)((float)this.left / var17), (double)((float)(this.bottom + (int)this.amountScrolled) / var17));
+			var16.addVertexWithUV((double)this.right, (double)this.bottom, 0.0D, (double)((float)this.right / var17), (double)((float)(this.bottom + (int)this.amountScrolled) / var17));
+			var16.addVertexWithUV((double)this.right, (double)this.top, 0.0D, (double)((float)this.right / var17), (double)((float)(this.top + (int)this.amountScrolled) / var17));
+			var16.addVertexWithUV((double)this.left, (double)this.top, 0.0D, (double)((float)this.left / var17), (double)((float)(this.top + (int)this.amountScrolled) / var17));
+			var16.draw();
+		}
 		var9 = this.width / 2 - 92 - 16;
 		var10 = this.top + 4 - (int)this.amountScrolled;
 		if(this.field_27262_q) {
@@ -318,5 +333,9 @@
 		var5.addVertexWithUV((double)this.width, (double)var1, 0.0D, (double)((float)this.width / var6), (double)((float)var1 / var6));
 		var5.addVertexWithUV(0.0D, (double)var1, 0.0D, 0.0D, (double)((float)var1 / var6));
 		var5.draw();
+	}
+
+	protected boolean overrideBackground() {
+		return false;
 	}
 }
--- /dev/null
+++ net/minecraft/src/ItemFileRecord.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+public class ItemFileRecord extends Item {
+	protected ItemFileRecord(int var1) {
+		super(var1);
+		this.maxStackSize = 1;
+		this.setMaxDamage(0);
+		this.setHasSubtypes(true);
+	}
+
+	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
+		if(var3.getBlockId(var4, var5, var6) == Block.jukebox.blockID && var3.getBlockMetadata(var4, var5, var6) == 0) {
+			if(var3.multiplayerWorld) {
+				return true;
+			} else {
+				((BlockJukeBox)Block.jukebox).ejectRecord(var3, var4, var5, var6, -var1.getItemDamage());
+				var3.playAuxSFXAtEntity((EntityPlayer)null, 1006, var4, var5, var6, var1.getItemDamage());
+				--var1.stackSize;
+				return true;
+			}
+		} else {
+			return false;
+		}
+	}
+}
--- net/minecraft/src/ItemPickaxe.java
+++ net/minecraft/src/ItemPickaxe.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class ItemPickaxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.sandStone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice, Block.netherrack, Block.oreLapis, Block.blockLapis};
+	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.sandStone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice, Block.netherrack, Block.oreLapis, Block.blockLapis, Block.quartzPillar, Block.oreQuartz, Block.oreCopper};
 
 	protected ItemPickaxe(int var1, EnumToolMaterial var2) {
 		super(var1, 2, var2, blocksEffectiveAgainst);
--- /dev/null
+++ net/minecraft/src/WorldGenVines.java
@@ -1,0 +1,27 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenVines extends WorldGenerator {
+	private static final int[] vineGrowth = new int[]{-1, -1, 2, 0, 1, 3};
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int var6 = var3;
+
+		for(int var7 = var5; var4 < 128; ++var4) {
+			if(var1.isAirBlock(var3, var4, var5)) {
+				for(int var8 = 2; var8 <= 5; ++var8) {
+					if(Block.field_35278_bv.canPlaceBlockOnSide(var1, var3, var4, var5, var8)) {
+						this.setBlockAndMetadata(var1, var3, var4, var5, Block.field_35278_bv.blockID, 1 << vineGrowth[PistonBlockTextures.field_31057_a[var8]]);
+						break;
+					}
+				}
+			} else {
+				var3 = var6 + var2.nextInt(4) - var2.nextInt(4);
+				var5 = var7 + var2.nextInt(4) - var2.nextInt(4);
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/Render.java
+++ net/minecraft/src/Render.java
@@ -5,7 +5,7 @@
 public abstract class Render {
 	protected RenderManager renderManager;
 	private ModelBase modelBase = new ModelBiped();
-	protected RenderBlocks renderBlocks = new RenderBlocks();
+	protected RenderBlocks renderBlockies = new RenderBlocks();
 	protected float shadowSize = 0.0F;
 	protected float field_194_c = 1.0F;
 
@@ -239,7 +239,7 @@
 	}
 
 	public void doRenderShadowAndFire(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		if(this.renderManager.options.fancyGraphics && this.shadowSize > 0.0F) {
+		if(this.renderManager.options.fancyGraphics && !Personalization.pe8env && this.shadowSize > 0.0F) {
 			double var10 = this.renderManager.getDistanceToCamera(var1.posX, var1.posY, var1.posZ);
 			float var12 = (float)((1.0D - var10 / 256.0D) * (double)this.field_194_c);
 			if(var12 > 0.0F) {
--- /dev/null
+++ net/minecraft/src/ChunkProviderCaverns.java
@@ -1,0 +1,230 @@
+package net.minecraft.src;
+
+import java.util.Arrays;
+import java.util.Random;
+
+public class ChunkProviderCaverns implements IChunkProvider {
+	private Random rand;
+	private NoiseGeneratorOctaves caveNoise;
+	public NoiseGeneratorSimplexOctaves simplexNoise;
+	private World worldObj;
+	private BiomeGenBase[] biomesForGeneration;
+	private double[] field_4163_o;
+	private double[] simplexArray = new double[256];
+	private byte[] blocksForGeneration = new byte[16 * 16 * 256];
+	private byte[] metadataForGeneration = new byte[16 * 16 * 256];
+	private int topTerrainHeight;
+
+	public ChunkProviderCaverns(World var1, long var2) {
+		this.worldObj = var1;
+		this.rand = Personalization.random(var2);
+		this.caveNoise = new NoiseGeneratorOctaves(this.rand, 8);
+		this.simplexNoise = new NoiseGeneratorSimplexOctaves(this.rand, 4);
+	}
+
+	public void func_4059_a(int var1, int var2, byte[] var3) {
+		byte var4 = 4;
+		int var5 = 16;
+		int var6 = var4 + 1;
+		int var7 = 256 / 8 + 1;
+		int var8 = var4 + 1;
+		this.field_4163_o = this.func_4057_a(this.field_4163_o, var1 * var4, 0, var2 * var4, var6, var7, var8);
+
+		for(int var9 = 0; var9 < var4; ++var9) {
+			for(int var10 = 0; var10 < var4; ++var10) {
+				int var11 = 0;
+
+				while(true) {
+					if(var11 >= 256 / 8) {
+						break;
+					}
+
+					double var12 = 0.125D;
+					double var14 = this.field_4163_o[((var9 + 0) * var8 + var10 + 0) * var7 + var11 + 0];
+					double var16 = this.field_4163_o[((var9 + 0) * var8 + var10 + 1) * var7 + var11 + 0];
+					double var18 = this.field_4163_o[((var9 + 1) * var8 + var10 + 0) * var7 + var11 + 0];
+					double var20 = this.field_4163_o[((var9 + 1) * var8 + var10 + 1) * var7 + var11 + 0];
+					double var22 = (this.field_4163_o[((var9 + 0) * var8 + var10 + 0) * var7 + var11 + 1] - var14) * var12;
+					double var24 = (this.field_4163_o[((var9 + 0) * var8 + var10 + 1) * var7 + var11 + 1] - var16) * var12;
+					double var26 = (this.field_4163_o[((var9 + 1) * var8 + var10 + 0) * var7 + var11 + 1] - var18) * var12;
+					double var28 = (this.field_4163_o[((var9 + 1) * var8 + var10 + 1) * var7 + var11 + 1] - var20) * var12;
+
+					for(int var30 = 0; var30 < 8; ++var30) {
+						double var31 = 0.25D;
+						double var33 = var14;
+						double var35 = var16;
+						double var37 = (var18 - var14) * var31;
+						double var39 = (var20 - var16) * var31;
+
+						for(int var41 = 0; var41 < 4; ++var41) {
+							int var10000 = var41 + var9 * 4;
+							var10000 <<= 12;
+							int var10001 = 0 + var10 * 4;
+							int var42 = var10000 | var10001 << 8 | var11 * 8 + var30;
+							int var43 = 1 << 8;
+							double var44 = 0.25D;
+							double var46 = var33;
+							double var48 = (var35 - var33) * var44;
+
+							for(int var50 = 0; var50 < 4; ++var50) {
+								int var51 = 0;
+								int height = var11 * 8 + var30;
+								if(height < var5) {
+									var51 = Block.lavaStill.blockID;
+								}
+
+								if(var46 > 0.0D) {
+									var51 = Block.stone.blockID;
+									if (height > this.topTerrainHeight) {
+										this.topTerrainHeight = height;
+									}
+								}
+
+								var3[var42] = (byte)var51;
+								var42 += var43;
+								var46 += var48;
+							}
+
+							var33 += var37;
+							var35 += var39;
+						}
+
+						var14 += var22;
+						var16 += var24;
+						var18 += var26;
+						var20 += var28;
+					}
+
+					++var11;
+				}
+			}
+		}
+
+	}
+
+	public void func_4058_b(int var1, int var2, byte[] var3, byte[] var3a, BiomeGenBase[] var4) {
+		double var6 = 1.0D / 8.0D;
+		this.simplexArray = this.simplexNoise.func_151599_a(this.simplexArray, var1 * 16, var2 * 16, 16, 16, var6 * 2.0D, var6 * 2.0D, 1.0D);
+
+		for (int x = 0; x < 16; ++x) {
+			for (int z = 0; z < 16; ++z) {
+				BiomeGenBase biome = var4[z << 4 | x];
+				int xx = var1 << 4 | x;
+				int zz = var2 << 4 | z;
+				biome.buildBiomeSurface(
+						this.worldObj,
+						this.rand,
+						var3,
+						var3a,
+						xx,
+						zz,
+						255,
+						0,
+						0,
+						0,
+						this.simplexArray[x + z * 16]
+				);
+			}
+		}
+
+	}
+
+	public Chunk loadChunk(int var1, int var2) {
+		return this.provideChunk(var1, var2);
+	}
+
+	public Chunk provideChunk(int var1, int var2) {
+		this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
+		byte[] var3 = this.blocksForGeneration;
+		byte[] var3a = this.metadataForGeneration;
+		this.biomesForGeneration = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, var1 * 16, var2 * 16, 16, 16);
+		Arrays.fill(var3, (byte)0);
+		Arrays.fill(var3a, (byte)0);
+		this.func_4059_a(var1, var2, var3);
+		this.func_4058_b(var1, var2, var3, var3a, this.biomesForGeneration);
+		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
+		var4.generateSkylightMap();
+		return var4;
+	}
+
+	private double[] func_4057_a(double[] var1, int var2, int var3, int var4, int var5, int var6, int var7) {
+		if(var1 == null) {
+			var1 = new double[var5 * var6 * var7];
+		}
+
+		int var12 = 0;
+		int var13 = 0;
+		double[] var14 = new double[var6];
+
+		int var15;
+		for(var15 = 0; var15 < var5; ++var15) {
+			for(int var36 = 0; var36 < var7; ++var36) {
+				++var13;
+				for(int var23 = 0; var23 < var6; ++var23) {
+					double cave = this.caveNoise.generateNoise((var2 + var15) * 15.0D, (var3 + var23) * 100.0D, (var4 + var36) * 15.0D) - 5.0D;
+					int caveCutoff = 29;
+					if (cave > 0.0D) {
+						if (var23 < 3) {
+							cave -= cave * ((3 - var23) / 2.0D);
+						}
+					} else if (var23 > caveCutoff) {
+						cave -= cave * ((var23 - caveCutoff) / 2.0D);
+						if (cave > 0.0D) {
+							cave = 0.0D;
+						}
+					}
+
+					var1[var12] = -cave;
+					++var12;
+				}
+			}
+		}
+
+		return var1;
+	}
+
+	public boolean chunkExists(int var1, int var2) {
+		return true;
+	}
+
+	public void populate(IChunkProvider var1, int var2, int var3) {
+		BlockSand.fallInstantly = true;
+		int cx = var2 * 16;
+		int cz = var3 * 16;
+		BiomeGenBase biome = this.worldObj.getWorldChunkManager().getBiomeGenAt(cx + 16, cz + 16);
+
+		for (int i = 0; i < 32; i++) {
+			int x = cx + this.rand.nextInt(16) + 8;
+			int z = cz + this.rand.nextInt(16) + 8;
+			int y = this.rand.nextInt(256);
+			(new WorldGenGlowStone1()).generate(this.worldObj, this.rand, x, y, z);
+		}
+
+		for (int i = 0; i < 32; i++) {
+			int x = cx + this.rand.nextInt(16) + 8;
+			int z = cz + this.rand.nextInt(16) + 8;
+			int y = this.rand.nextInt(256);
+			(new WorldGenGlowStone2()).generate(this.worldObj, this.rand, x, y, z);
+		}
+
+		biome.func_35477_a(this.worldObj, this.rand, cx, cz);
+
+		BlockSand.fallInstantly = false;
+	}
+
+	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+		return true;
+	}
+
+	public boolean unload100OldestChunks() {
+		return false;
+	}
+
+	public boolean canSave() {
+		return true;
+	}
+
+	public String makeString() {
+		return "CaveRandomLevelSource";
+	}
+}
--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -47,26 +47,26 @@
 	public static Item seeds = (new ItemSeeds(39, Block.crops.blockID)).setIconCoord(9, 0).setItemName("seeds");
 	public static Item wheat = (new Item(40)).setIconCoord(9, 1).setItemName("wheat");
 	public static Item bread = (new ItemFood(41, 5, 0.6F, false)).setIconCoord(9, 2).setItemName("bread");
-	public static Item helmetLeather = (new ItemArmor(42, 0, 0, 0)).setIconCoord(0, 0).setItemName("helmetCloth");
-	public static Item plateLeather = (new ItemArmor(43, 0, 0, 1)).setIconCoord(0, 1).setItemName("chestplateCloth");
-	public static Item legsLeather = (new ItemArmor(44, 0, 0, 2)).setIconCoord(0, 2).setItemName("leggingsCloth");
-	public static Item bootsLeather = (new ItemArmor(45, 0, 0, 3)).setIconCoord(0, 3).setItemName("bootsCloth");
-	public static Item helmetChain = (new ItemArmor(46, 1, 1, 0)).setIconCoord(1, 0).setItemName("helmetChain");
-	public static Item plateChain = (new ItemArmor(47, 1, 1, 1)).setIconCoord(1, 1).setItemName("chestplateChain");
-	public static Item legsChain = (new ItemArmor(48, 1, 1, 2)).setIconCoord(1, 2).setItemName("leggingsChain");
-	public static Item bootsChain = (new ItemArmor(49, 1, 1, 3)).setIconCoord(1, 3).setItemName("bootsChain");
-	public static Item helmetSteel = (new ItemArmor(50, 2, 2, 0)).setIconCoord(2, 0).setItemName("helmetIron");
-	public static Item plateSteel = (new ItemArmor(51, 2, 2, 1)).setIconCoord(2, 1).setItemName("chestplateIron");
-	public static Item legsSteel = (new ItemArmor(52, 2, 2, 2)).setIconCoord(2, 2).setItemName("leggingsIron");
-	public static Item bootsSteel = (new ItemArmor(53, 2, 2, 3)).setIconCoord(2, 3).setItemName("bootsIron");
-	public static Item helmetDiamond = (new ItemArmor(54, 3, 3, 0)).setIconCoord(3, 0).setItemName("helmetDiamond");
-	public static Item plateDiamond = (new ItemArmor(55, 3, 3, 1)).setIconCoord(3, 1).setItemName("chestplateDiamond");
-	public static Item legsDiamond = (new ItemArmor(56, 3, 3, 2)).setIconCoord(3, 2).setItemName("leggingsDiamond");
-	public static Item bootsDiamond = (new ItemArmor(57, 3, 3, 3)).setIconCoord(3, 3).setItemName("bootsDiamond");
-	public static Item helmetGold = (new ItemArmor(58, 1, 4, 0)).setIconCoord(4, 0).setItemName("helmetGold");
-	public static Item plateGold = (new ItemArmor(59, 1, 4, 1)).setIconCoord(4, 1).setItemName("chestplateGold");
-	public static Item legsGold = (new ItemArmor(60, 1, 4, 2)).setIconCoord(4, 2).setItemName("leggingsGold");
-	public static Item bootsGold = (new ItemArmor(61, 1, 4, 3)).setIconCoord(4, 3).setItemName("bootsGold");
+	public static Item helmetLeather = (new ItemArmor(42, EnumArmorMaterial.CLOTH, 0, 0)).setIconCoord(0, 0).setItemName("helmetCloth");
+	public static Item plateLeather = (new ItemArmor(43, EnumArmorMaterial.CLOTH, 0, 1)).setIconCoord(0, 1).setItemName("chestplateCloth");
+	public static Item legsLeather = (new ItemArmor(44, EnumArmorMaterial.CLOTH, 0, 2)).setIconCoord(0, 2).setItemName("leggingsCloth");
+	public static Item bootsLeather = (new ItemArmor(45, EnumArmorMaterial.CLOTH, 0, 3)).setIconCoord(0, 3).setItemName("bootsCloth");
+	public static Item helmetChain = (new ItemArmor(46, EnumArmorMaterial.CHAIN, 1, 0)).setIconCoord(1, 0).setItemName("helmetChain");
+	public static Item plateChain = (new ItemArmor(47, EnumArmorMaterial.CHAIN, 1, 1)).setIconCoord(1, 1).setItemName("chestplateChain");
+	public static Item legsChain = (new ItemArmor(48, EnumArmorMaterial.CHAIN, 1, 2)).setIconCoord(1, 2).setItemName("leggingsChain");
+	public static Item bootsChain = (new ItemArmor(49, EnumArmorMaterial.CHAIN, 1, 3)).setIconCoord(1, 3).setItemName("bootsChain");
+	public static Item helmetSteel = (new ItemArmor(50, EnumArmorMaterial.IRON, 2, 0)).setIconCoord(2, 0).setItemName("helmetIron");
+	public static Item plateSteel = (new ItemArmor(51, EnumArmorMaterial.IRON, 2, 1)).setIconCoord(2, 1).setItemName("chestplateIron");
+	public static Item legsSteel = (new ItemArmor(52, EnumArmorMaterial.IRON, 2, 2)).setIconCoord(2, 2).setItemName("leggingsIron");
+	public static Item bootsSteel = (new ItemArmor(53, EnumArmorMaterial.IRON, 2, 3)).setIconCoord(2, 3).setItemName("bootsIron");
+	public static Item helmetDiamond = (new ItemArmor(54, EnumArmorMaterial.DIAMOND, 3, 0)).setIconCoord(3, 0).setItemName("helmetDiamond");
+	public static Item plateDiamond = (new ItemArmor(55, EnumArmorMaterial.DIAMOND, 3, 1)).setIconCoord(3, 1).setItemName("chestplateDiamond");
+	public static Item legsDiamond = (new ItemArmor(56, EnumArmorMaterial.DIAMOND, 3, 2)).setIconCoord(3, 2).setItemName("leggingsDiamond");
+	public static Item bootsDiamond = (new ItemArmor(57, EnumArmorMaterial.DIAMOND, 3, 3)).setIconCoord(3, 3).setItemName("bootsDiamond");
+	public static Item helmetGold = (new ItemArmor(58, EnumArmorMaterial.GOLD, 4, 0)).setIconCoord(4, 0).setItemName("helmetGold");
+	public static Item plateGold = (new ItemArmor(59, EnumArmorMaterial.GOLD, 4, 1)).setIconCoord(4, 1).setItemName("chestplateGold");
+	public static Item legsGold = (new ItemArmor(60, EnumArmorMaterial.GOLD, 4, 2)).setIconCoord(4, 2).setItemName("leggingsGold");
+	public static Item bootsGold = (new ItemArmor(61, EnumArmorMaterial.GOLD, 4, 3)).setIconCoord(4, 3).setItemName("bootsGold");
 	public static Item flint = (new Item(62)).setIconCoord(6, 0).setItemName("flint");
 	public static Item porkRaw = (new ItemFood(63, 3, 0.3F, true)).setIconCoord(7, 5).setItemName("porkchopRaw");
 	public static Item porkCooked = (new ItemFood(64, 8, 0.8F, true)).setIconCoord(8, 5).setItemName("porkchopCooked");
@@ -118,8 +118,18 @@
 	public static Item field_35420_bm = (new ItemFood(110, 6, 0.6F, true)).setIconCoord(10, 7).setItemName("chickenCooked");
 	public static Item field_35415_bn = (new ItemFood(111, 4, 0.1F, true)).func_35425_a(Potion.field_35691_s.field_35670_H, 30, 0, 0.8F).setIconCoord(11, 5).setItemName("rottenFlesh");
 	public static Item field_35416_bo = (new Item(112)).setIconCoord(11, 6).setItemName("enderPearl");
+	public static Item glassBottle = (new ItemBottle(113)).setIconCoord(12, 8).setItemName("glassBottle");
+	public static Item waterBottle = (new ItemBottle(114, 5)).setIconCoord(13, 8).setItemName("waterBottle");
+	public static Item saltWaterBottle = (new ItemBottle(115, 5).func_35425_a(Potion.thirst.field_35670_H, 15, 4, 1.0F)).setIconCoord(13, 8).setItemName("waterBottle");
+	public static Item quartz = (new Item(116)).setIconCoord(12, 12).setItemName("quartz");
+	public static Item quartzCompass = (new Item(117)).setIconCoord(6, 6).setItemName("quartzCompass");
+	public static Item ingotCopper = (new Item(118)).setIconCoord(6, 7).setItemName("ingotCopper");
+	public static Item blazeRod = (new Item(119)).setIconCoord(11, 7).setItemName("blazeRod");
+	public static Item blazePowder = (new Item(120)).setIconCoord(12, 7).setItemName("blazePowder");
+	public static Item eyeOfEnder = (new ItemEyeOfEnder(121)).setIconCoord(12, 6).setItemName("eyeOfEnder");
 	public static Item record13 = (new ItemRecord(2000, "13")).setIconCoord(0, 15).setItemName("record");
 	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconCoord(1, 15).setItemName("record");
+	public static Item recordFile = (new ItemFileRecord(2002)).setIconCoord(2, 15).setItemName("record");
 	public final int shiftedIndex;
 	protected int maxStackSize = 64;
 	private int maxDamage = 0;
--- net/minecraft/src/WorldProviderSky.java
+++ net/minecraft/src/WorldProviderSky.java
@@ -1,13 +1,32 @@
 package net.minecraft.src;
 
 public class WorldProviderSky extends WorldProvider {
+	public WorldProviderSky forceEnd() {
+		this.endForced = true;
+		return this;
+	}
+
 	public void registerWorldChunkManager() {
-		this.worldChunkMgr = new WorldChunkManagerHell(BiomeGenBase.sky, 0.5F, 0.0F);
+		this.worldChunkMgr = new WorldChunkManagerHell(this.endForced ? BiomeGenBase.end : BiomeGenBase.sky, 0.5F, 0.0F);
+		this.isSkyWorld = true;
 		this.worldType = 1;
 	}
 
+	protected void generateLightBrightnessTable() {
+		if (!this.endForced) {
+			super.generateLightBrightnessTable();
+			return;
+		}
+
+		for (int i = 0; i < 15; i++) {
+			this.lightBrightnessTable[i] = 1.0F;
+		}
+	}
+
 	public IChunkProvider getChunkProvider() {
-		return new ChunkProviderSky(this.worldObj, this.worldObj.getRandomSeed());
+		return this.endForced
+				? new ChunkProviderEnd(this.worldObj, this.worldObj.getRandomSeed())
+				: new ChunkProviderSky(this.worldObj, this.worldObj.getRandomSeed());
 	}
 
 	public float calculateCelestialAngle(long var1, float var3) {
@@ -19,6 +38,17 @@
 	}
 
 	public Vec3D func_4096_a(float var1, float var2) {
+		if (this.endForced || Personalization.endSky) {
+			float base = this.endForced ? 0.1F : 0.05F;
+			float variation = this.endForced ? 0.02F : 0.01F;
+
+			return Vec3D.createVector(
+					base + Personalization.rand.nextFloat() * variation,
+					base + Personalization.rand.nextFloat() * variation,
+					base + Personalization.rand.nextFloat() * variation
+			);
+		}
+
 		int var3 = 8421536;
 		float var4 = MathHelper.cos(var1 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
 		if(var4 < 0.0F) {
@@ -43,7 +73,7 @@
 	}
 
 	public float getCloudHeight() {
-		return 8.0F;
+		return this.endForced || Personalization.endSky ? Float.NEGATIVE_INFINITY : 8.0F;
 	}
 
 	public boolean canCoordinateBeSpawn(int var1, int var2) {
--- net/minecraft/src/ModelBiped.java
+++ net/minecraft/src/ModelBiped.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import org.lwjgl.opengl.GL11;
+
 public class ModelBiped extends ModelBase {
 	public ModelRenderer bipedHead;
 	public ModelRenderer bipedHeadwear;
@@ -130,6 +132,7 @@
 			this.bipedRightLeg.rotationPointY = 9.0F;
 			this.bipedLeftLeg.rotationPointY = 9.0F;
 			this.bipedHead.rotationPointY = 1.0F;
+			this.bipedHeadwear.rotationPointY = 1.0F;
 		} else {
 			this.bipedBody.rotateAngleX = 0.0F;
 			this.bipedRightLeg.rotationPointZ = 0.0F;
@@ -137,6 +140,7 @@
 			this.bipedRightLeg.rotationPointY = 12.0F;
 			this.bipedLeftLeg.rotationPointY = 12.0F;
 			this.bipedHead.rotationPointY = 0.0F;
+			this.bipedHeadwear.rotationPointY = 0.0F;
 		}
 
 		this.bipedRightArm.rotateAngleZ += MathHelper.cos(var3 * 0.09F) * 0.05F + 0.05F;
--- net/minecraft/src/ISaveFormat.java
+++ net/minecraft/src/ISaveFormat.java
@@ -3,19 +3,19 @@
 import java.util.List;
 
 public interface ISaveFormat {
-	String func_22178_a();
+	String getFormatName();
 
 	ISaveHandler getSaveLoader(String var1, boolean var2);
 
-	List func_22176_b();
+	List getSaveList();
 
 	void flushCache();
 
 	WorldInfo getWorldInfo(String var1);
 
-	void func_22172_c(String var1);
+	void deleteWorldDirectory(String var1);
 
-	void func_22170_a(String var1, String var2);
+	void renameWorld(String var1, String var2);
 
 	boolean isOldMapFormat(String var1);
 
--- /dev/null
+++ net/minecraft/src/MersenneTwister.java
@@ -1,0 +1,93 @@
+package net.minecraft.src;
+
+import java.util.Arrays;
+import java.util.Random;
+
+// Original C code Copyright (C) 1997 Makoto Matsumoto
+// and Takuji Nishimura. Licensed under GPL v2
+
+public class MersenneTwister extends Random {
+	private static final int N = 624;
+	private static final int M = 397;
+	private static final long UPPER_MASK = 0x80000000L;
+	private static final long LOWER_MASK = 0x7fffffffL;
+	private static final long TEMPERING_MASK_B = 0x9d2c5680L;
+	private static final long TEMPERING_MASK_C = 0xefc60000L;
+
+	private long[] mt;
+	private final long[] mag01 = new long[] { 0, 0x9908b0dfL };
+	private int mti = N + 1;
+
+	public MersenneTwister() {
+		this(System.nanoTime());
+	}
+
+	public MersenneTwister(long seed) {
+		super(seed);
+	}
+
+	@Override
+	public synchronized void setSeed(long seed) {
+		super.setSeed(seed);
+		if (mt == null) {
+			mt = new long[N];
+		}
+
+		Arrays.fill(mt, 0);
+		mt[0] = seed & 0xffffffffL;
+		for (mti = 1; mti < N; mti++) {
+			mt[mti] = (69069L * mt[mti - 1]) & 0xffffffffL;
+		}
+	}
+
+	@Override
+	public long nextLong() {
+		long y;
+
+		if (mti >= N) {
+			int kk;
+
+			for (kk = 0; kk < N - M; kk++) {
+				y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
+				mt[kk] = mt[kk + M] ^ (y >>> 1) ^ mag01[(int)(y & 1)];
+			}
+
+			for (; kk < N - 1; kk++) {
+				y = (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
+				mt[kk] = mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[(int)(y & 1)];
+			}
+
+			y = (mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
+			mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ mag01[(int)(y & 1)];
+
+			mti = 0;
+		}
+
+		y = mt[mti++];
+		y ^= y >>> 11;
+		y ^= (y << 7) & TEMPERING_MASK_B;
+		y ^= (y << 15) & TEMPERING_MASK_C;
+		y ^= y >>> 18;
+		return y;
+	}
+
+	@Override
+	protected int next(int bits) {
+		return nextInt() >>> (32 - bits);
+	}
+
+	@Override
+	public int nextInt() {
+		return (int)this.nextLong();
+	}
+
+	@Override
+	public double nextDouble() {
+		return (double)this.nextLong() / 0xffffffffL;
+	}
+
+	@Override
+	public float nextFloat() {
+		return (float)this.nextLong() / 0xffffffffL;
+	}
+}
--- net/minecraft/src/PlayerControllerTest.java
+++ net/minecraft/src/PlayerControllerTest.java
@@ -35,6 +35,9 @@
 	}
 
 	public static void func_35644_a(Minecraft var0, PlayerController var1, int var2, int var3, int var4, int var5) {
+		if(!var0.thePlayer.func_35190_e(var2, var3, var4)) {
+			return;
+		}
 		var0.theWorld.onBlockHit(var0.thePlayer, var2, var3, var4, var5);
 		var1.sendBlockRemoved(var2, var3, var4, var5);
 	}
--- net/minecraft/src/GuiCrafting.java
+++ net/minecraft/src/GuiCrafting.java
@@ -17,9 +17,9 @@
 	}
 
 	protected void drawGuiContainerBackgroundLayer(float var1) {
-		int var2 = this.mc.renderEngine.getTexture("/gui/crafting.png");
+		int var2 = this.game.renderEngine.getTexture("/gui/crafting.png");
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		this.mc.renderEngine.bindTexture(var2);
+		this.game.renderEngine.bindTexture(var2);
 		int var3 = (this.width - this.xSize) / 2;
 		int var4 = (this.height - this.ySize) / 2;
 		this.drawTexturedModalRect(var3, var4, 0, 0, this.xSize, this.ySize);
--- /dev/null
+++ net/minecraft/src/RenderBlaze.java
@@ -1,0 +1,27 @@
+package net.minecraft.src;
+
+public class RenderBlaze extends RenderLiving {
+	private int field_40278_c = ((ModelBlaze)this.mainModel).func_40321_a();
+
+	public RenderBlaze() {
+		super(new ModelBlaze(), 0.5F);
+	}
+
+	public void func_40277_a(EntityBlaze var1, double var2, double var4, double var6, float var8, float var9) {
+		int var10 = ((ModelBlaze)this.mainModel).func_40321_a();
+		if(var10 != this.field_40278_c) {
+			this.field_40278_c = var10;
+			this.mainModel = new ModelBlaze();
+		}
+
+		super.doRenderLiving(var1, var2, var4, var6, var8, var9);
+	}
+
+	public void doRenderLiving(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
+		this.func_40277_a((EntityBlaze)var1, var2, var4, var6, var8, var9);
+	}
+
+	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
+		this.func_40277_a((EntityBlaze)var1, var2, var4, var6, var8, var9);
+	}
+}
--- /dev/null
+++ net/minecraft/src/NoiseGeneratorSimplex.java
@@ -1,0 +1,187 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class NoiseGeneratorSimplex {
+    private static int[][] field_151611_e =
+            new int[][] {{1, 1, 0}, {-1, 1, 0}, {1, -1, 0}, {-1, -1, 0}, {1, 0, 1}, {-1, 0, 1},
+                    {1, 0, -1}, {-1, 0, -1}, {0, 1, 1}, {0, -1, 1}, {0, 1, -1}, {0, -1, -1}};
+    public static final double field_151614_a = Math.sqrt(3.0D);
+    private int[] field_151608_f;
+    public double field_151612_b;
+    public double field_151613_c;
+    public double field_151610_d;
+    private static final double field_151609_g = 0.5D * (field_151614_a - 1.0D);
+    private static final double field_151615_h = (3.0D - field_151614_a) / 6.0D;
+    private static final String __OBFID = "CL_00000537";
+
+    public NoiseGeneratorSimplex() {
+        this(new Random());
+    }
+
+    public NoiseGeneratorSimplex(Random p_i45471_1_) {
+        this.field_151608_f = new int[512];
+        this.field_151612_b = p_i45471_1_.nextDouble() * 256.0D;
+        this.field_151613_c = p_i45471_1_.nextDouble() * 256.0D;
+        this.field_151610_d = p_i45471_1_.nextDouble() * 256.0D;
+        int var2;
+
+        for (var2 = 0; var2 < 256; this.field_151608_f[var2] = var2++) {
+            ;
+        }
+
+        for (var2 = 0; var2 < 256; ++var2) {
+            int var3 = p_i45471_1_.nextInt(256 - var2) + var2;
+            int var4 = this.field_151608_f[var2];
+            this.field_151608_f[var2] = this.field_151608_f[var3];
+            this.field_151608_f[var3] = var4;
+            this.field_151608_f[var2 + 256] = this.field_151608_f[var2];
+        }
+    }
+
+    private static int func_151607_a(double var0) {
+        return var0 > 0.0D ? (int) var0 : (int) var0 - 1;
+    }
+
+    private static double func_151604_a(int[] var0, double var1, double var3) {
+        return (double) var0[0] * var1 + (double) var0[1] * var3;
+    }
+
+    public double func_151605_a(double var1, double var3) {
+        double var11 = 0.5D * (field_151614_a - 1.0D);
+        double var13 = (var1 + var3) * var11;
+        int var15 = func_151607_a(var1 + var13);
+        int var16 = func_151607_a(var3 + var13);
+        double var17 = (3.0D - field_151614_a) / 6.0D;
+        double var19 = (double) (var15 + var16) * var17;
+        double var21 = (double) var15 - var19;
+        double var23 = (double) var16 - var19;
+        double var25 = var1 - var21;
+        double var27 = var3 - var23;
+        byte var29;
+        byte var30;
+
+        if (var25 > var27) {
+            var29 = 1;
+            var30 = 0;
+        } else {
+            var29 = 0;
+            var30 = 1;
+        }
+
+        double var31 = var25 - (double) var29 + var17;
+        double var33 = var27 - (double) var30 + var17;
+        double var35 = var25 - 1.0D + 2.0D * var17;
+        double var37 = var27 - 1.0D + 2.0D * var17;
+        int var39 = var15 & 255;
+        int var40 = var16 & 255;
+        int var41 = this.field_151608_f[var39 + this.field_151608_f[var40]] % 12;
+        int var42 = this.field_151608_f[var39 + var29 + this.field_151608_f[var40 + var30]] % 12;
+        int var43 = this.field_151608_f[var39 + 1 + this.field_151608_f[var40 + 1]] % 12;
+        double var44 = 0.5D - var25 * var25 - var27 * var27;
+        double var5;
+
+        if (var44 < 0.0D) {
+            var5 = 0.0D;
+        } else {
+            var44 *= var44;
+            var5 = var44 * var44 * func_151604_a(field_151611_e[var41], var25, var27);
+        }
+
+        double var46 = 0.5D - var31 * var31 - var33 * var33;
+        double var7;
+
+        if (var46 < 0.0D) {
+            var7 = 0.0D;
+        } else {
+            var46 *= var46;
+            var7 = var46 * var46 * func_151604_a(field_151611_e[var42], var31, var33);
+        }
+
+        double var48 = 0.5D - var35 * var35 - var37 * var37;
+        double var9;
+
+        if (var48 < 0.0D) {
+            var9 = 0.0D;
+        } else {
+            var48 *= var48;
+            var9 = var48 * var48 * func_151604_a(field_151611_e[var43], var35, var37);
+        }
+
+        return 70.0D * (var5 + var7 + var9);
+    }
+
+    public void func_151606_a(double[] var1, double var2, double var4, int var6, int var7,
+            double var8, double var10, double var12) {
+        int var14 = 0;
+
+        for (int var15 = 0; var15 < var7; ++var15) {
+            double var16 = (var4 + (double) var15) * var10 + this.field_151613_c;
+
+            for (int var18 = 0; var18 < var6; ++var18) {
+                double var19 = (var2 + (double) var18) * var8 + this.field_151612_b;
+                double var27 = (var19 + var16) * field_151609_g;
+                int var29 = func_151607_a(var19 + var27);
+                int var30 = func_151607_a(var16 + var27);
+                double var31 = (double) (var29 + var30) * field_151615_h;
+                double var33 = (double) var29 - var31;
+                double var35 = (double) var30 - var31;
+                double var37 = var19 - var33;
+                double var39 = var16 - var35;
+                byte var41;
+                byte var42;
+
+                if (var37 > var39) {
+                    var41 = 1;
+                    var42 = 0;
+                } else {
+                    var41 = 0;
+                    var42 = 1;
+                }
+
+                double var43 = var37 - (double) var41 + field_151615_h;
+                double var45 = var39 - (double) var42 + field_151615_h;
+                double var47 = var37 - 1.0D + 2.0D * field_151615_h;
+                double var49 = var39 - 1.0D + 2.0D * field_151615_h;
+                int var51 = var29 & 255;
+                int var52 = var30 & 255;
+                int var53 = this.field_151608_f[var51 + this.field_151608_f[var52]] % 12;
+                int var54 = this.field_151608_f[var51 + var41 + this.field_151608_f[var52 + var42]]
+                        % 12;
+                int var55 = this.field_151608_f[var51 + 1 + this.field_151608_f[var52 + 1]] % 12;
+                double var56 = 0.5D - var37 * var37 - var39 * var39;
+                double var21;
+
+                if (var56 < 0.0D) {
+                    var21 = 0.0D;
+                } else {
+                    var56 *= var56;
+                    var21 = var56 * var56 * func_151604_a(field_151611_e[var53], var37, var39);
+                }
+
+                double var58 = 0.5D - var43 * var43 - var45 * var45;
+                double var23;
+
+                if (var58 < 0.0D) {
+                    var23 = 0.0D;
+                } else {
+                    var58 *= var58;
+                    var23 = var58 * var58 * func_151604_a(field_151611_e[var54], var43, var45);
+                }
+
+                double var60 = 0.5D - var47 * var47 - var49 * var49;
+                double var25;
+
+                if (var60 < 0.0D) {
+                    var25 = 0.0D;
+                } else {
+                    var60 *= var60;
+                    var25 = var60 * var60 * func_151604_a(field_151611_e[var55], var47, var49);
+                }
+
+                int var10001 = var14++;
+                var1[var10001] += 70.0D * (var21 + var23 + var25) * var12;
+            }
+        }
+    }
+}
--- /dev/null
+++ com/github/sjcasey21/wavefunctioncollapse/OverlappingModel.java
@@ -1,0 +1,291 @@
+package com.github.sjcasey21.wavefunctioncollapse;
+
+
+
+import java.awt.Color;
+import java.awt.image.BufferedImage;
+import java.util.*;
+import java.util.function.*;
+
+public class OverlappingModel extends Model {
+  int N;
+  Integer[][] patterns;
+  int ground;
+  List<Color> colors;
+
+  @FunctionalInterface
+  interface Agrees<One, Two, Three, Four, Five> {
+    public Five apply(One one, Two two, Three three, Four four);
+  }
+
+  /**
+   * Creates a new instance of the Overlapping Model
+   * @param data BufferedImage data of source image.
+   * @param N Size of the patterns.
+   * @param width The width of the generation (in pixels).
+   * @param height The height of the generation (in pixels).
+   * @param periodicInput Whether the source image is to be considered as periodic (repeatable).
+   * @param periodicOutput Whether the generation should be periodic (repeatable).
+   * @param symmetry Allowed symmetries from 1 (no symmetry) to 8 (all mirrored / rotated variations).
+   * @param ground Id of the specific pattern to use as the bottom of the generation.
+   */
+  public OverlappingModel(
+    BufferedImage data,
+    int N,
+    int width,
+    int height,
+    boolean periodicInput,
+    boolean periodicOutput,
+    int symmetry,
+    int ground
+  ) {
+    super(width, height);
+    this.N = N;
+    this.periodic = periodicOutput;
+    
+
+    int SMX = data.getWidth(), SMY = data.getHeight();
+    Integer[][] sample = new Integer[SMX][SMY];
+
+    this.colors = new ArrayList<Color>();
+
+    for (int y = 0; y < SMY; y++) for (int x = 0; x < SMX; x++) {
+      Color color = new Color(data.getRGB(x, y));
+
+      int i = 0;
+      for (Color c : colors) {
+        if (c.equals(color)) break;
+        i++;
+      }
+      if (i == colors.size()) colors.add(color);
+      sample[x][y] = i;
+    }
+
+    int C = this.colors.size();
+    long W = OverlappingModel.toPower(C, this.N * this.N);
+
+    Function<BiFunction<Integer, Integer, Integer>, Integer[]> pattern =
+      (BiFunction<Integer, Integer, Integer> f) -> {
+        Integer[] result = new Integer[this.N * this.N];
+        for (int y = 0; y < this.N; y++) for (int x = 0; x <
+          this.N; x++) result[x + y * this.N] = f.apply(x, y);
+
+        return result;
+      };
+
+    BiFunction<Integer, Integer, Integer[]> patternFromSample =
+      (Integer x, Integer y) -> pattern.apply(
+        (Integer dx, Integer dy) -> sample[(x + dx) % SMX][(y + dy) % SMY]
+      );
+
+    Function<Integer[], Integer[]> rotate =
+      (Integer[] p) -> pattern.apply(
+        (Integer x, Integer y) -> p[this.N - 1 - y + x * this.N]
+      );
+
+    Function<Integer[], Integer[]> reflect =
+      (Integer[] p) -> pattern.apply(
+        (Integer x, Integer y) -> p[this.N - 1 - x + y * this.N]
+      );
+
+    Function<Integer[], Long> index =
+      (Integer[] p) -> {
+        long result = 0, power = 1;
+        for (int i = 0; i < p.length; i++) {
+          result += p[p.length - 1 - i] * power;
+          power *= C;
+        }
+        return result;
+      };
+
+    Function<Long, Integer[]> patternFromIndex =
+      (Long ind) -> {
+        long residue = ind, power = W;
+        Integer[] result = new Integer[this.N * this.N];
+
+        for (int i = 0; i < result.length; i++) {
+          power /= C;
+          int count = 0;
+
+          while (residue >= power) {
+            residue -= power;
+            count++;
+          }
+
+          result[i] = count;
+        }
+
+        return result;
+      };
+
+    HashMap<Long, Integer> weights = new HashMap<Long, Integer>();
+    List<Long> ordering = new ArrayList<Long>();
+
+    for (int y = 0; y < (periodicInput ? SMY : SMY - N + 1); y++) for (int x =
+      0; x < (periodicInput ? SMX : SMX - this.N + 1); x++) {
+      Integer[][] ps = new Integer[8][];
+
+      ps[0] = patternFromSample.apply(x, y);
+      ps[1] = reflect.apply(ps[0]);
+      ps[2] = rotate.apply(ps[0]);
+      ps[3] = reflect.apply(ps[2]);
+      ps[4] = rotate.apply(ps[2]);
+      ps[5] = reflect.apply(ps[4]);
+      ps[6] = rotate.apply(ps[4]);
+      ps[7] = reflect.apply(ps[6]);
+
+      for (int k = 0; k < symmetry; k++) {
+        long ind = index.apply(ps[k]);
+        if (weights.containsKey(ind)) weights.put(
+          ind,
+          weights.get(ind) + 1
+        ); else {
+          weights.put(ind, 1);
+          ordering.add(ind);
+        }
+      }
+    }
+
+    this.T = weights.size();
+    this.ground = (ground + this.T) % this.T;
+    this.patterns = new Integer[this.T][];
+    this.weights = new Double[this.T];
+
+    int counter = 0;
+
+    for (long w : ordering) {
+      this.patterns[counter] = patternFromIndex.apply(w);
+      this.weights[counter] = (double) weights.get(w);
+//      System.out.println(this.weights[counter]);
+
+      //        	weights[counter] = weights[(int) w];
+      counter++;
+    }
+
+    Agrees<Integer[], Integer[], Integer, Integer, Boolean> agrees =
+      (Integer[] p1, Integer[] p2, Integer dx, Integer dy) -> {
+        int xmin = dx < 0 ? 0 : dx;
+        int xmax = dx < 0 ? dx + N : N;
+        int ymin = dy < 0 ? 0 : dy;
+        int ymax = dy < 0 ? dy + N : N;
+
+        for (int y = ymin; y < ymax; y++) for (int x = xmin; x < xmax; x++) if (
+          p1[x + this.N * y] != p2[x - dx + this.N * (y - dy)]
+        ) return false;
+        return true;
+      };
+
+    this.propagator = new int[4][][];
+    
+//    System.out.println(this.T);
+
+    for (int d = 0; d < 4; d++) {
+      this.propagator[d] = new int[this.T][];
+      for (int t = 0; t < this.T; t++) {
+        List<Integer> list = new ArrayList<Integer>();
+        for (int t2 = 0; t2 < this.T; t2++) if (
+          agrees.apply(
+            this.patterns[t],
+            this.patterns[t2],
+            Model.DX[d],
+            Model.DY[d]
+          )
+        ) list.add(t2);
+        this.propagator[d][t] = new int[list.size()];
+        for (int c = 0; c < list.size(); c++) this.propagator[d][t][c] =
+          list.get(c);
+      }
+    }
+  }
+
+  @Override
+  protected boolean onBoundary(int x, int y) {
+    return (
+      !this.periodic &&
+      (x + this.N > this.FMX || y + this.N > this.FMY || x < 0 || y < 0)
+    );
+  }
+
+  /**
+   * Returns a new BufferedImage generated by the model.
+   * Requires Run() to have been run.
+   */
+  @Override
+  public BufferedImage graphics() {
+    BufferedImage result = new BufferedImage(
+      this.FMX,
+      this.FMY,
+      BufferedImage.TYPE_INT_RGB
+    );
+
+    if (this.observed != null) {
+      for (int y = 0; y < this.FMY; y++) {
+        int dy = y < this.FMY - this.N + 1 ? 0 : this.N - 1;
+        for (int x = 0; x < this.FMX; x++) {
+          int dx = x < this.FMX - this.N + 1 ? 0 : this.N - 1;
+          Color c =
+            this.colors.get(
+                this.patterns[this.observed[x - dx + (y - dy) * this.FMX]][dx +
+                    dy *
+                    this.N]
+              );
+
+          result.setRGB(x, y, c.getRGB());
+        }
+      }
+    } else {
+      for (int i = 0; i < this.wave.length; i++) {
+        int contributors = 0, r = 0, g = 0, b = 0;
+        int x = i % this.FMX, y = i / this.FMX;
+
+        for (int dy = 0; dy < this.N; dy++) for (int dx = 0; dx <
+          this.N; dx++) {
+          int sx = x - dx;
+          if (sx < 0) sx += this.FMX;
+
+          int sy = y - dy;
+          if (sy < 0) sy += this.FMY;
+
+          int s = sx + sy * this.FMX;
+          if (this.onBoundary(sx, sy)) continue;
+          for (int t = 0; t < this.T; t++) if (wave[s][t]) {
+            contributors++;
+            Color color = this.colors.get(this.patterns[t][dx + dy * this.N]);
+            r += color.getRed();
+            g += color.getGreen();
+            b += color.getBlue();
+          }
+        }
+
+        Color c = new Color(
+          r / contributors,
+          g / contributors,
+          b / contributors
+        );
+        result.setRGB(x, y, c.getRGB());
+      }
+    }
+
+    return result;
+  }
+
+  protected void Clear() {
+    super.Clear();
+
+    if (this.ground != 0) {
+      for (int x = 0; x < this.FMX; x++) {
+        for (int t = 0; t < this.T; t++) if (t != this.ground) this.ban(
+            x + (this.FMY - 1) * this.FMX,
+            t
+          );
+
+        for (int y = 0; y < this.FMY - 1; y++) this.ban(
+            x + y * this.FMX,
+            this.ground
+          );
+      }
+
+      this.propagate();
+    }
+  }
+}
--- net/minecraft/src/WorldGenReed.java
+++ net/minecraft/src/WorldGenReed.java
@@ -13,7 +13,7 @@
 
 				for(int var11 = 0; var11 < var10; ++var11) {
 					if(Block.reed.canBlockStay(var1, var7, var8 + var11, var9)) {
-						var1.setBlock(var7, var8 + var11, var9, Block.reed.blockID);
+						this.setBlock(var1, var7, var8 + var11, var9, Block.reed.blockID);
 					}
 				}
 			}
--- net/minecraft/src/BiomeGenSky.java
+++ net/minecraft/src/BiomeGenSky.java
@@ -7,9 +7,17 @@
 		this.spawnableCreatureList.clear();
 		this.spawnableWaterCreatureList.clear();
 		this.spawnableCreatureList.add(new SpawnListEntry(EntityChicken.class, 10, 4, 4));
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityGiantZombie.class, 1, 1, 1));
+		this.spawnableMonsterList.add(new SpawnListEntry(EntityEnderman.class, 2, 4, 4));
 	}
 
 	public int getSkyColorByTemp(float var1) {
-		return 12632319;
+		return Personalization.endSky ? 0 : 12632319;
+	}
+
+	public void updateSpawnEntry(SpawnListEntry entry) {
+		if (entry.entityClass == EntityGiantZombie.class) {
+			entry.field_35590_d = Personalization.endSky ? 0 : 1;
+		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/PlayerSkill.java
@@ -1,0 +1,48 @@
+package net.minecraft.src;
+
+public class PlayerSkill {
+	private final String id;
+	private final int max;
+	private int value;
+
+	public PlayerSkill(String id, int max) {
+		this.id = id;
+		this.max = max;
+	}
+
+	public String getName() {
+		StringTranslate var1 = StringTranslate.getInstance();
+		return var1.translateKey("skill." + this.getId() + ".name");
+	}
+
+	public String getId() {
+		return id;
+	}
+
+	public int getMaxValue() {
+		return max;
+	}
+
+	public int getValue() {
+		return this.value;
+	}
+
+	public void setValue(int value) {
+		this.value = value;
+	}
+
+	public void addValue(int amount) {
+		this.value += amount;
+		if (this.isMaxedOut()) {
+			this.value = this.getMaxValue();
+		}
+	}
+
+	public int getLevelUpRequirement() {
+		return (this.value + 1) * 5;
+	}
+
+	public boolean isMaxedOut() {
+		return this.getMaxValue() > 0 && this.getValue() >= this.getMaxValue();
+	}
+}
--- /dev/null
+++ net/minecraft/src/ModelFakePlayer.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class ModelFakePlayer extends ModelBiped {
+	public void render(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7) {
+		GL11.glPushMatrix();
+		GL11.glScalef(0.9F, 1.1F, 0.9F);
+		GL11.glTranslatef(0.0F, -0.125F, 0.0F);
+		super.render(var1, var2, var3, var4, var5, var6, var7);
+		GL11.glPopMatrix();
+	}
+
+	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
+		super.setRotationAngles(var1, var2, var3, var4, var5, var6);
+		this.bipedRightArm.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float) Math.PI) * 2.0F * var2;
+        this.bipedRightArm.rotateAngleZ = (MathHelper.cos(var1 * 0.2312F) + 1.0F) * 1.0F * var2;
+        this.bipedLeftArm.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 2.0F * var2;
+        this.bipedLeftArm.rotateAngleZ = (MathHelper.cos(var1 * 0.2812F) - 1.0F) * 1.0F * var2;
+	}
+}
--- /dev/null
+++ net/minecraft/src/AnvilChunkLoaderPending.java
@@ -1,0 +1,11 @@
+package net.minecraft.src;
+
+class AnvilChunkLoaderPending {
+	public final ChunkCoordIntPair field_48427_a;
+	public final NBTTagCompound field_48426_b;
+
+	public AnvilChunkLoaderPending(ChunkCoordIntPair var1, NBTTagCompound var2) {
+		this.field_48427_a = var1;
+		this.field_48426_b = var2;
+	}
+}
--- net/minecraft/src/WorldGenGlowStone2.java
+++ net/minecraft/src/WorldGenGlowStone2.java
@@ -6,7 +6,7 @@
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		if(!var1.isAirBlock(var3, var4, var5)) {
 			return false;
-		} else if(var1.getBlockId(var3, var4 + 1, var5) != Block.netherrack.blockID) {
+		} else if(!var1.isBlockNormalCube(var3, var4 + 1, var5)) {
 			return false;
 		} else {
 			var1.setBlockWithNotify(var3, var4, var5, Block.glowStone.blockID);
--- net/minecraft/src/GuiRenameWorld.java
+++ net/minecraft/src/GuiRenameWorld.java
@@ -22,7 +22,7 @@
 		this.controlList.clear();
 		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96 + 12, var1.translateKey("selectWorld.renameButton")));
 		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 120 + 12, var1.translateKey("gui.cancel")));
-		ISaveFormat var2 = this.mc.getSaveLoader();
+		ISaveFormat var2 = this.game.getSaveLoader();
 		WorldInfo var3 = var2.getWorldInfo(this.worldName);
 		String var4 = var3.getWorldName();
 		this.theGuiTextField = new GuiTextField(this, this.fontRenderer, this.width / 2 - 100, 60, 200, 20, var4);
@@ -37,11 +37,11 @@
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.enabled) {
 			if(var1.id == 1) {
-				this.mc.displayGuiScreen(this.parentGuiScreen);
+				this.game.displayGuiScreen(this.parentGuiScreen);
 			} else if(var1.id == 0) {
-				ISaveFormat var2 = this.mc.getSaveLoader();
-				var2.func_22170_a(this.worldName, this.theGuiTextField.getText().trim());
-				this.mc.displayGuiScreen(this.parentGuiScreen);
+				ISaveFormat var2 = this.game.getSaveLoader();
+				var2.renameWorld(this.worldName, this.theGuiTextField.getText().trim());
+				this.game.displayGuiScreen(this.parentGuiScreen);
 			}
 
 		}
--- net/minecraft/src/GuiChat.java
+++ net/minecraft/src/GuiChat.java
@@ -21,17 +21,17 @@
 
 	protected void keyTyped(char var1, int var2) {
 		if(var2 == 1) {
-			this.mc.displayGuiScreen((GuiScreen)null);
+			this.game.displayGuiScreen((GuiScreen)null);
 		} else if(var2 == 28) {
 			String var3 = this.message.trim();
 			if(var3.length() > 0) {
 				String var4 = this.message.trim();
-				if(!this.mc.lineIsCommand(var4)) {
-					this.mc.thePlayer.sendChatMessage(var4);
+				if(!this.game.lineIsCommand(var4)) {
+					this.game.thePlayer.sendChatMessage(var4);
 				}
 			}
 
-			this.mc.displayGuiScreen((GuiScreen)null);
+			this.game.displayGuiScreen((GuiScreen)null);
 		} else {
 			if(var2 == 14 && this.message.length() > 0) {
 				this.message = this.message.substring(0, this.message.length() - 1);
@@ -52,12 +52,12 @@
 
 	protected void mouseClicked(int var1, int var2, int var3) {
 		if(var3 == 0) {
-			if(this.mc.ingameGUI.field_933_a != null) {
+			if(this.game.ingameGUI.field_933_a != null) {
 				if(this.message.length() > 0 && !this.message.endsWith(" ")) {
 					this.message = this.message + " ";
 				}
 
-				this.message = this.message + this.mc.ingameGUI.field_933_a;
+				this.message = this.message + this.game.ingameGUI.field_933_a;
 				byte var4 = 100;
 				if(this.message.length() > var4) {
 					this.message = this.message.substring(0, var4);
--- /dev/null
+++ net/minecraft/src/BlockSkyPortalFrame.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+public class BlockSkyPortalFrame extends Block {
+	protected BlockSkyPortalFrame(int var1, int var2) {
+		super(var1, var2, Material.glass);
+	}
+
+	public int getRenderType() {
+		return 23;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockIndexInTexture + (var2 == 0 ? 0 : 1);
+	}
+}
--- net/minecraft/src/ItemRenderer.java
+++ net/minecraft/src/ItemRenderer.java
@@ -140,7 +140,7 @@
 		GL11.glPopMatrix();
 		float var6;
 		float var7;
-		if(var3 instanceof EntityPlayerSP) {
+		if(var3 instanceof EntityPlayerSP && !Personalization.pastTextures && !Personalization.alphaTextures) {
 			EntityPlayerSP var5 = (EntityPlayerSP)var3;
 			var6 = var5.field_35225_ar + (var5.field_35223_ap - var5.field_35225_ar) * var1;
 			var7 = var5.field_35226_aq + (var5.field_35222_e - var5.field_35226_aq) * var1;
@@ -237,12 +237,13 @@
 			this.mapItemRenderer.renderMap(this.mc.thePlayer, this.mc.renderEngine, var25);
 			GL11.glPopMatrix();
 		} else if(var14 != null) {
+			boolean classic = Personalization.classicArm && var14.itemID >= 256;
 			GL11.glPushMatrix();
-			var7 = 0.8F;
+			var7 = classic ? 1.0F : 0.8F;
 			float var12;
 			if(var3.func_35205_Y() > 0) {
 				EnumAction var17 = var14.func_35865_n();
-				if(var17 == EnumAction.eat) {
+				if(var17 == EnumAction.eat || var17 == EnumAction.drink) {
 					var18 = (float)var3.func_35205_Y() - var1 + 1.0F;
 					var10 = 1.0F - var18 / (float)var14.func_35866_m();
 					var12 = 1.0F - var10;
@@ -260,18 +261,31 @@
 				var16 = var3.getSwingProgress(var1);
 				var18 = MathHelper.sin(var16 * (float)Math.PI);
 				var10 = MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI);
-				GL11.glTranslatef(-var10 * 0.4F, MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI * 2.0F) * 0.2F, -var18 * 0.2F);
+				GL11.glTranslatef(-var10 * (classic ? 0.2F : 0.4F), MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI * 2.0F) * 0.2F, -var18 * 0.2F);
 			}
 
-			GL11.glTranslatef(0.7F * var7, -0.65F * var7 - (1.0F - var2) * 0.6F, -0.9F * var7);
-			GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
+			if (classic) {
+				GL11.glTranslatef(0.35F * var7, -0.55F * var7 - (1.0F - var2) * 0.6F, -0.9F * var7);
+				GL11.glRotatef(120.0F, 0.0F, 1.0F, 0.0F);
+				GL11.glRotatef(15.0F, 0.0F, 0.0F, 1.0F);
+				GL11.glRotatef(20.0F, 1.0F, 0.0F, 0.0F);
+			} else {
+				GL11.glTranslatef(0.7F * var7, -0.65F * var7 - (1.0F - var2) * 0.6F, -0.9F * var7);
+				GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
+			}
 			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 			var16 = var3.getSwingProgress(var1);
 			var18 = MathHelper.sin(var16 * var16 * (float)Math.PI);
 			var10 = MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI);
-			GL11.glRotatef(-var18 * 20.0F, 0.0F, 1.0F, 0.0F);
-			GL11.glRotatef(-var10 * 20.0F, 0.0F, 0.0F, 1.0F);
-			GL11.glRotatef(-var10 * 80.0F, 1.0F, 0.0F, 0.0F);
+			if (classic) {
+				GL11.glRotatef(-var18 * 20.0F, 0.0F, 1.0F, 0.0F);
+				GL11.glRotatef(-var10 * 10.0F, 0.0F, 0.0F, 1.0F);
+				GL11.glRotatef(-var10 * 80.0F, 1.0F, 0.0F, 1.0F);
+			} else {
+				GL11.glRotatef(-var18 * 20.0F, 0.0F, 1.0F, 0.0F);
+				GL11.glRotatef(-var10 * 20.0F, 0.0F, 0.0F, 1.0F);
+				GL11.glRotatef(-var10 * 80.0F, 1.0F, 0.0F, 0.0F);
+			}
 			var16 = 0.4F;
 			GL11.glScalef(var16, var16, var16);
 			if(var3.func_35205_Y() > 0) {
@@ -316,33 +330,59 @@
 			this.renderItem(var3, var14);
 			GL11.glPopMatrix();
 		} else {
-			GL11.glPushMatrix();
-			var7 = 0.8F;
-			var16 = var3.getSwingProgress(var1);
-			var18 = MathHelper.sin(var16 * (float)Math.PI);
-			var10 = MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI);
-			GL11.glTranslatef(-var10 * 0.3F, MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI * 2.0F) * 0.4F, -var18 * 0.4F);
-			GL11.glTranslatef(0.8F * var7, -(12.0F / 16.0F) * var7 - (1.0F - var2) * 0.6F, -0.9F * var7);
-			GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
-			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-			var16 = var3.getSwingProgress(var1);
-			var18 = MathHelper.sin(var16 * var16 * (float)Math.PI);
-			var10 = MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI);
-			GL11.glRotatef(var10 * 70.0F, 0.0F, 1.0F, 0.0F);
-			GL11.glRotatef(-var18 * 20.0F, 0.0F, 0.0F, 1.0F);
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTextureForDownloadableImage(this.mc.thePlayer.skinUrl, this.mc.thePlayer.getEntityTexture()));
-			GL11.glTranslatef(-1.0F, 3.6F, 3.5F);
-			GL11.glRotatef(120.0F, 0.0F, 0.0F, 1.0F);
-			GL11.glRotatef(200.0F, 1.0F, 0.0F, 0.0F);
-			GL11.glRotatef(-135.0F, 0.0F, 1.0F, 0.0F);
-			GL11.glScalef(1.0F, 1.0F, 1.0F);
-			GL11.glTranslatef(5.6F, 0.0F, 0.0F);
-			Render var19 = RenderManager.instance.getEntityRenderObject(this.mc.thePlayer);
-			RenderPlayer var21 = (RenderPlayer)var19;
-			var10 = 1.0F;
-			GL11.glScalef(var10, var10, var10);
-			var21.drawFirstPersonHand();
-			GL11.glPopMatrix();
+			if (Personalization.classicArm) {
+				GL11.glPushMatrix();
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTextureForDownloadableImage(this.mc.thePlayer.skinUrl, this.mc.thePlayer.getEntityTexture()));
+				var16 = var3.getSwingProgress(var1);
+				var18 = MathHelper.sin(var16 * (float)Math.PI);
+				var10 = MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI);
+				GL11.glTranslatef(-var10 * 0.4F, MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI * 2.0F) * 0.2F, -var18 * 0.2F);
+				GL11.glTranslatef(0.7F * 0.8F, -0.65F * 0.8F - (1.0F - var2) * 0.6F - 0.3F, -0.9F * 0.8F);
+				GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
+				var16 = var3.getSwingProgress(var1);
+				var18 = MathHelper.sin(var16 * var16 * (float)Math.PI);
+				var10 = MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI);
+				GL11.glRotatef(MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI) * 80.0F, 0.0F, 1.0F, 0.0F);
+				GL11.glRotatef(-var10 * 20.0F, 1.0F, 0.0F, 0.0F);
+				GL11.glScalef(1.0F, -1.0F, -1.0F);
+				GL11.glTranslatef(0.0F, 0.2F, 0.0F);
+				GL11.glRotatef(-120.0F, 0.0F, 0.0F, 1.0F);
+				GL11.glScalef(1.0F, 1.0F, 1.0F);
+				RenderPlayer renderPlayer = (RenderPlayer)RenderManager.instance.getEntityRenderObject(this.mc.thePlayer);
+				ModelBiped modelBiped = (ModelBiped)renderPlayer.mainModel;
+				modelBiped.onGround = 0.0F;
+				modelBiped.setRotationAngles(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F / 16.0F);
+				modelBiped.bipedLeftArm.render(1.0F / 16.0F);
+				GL11.glPopMatrix();
+			} else {
+				GL11.glPushMatrix();
+				var7 = 0.8F;
+				var16 = var3.getSwingProgress(var1);
+				var18 = MathHelper.sin(var16 * (float)Math.PI);
+				var10 = MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI);
+				GL11.glTranslatef(-var10 * 0.3F, MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI * 2.0F) * 0.4F, -var18 * 0.4F);
+				GL11.glTranslatef(0.8F * var7, -(12.0F / 16.0F) * var7 - (1.0F - var2) * 0.6F, -0.9F * var7);
+				GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
+				GL11.glEnable(GL12.GL_RESCALE_NORMAL);
+				var16 = var3.getSwingProgress(var1);
+				var18 = MathHelper.sin(var16 * var16 * (float)Math.PI);
+				var10 = MathHelper.sin(MathHelper.sqrt_float(var16) * (float)Math.PI);
+				GL11.glRotatef(var10 * 70.0F, 0.0F, 1.0F, 0.0F);
+				GL11.glRotatef(-var18 * 20.0F, 0.0F, 0.0F, 1.0F);
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTextureForDownloadableImage(this.mc.thePlayer.skinUrl, this.mc.thePlayer.getEntityTexture()));
+				GL11.glTranslatef(-1.0F, 3.6F, 3.5F);
+				GL11.glRotatef(120.0F, 0.0F, 0.0F, 1.0F);
+				GL11.glRotatef(200.0F, 1.0F, 0.0F, 0.0F);
+				GL11.glRotatef(-135.0F, 0.0F, 1.0F, 0.0F);
+				GL11.glScalef(1.0F, 1.0F, 1.0F);
+				GL11.glTranslatef(5.6F, 0.0F, 0.0F);
+				Render var19 = RenderManager.instance.getEntityRenderObject(this.mc.thePlayer);
+				RenderPlayer var21 = (RenderPlayer)var19;
+				var10 = 1.0F;
+				GL11.glScalef(var10, var10, var10);
+				var21.drawFirstPersonHand();
+				GL11.glPopMatrix();
+			}
 		}
 
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
--- /dev/null
+++ net/minecraft/src/NoiseGeneratorSimplexOctaves.java
@@ -1,0 +1,58 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class NoiseGeneratorSimplexOctaves extends NoiseGenerator {
+    private NoiseGeneratorSimplex[] field_151603_a;
+    private int field_151602_b;
+    private static final String __OBFID = "CL_00000536";
+
+    public NoiseGeneratorSimplexOctaves(Random p_i45470_1_, int p_i45470_2_) {
+        this.field_151602_b = p_i45470_2_;
+        this.field_151603_a = new NoiseGeneratorSimplex[p_i45470_2_];
+
+        for (int var3 = 0; var3 < p_i45470_2_; ++var3) {
+            this.field_151603_a[var3] = new NoiseGeneratorSimplex(p_i45470_1_);
+        }
+    }
+
+    public double func_151601_a(double var1, double var3) {
+        double var5 = 0.0D;
+        double var7 = 1.0D;
+
+        for (int var9 = 0; var9 < this.field_151602_b; ++var9) {
+            var5 += this.field_151603_a[var9].func_151605_a(var1 * var7, var3 * var7) / var7;
+            var7 /= 2.0D;
+        }
+
+        return var5;
+    }
+
+    public double[] func_151599_a(double[] var1, double var2, double var4, int var6, int var7,
+            double var8, double var10, double var12) {
+        return this.func_151600_a(var1, var2, var4, var6, var7, var8, var10, var12, 0.5D);
+    }
+
+    public double[] func_151600_a(double[] var1, double var2, double var4, int var6, int var7,
+            double var8, double var10, double var12, double var14) {
+        if (var1 != null && var1.length >= var6 * var7) {
+            for (int var16 = 0; var16 < var1.length; ++var16) {
+                var1[var16] = 0.0D;
+            }
+        } else {
+            var1 = new double[var6 * var7];
+        }
+
+        double var21 = 1.0D;
+        double var18 = 1.0D;
+
+        for (int var20 = 0; var20 < this.field_151602_b; ++var20) {
+            this.field_151603_a[var20].func_151606_a(var1, var2, var4, var6, var7,
+                    var8 * var18 * var21, var10 * var18 * var21, 0.55D / var21);
+            var18 *= var12;
+            var21 *= var14;
+        }
+
+        return var1;
+    }
+}
--- /dev/null
+++ net/minecraft/src/PersonalizationGrapher.java
@@ -1,0 +1,221 @@
+package net.minecraft.src;
+
+import java.awt.*;
+import java.awt.datatransfer.DataFlavor;
+import java.awt.datatransfer.Transferable;
+import java.awt.datatransfer.UnsupportedFlavorException;
+import java.awt.image.BufferedImage;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Scanner;
+
+public class PersonalizationGrapher {
+	static final int STEPS = 100;
+	static final int STEP_WIDTH = 10;
+	static final int STEP_HEIGHT = 200;
+	static final int PADDING = 20;
+
+	static final float BETANESS_MIN = -3.0F;
+	static final float BETANESS_MAX = 3.0F;
+	static final float WEIRDNESS_MIN = -1.0F;
+	static final float WEIRDNESS_MAX = 1.0F;
+	static final float CHAOS_MIN = 0.0F;
+	static final float CHAOS_MAX = 3.0F;
+	static final float ENTROPY_MIN = -1.0F;
+	static final float ENTROPY_MAX = 1.0F;
+
+	static final float[] BETANESS_VALUES = new float[STEPS];
+	static final float[] WEIRDNESS_VALUES = new float[STEPS];
+	static final float[] CHAOS_VALUES = new float[STEPS];
+	static final float[] ENTROPY_VALUES = new float[STEPS];
+
+	static int graphsGenerated = 0;
+	static boolean cont = false;
+	static boolean chaosCatchMode = false;
+
+	public static void main(String[] args) {
+		Personalization.setupNoise();
+
+		if (chaosCatchMode) {
+			chaosCatch();
+			return;
+		}
+
+		if (!cont) {
+			Personalization.betaness = 0.0F;
+			Personalization.weirdness = 0.0F;
+			Personalization.chaos = 0.0F;
+			Personalization.entropy = 0.0F;
+			Personalization.days = 0;
+			Personalization.noiseSeed = Personalization.rand.nextLong();
+			Personalization.setupNoise();
+		}
+
+		for (int i = 0; i < STEPS; i++) {
+			BETANESS_VALUES[i] = Personalization.betaness;
+			WEIRDNESS_VALUES[i] = Personalization.weirdness;
+			CHAOS_VALUES[i] = Personalization.chaos;
+			ENTROPY_VALUES[i] = Personalization.entropy;
+			Personalization.adjustValues();
+		}
+
+		BufferedImage img = new BufferedImage(STEP_WIDTH * STEPS + PADDING * 2, STEP_HEIGHT + PADDING * 2, BufferedImage.TYPE_INT_RGB);
+		Graphics2D gfx = img.createGraphics();
+
+		gfx.setColor(Color.WHITE);
+		gfx.fillRect(0, 0, img.getWidth(), img.getHeight());
+
+		gfx.setColor(new Color(0.95F, 0.95F, 0.95F));
+		for (int i = 0; i < STEPS; i++) {
+			int x = PADDING + i * STEP_WIDTH;
+			gfx.drawLine(x, PADDING, x, PADDING + STEP_HEIGHT);
+		}
+
+		for (int i = -3; i <= 3; i++) {
+			float a = 0.2F - Math.abs(i) / 15.0F + 0.7F;
+
+			int betaLine = toImgCoord(i, BETANESS_MIN, BETANESS_MAX);
+			gfx.setColor(new Color(a, a, a));
+			gfx.drawLine(PADDING, betaLine, PADDING + STEP_WIDTH * STEPS, betaLine);
+		}
+
+		gfx.setStroke(new BasicStroke(2.0F));
+		gfx.setColor(Color.BLACK);
+		gfx.drawLine(PADDING, PADDING, PADDING, PADDING + STEP_HEIGHT);
+		gfx.drawLine(PADDING, PADDING + STEP_HEIGHT, PADDING + STEP_WIDTH * STEPS, PADDING + STEP_HEIGHT);
+
+		for (int i = 1; i < STEPS; i++) {
+			int x = PADDING + STEP_WIDTH * i;
+
+			int prevEntropy = toImgCoord(ENTROPY_VALUES[i - 1], ENTROPY_MIN, ENTROPY_MAX);
+			int entropy = toImgCoord(ENTROPY_VALUES[i], ENTROPY_MIN, ENTROPY_MAX);
+			gfx.setColor(Color.yellow);
+			gfx.drawLine(x - STEP_WIDTH, prevEntropy, x, entropy);
+
+			int prevBeta = toImgCoord(BETANESS_VALUES[i - 1], BETANESS_MIN, BETANESS_MAX);
+			int beta = toImgCoord(BETANESS_VALUES[i], BETANESS_MIN, BETANESS_MAX);
+			gfx.setColor(Color.green);
+			gfx.drawLine(x - STEP_WIDTH, prevBeta, x, beta);
+
+			int prevWeird = toImgCoord(WEIRDNESS_VALUES[i - 1], WEIRDNESS_MIN, WEIRDNESS_MAX);
+			int weird = toImgCoord(WEIRDNESS_VALUES[i], WEIRDNESS_MIN, WEIRDNESS_MAX);
+			gfx.setColor(Color.blue);
+			gfx.drawLine(x - STEP_WIDTH, prevWeird, x, weird);
+
+			int prevChaos = toImgCoord(CHAOS_VALUES[i - 1], CHAOS_MIN, CHAOS_MAX);
+			int chaos = toImgCoord(CHAOS_VALUES[i], CHAOS_MIN, CHAOS_MAX);
+			gfx.setColor(Color.red);
+			gfx.drawLine(x - STEP_WIDTH, prevChaos, x, chaos);
+		}
+
+		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new PersonalizationGrapher.ImageTransferable(img), null);
+
+		System.out.print((cont ? "Cont. #" : "Graph #") + ++graphsGenerated + ": ");
+
+		String cmd = new Scanner(System.in).next();
+		if (!cmd.contains("q")) {
+			cont = cmd.contains("c");
+			chaosCatchMode = cmd.contains("cc");
+			main(args);
+		}
+	}
+
+	private static int toImgCoord(float value, float min, float max) {
+		return (int)(STEP_HEIGHT + PADDING + ((value - min) / (min - max)) * STEP_HEIGHT);
+	}
+
+	private static class ImageTransferable implements Transferable {
+	    private final BufferedImage image;
+
+	    public ImageTransferable(BufferedImage image) {
+	        this.image = image;
+	    }
+
+	    public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException {
+	        if (flavor.equals(DataFlavor.imageFlavor)) {
+		        return image;
+	        }
+            throw new UnsupportedFlavorException(flavor);
+	    }
+
+	    public DataFlavor[] getTransferDataFlavors() {
+	        return new DataFlavor[]{DataFlavor.imageFlavor};
+	    }
+
+	    public boolean isDataFlavorSupported(DataFlavor flavor) {
+	        return flavor.equals(DataFlavor.imageFlavor);
+	    }
+	}
+
+	private static void chaosCatch() {
+		int trials = 10000;
+
+		int gen = 1;
+		List<Integer> dof1 = new ArrayList<>();
+		List<Integer> dof2 = new ArrayList<>();
+		List<Integer> dof3 = new ArrayList<>();
+		int dof1Min = -1;
+		int dof2Min = -1;
+		int dof3Min = -1;
+		int dof1Max = 0;
+		int dof2Max = 0;
+		int dof3Max = 0;
+
+		while (gen < trials) {
+			Personalization.chaos = 0.0F;
+			int daysOf1 = 0;
+			int daysOf2 = 0;
+			int daysOf3 = 0;
+			boolean reached1 = false;
+			boolean reached2 = false;
+
+			while (Personalization.chaos < 3.0F) {
+				Personalization.adjustValues();
+				if (!reached1) {
+					daysOf1++;
+				}
+				if (!reached2) {
+					daysOf2++;
+				}
+				daysOf3++;
+				reached1 |= Personalization.chaos >= 1.0F;
+				reached2 |= Personalization.chaos >= 2.0F;
+			}
+
+			System.out.printf("#%-4d > 1.0: %4d | 2.0: %4d | 3.0: %4d\n", gen, daysOf1, daysOf2, daysOf3);
+			dof1.add(daysOf1);
+			dof2.add(daysOf2);
+			dof3.add(daysOf3);
+
+			if (dof1Min < 0 || daysOf1 < dof1Min) {
+				dof1Min = daysOf1;
+			}
+			if (daysOf1 > dof1Max) {
+				dof1Max = daysOf1;
+			}
+
+			if (dof2Min < 0 || daysOf2 < dof2Min) {
+				dof2Min = daysOf2;
+			}
+			if (daysOf2 > dof2Max) {
+				dof2Max = daysOf2;
+			}
+
+			if (dof3Min < 0 || daysOf3 < dof3Min) {
+				dof3Min = daysOf3;
+			}
+			if (daysOf3 > dof3Max) {
+				dof3Max = daysOf3;
+			}
+
+			gen++;
+		}
+
+		int dof1Avg = dof1.stream().mapToInt(x -> x).sum() / trials;
+		int dof2Avg = dof2.stream().mapToInt(x -> x).sum() / trials;
+		int dof3Avg = dof3.stream().mapToInt(x -> x).sum() / trials;
+		System.out.printf("AVG   > 1.0: %4d | 2.0: %4d | 3.0: %4d | 1-2: %4d | 2-3: %4d\n", dof1Avg, dof2Avg, dof3Avg, dof2Avg - dof1Avg, dof3Avg - dof2Avg);
+		System.out.printf("MIN   > 1.0: %4d | 2.0: %4d | 3.0: %4d | 1-2: %4d | 2-3: %4d\n", dof1Min, dof2Min, dof3Min, dof2Min - dof1Min, dof3Min - dof2Min);
+		System.out.printf("MAX   > 1.0: %4d | 2.0: %4d | 3.0: %4d | 1-2: %4d | 2-3: %4d\n", dof1Max, dof2Max, dof3Max, dof2Max - dof1Max, dof3Max - dof2Max);
+	}
+}
--- net/minecraft/src/ContainerCreative.java
+++ net/minecraft/src/ContainerCreative.java
@@ -33,7 +33,7 @@
 			this.field_35375_a.add(new ItemStack(var2[var8], 1, var9));
 		}
 
-		for(var8 = 256; var8 < Item.itemsList.length; ++var8) {
+		for(var8 = 256; var8 <= Item.field_35416_bo.shiftedIndex; ++var8) {
 			if(Item.itemsList[var8] != null) {
 				this.field_35375_a.add(new ItemStack(Item.itemsList[var8]));
 			}
@@ -41,6 +41,13 @@
 
 		for(var8 = 1; var8 < 16; ++var8) {
 			this.field_35375_a.add(new ItemStack(Item.dyePowder.shiftedIndex, 1, var8));
+		}
+
+		if (Personalization.DEBUG_MODE) {
+			this.field_35375_a.add(new ItemStack(Block.skyPortalFrame));
+			this.field_35375_a.add(new ItemStack(Block.chargedPortalFrame));
+			this.field_35375_a.add(new ItemStack(Item.eyeOfEnder));
+			this.field_35375_a.add(new ItemStack(Item.quartzCompass));
 		}
 
 		InventoryPlayer var11 = var1.inventory;
--- net/minecraft/src/GuiControls.java
+++ net/minecraft/src/GuiControls.java
@@ -33,7 +33,7 @@
 		}
 
 		if(var1.id == 200) {
-			this.mc.displayGuiScreen(this.parentScreen);
+			this.game.displayGuiScreen(this.parentScreen);
 		} else {
 			this.buttonId = var1.id;
 			var1.displayString = "> " + this.options.getOptionDisplayString(var1.id) + " <";
--- /dev/null
+++ net/minecraft/src/GuiBlack.java
@@ -1,0 +1,58 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class GuiBlack extends GuiScreen {
+	private static final Random rand = new Random();
+	private int tick = 100 + rand.nextInt(100);
+	private boolean veryScary = false;
+
+	public void initGui() {
+		this.game.sndManager.stopAllSounds();
+		this.game.sndManager.stopAllMusic();
+		this.game.thePlayer.angeredNotch = false;
+		this.veryScary = this.game.thePlayer.causeOfDeath.func_35532_a() instanceof EntityEnderman;
+	}
+
+	public void updateScreen() {
+		if (this.game.thePlayer.causeOfDeath.func_35532_a() instanceof EntityEnderman) {
+			String[] enderSoundChoices = {
+					"mob.endermen.scream",
+					"mob.endermen.death",
+					"mob.endermen.scream",
+					"random.hurt",
+			};
+
+			this.game.sndManager.playSoundFX(enderSoundChoices[rand.nextInt(enderSoundChoices.length)], -rand.nextFloat() * 0.5F, 1.0F);
+		}
+
+		if (tick-- <= 0) {
+			if (this.game.thePlayer.causeOfDeath.func_35532_a() instanceof EntityFakePlayer) {
+				this.game.thePlayer.causeOfDeath = null;
+				this.game.displayGuiScreen(new GuiUpdate());
+			} else {
+				this.game.thePlayer.causeOfDeath = null;
+				this.game.sndManager.stopAllSounds();
+				this.game.thePlayer.dimension = 0;
+				this.game.changeWorld1((World)null);
+				this.game.displayGuiScreen(new GuiMainMenu());
+			}
+		}
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		float r = 0.0F;
+		float r2 = 0.0F;
+		if (veryScary) {
+			r = Math.abs(MathHelper.sin((this.tick - var3) / 2.0F));
+			r2 = Math.abs(MathHelper.sin((this.tick - var3) / 2.0F + 1.0F));
+		}
+		int color = 0xFF000000 + ((int)(r * 255.0F) << 16);
+		int color2 = 0xFF000000 + ((int)(r2 * 255.0F) << 16);
+
+		this.drawGradientRect(0, 0, this.width, this.height, color, color2);
+	}
+
+	protected void keyTyped(char var1, int var2) {
+	}
+}
--- net/minecraft/src/BiomeGenPlains.java
+++ net/minecraft/src/BiomeGenPlains.java
@@ -3,8 +3,8 @@
 public class BiomeGenPlains extends BiomeGenBase {
 	protected BiomeGenPlains(int var1) {
 		super(var1);
-		this.field_35488_u.field_35911_r = -999;
-		this.field_35488_u.field_35910_s = 4;
-		this.field_35488_u.field_35909_t = 10;
+		this.decorator.trees = -999;
+		this.decorator.flowers = 4;
+		this.decorator.grass = 10;
 	}
 }
--- net/minecraft/src/RenderBiped.java
+++ net/minecraft/src/RenderBiped.java
@@ -4,10 +4,12 @@
 
 public class RenderBiped extends RenderLiving {
 	protected ModelBiped modelBipedMain;
+	protected ModelBiped modelArmor;
 
 	public RenderBiped(ModelBiped var1, float var2) {
 		super(var1, var2);
 		this.modelBipedMain = var1;
+		this.modelArmor = var1 instanceof ModelZombie ? new ModelZombie(1.0F) : new ModelBiped(1.0F);
 	}
 
 	protected void renderEquippedItems(EntityLiving var1, float var2) {
@@ -51,5 +53,14 @@
 			GL11.glPopMatrix();
 		}
 
+	}
+
+	protected boolean shouldRenderPass(EntityLiving var1, int var2, float var3) {
+		if (var2 == 0 && var1 instanceof EntityMob && (((EntityMob)var1).hasArmor)) {
+			this.loadTexture("/armor/plate.png");
+			this.setRenderPassModel(this.modelArmor);
+			return true;
+		}
+		return false;
 	}
 }
--- /dev/null
+++ net/minecraft/src/PlayerSkillSet.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class PlayerSkillSet {
+	public final List<PlayerSkill> skillList = new ArrayList<>();
+
+	public final PlayerSkill health = addSkill("Health", 10);
+	public final PlayerSkill speed = addSkill("Speed", 10);
+	public final PlayerSkill stamina = addSkill("Stamina", 10);
+	public final PlayerSkill attack = addSkill("Attack", 10);
+	public final PlayerSkill defense = addSkill("Defense", 10);
+
+	private PlayerSkill addSkill(String id, int max) {
+		PlayerSkill skill = new PlayerSkill(id, max);
+		skillList.add(skill);
+		return skill;
+	}
+
+	public void readFromNBT(NBTTagCompound var1) {
+		for (PlayerSkill skill : this.skillList) {
+			skill.setValue(var1.getInteger(skill.getId()));
+		}
+	}
+
+	public void writeToNBT(NBTTagCompound var1) {
+		for (PlayerSkill skill : this.skillList) {
+			var1.setInteger(skill.getId(), skill.getValue());
+		}
+	}
+
+	public boolean isEmpty() {
+		return skillList.stream().allMatch(skill -> skill.getValue() == 0);
+	}
+}
--- net/minecraft/src/GuiGameOver.java
+++ net/minecraft/src/GuiGameOver.java
@@ -4,10 +4,21 @@
 
 public class GuiGameOver extends GuiScreen {
 	public void initGui() {
+		if (Personalization.endSky && this.game.thePlayer.dimension == 1 && this.game.thePlayer.posY < 0.0D
+				|| this.game.thePlayer.dimension == 3
+				|| this.game.thePlayer.causeOfDeath != null &&
+						(Personalization.redEnderman && this.game.thePlayer.causeOfDeath.func_35532_a() instanceof EntityEnderman
+						|| this.game.thePlayer.causeOfDeath.func_35532_a() instanceof EntityFakePlayer)) {
+			this.game.displayGuiScreen(new GuiBlack());
+		}
+
 		this.controlList.clear();
 		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 72, "Respawn"));
 		this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 96, "Title menu"));
-		if(this.mc.session == null) {
+		if(Personalization.DEMO_MODE && Personalization.chaos > 0.0F) {
+			((GuiButton)this.controlList.get(0)).enabled = false;
+		}
+		if(this.game.session == null) {
 			((GuiButton)this.controlList.get(1)).enabled = false;
 		}
 
@@ -21,13 +32,13 @@
 		}
 
 		if(var1.id == 1) {
-			this.mc.thePlayer.respawnPlayer();
-			this.mc.displayGuiScreen((GuiScreen)null);
+			this.game.thePlayer.respawnPlayer();
+			this.game.displayGuiScreen((GuiScreen)null);
 		}
 
 		if(var1.id == 2) {
-			this.mc.changeWorld1((World)null);
-			this.mc.displayGuiScreen(new GuiMainMenu());
+			this.game.changeWorld1((World)null);
+			this.game.displayGuiScreen(new GuiMainMenu());
 		}
 
 	}
@@ -38,7 +49,7 @@
 		GL11.glScalef(2.0F, 2.0F, 2.0F);
 		this.drawCenteredString(this.fontRenderer, "Game over!", this.width / 2 / 2, 30, 16777215);
 		GL11.glPopMatrix();
-		this.drawCenteredString(this.fontRenderer, "Score: &e" + this.mc.thePlayer.getScore(), this.width / 2, 100, 16777215);
+		this.drawCenteredString(this.fontRenderer, "Score: &e" + this.game.thePlayer.getScore(), this.width / 2, 100, 16777215);
 		super.drawScreen(var1, var2, var3);
 	}
 
--- /dev/null
+++ net/minecraft/src/GuiRemix.java
@@ -1,0 +1,156 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+import java.util.Random;
+
+public class GuiRemix extends GuiScreen {
+	private static final String[] messages = {
+			"WAKE UP",
+			"YOU ARE THE PLAYER",
+			"I SEE THE PLAYER YOU MEAN",
+			"IT DID NOT GIVE UP",
+			"IT READS OUR THOUGHTS",
+			"TAKE A BREATH NOW",
+			"RESPAWN IN THE LONG DREAM",
+			"LET'S GO BACK",
+			"YOU ARE ALIVE",
+			"WE ARE THE UNIVERSE"
+	};
+	private static final Random rand = new Random();
+	private final String message = messages[rand.nextInt(messages.length)];
+	private final int messageColor = (~getNoiseColor() & 0xFFFFFF)
+			- ((int)(Personalization.chaos * 255.0F / 3.0F) << 8)
+			- (int)(Personalization.chaos * 255.0F / 3.0F);
+	private int updateCounter;
+	private int outcome;
+
+	public void updateScreen() {
+		if (this.updateCounter == 0) {
+			this.game.sndManager.stopAllSounds();
+			this.game.sndManager.stopAllMusic();
+			this.game.sndManager.playSoundFX("random.remix", -0.5F, 1.0F);
+			this.game.sndManager.playSoundFX("random.amalgamation", Personalization.chaos * -0.5F, 1.0F);
+			if (Personalization.chaos > 2.0F) {
+				this.game.sndManager.playSoundFX("random.overamalgamation", (Personalization.chaos * -0.5F - 2.0F), 1.0F);
+			}
+		}
+
+		if (this.updateCounter >= 20) {
+			switch (this.outcome) {
+				case 1:
+					this.game.displayGuiScreen(null);
+					this.game.dohasdoshih();
+					break;
+
+				case 2:
+					this.game.thePlayer.boss = null;
+					this.game.thePlayer.angeredNotch = false;
+					this.game.displayGuiScreen(null);
+					this.game.backToOffices();
+					break;
+
+				case 3:
+					this.game.thePlayer.boss = null;
+					this.game.thePlayer.angeredNotch = false;
+					this.game.displayGuiScreen(new GuiWinGame());
+					break;
+
+				case 4:
+					this.game.displayGuiScreen(new GuiUpdate().dontRepersonalize());
+					break;
+
+				case 5:
+					Personalization.hardcoreState = 1;
+					this.game.displayGuiScreen(new GuiUpdate().dontRepersonalize());
+					break;
+
+				case 6:
+					Personalization.hardcoreState = 2;
+					if (this.game.thePlayer.dimension != -2) {
+						this.game.toCaverns();
+					} else {
+						this.game.thePlayer.setLocationAndAngles(this.game.thePlayer.posX, 272, this.game.thePlayer.posZ,
+								this.game.thePlayer.rotationYaw, this.game.thePlayer.rotationPitch);
+						this.game.thePlayer.fallImmunity = true;
+					}
+					this.game.displayGuiScreen(null);
+					break;
+
+				default:
+					this.game.displayGuiScreen(new GuiUpdate());
+					break;
+			}
+		}
+
+		this.updateCounter++;
+	}
+
+	public GuiRemix fightNotch() {
+		this.outcome = 1;
+		return this;
+	}
+
+	public GuiRemix battleMode() {
+		this.outcome = 2;
+		return this;
+	}
+
+	public GuiRemix beatTheGame() {
+		this.outcome = 3;
+		return this;
+	}
+
+	public GuiRemix resetValues() {
+		this.outcome = 4;
+		return this;
+	}
+
+	public GuiRemix hardcore() {
+		this.outcome = 5;
+		return this;
+	}
+
+	public GuiRemix diedHardcore() {
+		this.outcome = 6;
+		return this;
+	}
+
+	private static int getNoiseColor() {
+		float c = (3.0F - Personalization.chaos) / 3.0F;
+		c *= c;
+
+		int gray = rand.nextInt(16) + 8;
+		int r = rand.nextInt(9) - 4;
+		int g = rand.nextInt(9) - 4;
+		int b = rand.nextInt(9) - 4;
+		r *= Personalization.chaos * 3.0F + 1.0F;
+		g *= c;
+		b *= c;
+		gray *= c;
+		return 0xFF000000
+				| MathHelper.clamp(gray + r, 0, 255) << 16
+				| MathHelper.clamp(gray + g, 0, 255) << 8
+				| MathHelper.clamp(gray + b, 0, 255);
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		if (this.updateCounter == 0) {
+			this.drawWorldBackground(0);
+			return;
+		}
+
+		for (int y = 0; y < this.height; y++) {
+			this.drawGradientRectHorizontal(0, y, this.width, y + 1, getNoiseColor(), getNoiseColor());
+		}
+		GL11.glPushMatrix();
+		GL11.glScalef(2.0F, 2.0F, 2.0F);
+		int offX = rand.nextInt(9) - 4;
+		int offY = rand.nextInt(9) - 4;
+		this.drawCenteredString(this.fontRenderer, this.message, this.width / 4 + offX, this.height / 4 - 4 + offY, this.messageColor);
+		GL11.glPopMatrix();
+	}
+
+	public void handleInput() {
+	}
+}
--- /dev/null
+++ net/minecraft/src/EnumArmorMaterial.java
@@ -1,0 +1,27 @@
+package net.minecraft.src;
+
+public enum EnumArmorMaterial {
+	CLOTH(5, new int[]{1, 3, 2, 1}, 0),
+	CHAIN(15, new int[]{2, 5, 4, 1}, 1),
+	IRON(15, new int[]{2, 6, 5, 2}, 2),
+	GOLD(7, new int[]{2, 5, 3, 1}, 1),
+	DIAMOND(33, new int[]{3, 8, 6, 3}, 3);
+
+	private int maxDamageFactor;
+	private int[] damageReductionAmountArray;
+	private int level;
+
+	EnumArmorMaterial(int var3, int[] var4, int var5) {
+		this.maxDamageFactor = var3;
+		this.damageReductionAmountArray = var4;
+		this.level = var5;
+	}
+
+	public int getDurability(int var1) {
+		return ItemArmor.maxDamageArray[var1] * (Personalization.betterArmor ? this.maxDamageFactor : 3 << this.level);
+	}
+
+	public int getDamageReductionAmount(int var1) {
+		return (Personalization.betterArmor ? this.damageReductionAmountArray : ItemArmor.damageReduceAmountArray)[var1];
+	}
+}
--- net/minecraft/src/GuiSleepMP.java
+++ net/minecraft/src/GuiSleepMP.java
@@ -19,7 +19,7 @@
 		} else if(var2 == 28) {
 			String var3 = this.message.trim();
 			if(var3.length() > 0) {
-				this.mc.thePlayer.sendChatMessage(this.message.trim());
+				this.game.thePlayer.sendChatMessage(this.message.trim());
 			}
 
 			this.message = "";
@@ -43,9 +43,9 @@
 	}
 
 	private void func_22115_j() {
-		if(this.mc.thePlayer instanceof EntityClientPlayerMP) {
-			NetClientHandler var1 = ((EntityClientPlayerMP)this.mc.thePlayer).sendQueue;
-			var1.addToSendQueue(new Packet19EntityAction(this.mc.thePlayer, 3));
+		if(this.game.thePlayer instanceof EntityClientPlayerMP) {
+			NetClientHandler var1 = ((EntityClientPlayerMP)this.game.thePlayer).sendQueue;
+			var1.addToSendQueue(new Packet19EntityAction(this.game.thePlayer, 3));
 		}
 
 	}
--- net/minecraft/src/LoadingScreenRenderer.java
+++ net/minecraft/src/LoadingScreenRenderer.java
@@ -5,6 +5,15 @@
 import org.lwjgl.opengl.GL11;
 
 public class LoadingScreenRenderer implements IProgressUpdate {
+	private static final String[] wittyMessages = {
+			"Installing packages",
+			"Reengineering flux capacitors",
+			"Reticulating splines",
+			"Settling liquids",
+			"Inversing reactive currents",
+			"Synchronising cardinal gram meters",
+	};
+
 	private String field_1004_a = "";
 	private Minecraft mc;
 	private String field_1007_c = "";
@@ -44,6 +53,12 @@
 	}
 
 	public void displayLoadingString(String var1) {
+		if (this.field_1007_c.equals("Updating Minecraft")) {
+			if (var1.equals("Saving chunks")) var1 = "Downloading packages";
+			if (var1.equals("Building terrain")) var1 = wittyMessages[Personalization.rand.nextInt(wittyMessages.length)];
+			if (var1.equals("Simulating world for a bit")) var1 = "Done loading";
+		}
+
 		if(!this.mc.running) {
 			if(!this.field_1005_e) {
 				throw new MinecraftError();
--- net/minecraft/src/RenderSpider.java
+++ net/minecraft/src/RenderSpider.java
@@ -15,9 +15,7 @@
 	}
 
 	protected boolean setSpiderEyeBrightness(EntitySpider var1, int var2, float var3) {
-		if(var2 != 0) {
-			return false;
-		} else if(var2 != 0) {
+		if(var2 != 0 || Personalization.brownSpiders) {
 			return false;
 		} else {
 			this.loadTexture("/mob/spider_eyes.png");
--- net/minecraft/src/WorldChunkManagerHell.java
+++ net/minecraft/src/WorldChunkManagerHell.java
@@ -8,11 +8,13 @@
 	private BiomeGenBase field_4201_e;
 	private float field_4200_f;
 	private float field_4199_g;
+	private boolean stoneGradient;
 
 	public WorldChunkManagerHell(BiomeGenBase var1, float var2, float var3) {
 		this.field_4201_e = var1;
 		this.field_4200_f = var2;
 		this.field_4199_g = var3;
+		this.stoneGradient = var1 instanceof BiomeGenCaverns;
 	}
 
 	public BiomeGenBase getBiomeGenAtChunkCoord(ChunkCoordIntPair var1) {
@@ -69,5 +71,9 @@
 
 	public boolean func_35562_a(int var1, int var2, int var3, List var4) {
 		return var4.contains(this.field_4201_e);
+	}
+
+	public boolean hasStoneGradient() {
+		return this.stoneGradient;
 	}
 }
--- net/minecraft/src/GuiWorldSlot.java
+++ net/minecraft/src/GuiWorldSlot.java
@@ -6,7 +6,7 @@
 	final GuiSelectWorld parentWorldGui;
 
 	public GuiWorldSlot(GuiSelectWorld var1) {
-		super(var1.mc, var1.width, var1.height, 32, var1.height - 64, 36);
+		super(var1.game, var1.width, var1.height, 32, var1.height - 64, 36);
 		this.parentWorldGui = var1;
 	}
 
--- /dev/null
+++ net/minecraft/src/ModelBlaze.java
@@ -1,0 +1,63 @@
+package net.minecraft.src;
+
+public class ModelBlaze extends ModelBase {
+	private ModelRenderer[] field_40323_a = new ModelRenderer[12];
+	private ModelRenderer field_40322_b;
+
+	public ModelBlaze() {
+		for(int var1 = 0; var1 < this.field_40323_a.length; ++var1) {
+			this.field_40323_a[var1] = new ModelRenderer(this, 0, 16);
+			this.field_40323_a[var1].addBox(0.0F, 0.0F, 0.0F, 2, 8, 2);
+		}
+
+		this.field_40322_b = new ModelRenderer(this, 0, 0);
+		this.field_40322_b.addBox(-4.0F, -4.0F, -4.0F, 8, 8, 8);
+	}
+
+	public int func_40321_a() {
+		return 8;
+	}
+
+	public void render(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7) {
+		this.setRotationAngles(var2, var3, var4, var5, var6, var7);
+		this.field_40322_b.render(var7);
+
+		for(int var8 = 0; var8 < this.field_40323_a.length; ++var8) {
+			this.field_40323_a[var8].render(var7);
+		}
+
+	}
+
+	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6) {
+		float var7 = var3 * (float)Math.PI * -0.1F;
+
+		int var8;
+		for(var8 = 0; var8 < 4; ++var8) {
+			this.field_40323_a[var8].rotationPointY = -2.0F + MathHelper.cos(((float)(var8 * 2) + var3) * 0.25F);
+			this.field_40323_a[var8].rotationPointX = MathHelper.cos(var7) * 9.0F;
+			this.field_40323_a[var8].rotationPointZ = MathHelper.sin(var7) * 9.0F;
+			var7 += (float)Math.PI * 0.5F;
+		}
+
+		var7 = (float)Math.PI * 0.25F + var3 * (float)Math.PI * 0.03F;
+
+		for(var8 = 4; var8 < 8; ++var8) {
+			this.field_40323_a[var8].rotationPointY = 2.0F + MathHelper.cos(((float)(var8 * 2) + var3) * 0.25F);
+			this.field_40323_a[var8].rotationPointX = MathHelper.cos(var7) * 7.0F;
+			this.field_40323_a[var8].rotationPointZ = MathHelper.sin(var7) * 7.0F;
+			var7 += (float)Math.PI * 0.5F;
+		}
+
+		var7 = (float)Math.PI * 0.15F + var3 * (float)Math.PI * -0.05F;
+
+		for(var8 = 8; var8 < 12; ++var8) {
+			this.field_40323_a[var8].rotationPointY = 11.0F + MathHelper.cos(((float)var8 * 1.5F + var3) * 0.5F);
+			this.field_40323_a[var8].rotationPointX = MathHelper.cos(var7) * 5.0F;
+			this.field_40323_a[var8].rotationPointZ = MathHelper.sin(var7) * 5.0F;
+			var7 += (float)Math.PI * 0.5F;
+		}
+
+		this.field_40322_b.rotateAngleY = var4 / (180.0F / (float)Math.PI);
+		this.field_40322_b.rotateAngleX = var5 / (180.0F / (float)Math.PI);
+	}
+}
--- net/minecraft/src/EntityMinecart.java
+++ net/minecraft/src/EntityMinecart.java
@@ -303,6 +303,10 @@
 				if(this.riddenByEntity != null) {
 					var35 *= 0.75D;
 					var37 *= 0.75D;
+
+					if (this.riddenByEntity instanceof EntityPlayer) {
+						Personalization.betaBias += Math.sqrt(var35 * var35 + var37 * var37) * 2.5F;
+					}
 				}
 
 				if(var35 < -var4) {
--- net/minecraft/src/BlockMushroom.java
+++ net/minecraft/src/BlockMushroom.java
@@ -60,10 +60,7 @@
 
 	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
 		if(var3 >= 0) {
-			var1.getClass();
-			if(var3 < 128) {
-				return var1.getFullBlockLightValue(var2, var3, var4) < 13 && this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
-			}
+			return var1.getFullBlockLightValue(var2, var3, var4) < 13 && this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
 		}
 
 		return false;
@@ -82,6 +79,7 @@
 			} else if(this.blockID == Block.mushroomRed.blockID) {
 				var8 = new WorldGenBigMushroom(1);
 			}
+			var8.inPlayerModified = true;
 
 			if(var8 != null && var8.generate(var1, var5, var2, var3, var4)) {
 				return true;
--- net/minecraft/src/GameSettings.java
+++ net/minecraft/src/GameSettings.java
@@ -44,6 +44,7 @@
 	public int difficulty = 2;
 	public boolean hideGUI = false;
 	public boolean thirdPersonView = false;
+	public boolean frontThirdPersonView = false;
 	public boolean showDebugInfo = false;
 	public String lastServer = "";
 	public boolean field_22275_C = false;
--- net/minecraft/src/BlockCrops.java
+++ net/minecraft/src/BlockCrops.java
@@ -88,6 +88,7 @@
 
 	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
 		super.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
+
 		if(!var1.multiplayerWorld) {
 			for(int var7 = 0; var7 < 3; ++var7) {
 				if(var1.rand.nextInt(15) <= var5) {
@@ -102,6 +103,13 @@
 			}
 
 		}
+	}
+
+	public void harvestBlock(World var1, EntityPlayer var2, int var3, int var4, int var5, int var6) {
+		if (var6 == 7) {
+			Personalization.betaBias += 20.0F;
+		}
+		super.harvestBlock(var1, var2, var3, var4, var5, var6);
 	}
 
 	public int idDropped(int var1, Random var2) {
--- net/minecraft/src/GuiVideoSettings.java
+++ net/minecraft/src/GuiVideoSettings.java
@@ -41,15 +41,15 @@
 			}
 
 			if(var1.id == 200) {
-				this.mc.gameSettings.saveOptions();
-				this.mc.displayGuiScreen(this.parentGuiScreen);
+				this.game.gameSettings.saveOptions();
+				this.game.displayGuiScreen(this.parentGuiScreen);
 			}
 
 			if(this.guiGameSettings.guiScale != var2) {
-				ScaledResolution var3 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
+				ScaledResolution var3 = new ScaledResolution(this.game.gameSettings, this.game.displayWidth, this.game.displayHeight);
 				int var4 = var3.getScaledWidth();
 				int var5 = var3.getScaledHeight();
-				this.setWorldAndResolution(this.mc, var4, var5);
+				this.setWorldAndResolution(this.game, var4, var5);
 			}
 
 		}
--- net/minecraft/src/ModelBase.java
+++ net/minecraft/src/ModelBase.java
@@ -1,13 +1,15 @@
 package net.minecraft.src;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
+import java.util.*;
 
 public abstract class ModelBase {
 	public float onGround;
 	public boolean isRiding = false;
 	public List field_35394_j = new ArrayList();
+	public boolean field_40301_k = true;
+	private Map field_39000_a = new HashMap();
+	public int textureWidth = 64;
+	public int textureHeight = 32;
 
 	public void render(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7) {
 	}
@@ -20,5 +22,13 @@
 
 	public ModelRenderer func_35393_a(Random var1) {
 		return (ModelRenderer)this.field_35394_j.get(var1.nextInt(this.field_35394_j.size()));
+	}
+
+	protected void setTextureOffset(String var1, int var2, int var3) {
+		this.field_39000_a.put(var1, new TextureOffset(var2, var3));
+	}
+
+	public TextureOffset func_40297_a(String var1) {
+		return (TextureOffset)this.field_39000_a.get(var1);
 	}
 }
--- net/minecraft/src/ColorizerGrass.java
+++ net/minecraft/src/ColorizerGrass.java
@@ -8,9 +8,34 @@
 	}
 
 	public static int getGrassColor(double var0, double var2) {
+		if (Personalization.pe7env) {
+			return 0x339933;
+		} else if (Personalization.pe8env) {
+			return 0x87cd49;
+		}
+
+		double eMul = Personalization.entropy > 0.0F ? 0.35D : 0.5D;
+		var0 = MathHelper.clamp((var0 - 0.5D) * (1.0D - Personalization.entropy * eMul) + 0.5D, 0.0D, 1.0D);
+		var2 = MathHelper.clamp((var2 - 0.5D) * (1.0D - Personalization.entropy * eMul) + 0.5D, 0.0D, 1.0D);
+
 		var2 *= var0;
 		int var4 = (int)((1.0D - var0) * 255.0D);
 		int var5 = (int)((1.0D - var2) * 255.0D);
-		return grassBuffer[var5 << 8 | var4];
+		return frostify(grassBuffer[var5 << 8 | var4], var0);
+	}
+
+	public static int frostify(int color, double temperature) {
+		if (Personalization.frostedGrass && temperature < 0.2D) {
+			double frost = 1.0D - temperature * 5.0D;
+			int r = (color >> 16) & 0xFF;
+			int g = (color >> 8) & 0xFF;
+			int b = color & 0xFF;
+			r += (int)((255 - r) * frost);
+			g += (int)((255 - g) * frost);
+			b += (int)((255 - b) * frost);
+			color = r << 16 | g << 8 | b;
+		}
+
+		return color;
 	}
 }
